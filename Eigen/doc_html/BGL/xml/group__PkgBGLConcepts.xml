<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__PkgBGLConcepts" kind="group">
    <compoundname>PkgBGLConcepts</compoundname>
    <title>Concepts</title>
    <innerclass refid="classEdgeListGraph" prot="public">EdgeListGraph</innerclass>
    <innerclass refid="classFaceGraph" prot="public">FaceGraph</innerclass>
    <innerclass refid="classFaceListGraph" prot="public">FaceListGraph</innerclass>
    <innerclass refid="classHalfedgeGraph" prot="public">HalfedgeGraph</innerclass>
    <innerclass refid="classHalfedgeListGraph" prot="public">HalfedgeListGraph</innerclass>
    <innerclass refid="classMutableFaceGraph" prot="public">MutableFaceGraph</innerclass>
    <innerclass refid="classMutableHalfedgeGraph" prot="public">MutableHalfedgeGraph</innerclass>
    <innerclass refid="classVertexListGraph" prot="public">VertexListGraph</innerclass>
    <briefdescription>
<para>We extend the Boost Graph Library (Bgl for short) with a set of new concepts. </para>    </briefdescription>
    <detaileddescription>
<para>In order to make this documentation self-contained we here also document concepts that are defined in the original version of the Bgl. The documentation of the concepts lists at the same time the functions related to it. Models of the concept and their related functions must be in the same namespace (they will be found by Koenig lookup).</para><para><dot>
digraph example {
  node [shape=record, fontname=Helvetica, fontsize=10];
  rankdir=BT

  &quot;boost Graph&quot; [ URL=&quot;https://www.boost.org/libs/graph/doc/Graph.html&quot; ];
  HalfedgeGraph [ URL=&quot;\ref HalfedgeGraph&quot;];
  HalfedgeListGraph [ URL=&quot;\ref HalfedgeListGraph&quot;];
  MutableHalfedgeGraph [ URL=&quot;\ref MutableHalfedgeGraph&quot;];
  FaceGraph [ URL=&quot;\ref FaceGraph&quot;];
  FaceListGraph [ URL=&quot;\ref FaceListGraph&quot;];
  MutableFaceGraph [ URL=&quot;\ref MutableFaceGraph&quot;];
  
  MutableHalfedgeGraph -&gt; HalfedgeGraph -&gt; &quot;boost Graph&quot; [ arrowhead=&quot;open&quot;, label=&quot;refines&quot; ];
  FaceListGraph -&gt; FaceGraph -&gt; HalfedgeGraph [ arrowhead=&quot;open&quot;, label=&quot;refines&quot; ];
  MutableFaceGraph -&gt; MutableHalfedgeGraph [ arrowhead=&quot;open&quot;, label=&quot;refines&quot; ];
  MutableFaceGraph -&gt; FaceGraph [ arrowhead=&quot;open&quot;, label=&quot;refines&quot; ];
  HalfedgeListGraph -&gt; HalfedgeGraph [ arrowhead=&quot;open&quot;, label=&quot;refines&quot; ];
}
</dot>
</para><para><bold>Notations</bold><linebreak/>
</para><para><variablelist>
<varlistentry><term><computeroutput>G</computeroutput> </term></varlistentry>
<listitem><para>A type that is a model of a graph concept. </para></listitem>
<varlistentry><term><computeroutput>g</computeroutput> </term></varlistentry>
<listitem><para>An object of type <computeroutput>G</computeroutput>. </para></listitem>
<varlistentry><term><computeroutput>u</computeroutput>, <computeroutput>v</computeroutput> </term></varlistentry>
<listitem><para>Objects of type <computeroutput>boost::graph_traits&lt;G&gt;::vertex_descriptor</computeroutput>. </para></listitem>
<varlistentry><term><computeroutput>h</computeroutput> </term></varlistentry>
<listitem><para>An object of type <computeroutput>boost::graph_traits&lt;G&gt;::halfedge_descriptor</computeroutput>. </para></listitem>
<varlistentry><term><computeroutput>e</computeroutput> </term></varlistentry>
<listitem><para>An object of type <computeroutput>boost::graph_traits&lt;G&gt;::edge_descriptor</computeroutput>. </para></listitem>
<varlistentry><term><computeroutput>f</computeroutput> </term></varlistentry>
<listitem><para>An object of type <computeroutput>boost::graph_traits&lt;G&gt;::face_descriptor</computeroutput>. </para></listitem>
</variablelist>
</para><para><bold>VertexListGraph</bold><linebreak/>
</para><para>The concept <computeroutput><ref refid="classVertexListGraph" kindref="compound">VertexListGraph</ref></computeroutput> refines the concept <ulink url="https://www.boost.org/libs/graph/doc/Graph.html"><computeroutput>Graph</computeroutput></ulink> and adds the requirement for traversal of all vertices in a graph.</para><para><center> <table rows="3" cols="2"><row>
<entry thead="yes"><para>Associated Type </para></entry><entry thead="yes"><para>Description  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>boost::graph_traits&lt;G&gt;::vertex_iterator</computeroutput> </para></entry><entry thead="no"><para>Iterator over all vertices  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>boost::graph_traits&lt;G&gt;::vertices_size_type</computeroutput> </para></entry><entry thead="no"><para>Unsigned integer type for number of vertices  </para></entry></row>
</table>
</center></para><para><center><table rows="3" cols="3"><row>
<entry thead="yes"><para>Valid Expression </para></entry><entry thead="yes"><para>Return Type </para></entry><entry thead="yes"><para>Description  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vertices(g)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>std::pair&lt;vertex_iterator, vertex_iterator&gt;</computeroutput> </para></entry><entry thead="no"><para>An iterator range over all vertices  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>num_vertices(g)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>vertices_size_type</computeroutput> </para></entry><entry thead="no"><para>An upper bound of the number of vertices of the graph  </para></entry></row>
</table>
</center></para><para><bold>EdgeListGraph</bold><linebreak/>
</para><para>The concept <computeroutput><ref refid="classEdgeListGraph" kindref="compound">EdgeListGraph</ref></computeroutput> refines the concept <ulink url="https://www.boost.org/libs/graph/doc/Graph.html"><computeroutput>Graph</computeroutput></ulink> and adds the requirement for traversal of all edges in a graph.</para><para><center> <table rows="3" cols="2"><row>
<entry thead="yes"><para>Associated Type </para></entry><entry thead="yes"><para>Description  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>boost::graph_traits&lt;G&gt;::edge_iterator</computeroutput> </para></entry><entry thead="no"><para>Iterator over all edges  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>boost::graph_traits&lt;G&gt;::edges_size_type</computeroutput> </para></entry><entry thead="no"><para>Unsigned integer type for number of edges  </para></entry></row>
</table>
</center></para><para><center><table rows="5" cols="3"><row>
<entry thead="yes"><para>Valid Expression </para></entry><entry thead="yes"><para>Return Type </para></entry><entry thead="yes"><para>Description  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>edges(g)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>std::pair&lt;edge_iterator, edge_iterator&gt;</computeroutput> </para></entry><entry thead="no"><para>An iterator range over all edges  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>num_edges(g)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>edges_size_type</computeroutput> </para></entry><entry thead="no"><para>An upper bound of the number of edges of the graph  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>source(g)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>vertex_descriptor</computeroutput> </para></entry><entry thead="no"><para>The source vertex of <computeroutput>e</computeroutput>  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>target(g)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>vertex_descriptor</computeroutput> </para></entry><entry thead="no"><para>The target vertex of <computeroutput>e</computeroutput>  </para></entry></row>
</table>
</center></para><para><bold>HalfedgeGraph</bold><linebreak/>
</para><para>The concept <computeroutput><ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref></computeroutput> refines the concept <ulink url="https://www.boost.org/libs/graph/doc/Graph.html"><computeroutput>Graph</computeroutput></ulink> and adds the notion of halfedges, where each edge corresponds to two opposite halfedges.</para><para><center> <table rows="2" cols="2"><row>
<entry thead="yes"><para>Associated Type </para></entry><entry thead="yes"><para>Description  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>boost::graph_traits&lt;G&gt;::halfedge_descriptor</computeroutput> </para></entry><entry thead="no"><para>A <computeroutput>halfedge_descriptor</computeroutput> corresponds to a halfedge in a graph. Must be <computeroutput><ref refid="classDefaultConstructible" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">DefaultConstructible</ref></computeroutput>, <computeroutput><ref refid="classAssignable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">Assignable</ref></computeroutput>, <computeroutput><ref refid="classEqualityComparable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">EqualityComparable</ref></computeroutput> and <computeroutput><ref refid="classLessThanComparable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">LessThanComparable</ref></computeroutput>  </para></entry></row>
</table>
</center></para><para><center><table rows="11" cols="3"><row>
<entry thead="yes"><para>Valid Expression </para></entry><entry thead="yes"><para>Return Type </para></entry><entry thead="yes"><para>Description  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>edge(h, g)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>edge_descriptor</computeroutput> </para></entry><entry thead="no"><para>The edge corresponding to the halfedges <computeroutput>h</computeroutput> and <computeroutput>opposite(h)</computeroutput>  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>halfedge(e, g)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>halfedge_descriptor</computeroutput> </para></entry><entry thead="no"><para>One of the halfedges corresponding to the edge <computeroutput>e</computeroutput>  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>halfedge(v, g)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>halfedge_descriptor</computeroutput> </para></entry><entry thead="no"><para>A halfedge with target the vertex <computeroutput>v</computeroutput>  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>halfedge(u, v, g)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>std::pair&lt;halfedge_descriptor, bool&gt;</computeroutput> </para></entry><entry thead="no"><para>The halfedge with source <computeroutput>u</computeroutput> and target <computeroutput>v</computeroutput>. The Boolean is <computeroutput>true</computeroutput>, iff this halfedge exists  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>opposite(h, g)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>halfedge_descriptor</computeroutput> </para></entry><entry thead="no"><para>The halfedge with source and target swapped  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>source(h, g)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>vertex_descriptor</computeroutput> </para></entry><entry thead="no"><para>The source vertex of <computeroutput>h</computeroutput>  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>target(h, g)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>vertex_descriptor</computeroutput> </para></entry><entry thead="no"><para>The target vertex of <computeroutput>h</computeroutput>  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>next(h, g)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>halfedge_descriptor</computeroutput> </para></entry><entry thead="no"><para>The next halfedge around its face  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>prev(h, g)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>halfedge_descriptor</computeroutput> </para></entry><entry thead="no"><para>The previous halfedge around its face  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>boost::graph_traits&lt;G&gt;::null_halfedge()</computeroutput> </para></entry><entry thead="no"><para><computeroutput>halfedge_descriptor</computeroutput> </para></entry><entry thead="no"><para>Returns a special halfedge that is not equal to any other halfedge  </para></entry></row>
</table>
</center></para><para>The <computeroutput><ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref></computeroutput> has the invariant <computeroutput>halfedge(edge(h,g))==h</computeroutput>.</para><para><bold>MutableHalfedgeGraph</bold><linebreak/>
</para><para>The concept <computeroutput><ref refid="classMutableHalfedgeGraph" kindref="compound">MutableHalfedgeGraph</ref></computeroutput> refines the concept <computeroutput><ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref></computeroutput> and adds the requirements for operations to add vertices and edges, and to update the incidence information between vertices and halfedges.</para><para><center> <table rows="8" cols="3"><row>
<entry thead="yes"><para>Valid Expression </para></entry><entry thead="yes"><para>Return Type </para></entry><entry thead="yes"><para>Description  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>add_vertex(g)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>vertex_descriptor</computeroutput> </para></entry><entry thead="no"><para>Adds a new vertex to the graph without initializing the connectivity  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>remove_vertex(v, g)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>void</computeroutput> </para></entry><entry thead="no"><para>Removes the vertex <computeroutput>v</computeroutput> from the graph  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>add_edge(g)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>edge_descriptor</computeroutput> </para></entry><entry thead="no"><para>Adds two opposite halfedges to the graph without initializing their connectivity  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>remove_edge(e, g)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>void</computeroutput> </para></entry><entry thead="no"><para>Removes the two halfedges corresponding to the edge <computeroutput>e</computeroutput> from the graph  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>set_target(h, v, g)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>void</computeroutput> </para></entry><entry thead="no"><para>Sets the target vertex of the halfedge <computeroutput>h</computeroutput> and the source of <computeroutput>opposite(h)</computeroutput> to the vertex <computeroutput>v</computeroutput>  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>set_halfedge(v, h, g)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>void</computeroutput> </para></entry><entry thead="no"><para>Sets the halfedge of the vertex <computeroutput>v</computeroutput> to <computeroutput>h</computeroutput>. The target vertex of <computeroutput>h</computeroutput> must be <computeroutput>v</computeroutput>  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>set_next(h1, h2, g)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>void</computeroutput> </para></entry><entry thead="no"><para>Sets the successor of <computeroutput>h1</computeroutput> around a face to <computeroutput>h2</computeroutput>, and the prededecessor of <computeroutput>h2</computeroutput> to <computeroutput>h1</computeroutput>  </para></entry></row>
</table>
</center></para><para><bold>HalfedgeListGraph</bold><linebreak/>
</para><para>The concept <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound">HalfedgeListGraph</ref></computeroutput> refines the concept <computeroutput><ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref></computeroutput> and adds the requirements for traversal of all halfedges in the graph.</para><para><center> <table rows="3" cols="2"><row>
<entry thead="yes"><para>Associated Type </para></entry><entry thead="yes"><para>Description  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>boost::graph_traits&lt;G&gt;::halfedge_iterator</computeroutput> </para></entry><entry thead="no"><para>A <computeroutput><ref refid="classBidirectionalIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">BidirectionalIterator</ref></computeroutput> over all halfedges in a graph. Must be <computeroutput><ref refid="classDefaultConstructible" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">DefaultConstructible</ref></computeroutput>, <computeroutput><ref refid="classAssignable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">Assignable</ref></computeroutput>, <computeroutput><ref refid="classEqualityComparable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">EqualityComparable</ref></computeroutput>  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>boost::graph_traits&lt;G&gt;::halfedges_size_type</computeroutput> </para></entry><entry thead="no"><para>Unsigned integer type for number of halfedges  </para></entry></row>
</table>
</center></para><para><center><table rows="3" cols="3"><row>
<entry thead="yes"><para>Valid Expression </para></entry><entry thead="yes"><para>Return Type </para></entry><entry thead="yes"><para>Description  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>halfedges(g)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>std::pair&lt;halfedge_iterator, halfedge_iterator&gt;</computeroutput> </para></entry><entry thead="no"><para>An iterator range over all halfedges  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>num_halfedges(g)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>halfedges_size_type</computeroutput> </para></entry><entry thead="no"><para>An upper bound of the number of halfedges of the graph  </para></entry></row>
</table>
</center></para><para><bold>FaceGraph</bold><linebreak/>
</para><para>The concept <computeroutput><ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></computeroutput> refines the concept <computeroutput><ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref></computeroutput>. It adds the requirements for a graph to explicitly maintain faces described by halfedges, to provide access from a face to an incident halfedge, and to provide access from a halfedge to its incident face.</para><para><center> <table rows="2" cols="2"><row>
<entry thead="yes"><para>Associated Type </para></entry><entry thead="yes"><para>Description  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>boost::graph_traits&lt;G&gt;::face_descriptor</computeroutput> </para></entry><entry thead="no"><para>A <computeroutput>face_descriptor</computeroutput> corresponds to a unique face in a graph. Must be <computeroutput><ref refid="classDefaultConstructible" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">DefaultConstructible</ref></computeroutput>, <computeroutput><ref refid="classAssignable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">Assignable</ref></computeroutput>, <computeroutput><ref refid="classEqualityComparable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">EqualityComparable</ref></computeroutput> and <computeroutput><ref refid="classLessThanComparable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">LessThanComparable</ref></computeroutput>  </para></entry></row>
</table>
</center></para><para><center><table rows="5" cols="3"><row>
<entry thead="yes"><para>Valid Expression </para></entry><entry thead="yes"><para>Return Type </para></entry><entry thead="yes"><para>Description  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>face(h, g)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>face_descriptor</computeroutput> </para></entry><entry thead="no"><para>The face incident to halfedge <computeroutput>h</computeroutput>  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>halfedge(f, g)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>halfedge_descriptor</computeroutput> </para></entry><entry thead="no"><para>A halfedge incident to face <computeroutput>f</computeroutput>  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>degree(f, g)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>degree_size_type</computeroutput> </para></entry><entry thead="no"><para>The number of halfedges incident to face <computeroutput>f</computeroutput>  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>boost::graph_traits&lt;G&gt;::null_face()</computeroutput> </para></entry><entry thead="no"><para><computeroutput>face_descriptor</computeroutput> </para></entry><entry thead="no"><para>A special face that is not equal to any other face  </para></entry></row>
</table>
</center></para><para><bold>MutableFaceGraph</bold><linebreak/>
</para><para>The concept <computeroutput><ref refid="classMutableFaceGraph" kindref="compound">MutableFaceGraph</ref></computeroutput> refines the concepts <computeroutput><ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></computeroutput> and <computeroutput><ref refid="classMutableHalfedgeGraph" kindref="compound">MutableHalfedgeGraph</ref></computeroutput> and adds the requirement for operations to add faces and to modify face-halfedge relations.</para><para><center> <table rows="6" cols="3"><row>
<entry thead="yes"><para>Valid Expression </para></entry><entry thead="yes"><para>Return Type </para></entry><entry thead="yes"><para>Description  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>add_face(g)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>face_descriptor</computeroutput> </para></entry><entry thead="no"><para>Adds a new face to the graph without initializing the connectivity  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>remove_face(f, g)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>void</computeroutput> </para></entry><entry thead="no"><para>Removes <computeroutput>f</computeroutput> from the graph  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>set_face(h, f, g)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>void</computeroutput> </para></entry><entry thead="no"><para>Sets the corresponding face of <computeroutput>h</computeroutput> to <computeroutput>f</computeroutput>  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>set_halfedge(f, h, g)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>void</computeroutput> </para></entry><entry thead="no"><para>Sets the corresponding halfedge of <computeroutput>f</computeroutput> to <computeroutput>h</computeroutput>  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>reserve(g, nv, ne, nf)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>void</computeroutput> </para></entry><entry thead="no"><para>Called to indicate the expected size of vertices (<computeroutput>nv</computeroutput>), edges (<computeroutput>ed</computeroutput>) and faces (<computeroutput>nf</computeroutput>)  </para></entry></row>
</table>
</center></para><para><bold>FaceListGraph</bold><linebreak/>
</para><para>The concept <computeroutput><ref refid="classFaceListGraph" kindref="compound">FaceListGraph</ref></computeroutput> refines the concept <computeroutput><ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></computeroutput> and adds the requirement for traversal of all faces in a graph.</para><para><center> <table rows="3" cols="2"><row>
<entry thead="yes"><para>Associated Type </para></entry><entry thead="yes"><para>Description  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>boost::graph_traits&lt;G&gt;::face_iterator</computeroutput> </para></entry><entry thead="no"><para>Iterator over all faces  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>boost::graph_traits&lt;G&gt;::faces_size_type</computeroutput> </para></entry><entry thead="no"><para>Unsigned integer type for number of faces  </para></entry></row>
</table>
</center></para><para><center><table rows="3" cols="3"><row>
<entry thead="yes"><para>Valid Expression </para></entry><entry thead="yes"><para>Return Type </para></entry><entry thead="yes"><para>Description  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>faces(g)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>std::pair&lt;face_iterator, face_iterator&gt;</computeroutput> </para></entry><entry thead="no"><para>An iterator range over all faces  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>num_faces(g)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>faces_size_type</computeroutput> </para></entry><entry thead="no"><para>An upper bound of the number of faces of the graph  </para></entry></row>
</table>
</center> </para>    </detaileddescription>
  </compounddef>
</doxygen>
