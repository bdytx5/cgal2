<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classEdgeListGraph" kind="class" language="C++" prot="public">
    <compoundname>EdgeListGraph</compoundname>
    <includes local="no">Concepts/EdgeListGraph.h</includes>
      <sectiondef kind="related">
      <memberdef kind="function" id="classEdgeListGraph_1a060f0293875908e44b41309dfbe79a91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classEdgeListGraph" kindref="compound">EdgeListGraph</ref></type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; boost::graph_traits&lt; <ref refid="classEdgeListGraph" kindref="compound">EdgeListGraph</ref> &gt;::edge_iterator, boost::graph_traits&lt; <ref refid="classEdgeListGraph" kindref="compound">EdgeListGraph</ref> &gt;::edge_iterator &gt;</type>
        <definition>std::pair&lt; boost::graph_traits&lt; EdgeListGraph &gt;::edge_iterator, boost::graph_traits&lt; EdgeListGraph &gt;::edge_iterator &gt; edges</definition>
        <argsstring>(const EdgeListGraph &amp;g)</argsstring>
        <name>edges</name>
        <param>
          <type>const <ref refid="classEdgeListGraph" kindref="compound">EdgeListGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns an iterator range over all edges. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/EdgeListGraph.h" line="27" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classEdgeListGraph_1a14184eab7cdfa8ea6515ee7c3b9f1c38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classEdgeListGraph" kindref="compound">EdgeListGraph</ref></type>
          </param>
        </templateparamlist>
        <type>boost::graph_traits&lt; <ref refid="classEdgeListGraph" kindref="compound">EdgeListGraph</ref> &gt;::ver_size_type</type>
        <definition>boost::graph_traits&lt; EdgeListGraph &gt;::ver_size_type num_edges</definition>
        <argsstring>(const EdgeListGraph &amp;g)</argsstring>
        <name>num_edges</name>
        <param>
          <type>const <ref refid="classEdgeListGraph" kindref="compound">EdgeListGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns an upper bound of the number of edges of the graph. <simplesect kind="attention"><para><computeroutput><ref refid="classEdgeListGraph_1a14184eab7cdfa8ea6515ee7c3b9f1c38" kindref="member">num_edges()</ref></computeroutput> may return a number larger than <computeroutput>std::distance(edges(g).first, edges(g).second)</computeroutput>. This is the case for implementations only marking edges deleted in the edge container. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/EdgeListGraph.h" line="37" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classEdgeListGraph_1ac8f83485fc28d4149edd8eab690d40ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classEdgeListGraph" kindref="compound">EdgeListGraph</ref></type>
          </param>
        </templateparamlist>
        <type>boost::graph_traits&lt; <ref refid="classEdgeListGraph" kindref="compound">EdgeListGraph</ref> &gt;::vertex_descriptor</type>
        <definition>boost::graph_traits&lt; EdgeListGraph &gt;::vertex_descriptor source</definition>
        <argsstring>(boost::graph_traits&lt; EdgeListGraph &gt;::halfedge_descriptor h, const EdgeListGraph &amp;g)</argsstring>
        <name>source</name>
        <param>
          <type>boost::graph_traits&lt; <ref refid="classEdgeListGraph" kindref="compound">EdgeListGraph</ref> &gt;::halfedge_descriptor</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const <ref refid="classEdgeListGraph" kindref="compound">EdgeListGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the source vertex of <computeroutput>h</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/EdgeListGraph.h" line="45" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classEdgeListGraph_1a2f092b4041589941e9590e97f3902bcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classEdgeListGraph" kindref="compound">EdgeListGraph</ref></type>
          </param>
        </templateparamlist>
        <type>boost::graph_traits&lt; <ref refid="classEdgeListGraph" kindref="compound">EdgeListGraph</ref> &gt;::vertex_descriptor</type>
        <definition>boost::graph_traits&lt; EdgeListGraph &gt;::vertex_descriptor target</definition>
        <argsstring>(boost::graph_traits&lt; EdgeListGraph &gt;::halfedge_descriptor h, const EdgeListGraph &amp;g)</argsstring>
        <name>target</name>
        <param>
          <type>boost::graph_traits&lt; <ref refid="classEdgeListGraph" kindref="compound">EdgeListGraph</ref> &gt;::halfedge_descriptor</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const <ref refid="classEdgeListGraph" kindref="compound">EdgeListGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the target vertex of <computeroutput>h</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/EdgeListGraph.h" line="53" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Concept from the Boost Graph Library. See <ulink url="https://www.boost.org/libs/graph/doc/EdgeListGraph.html">https://www.boost.org/libs/graph/doc/EdgeListGraph.html</ulink>. </para>    </briefdescription>
    <detaileddescription>
<para> The concept <computeroutput><ref refid="classEdgeListGraph" kindref="compound">EdgeListGraph</ref></computeroutput> refines the concept <ulink url="https://www.boost.org/libs/graph/doc/Graph.html"><computeroutput>Graph</computeroutput></ulink> and adds the requirement for traversal of all edges in a graph.</para><para><xrefsect id="refines_1_refines000001"><xreftitle>Refines</xreftitle><xrefdescription><para><ulink url="https://www.boost.org/libs/graph/doc/Graph.html"><computeroutput>Graph</computeroutput></ulink></para></xrefdescription></xrefsect></para><para><xrefsect id="hasModels_1_hasModels000001"><xreftitle>Has Models</xreftitle><xrefdescription><para>See <ref refid="group__PkgBGLTraits" kindref="compound">Boost Graph Traits Specializations </ref></para></xrefdescription></xrefsect></para><para><simplesect kind="see"><para><ref refid="group__PkgBGLConcepts" kindref="compound">Graph Concepts </ref> </para></simplesect>
</para>    </detaileddescription>
    <location file="Concepts/EdgeListGraph.h" line="18" column="1" bodyfile="Concepts/EdgeListGraph.h" bodystart="18" bodyend="18"/>
    <listofallmembers>
      <member refid="classEdgeListGraph_1a060f0293875908e44b41309dfbe79a91" prot="public" virt="non-virtual"><scope>EdgeListGraph</scope><name>edges</name></member>
      <member refid="classEdgeListGraph_1a14184eab7cdfa8ea6515ee7c3b9f1c38" prot="public" virt="non-virtual"><scope>EdgeListGraph</scope><name>num_edges</name></member>
      <member refid="classEdgeListGraph_1ac8f83485fc28d4149edd8eab690d40ab" prot="public" virt="non-virtual"><scope>EdgeListGraph</scope><name>source</name></member>
      <member refid="classEdgeListGraph_1a2f092b4041589941e9590e97f3902bcd" prot="public" virt="non-virtual"><scope>EdgeListGraph</scope><name>target</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
