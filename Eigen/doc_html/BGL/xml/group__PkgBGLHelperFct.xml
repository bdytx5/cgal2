<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__PkgBGLHelperFct" kind="group">
    <compoundname>PkgBGLHelperFct</compoundname>
    <title>Helper Functions</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgBGLHelperFct_1gad93e429ad24efeaddeb836c437e719ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_border</definition>
        <argsstring>(typename boost::graph_traits&lt; FaceGraph &gt;::halfedge_descriptor hd, const FaceGraph &amp;g)</argsstring>
        <name>is_border</name>
        <param>
          <type>typename boost::graph_traits&lt; <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &gt;::halfedge_descriptor</type>
          <declname>hd</declname>
        </param>
        <param>
          <type>const <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if the halfedge <computeroutput>hd</computeroutput> is on a border. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="53" column="1" bodyfile="CGAL/boost/graph/helpers.h" bodystart="53" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1ga63695419c5ce7f68949ff2fb4f42d733" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_border_edge</definition>
        <argsstring>(typename boost::graph_traits&lt; FaceGraph &gt;::halfedge_descriptor hd, const FaceGraph &amp;g)</argsstring>
        <name>is_border_edge</name>
        <param>
          <type>typename boost::graph_traits&lt; <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &gt;::halfedge_descriptor</type>
          <declname>hd</declname>
        </param>
        <param>
          <type>const <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if the halfedge <computeroutput>hd</computeroutput> or the opposite halfedge is on a border. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="63" column="1" bodyfile="CGAL/boost/graph/helpers.h" bodystart="63" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1ga2888ba1a3d27fda8f16d03e9ab4738df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_border</definition>
        <argsstring>(typename boost::graph_traits&lt; FaceGraph &gt;::edge_descriptor ed, const FaceGraph &amp;g)</argsstring>
        <name>is_border</name>
        <param>
          <type>typename boost::graph_traits&lt; <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &gt;::edge_descriptor</type>
          <declname>ed</declname>
        </param>
        <param>
          <type>const <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if the edge <computeroutput>e</computeroutput> is on a border. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="73" column="1" bodyfile="CGAL/boost/graph/helpers.h" bodystart="73" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1ga268bad0cb16c1b330f00f1f2137e6a17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></type>
          </param>
        </templateparamlist>
        <type>boost::optional&lt; typename boost::graph_traits&lt; <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &gt;::halfedge_descriptor &gt;</type>
        <definition>boost::optional&lt;typename boost::graph_traits&lt;FaceGraph&gt;::halfedge_descriptor&gt; CGAL::is_border</definition>
        <argsstring>(typename boost::graph_traits&lt; FaceGraph &gt;::vertex_descriptor vd, const FaceGraph &amp;g)</argsstring>
        <name>is_border</name>
        <param>
          <type>typename boost::graph_traits&lt; <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &gt;::vertex_descriptor</type>
          <declname>vd</declname>
        </param>
        <param>
          <type>const <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns a halfedge which is on a border and whose target vertex is <computeroutput>vd</computeroutput>, if such a halfedge exists. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="84" column="1" bodyfile="CGAL/boost/graph/helpers.h" bodystart="84" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1gae04c8044cf1eee6a84baa5b79ab99fef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_closed</definition>
        <argsstring>(const FaceGraph &amp;g)</argsstring>
        <name>is_closed</name>
        <param>
          <type>const <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if there are no border edges. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="104" column="1" bodyfile="CGAL/boost/graph/helpers.h" bodystart="104" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1gadcd0f7717f833115030b951974837b6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_bivalent</definition>
        <argsstring>(typename boost::graph_traits&lt; FaceGraph &gt;::halfedge_descriptor hd, const FaceGraph &amp;g)</argsstring>
        <name>is_bivalent</name>
        <param>
          <type>typename boost::graph_traits&lt; <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &gt;::halfedge_descriptor</type>
          <declname>hd</declname>
        </param>
        <param>
          <type>const <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if the target of <computeroutput>hd</computeroutput> has exactly two incident edges. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="120" column="1" bodyfile="CGAL/boost/graph/helpers.h" bodystart="120" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1ga7216689879e9ee4d0143054f2bbaf09c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_bivalent_mesh</definition>
        <argsstring>(const FaceGraph &amp;g)</argsstring>
        <name>is_bivalent_mesh</name>
        <param>
          <type>const <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if all vertices have exactly two incident edges. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="130" column="1" bodyfile="CGAL/boost/graph/helpers.h" bodystart="130" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1ga6c1acedeffc27f41b2959b517f843ae4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_trivalent</definition>
        <argsstring>(typename boost::graph_traits&lt; FaceGraph &gt;::halfedge_descriptor hd, const FaceGraph &amp;g)</argsstring>
        <name>is_trivalent</name>
        <param>
          <type>typename boost::graph_traits&lt; <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &gt;::halfedge_descriptor</type>
          <declname>hd</declname>
        </param>
        <param>
          <type>const <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if the target of <computeroutput>hd</computeroutput> has exactly three incident edges. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="149" column="1" bodyfile="CGAL/boost/graph/helpers.h" bodystart="149" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1ga1472e0db19a5232f6ce14287c30eb521" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_trivalent_mesh</definition>
        <argsstring>(const FaceGraph &amp;g)</argsstring>
        <name>is_trivalent_mesh</name>
        <param>
          <type>const <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if all vertices have exactly three incident edges. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="160" column="1" bodyfile="CGAL/boost/graph/helpers.h" bodystart="160" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1ga0aeb3a6e6504032a485af3390dcec998" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_isolated_triangle</definition>
        <argsstring>(typename boost::graph_traits&lt; FaceGraph &gt;::halfedge_descriptor hd, const FaceGraph &amp;g)</argsstring>
        <name>is_isolated_triangle</name>
        <param>
          <type>typename boost::graph_traits&lt; <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &gt;::halfedge_descriptor</type>
          <declname>hd</declname>
        </param>
        <param>
          <type>const <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff the connected component denoted by <computeroutput>hd</computeroutput> is a triangle. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>g</computeroutput> must be valid. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="180" column="1" bodyfile="CGAL/boost/graph/helpers.h" bodystart="180" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1gaa552f609541c09f6d38ce92c19cd60c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_triangle</definition>
        <argsstring>(typename boost::graph_traits&lt; FaceGraph &gt;::halfedge_descriptor hd, const FaceGraph &amp;g)</argsstring>
        <name>is_triangle</name>
        <param>
          <type>typename boost::graph_traits&lt; <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &gt;::halfedge_descriptor</type>
          <declname>hd</declname>
        </param>
        <param>
          <type>const <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff the face denoted by <computeroutput>hd</computeroutput> is a triangle, that is it has three incident halfedges. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="197" column="1" bodyfile="CGAL/boost/graph/helpers.h" bodystart="197" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1ga11883d231eec1b58f37efe4acedd9588" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_triangle_mesh</definition>
        <argsstring>(const FaceGraph &amp;g)</argsstring>
        <name>is_triangle_mesh</name>
        <param>
          <type>const <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if all faces are triangles. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="207" column="1" bodyfile="CGAL/boost/graph/helpers.h" bodystart="207" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1ga36ed1d044899aaeb9dc0e745b5a3d2e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_isolated_quad</definition>
        <argsstring>(typename boost::graph_traits&lt; FaceGraph &gt;::halfedge_descriptor hd, const FaceGraph &amp;g)</argsstring>
        <name>is_isolated_quad</name>
        <param>
          <type>typename boost::graph_traits&lt; <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &gt;::halfedge_descriptor</type>
          <declname>hd</declname>
        </param>
        <param>
          <type>const <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff the connected component denoted by <computeroutput>hd</computeroutput> is a quadrilateral. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="223" column="1" bodyfile="CGAL/boost/graph/helpers.h" bodystart="223" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1gaefeddba3015a9723bfcacb904709bad0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_quad</definition>
        <argsstring>(typename boost::graph_traits&lt; FaceGraph &gt;::halfedge_descriptor hd, const FaceGraph &amp;g)</argsstring>
        <name>is_quad</name>
        <param>
          <type>typename boost::graph_traits&lt; <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &gt;::halfedge_descriptor</type>
          <declname>hd</declname>
        </param>
        <param>
          <type>const <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff the face denoted by <computeroutput>hd</computeroutput> is a quad, that is it has four incident halfedges. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="241" column="1" bodyfile="CGAL/boost/graph/helpers.h" bodystart="241" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1ga092f99b04e99633136d6534e7bb76b0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_quad_mesh</definition>
        <argsstring>(const FaceGraph &amp;g)</argsstring>
        <name>is_quad_mesh</name>
        <param>
          <type>const <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if all faces are quadrilaterals. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="251" column="1" bodyfile="CGAL/boost/graph/helpers.h" bodystart="251" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1gab737aaa204a6bdb8d18b00403f9d35d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_tetrahedron</definition>
        <argsstring>(typename boost::graph_traits&lt; FaceGraph &gt;::halfedge_descriptor hd, const FaceGraph &amp;g)</argsstring>
        <name>is_tetrahedron</name>
        <param>
          <type>typename boost::graph_traits&lt; <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &gt;::halfedge_descriptor</type>
          <declname>hd</declname>
        </param>
        <param>
          <type>const <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff the connected component denoted by <computeroutput>hd</computeroutput> is a tetrahedron. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="267" column="1" bodyfile="CGAL/boost/graph/helpers.h" bodystart="267" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1ga23e1d67dfacb0c3b659da32854f9026b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Graph</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_valid_halfedge_graph</definition>
        <argsstring>(const Graph &amp;g, bool verb=false)</argsstring>
        <name>is_valid_halfedge_graph</name>
        <param>
          <type>const Graph &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>verb</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>checks the integrity of <computeroutput>g</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>g</computeroutput> is valid if it follows the rules of the <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound">HalfedgeListGraph</ref></computeroutput> concept, and all of its associations are reciprocal. For example, <computeroutput>prev(next(h, g), g)</computeroutput> must be <computeroutput>h</computeroutput>, and <computeroutput>next(prev(h, g), g)</computeroutput> must be <computeroutput>h</computeroutput>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the <computeroutput>Graph</computeroutput> to test. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verb</parametername>
</parameternamelist>
<parameterdescription>
<para>: if <computeroutput>true</computeroutput>, the details of the check will be written in the standard output.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;Graph&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound">HalfedgeListGraph</ref></computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if <computeroutput>g</computeroutput> is valid, <computeroutput>false</computeroutput> otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="375" column="1" bodyfile="CGAL/boost/graph/helpers.h" bodystart="375" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1gac164e7e125a766bd4e5d5bacd05f2d4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Graph</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_valid_face_graph</definition>
        <argsstring>(const Graph &amp;g, bool verb=false)</argsstring>
        <name>is_valid_face_graph</name>
        <param>
          <type>const Graph &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>verb</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>checks the integrity of <computeroutput>g</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>g</computeroutput> is valid if it is a valid <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound">HalfedgeListGraph</ref></computeroutput>, if it follows the rules of the <computeroutput><ref refid="classFaceListGraph" kindref="compound">FaceListGraph</ref></computeroutput> concept, and all of its associations are reciprocal. For example, <computeroutput>face(halfedge(f,g),g)</computeroutput> must be <computeroutput>f</computeroutput>. calls <computeroutput><ref refid="group__PkgBGLHelperFct_1ga23e1d67dfacb0c3b659da32854f9026b" kindref="member">is_valid_halfedge_graph()</ref></computeroutput> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the <computeroutput>Graph</computeroutput> to test. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verb</parametername>
</parameternamelist>
<parameterdescription>
<para>: if <computeroutput>true</computeroutput>, the details of the check will be written in the standard output.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;Graph&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound">FaceListGraph</ref></computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if <computeroutput>g</computeroutput> is valid, <computeroutput>false</computeroutput> otherwise.</para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgBGLHelperFct_1ga23e1d67dfacb0c3b659da32854f9026b" kindref="member">is_valid_halfedge_graph()</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="521" column="1" bodyfile="CGAL/boost/graph/helpers.h" bodystart="521" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1gafa3bc673513c8750321bf062afd5e6b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Mesh</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_valid_polygon_mesh</definition>
        <argsstring>(const Mesh &amp;g, bool verb=false)</argsstring>
        <name>is_valid_polygon_mesh</name>
        <param>
          <type>const Mesh &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>verb</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>checks the integrity of <computeroutput>g</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>g</computeroutput> is valid if it is a valid <computeroutput><ref refid="classFaceListGraph" kindref="compound">FaceListGraph</ref></computeroutput> and it has distinct faces on each side of an edge. calls <computeroutput><ref refid="group__PkgBGLHelperFct_1gac164e7e125a766bd4e5d5bacd05f2d4a" kindref="member">is_valid_face_graph()</ref></computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the <computeroutput>Mesh</computeroutput> to test. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verb</parametername>
</parameternamelist>
<parameterdescription>
<para>: if <computeroutput>true</computeroutput>, the details of the check will be written in the standard output.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Mesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound">FaceListGraph</ref></computeroutput> and <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound">HalfedgeListGraph</ref></computeroutput>, and follows the definition of a <ref refid="index_1PMPDef" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polygon_mesh_processing.tag">PolygonMesh</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if <computeroutput>g</computeroutput> is valid, <computeroutput>false</computeroutput> otherwise.</para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgBGLHelperFct_1gac164e7e125a766bd4e5d5bacd05f2d4a" kindref="member">is_valid_face_graph()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgBGLHelperFct_1ga23e1d67dfacb0c3b659da32854f9026b" kindref="member">is_valid_halfedge_graph()</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="615" column="1" bodyfile="CGAL/boost/graph/helpers.h" bodystart="615" bodyend="643"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1ga6c6e5a51ae08d56082eb4b0667d673d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_hexahedron</definition>
        <argsstring>(typename boost::graph_traits&lt; FaceGraph &gt;::halfedge_descriptor hd, const FaceGraph &amp;g)</argsstring>
        <name>is_hexahedron</name>
        <param>
          <type>typename boost::graph_traits&lt; <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &gt;::halfedge_descriptor</type>
          <declname>hd</declname>
        </param>
        <param>
          <type>const <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff the connected component denoted by <computeroutput>hd</computeroutput> is a hexahedron. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="651" column="1" bodyfile="CGAL/boost/graph/helpers.h" bodystart="651" bodyend="685"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1ga81ac0b6fbedf7889e0164aec540bd112" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Graph</type>
          </param>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type>boost::graph_traits&lt; Graph &gt;::halfedge_descriptor</type>
        <definition>boost::graph_traits&lt;Graph&gt;::halfedge_descriptor CGAL::make_triangle</definition>
        <argsstring>(const P &amp;p0, const P &amp;p1, const P &amp;p2, Graph &amp;g)</argsstring>
        <name>make_triangle</name>
        <param>
          <type>const P &amp;</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>const P &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const P &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>Graph &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>Creates an isolated triangle with its vertices initialized to <computeroutput>p0</computeroutput>, <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput>, and adds it to the graph <computeroutput>g</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the non-border halfedge that has the target vertex associated with <computeroutput>p0</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="697" column="1" bodyfile="CGAL/boost/graph/helpers.h" bodystart="697" bodyend="743"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1ga94890a756e6c8d96ba91711ade533208" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Graph</type>
          </param>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type>boost::graph_traits&lt; Graph &gt;::halfedge_descriptor</type>
        <definition>boost::graph_traits&lt;Graph&gt;::halfedge_descriptor CGAL::make_quad</definition>
        <argsstring>(const P &amp;p0, const P &amp;p1, const P &amp;p2, const P &amp;p3, Graph &amp;g)</argsstring>
        <name>make_quad</name>
        <param>
          <type>const P &amp;</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>const P &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const P &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const P &amp;</type>
          <declname>p3</declname>
        </param>
        <param>
          <type>Graph &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>Creates an isolated quad with its vertices initialized to <computeroutput>p0</computeroutput>, <computeroutput>p1</computeroutput>, <computeroutput>p2</computeroutput>, and <computeroutput>p3</computeroutput>, and adds it to the graph <computeroutput>g</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the non-border halfedge that has the target vertex associated with <computeroutput>p0</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="807" column="1" bodyfile="CGAL/boost/graph/helpers.h" bodystart="807" bodyend="824"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1gad9df350e98780f0c213046d8a257358e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Graph</type>
          </param>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type>boost::graph_traits&lt; Graph &gt;::halfedge_descriptor</type>
        <definition>boost::graph_traits&lt;Graph&gt;::halfedge_descriptor CGAL::make_hexahedron</definition>
        <argsstring>(const P &amp;p0, const P &amp;p1, const P &amp;p2, const P &amp;p3, const P &amp;p4, const P &amp;p5, const P &amp;p6, const P &amp;p7, Graph &amp;g)</argsstring>
        <name>make_hexahedron</name>
        <param>
          <type>const P &amp;</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>const P &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const P &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const P &amp;</type>
          <declname>p3</declname>
        </param>
        <param>
          <type>const P &amp;</type>
          <declname>p4</declname>
        </param>
        <param>
          <type>const P &amp;</type>
          <declname>p5</declname>
        </param>
        <param>
          <type>const P &amp;</type>
          <declname>p6</declname>
        </param>
        <param>
          <type>const P &amp;</type>
          <declname>p7</declname>
        </param>
        <param>
          <type>Graph &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>Creates an isolated hexahedron with its vertices initialized to <computeroutput>p0</computeroutput>, <computeroutput>p1</computeroutput>, ... , and <computeroutput>p7</computeroutput>, and adds it to the graph <computeroutput>g</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the halfedge that has the target vertex associated with <computeroutput>p0</computeroutput>, in the face with the vertices with the points <computeroutput>p0</computeroutput>, <computeroutput>p1</computeroutput>, <computeroutput>p2</computeroutput>, and <computeroutput>p3</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="834" column="1" bodyfile="CGAL/boost/graph/helpers.h" bodystart="834" bodyend="880"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1gad2e132763721d8e4fd22020c1665c15f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Graph</type>
          </param>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type>boost::graph_traits&lt; Graph &gt;::halfedge_descriptor</type>
        <definition>boost::graph_traits&lt;Graph&gt;::halfedge_descriptor CGAL::make_tetrahedron</definition>
        <argsstring>(const P &amp;p0, const P &amp;p1, const P &amp;p2, const P &amp;p3, Graph &amp;g)</argsstring>
        <name>make_tetrahedron</name>
        <param>
          <type>const P &amp;</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>const P &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const P &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const P &amp;</type>
          <declname>p3</declname>
        </param>
        <param>
          <type>Graph &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>Creates an isolated tetrahedron with its vertices initialized to <computeroutput>p0</computeroutput>, <computeroutput>p1</computeroutput>, <computeroutput>p2</computeroutput>, and <computeroutput>p3</computeroutput>, and adds it to the graph <computeroutput>g</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the halfedge that has the target vertex associated with <computeroutput>p0</computeroutput>, in the face with the vertices with the points <computeroutput>p0</computeroutput>, <computeroutput>p1</computeroutput>, and <computeroutput>p2</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="889" column="1" bodyfile="CGAL/boost/graph/helpers.h" bodystart="889" bodyend="974"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1ga859e3e5e3e40c20eb36807d573dddbb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Graph</type>
          </param>
          <param>
            <type>class P</type>
          </param>
        </templateparamlist>
        <type>boost::graph_traits&lt; Graph &gt;::halfedge_descriptor</type>
        <definition>boost::graph_traits&lt;Graph&gt;::halfedge_descriptor CGAL::make_regular_prism</definition>
        <argsstring>(typename boost::graph_traits&lt; Graph &gt;::vertices_size_type nb_vertices, Graph &amp;g, const P &amp;base_center=P(0, 0, 0), typename CGAL::Kernel_traits&lt; P &gt;::Kernel::FT height=1.0, typename CGAL::Kernel_traits&lt; P &gt;::Kernel::FT radius=1.0, bool is_closed=true)</argsstring>
        <name>make_regular_prism</name>
        <param>
          <type>typename boost::graph_traits&lt; Graph &gt;::vertices_size_type</type>
          <declname>nb_vertices</declname>
        </param>
        <param>
          <type>Graph &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>const P &amp;</type>
          <declname>base_center</declname>
          <defval>P(0, 0, 0)</defval>
        </param>
        <param>
          <type>typename <ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref>&lt; P &gt;::<ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel::FT</ref></type>
          <declname>height</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>typename <ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref>&lt; P &gt;::<ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel::FT</ref></type>
          <declname>radius</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>is_closed</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Creates a triangulated regular prism, outward oriented, having <computeroutput>nb_vertices</computeroutput> vertices in each of its bases and adds it to the graph <computeroutput>g</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>center</computeroutput> is (0, 0, 0), then the first point of the prism is (<computeroutput>radius</computeroutput>, <computeroutput>height</computeroutput>, 0) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nb_vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of vertices per base. It must be greater than or equal to 3. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the graph in which the regular prism will be created. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>base_center</parametername>
</parameternamelist>
<parameterdescription>
<para>the center of the circle in which the lower base is inscribed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>the distance between the two bases. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radius</parametername>
</parameternamelist>
<parameterdescription>
<para>the radius of the circles in which the bases are inscribed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_closed</parametername>
</parameternamelist>
<parameterdescription>
<para>determines if the bases must be created or not. If <computeroutput>is_closed</computeroutput> is <computeroutput>true</computeroutput>, <computeroutput>center</computeroutput> is a vertex. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the halfedge that has the target vertex associated with the first point in the first face. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="1018" column="1" bodyfile="CGAL/boost/graph/helpers.h" bodystart="1018" bodyend="1095"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1gad559ef0cf6a75f905957a3c5b89a03c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Graph</type>
          </param>
          <param>
            <type>class P</type>
          </param>
        </templateparamlist>
        <type>boost::graph_traits&lt; Graph &gt;::halfedge_descriptor</type>
        <definition>boost::graph_traits&lt;Graph&gt;::halfedge_descriptor CGAL::make_pyramid</definition>
        <argsstring>(typename boost::graph_traits&lt; Graph &gt;::vertices_size_type nb_vertices, Graph &amp;g, const P &amp;base_center=P(0, 0, 0), typename CGAL::Kernel_traits&lt; P &gt;::Kernel::FT height=1.0, typename CGAL::Kernel_traits&lt; P &gt;::Kernel::FT radius=1.0, bool is_closed=true)</argsstring>
        <name>make_pyramid</name>
        <param>
          <type>typename boost::graph_traits&lt; Graph &gt;::vertices_size_type</type>
          <declname>nb_vertices</declname>
        </param>
        <param>
          <type>Graph &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>const P &amp;</type>
          <declname>base_center</declname>
          <defval>P(0, 0, 0)</defval>
        </param>
        <param>
          <type>typename <ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref>&lt; P &gt;::<ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel::FT</ref></type>
          <declname>height</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>typename <ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref>&lt; P &gt;::<ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel::FT</ref></type>
          <declname>radius</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>is_closed</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Creates a pyramid, outward oriented, having <computeroutput>nb_vertices</computeroutput> vertices in its base and adds it to the graph <computeroutput>g</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>center</computeroutput> is (0, 0, 0), then the first point of the base is (<computeroutput>radius</computeroutput>, 0`, 0) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nb_vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of vertices in the base. It must be greater than or equal to 3. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the graph in which the pyramid will be created </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>base_center</parametername>
</parameternamelist>
<parameterdescription>
<para>the center of the circle in which the base is inscribed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>the distance between the base and the apex. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radius</parametername>
</parameternamelist>
<parameterdescription>
<para>the radius of the circle in which the base is inscribed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_closed</parametername>
</parameternamelist>
<parameterdescription>
<para>determines if the base must be created or not. If <computeroutput>is_closed</computeroutput> is <computeroutput>true</computeroutput>, <computeroutput>center</computeroutput> is a vertex. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the halfedge that has the target vertex associated with the apex point in the first face. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="1112" column="1" bodyfile="CGAL/boost/graph/helpers.h" bodystart="1112" bodyend="1181"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1gac35ac7a3cb0ca4a5452548a304f3835e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Graph</type>
          </param>
          <param>
            <type>class P</type>
          </param>
        </templateparamlist>
        <type>boost::graph_traits&lt; Graph &gt;::halfedge_descriptor</type>
        <definition>boost::graph_traits&lt;Graph&gt;::halfedge_descriptor CGAL::make_icosahedron</definition>
        <argsstring>(Graph &amp;g, const P &amp;center=P(0, 0, 0), typename CGAL::Kernel_traits&lt; P &gt;::Kernel::FT radius=1.0)</argsstring>
        <name>make_icosahedron</name>
        <param>
          <type>Graph &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>const P &amp;</type>
          <declname>center</declname>
          <defval>P(0, 0, 0)</defval>
        </param>
        <param>
          <type>typename <ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref>&lt; P &gt;::<ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel::FT</ref></type>
          <declname>radius</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
<para>Creates an icosahedron, outward oriented, centered in <computeroutput>center</computeroutput> and adds it to the graph <computeroutput>g</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the graph in which the icosahedron will be created. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>the center of the sphere in which the icosahedron is inscribed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radius</parametername>
</parameternamelist>
<parameterdescription>
<para>the radius of the sphere in which the icosahedron is inscribed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the halfedge that has the target vertex associated with the first point in the first face. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="1193" column="1" bodyfile="CGAL/boost/graph/helpers.h" bodystart="1193" bodyend="1271"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1ga5a41c8f7154516b2f6f58937136e4bb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Graph</type>
          </param>
          <param>
            <type>class CoordinateFunctor</type>
            <defval><ref refid="classCGAL_1_1Creator__uniform__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::Creator_uniform_3</ref>&lt;           typename boost::graph_traits&lt;Graph&gt;::vertices_size_type,           typename boost::property_traits&lt;typename boost::property_map&lt;Graph, vertex_point_t&gt;::type&gt;::value_type&gt;</defval>
          </param>
        </templateparamlist>
        <type>boost::graph_traits&lt; Graph &gt;::halfedge_descriptor</type>
        <definition>boost::graph_traits&lt;Graph&gt;::halfedge_descriptor CGAL::make_grid</definition>
        <argsstring>(typename boost::graph_traits&lt; Graph &gt;::vertices_size_type i, typename boost::graph_traits&lt; Graph &gt;::vertices_size_type j, Graph &amp;g, const CoordinateFunctor &amp;calculator, bool triangulated=false)</argsstring>
        <name>make_grid</name>
        <param>
          <type>typename boost::graph_traits&lt; Graph &gt;::vertices_size_type</type>
          <declname>i</declname>
        </param>
        <param>
          <type>typename boost::graph_traits&lt; Graph &gt;::vertices_size_type</type>
          <declname>j</declname>
        </param>
        <param>
          <type>Graph &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>const CoordinateFunctor &amp;</type>
          <declname>calculator</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>triangulated</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Creates a row major ordered grid with <computeroutput>i</computeroutput> cells along the width and <computeroutput>j</computeroutput> cells along the height and adds it to the graph <computeroutput>g</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of cells along the width. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of cells along the height. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the graph in which the grid will be created. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>calculator</parametername>
</parameternamelist>
<parameterdescription>
<para>the functor that will assign coordinates to the grid vertices. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>triangulated</parametername>
</parameternamelist>
<parameterdescription>
<para>decides if a cell is composed of one quad or two triangles. If <computeroutput>triangulated</computeroutput> is <computeroutput>true</computeroutput>, the diagonal of each cell is oriented from (0,0) to (1,1) in the cell coordinates.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>CoordinateFunctor</parametername>
</parameternamelist>
<parameterdescription>
<para>that takes two <computeroutput>boost::graph_traits&lt;Graph&gt;::vertices_size_type</computeroutput> and outputs a <computeroutput>boost::property_traits&lt;boost::property_map&lt;Graph,CGAL::vertex_point_t&gt;::type&gt;::value_type</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
Default: a point with positive integer coordinates (<computeroutput>w</computeroutput>, <computeroutput>h</computeroutput>, 0), with <computeroutput>w</computeroutput> in [0..<computeroutput>i</computeroutput>] and <computeroutput>h</computeroutput> in [0..<computeroutput>j</computeroutput>] <simplesect kind="return"><para>the non-border non-diagonal halfedge that has the target vertex associated with the first point of the grid (default is (0,0,0) ). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="1301" column="1" bodyfile="CGAL/boost/graph/helpers.h" bodystart="1301" bodyend="1358"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1ga4d3b9bb446f55fd37206eeba9d582296" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::clear</definition>
        <argsstring>(FaceGraph &amp;g)</argsstring>
        <name>clear</name>
        <param>
          <type><ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>removes all vertices, faces and halfedges from a graph. </para>        </briefdescription>
        <detaileddescription>
<para>Calls <computeroutput><ref refid="classMutableHalfedgeGraph_1a712fcc76b7d806811f90547b31a710ca" kindref="member">remove_edge()</ref></computeroutput>, <computeroutput><ref refid="classMutableHalfedgeGraph_1a75a8063e50ccded5ed08e3730542541d" kindref="member">remove_vertex()</ref></computeroutput>, and <computeroutput><ref refid="group__PkgBGLEulerOperations_1gacfae7ff8e782da55b941e4487e86c738" kindref="member">remove_face()</ref></computeroutput> for each edge, vertex or face.</para><para>If the graph has a member function <computeroutput><ref refid="group__PkgBGLHelperFct_1ga4d3b9bb446f55fd37206eeba9d582296" kindref="member">clear()</ref></computeroutput>, it will be called instead.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classMutableHalfedgeGraph" kindref="compound">MutableHalfedgeGraph</ref></computeroutput> and <computeroutput><ref refid="classMutableFaceGraph" kindref="compound">MutableFaceGraph</ref></computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the graph to clear </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="1507" column="1" bodyfile="CGAL/boost/graph/helpers.h" bodystart="1507" bodyend="1513"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1gab6e6f18e6de73b9f85e38d0b56145172" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_empty</definition>
        <argsstring>(const FaceGraph &amp;g)</argsstring>
        <name>is_empty</name>
        <param>
          <type>const <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>checks whether the graph is empty, by checking that it does not contain any vertex. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the graph to test </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="1526" column="1" bodyfile="CGAL/boost/graph/helpers.h" bodystart="1526" bodyend="1529"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1ga2d3eb044bfe42eab566779ce32216c11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SourceMesh</type>
          </param>
          <param>
            <type>typename TargetMesh</type>
          </param>
          <param>
            <type>typename NamedParameters1</type>
          </param>
          <param>
            <type>typename NamedParameters2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::copy_face_graph</definition>
        <argsstring>(const SourceMesh &amp;sm, TargetMesh &amp;tm, const NamedParameters1 &amp;np1, const NamedParameters2 &amp;np2)</argsstring>
        <name>copy_face_graph</name>
        <param>
          <type>const SourceMesh &amp;</type>
          <declname>sm</declname>
        </param>
        <param>
          <type>TargetMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>const NamedParameters1 &amp;</type>
          <declname>np1</declname>
        </param>
        <param>
          <type>const NamedParameters2 &amp;</type>
          <declname>np2</declname>
        </param>
        <briefdescription>
<para>copies a source model of <computeroutput><ref refid="classFaceListGraph" kindref="compound">FaceListGraph</ref></computeroutput> into a target model of a <computeroutput><ref refid="classFaceListGraph" kindref="compound">FaceListGraph</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>OutputIterators</computeroutput> can be provided to produce a mapping between source and target elements. The target graph is not cleared.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>SourceMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound">FaceListGraph</ref></computeroutput>. The descriptor types <computeroutput>boost::graph_traits&lt;SourceMesh&gt;::vertex_descriptor</computeroutput> and <computeroutput>boost::graph_traits&lt;SourceMesh&gt;::face_descriptor</computeroutput> must be models of <computeroutput><ref refid="classHashable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Hashable</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TargetMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound">FaceListGraph</ref></computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters1</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__pmp__namedparameters" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polygon_mesh_processing.tag">Named Parameters</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters2</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__pmp__namedparameters" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polygon_mesh_processing.tag">Named Parameters</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
The types <computeroutput>sm_vertex_descriptor</computeroutput> and <computeroutput>sm_face_descriptor</computeroutput> must be models of the concept <computeroutput><ref refid="classHashable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Hashable</ref></computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sm</parametername>
</parameternamelist>
<parameterdescription>
<para>the source mesh </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>the target mesh </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np1</parametername>
</parameternamelist>
<parameterdescription>
<para>optional sequence of <ref refid="group__pmp__namedparameters" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polygon_mesh_processing.tag">Named Parameters</ref> among the ones listed below</para></parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Named Parameters</term></varlistentry>
<listitem><para><table rows="7" cols="2"><row>
<entry thead="no"><para><ref refid="group__bgl__namedparameters_1BGL_vertex_point_map" kindref="member">vertex_point_map</ref></para></entry><entry thead="no"><para>the property map with the points associated to the vertices of <computeroutput>sm</computeroutput> . If this parameter is omitted, an internal property map for <computeroutput>CGAL::vertex_point_t</computeroutput> should be available in <computeroutput>SourceMesh</computeroutput>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="group__bgl__namedparameters_1BGL_vertex_to_vertex_output_iterator" kindref="member">vertex_to_vertex_output_iterator</ref></para></entry><entry thead="no"><para>an <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> containing the pairs source-vertex, target-vertex. If this parameter is given, then <computeroutput>vertex_to_vertex_map</computeroutput> cannot be used.  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="group__bgl__namedparameters_1BGL_halfedge_to_halfedge_output_iterator" kindref="member">halfedge_to_halfedge_output_iterator</ref></para></entry><entry thead="no"><para>an <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> containing the pairs source-halfedge, target-halfedge. If this parameter is given, then <computeroutput>halfedge_to_halfedge_map</computeroutput> cannot be used.  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="group__bgl__namedparameters_1BGL_face_to_face_output_iterator" kindref="member">face_to_face_output_iterator</ref></para></entry><entry thead="no"><para>an <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> containing the pairs source-face, target-face. If this parameter is given, then <computeroutput>face_to_face_map</computeroutput> cannot be used.  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="group__bgl__namedparameters_1BGL_vertex_to_vertex_map" kindref="member">vertex_to_vertex_map</ref></para></entry><entry thead="no"><para>a <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> containing the pairs source-vertex, target-vertex.  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="group__bgl__namedparameters_1BGL_halfedge_to_halfedge_map" kindref="member">halfedge_to_halfedge_map</ref></para></entry><entry thead="no"><para>a <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> containing the pairs source-halfedge, target-halfedge.  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="group__bgl__namedparameters_1BGL_face_to_face_map" kindref="member">face_to_face_map</ref></para></entry><entry thead="no"><para>a <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> containing the pairs source-face, target-face.  </para></entry></row>
</table>
</para></listitem>
</variablelist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>np2</parametername>
</parameternamelist>
<parameterdescription>
<para>optional sequence of <ref refid="group__pmp__namedparameters" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polygon_mesh_processing.tag">Named Parameters</ref> among the ones listed below</para></parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><ref refid="group__bgl__namedparameters_1BGL_vertex_point_map" kindref="member">vertex_point_map</ref></para></entry><entry thead="no"><para>the property map with the points associated to the vertices of <computeroutput>tm</computeroutput>. If this parameter is omitted, an internal property map for <computeroutput>CGAL::vertex_point_t</computeroutput> should be available in <computeroutput>TargetMesh</computeroutput>  </para></entry></row>
</table>
</para></listitem>
</variablelist>
</para><para>The points from <computeroutput>sm</computeroutput> to <computeroutput>tm</computeroutput> are converted using <computeroutput><ref refid="classCGAL_1_1Cartesian__converter" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Cartesian_converter</ref>&lt;SourceKernel, TargetKernel&gt;</computeroutput>. <computeroutput>SourceKernel</computeroutput> and <computeroutput>TargetKernel</computeroutput> are deduced using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> from the value types of the vertex_point_maps.</para><para>Other properties are not copied. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/copy_face_graph.h" line="329" column="1" bodyfile="CGAL/boost/graph/copy_face_graph.h" bodystart="329" bodyend="352"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Generic convenience functions for testing if an edge is a border edge, if a mesh is triangular, for conversion between models of different <computeroutput><ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></computeroutput> concepts, etc. </para>    </briefdescription>
    <detaileddescription>
<para>Most functions are in the header file <computeroutput>&lt;CGAL/boost/graph/helpers.h&gt;</computeroutput> </para>    </detaileddescription>
  </compounddef>
</doxygen>
