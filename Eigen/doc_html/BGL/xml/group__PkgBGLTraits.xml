<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__PkgBGLTraits" kind="group">
    <compoundname>PkgBGLTraits</compoundname>
    <title>Specializations of boost::graph_traits</title>
    <innerclass refid="classboost_1_1graph__traits_3_01CGAL_1_1Dual_3_01Primal_01_4_01_4" prot="public">boost::graph_traits&lt; CGAL::Dual&lt; Primal &gt; &gt;</innerclass>
    <briefdescription>
<para>The Bgl defines the class template <ulink url="http://www.boost.org/libs/graph/doc/graph_traits.html"><computeroutput>boost::graph_traits</computeroutput></ulink> as a uniform interface to the properties and types of graph types. </para>    </briefdescription>
    <detaileddescription>
<para>We provide specializations of this class template for several CGAL data structures.</para><sect1 id="group__PkgBGLTraits_1BGLSMGT">
<title>Specialization for the Surface_mesh Class</title>
<para>Defined in <computeroutput>&lt;CGAL/boost/graph/graph_traits_Surface_mesh.h&gt;</computeroutput></para><para>We provide partial specialization for the class <computeroutput><ref refid="classCGAL_1_1Surface__mesh" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Surface_mesh.tag">CGAL::Surface_mesh</ref></computeroutput> so that it is a model of the graph concepts <computeroutput><ref refid="classBidirectionalGraph" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">BidirectionalGraph</ref></computeroutput>, <computeroutput><ref refid="classVertexAndEdgeListGraph" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">VertexAndEdgeListGraph</ref></computeroutput>, <computeroutput><ref refid="classAdjacencyMatrix" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">AdjacencyMatrix</ref></computeroutput>, and <computeroutput><ref refid="classMutableFaceGraph" kindref="compound">MutableFaceGraph</ref></computeroutput>.</para><para>The const specialization, <computeroutput>boost::graph_traits&lt; <ref refid="classCGAL_1_1Surface__mesh" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Surface_mesh.tag">CGAL::Surface_mesh</ref>&lt;Traits&gt; const&gt;</computeroutput> is also defined, using the constant handles in the surface mesh.</para><para>The traits class <computeroutput>boost::graph_traits&lt; <ref refid="classCGAL_1_1Surface__mesh" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Surface_mesh.tag">CGAL::Surface_mesh</ref>&lt;T&gt; &gt;</computeroutput> provides the following types:</para><para><table rows="18" cols="3"><row>
<entry thead="yes"><para>Member </para></entry><entry thead="yes"><para>Value </para></entry><entry thead="yes"><para>Description  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vertex_descriptor</computeroutput> </para></entry><entry thead="no"><para><computeroutput>Surface_mesh::Vertex_index</computeroutput> </para></entry><entry thead="no"><para>Identify vertices in the graph. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>edge_descriptor</computeroutput> </para></entry><entry thead="no"><para><computeroutput>Surface_mesh::Edge_index</computeroutput> </para></entry><entry thead="no"><para>Identify edges in the graph. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>halfedge_descriptor</computeroutput> </para></entry><entry thead="no"><para><computeroutput>Surface_mesh::Halfedge_index</computeroutput> </para></entry><entry thead="no"><para>Identify halfedges in the graph. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>face_descriptor</computeroutput> </para></entry><entry thead="no"><para><computeroutput>Surface_mesh::Face_index</computeroutput> </para></entry><entry thead="no"><para>Identify faces in the graph. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>adjacency_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput><ref refid="classCGAL_1_1Vertex__around__target__iterator" kindref="compound">CGAL::Vertex_around_target_iterator</ref>&lt;Surface_mesh&lt;P&gt; &gt;</computeroutput> </para></entry><entry thead="no"><para>An iterator to traverse through the vertices adjacent to a vertex. Its value type is <computeroutput>vertex_descriptor</computeroutput>. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>out_edge_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput>CGAL::Out_edge_iterator&lt;Surface_mesh&lt;P&gt; &gt;</computeroutput> </para></entry><entry thead="no"><para>An iterator to traverse through the outgoing edges incident to a vertex. Its value type is <computeroutput>edge_descriptor</computeroutput>. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>in_edge_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput>CGAL::In_edge_iterator&lt;Surface_mesh&lt;P&gt; &gt;</computeroutput> </para></entry><entry thead="no"><para>An iterator to traverse through the incoming edges incident to a vertex. Its value type is <computeroutput>edge_descriptor</computeroutput>. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vertex_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput>Surface_mesh::Vertex_iterator</computeroutput> </para></entry><entry thead="no"><para>An iterator to traverse through the vertices of the graph. Its value type is <computeroutput>vertex_descriptor</computeroutput>. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>edge_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput>Surface_mesh::Edge_iterator</computeroutput> </para></entry><entry thead="no"><para>An iterator to traverse through the edges of the graph. Its value type is <computeroutput>edge_descriptor</computeroutput>. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>halfedge_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput>Surface_mesh::Halfedge_iterator</computeroutput> </para></entry><entry thead="no"><para>An iterator to traverse through the halfedges of the graph. Its value type is <computeroutput>halfedge_descriptor</computeroutput>. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>face_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput>Surface_mesh::Face_iterator</computeroutput> </para></entry><entry thead="no"><para>An iterator to traverse through the faces of the graph. Its value type is <computeroutput>face_descriptor</computeroutput>. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>directed_category</computeroutput> </para></entry><entry thead="no"><para><computeroutput>boost::undirected_tag</computeroutput> </para></entry><entry thead="no"><para>This graph is not directed. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>edge_parallel_category</computeroutput> </para></entry><entry thead="no"><para><computeroutput>boost::disallow_parallel_edge_tag</computeroutput> </para></entry><entry thead="no"><para>This graph does not support multiedges. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>traversal_category</computeroutput> </para></entry><entry thead="no"><para>Inherits from <computeroutput>boost::bidirectional_graph_tag</computeroutput>, <computeroutput>boost::vertex_list_graph_tag</computeroutput>, and <computeroutput>boost::edge_list_graph_tag</computeroutput> </para></entry><entry thead="no"><para>The ways in which the vertices in the graph can be traversed. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vertices_size_type</computeroutput> </para></entry><entry thead="no"><para><computeroutput>Surface_mesh::vertices_size_type</computeroutput> </para></entry><entry thead="no"><para>The size type of the vertex list. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>edges_size_type</computeroutput> </para></entry><entry thead="no"><para><computeroutput>Surface_mesh::edges_size_type</computeroutput> </para></entry><entry thead="no"><para>The size type of the edge list. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>degree_size_type</computeroutput> </para></entry><entry thead="no"><para><computeroutput>Surface_mesh::degree_size_type</computeroutput> </para></entry><entry thead="no"><para>The size type of the adjacency list. </para></entry></row>
</table>
</para></sect1>
<sect1 id="group__PkgBGLTraits_1BGLPolyGT">
<title>Specialization for the Polyhedron Class</title>
<para>Defined in <computeroutput>&lt;CGAL/boost/graph/graph_traits_Polyhedron_3.h&gt;</computeroutput></para><para>We provide partial specialization for the class <computeroutput><ref refid="classCGAL_1_1Polyhedron__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polyhedron.tag">CGAL::Polyhedron_3</ref></computeroutput> so that it is a model of the graph concepts <computeroutput><ref refid="classBidirectionalGraph" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">BidirectionalGraph</ref></computeroutput>, <computeroutput><ref refid="classVertexAndEdgeListGraph" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">VertexAndEdgeListGraph</ref></computeroutput>, <computeroutput><ref refid="classAdjacencyMatrix" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">AdjacencyMatrix</ref></computeroutput>, and <computeroutput><ref refid="classMutableFaceGraph" kindref="compound">MutableFaceGraph</ref></computeroutput>.</para><para>The const specialization, <computeroutput>boost::graph_traits&lt; <ref refid="classCGAL_1_1Polyhedron__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polyhedron.tag">CGAL::Polyhedron_3</ref>&lt;Traits&gt; const&gt;</computeroutput> is also defined, using the constant handles in the polyhedron.</para><para>The traits class <computeroutput>boost::graph_traits&lt; <ref refid="classCGAL_1_1Polyhedron__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polyhedron.tag">CGAL::Polyhedron_3</ref>&lt;T&gt; &gt;</computeroutput> provides the following types:</para><para><table rows="18" cols="3"><row>
<entry thead="yes"><para>Member </para></entry><entry thead="yes"><para>Value </para></entry><entry thead="yes"><para>Description  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vertex_descriptor</computeroutput> </para></entry><entry thead="no"><para><computeroutput>Polyhedron_3::Vertex_handle</computeroutput> </para></entry><entry thead="no"><para>Identify vertices in the graph. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>edge_descriptor</computeroutput> </para></entry><entry thead="no"><para><computeroutput><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></computeroutput> </para></entry><entry thead="no"><para>Identify edges in the graph. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>halfedge_descriptor</computeroutput> </para></entry><entry thead="no"><para><computeroutput>Polyhedron_3::Halfedge_handle</computeroutput> </para></entry><entry thead="no"><para>Identify halfedges in the graph. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>face_descriptor</computeroutput> </para></entry><entry thead="no"><para><computeroutput>Polyhedron_3::Face_handle</computeroutput> </para></entry><entry thead="no"><para>Identify faces in the graph. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>adjacency_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput><ref refid="classCGAL_1_1Vertex__around__target__iterator" kindref="compound">CGAL::Vertex_around_target_iterator</ref>&lt;Polyhedron_3&lt;T&gt; &gt;</computeroutput> </para></entry><entry thead="no"><para>An iterator to traverse through the vertices adjacent to a vertex. Its value type is <computeroutput>vertex_descriptor</computeroutput>. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>out_edge_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput>CGAL::Out_edge_iterator&lt;Polyhedron_3&lt;T&gt; &gt;</computeroutput> </para></entry><entry thead="no"><para>An iterator to traverse through the outgoing edges incident to a vertex. Its value type is <computeroutput>edge_descriptor</computeroutput>. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>in_edge_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput>CGAL::In_edge_iterator&lt;Polyhedron_3&lt;T&gt; &gt;</computeroutput> </para></entry><entry thead="no"><para>An iterator to traverse through the incoming edges incident to a vertex. Its value type is <computeroutput>edge_descriptor</computeroutput>. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vertex_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></computeroutput> </para></entry><entry thead="no"><para>An iterator to traverse through the vertices of the graph. Its value type is <computeroutput>vertex_descriptor</computeroutput>. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>edge_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></computeroutput> </para></entry><entry thead="no"><para>An iterator to traverse through the edges of the graph. Its value type is <computeroutput>edge_descriptor</computeroutput>. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>halfedge_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></computeroutput> </para></entry><entry thead="no"><para>An iterator to traverse through the halfedges of the graph. Its value type is <computeroutput>halfedge_descriptor</computeroutput>. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>face_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></computeroutput> </para></entry><entry thead="no"><para>An iterator to traverse through the faces of the graph. Its value type is <computeroutput>face_descriptor</computeroutput>. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>directed_category</computeroutput> </para></entry><entry thead="no"><para><computeroutput>boost::undirected_tag</computeroutput> </para></entry><entry thead="no"><para>This graph is not directed. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>edge_parallel_category</computeroutput> </para></entry><entry thead="no"><para><computeroutput>boost::disallow_parallel_edge_tag</computeroutput> </para></entry><entry thead="no"><para>This graph does not support multiedges. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>traversal_category</computeroutput> </para></entry><entry thead="no"><para>Inherits from <computeroutput>boost::bidirectional_graph_tag</computeroutput>, <computeroutput>boost::vertex_list_graph_tag</computeroutput>, and <computeroutput>boost::edge_list_graph_tag</computeroutput> </para></entry><entry thead="no"><para>The ways in which the vertices in the graph can be traversed. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vertices_size_type</computeroutput> </para></entry><entry thead="no"><para><computeroutput>Polyhedron_3::size_type</computeroutput> </para></entry><entry thead="no"><para>The size type of the vertex list. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>edges_size_type</computeroutput> </para></entry><entry thead="no"><para><computeroutput>Polyhedron_3::size_type</computeroutput> </para></entry><entry thead="no"><para>The size type of the edge list. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>degree_size_type</computeroutput> </para></entry><entry thead="no"><para><computeroutput>Polyhedron_3::size_type</computeroutput> </para></entry><entry thead="no"><para>The size type of the adjacency list. </para></entry></row>
</table>
For convenience, the type <computeroutput>edge_descriptor</computeroutput> is hashable using the functor <computeroutput><ref refid="structCGAL_1_1Handle__hash__function" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Miscellany.tag">CGAL::Handle_hash_function</ref></computeroutput>, which is the default hash functor of <computeroutput><ref refid="classCGAL_1_1Unique__hash__map" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Miscellany.tag">CGAL::Unique_hash_map</ref></computeroutput>.</para></sect1>
<sect1 id="group__PkgBGLTraits_1BGLLCCGT">
<title>Specialization for the Linear_cell_complex_for_combinatorial_map Class</title>
<para>Defined in <computeroutput>&lt;CGAL/boost/graph/graph_traits_Linear_cell_complex_for_combinatorial_map.h&gt;</computeroutput></para><para>We provide partial specialization for the class <computeroutput><ref refid="classCGAL_1_1Linear__cell__complex__for__combinatorial__map" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Linear_cell_complex.tag">CGAL::Linear_cell_complex_for_combinatorial_map</ref></computeroutput> so that it is a model of the graph concepts <computeroutput><ref refid="classBidirectionalGraph" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">BidirectionalGraph</ref></computeroutput>, <computeroutput><ref refid="classVertexAndEdgeListGraph" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">VertexAndEdgeListGraph</ref></computeroutput>, <computeroutput><ref refid="classAdjacencyMatrix" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">AdjacencyMatrix</ref></computeroutput>, and <computeroutput><ref refid="classMutableFaceGraph" kindref="compound">MutableFaceGraph</ref></computeroutput>.</para><para>The const specialization is also defined, using the constant handles in the linear cell complex.</para><para>Let us denote by LCC an instantiation of CGAL::Linear_cell_complex_for_combinatorial_map&lt;...&gt; class. The traits class <computeroutput>boost::graph_traits&lt;LCC&gt;</computeroutput> provides the following types:</para><para><table rows="18" cols="3"><row>
<entry thead="yes"><para>Member </para></entry><entry thead="yes"><para>Value </para></entry><entry thead="yes"><para>Description  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vertex_descriptor</computeroutput> </para></entry><entry thead="no"><para><computeroutput>LCC::Vertex_attribute_handle</computeroutput> </para></entry><entry thead="no"><para>The vertex descriptor </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>edge_descriptor</computeroutput> </para></entry><entry thead="no"><para><computeroutput><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></computeroutput> </para></entry><entry thead="no"><para>The edge descriptor </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>halfedge_descriptor</computeroutput> </para></entry><entry thead="no"><para><computeroutput>LCC::Dart_handle</computeroutput> </para></entry><entry thead="no"><para>The halfedge descriptor </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>face_descriptor</computeroutput> </para></entry><entry thead="no"><para><computeroutput><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></computeroutput> </para></entry><entry thead="no"><para>The face descriptor </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>adjacency_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput><ref refid="classCGAL_1_1Vertex__around__target__iterator" kindref="compound">CGAL::Vertex_around_target_iterator</ref>&lt;LCC&gt;</computeroutput> </para></entry><entry thead="no"><para>Iterates through adjacent vertices </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>out_edge_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput>CGAL::Out_edge_iterator&lt;LCC&gt;</computeroutput> </para></entry><entry thead="no"><para>Iterate through the out-edges of a vertex. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>in_edge_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput>CGAL::Out_edge_iterator&lt;LCC&gt;</computeroutput> </para></entry><entry thead="no"><para>Iterate through the in-edges of a vertex. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vertex_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></computeroutput> </para></entry><entry thead="no"><para>Iterate through the vertices of LCC. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>edge_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></computeroutput> </para></entry><entry thead="no"><para>Iterate through the edges of LCC. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>halfedge_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></computeroutput> </para></entry><entry thead="no"><para>Iterate through the halfedges of LCC. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>face_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></computeroutput> </para></entry><entry thead="no"><para>Iterate through the faces of LCC. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>directed_category</computeroutput> </para></entry><entry thead="no"><para>Inherits from <computeroutput>boost::bidirectional_graph_tag</computeroutput>, <computeroutput>boost::vertex_list_graph_tag</computeroutput> and <computeroutput>boost::edge_list_graph_tag</computeroutput> </para></entry><entry thead="no"><para></para></entry></row>
<row>
<entry thead="no"><para><computeroutput>edge_parallel_category</computeroutput> </para></entry><entry thead="no"><para><computeroutput>boost::disallow_parallel_edge_tag</computeroutput> </para></entry><entry thead="no"><para>Indicates that this graph does not support multiedges </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>traversal_category</computeroutput> </para></entry><entry thead="no"><para><computeroutput>boost::bidirectional_graph_tag</computeroutput> </para></entry><entry thead="no"><para>Indicates that this graph is bidirectional </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vertices_size_type</computeroutput> </para></entry><entry thead="no"><para><computeroutput>LCC::size_type</computeroutput> </para></entry><entry thead="no"><para>The size type of the vertex list </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>edges_size_type</computeroutput> </para></entry><entry thead="no"><para><computeroutput>LCC::size_type</computeroutput> </para></entry><entry thead="no"><para>The size type of the edge list </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>degree_size_type</computeroutput> </para></entry><entry thead="no"><para><computeroutput>LCC::size_type</computeroutput> </para></entry><entry thead="no"><para>The size type of the adjacency list </para></entry></row>
</table>
For convenience, the type <computeroutput>edge_descriptor</computeroutput> is hashable using the functor <computeroutput><ref refid="structCGAL_1_1Handle__hash__function" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Miscellany.tag">CGAL::Handle_hash_function</ref></computeroutput> that is the default hash functor of <computeroutput><ref refid="classCGAL_1_1Unique__hash__map" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Miscellany.tag">CGAL::Unique_hash_map</ref></computeroutput>.</para><sect2 id="group__PkgBGLTraits_1Requirements">
<title>Requirements</title>
<para><itemizedlist>
<listitem>
<para>The item class used by <computeroutput><ref refid="classCGAL_1_1Linear__cell__complex__for__combinatorial__map" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Linear_cell_complex.tag">CGAL::Linear_cell_complex_for_combinatorial_map</ref></computeroutput> must have both 0-attributes and 2-attributes enabled.</para><para></para></listitem>
<listitem>
<para>No dart is 1-free, nor 2-free. Holes in a mesh are represented by using the same convention than for <computeroutput><ref refid="classCGAL_1_1Polyhedron__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polyhedron.tag">CGAL::Polyhedron_3</ref></computeroutput> and <computeroutput><ref refid="classCGAL_1_1Surface__mesh" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Surface_mesh.tag">CGAL::Surface_mesh</ref></computeroutput>: a dart <computeroutput>d</computeroutput> belongs to a border if the 2-attribute of <computeroutput>beta&lt;2&gt;(d)</computeroutput> is NULL.</para><para></para></listitem>
<listitem>
<para>All darts of the linear cell complexes must be associated with a 2-attribute, except darts that represent holes.</para><para></para></listitem>
<listitem>
<para>In order to use property maps, darts and types associated with of 0- and 2-attributes must define the two fonctions: <programlisting><codeline><highlight class="normal">int<sp/>id()<sp/>const;<sp/>//<sp/>Returns<sp/>the<sp/>index.<sp/></highlight></codeline>
<codeline><highlight class="normal">int&amp;<sp/>id();<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Returns<sp/>a<sp/>reference<sp/>to<sp/>the<sp/>index<sp/>stored<sp/>in<sp/>the<sp/>attribute.<sp/></highlight></codeline>
</programlisting> </para></listitem>
</itemizedlist>
</para><para>For darts, this can be done by defining <computeroutput>Darts_with_id</computeroutput> as <computeroutput>CGAL::Tag_true</computeroutput> in the <computeroutput>Dart_wrapper</computeroutput> struct of the item class. <linebreak/>
 For attributes, it is possible to use <computeroutput><ref refid="classCGAL_1_1Cell__attribute__with__id" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Combinatorial_map.tag">CGAL::Cell_attribute_with_id</ref></computeroutput> and <computeroutput><ref refid="classCGAL_1_1Cell__attribute__with__point__and__id" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Linear_cell_complex.tag">CGAL::Cell_attribute_with_point_and_id</ref></computeroutput> classes to define your item class using attributes with id.</para><para>You can also use the <computeroutput><ref refid="structCGAL_1_1Linear__cell__complex__bgl__min__items" kindref="compound">CGAL::Linear_cell_complex_bgl_min_items</ref></computeroutput> item class, or you can use directly the <computeroutput><ref refid="structCGAL_1_1Linear__cell__complex__for__bgl__combinatorial__map__helper" kindref="compound">CGAL::Linear_cell_complex_for_bgl_combinatorial_map_helper</ref></computeroutput> class.</para></sect2>
</sect1>
<sect1 id="group__PkgBGLTraits_1BGLT2GT">
<title>Specializations for the 2D Triangulation Classes</title>
<para>Defined in <computeroutput>&lt;CGAL/boost/graph/graph_traits_Triangulation_2.h&gt;</computeroutput>, <computeroutput>&lt;CGAL/boost/graph/graph_traits_Delaunay_triangulation_2.h&gt;</computeroutput>, <computeroutput>&lt;CGAL/boost/graph/graph_traits_Regular_triangulation_2.h&gt;</computeroutput>, <computeroutput>&lt;CGAL/boost/graph/graph_traits_Constrained_Delaunay_triangulation_2.h&gt;</computeroutput>, <computeroutput>&lt;CGAL/boost/graph/graph_traits_Constrained_triangulation_2.h&gt;</computeroutput>, <computeroutput>&lt;CGAL/boost/graph/graph_traits_Constrained_triangulation_plus_2.h&gt;</computeroutput>, and <computeroutput>&lt;CGAL/boost/graph/graph_traits_Triangulation_hierarchy_2.h&gt;</computeroutput>.</para><para>We provide partial specialization for the classes <computeroutput><ref refid="classCGAL_1_1Triangulation__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_2.tag">CGAL::Triangulation_2</ref></computeroutput>, <computeroutput><ref refid="classCGAL_1_1Delaunay__triangulation__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_2.tag">CGAL::Delaunay_triangulation_2</ref></computeroutput>, <computeroutput><ref refid="classCGAL_1_1Regular__triangulation__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_2.tag">CGAL::Regular_triangulation_2</ref></computeroutput>, <computeroutput><ref refid="classCGAL_1_1Constrained__triangulation__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_2.tag">CGAL::Constrained_triangulation_2</ref></computeroutput>, <computeroutput><ref refid="classCGAL_1_1Constrained__Delaunay__triangulation__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_2.tag">CGAL::Constrained_Delaunay_triangulation_2</ref></computeroutput>, <computeroutput><ref refid="classCGAL_1_1Constrained__triangulation__plus__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_2.tag">CGAL::Constrained_triangulation_plus_2</ref></computeroutput>, and <computeroutput><ref refid="classCGAL_1_1Triangulation__hierarchy__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_2.tag">CGAL::Triangulation_hierarchy_2</ref></computeroutput> so that they are model of the graph concepts <computeroutput><ref refid="classBidirectionalGraph" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">BidirectionalGraph</ref></computeroutput>, <computeroutput><ref refid="classVertexAndEdgeListGraph" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">VertexAndEdgeListGraph</ref></computeroutput>, and <computeroutput><ref refid="classFaceListGraph" kindref="compound">FaceListGraph</ref></computeroutput>.</para><para>The mapping between vertices and edges of the triangulation and the graph is rather straightforward, but there are some subtleties. The value type of the Bgl iterators is the vertex or edge descriptor, whereas in CGAL all iterators and circulators are also handles and hence have as value type Vertex or Edge.</para><para>The graph traits class for triangulations does not distinguish between finite and infinite vertices and edges. As the edge weight computed with the default property map of Bgl algorithms (obtained with <computeroutput>get(t, boost::edge_weight)</computeroutput>) is the length of the edge, the edge weight is not well defined for infinite edges. For algorithms that make use of the edge weight, the user must therefore define a <ulink url="http://www.boost.org/libs/graph/doc/filtered_graph.html"><computeroutput>boost::filtered_graph</computeroutput></ulink> or pass a property map to the algorithm that returns &quot;infinity&quot; for infinite edges.</para><para><table rows="14" cols="3"><row>
<entry thead="yes"><para>Member </para></entry><entry thead="yes"><para>Value </para></entry><entry thead="yes"><para>Description  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vertex_descriptor</computeroutput> </para></entry><entry thead="no"><para><computeroutput>Triangulation::Vertex_handle</computeroutput> </para></entry><entry thead="no"><para>Identify vertices in the graph. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>edge_descriptor</computeroutput> </para></entry><entry thead="no"><para><computeroutput><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></computeroutput> </para></entry><entry thead="no"><para>Identify edges in the graph. It is constructible from and convertible to <computeroutput>Triangulation::Edge</computeroutput>. It is not a simple typedef, but a proper class, because in an undirected graph the edges <computeroutput>(u,v)</computeroutput> and <computeroutput>(v,u)</computeroutput> must be equal. This is not the case for the Edge type of the triangulation. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>adjacency_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></computeroutput> </para></entry><entry thead="no"><para>An iterator to traverse through the vertices adjacent to a vertex. Its value type is <computeroutput>vertex_descriptor</computeroutput>. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>out_edge_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></computeroutput> </para></entry><entry thead="no"><para>An iterator to traverse through the outgoing edges incident to a vertex. Its value type is <computeroutput>edge_descriptor</computeroutput>. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>in_edge_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></computeroutput> </para></entry><entry thead="no"><para>An iterator to traverse through the incoming edges incident to a vertex. Its value type is <computeroutput>edge_descriptor</computeroutput>. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vertex_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></computeroutput> </para></entry><entry thead="no"><para>An iterator to traverse through the vertices of the graph. Its value type is <computeroutput>vertex_descriptor</computeroutput>. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>edge_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></computeroutput> </para></entry><entry thead="no"><para>An iterator to traverse through the edges of the graph. Its value type is <computeroutput>edge_descriptor</computeroutput>. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>directed_category</computeroutput> </para></entry><entry thead="no"><para><computeroutput>boost::undirected_tag</computeroutput> </para></entry><entry thead="no"><para>This graph is not directed. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>edge_parallel_category</computeroutput> </para></entry><entry thead="no"><para><computeroutput>boost::disallow_parallel_edge_tag</computeroutput> </para></entry><entry thead="no"><para>This graph does not support multiedges. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>traversal_category</computeroutput> </para></entry><entry thead="no"><para>Inherits from <computeroutput>boost::bidirectional_graph_tag</computeroutput>, <computeroutput>boost::adjacency_graph_tag</computeroutput>, <computeroutput>boost::vertex_list_graph_tag</computeroutput>, and <computeroutput>boost::edge_list_graph_tag</computeroutput> </para></entry><entry thead="no"><para>The ways in which the vertices in the graph can be traversed.. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vertices_size_type</computeroutput> </para></entry><entry thead="no"><para><computeroutput>Triangulation::size_type</computeroutput> </para></entry><entry thead="no"><para>The size type of the vertex list. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>edges_size_type</computeroutput> </para></entry><entry thead="no"><para><computeroutput>Triangulation::size_type</computeroutput> </para></entry><entry thead="no"><para>The size type of the edge list. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>degree_size_type</computeroutput> </para></entry><entry thead="no"><para><computeroutput>Triangulation::size_type</computeroutput> </para></entry><entry thead="no"><para>The size type of the adjacency list. </para></entry></row>
</table>
</para></sect1>
<sect1 id="group__PkgBGLTraits_1BGLArgtGT">
<title>Specialization for the Arrangement Classes</title>
<para>Defined in <computeroutput>&lt;CGAL/boost/graph/graph_traits_Arrangement_2.h&gt;</computeroutput></para><para>We provide partial specialization for the class <computeroutput><ref refid="classCGAL_1_1Arrangement__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Arrangement_on_surface_2.tag">CGAL::Arrangement_2</ref></computeroutput> so that it is model of the graph concepts <computeroutput><ref refid="classBidirectionalGraph" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">BidirectionalGraph</ref></computeroutput> and <computeroutput><ref refid="classVertexAndEdgeListGraph" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">VertexAndEdgeListGraph</ref></computeroutput>.</para><para>The const specialization, <computeroutput>boost::graph_traits&lt; <ref refid="classCGAL_1_1Arrangement__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Arrangement_on_surface_2.tag">CGAL::Arrangement_2</ref>&lt;Traits, Dcel&gt; const&gt;</computeroutput> is also defined, using the constant handles in the arrangement.</para><para>The traits class <computeroutput>boost::graph_traits&lt; <ref refid="classCGAL_1_1Arrangement__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Arrangement_on_surface_2.tag">CGAL::Arrangement_2</ref>&lt;T, Dcel&gt; &gt;</computeroutput> provides the following types:</para><para><table rows="14" cols="3"><row>
<entry thead="yes"><para>Member </para></entry><entry thead="yes"><para>Value </para></entry><entry thead="yes"><para>Description  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vertex_descriptor</computeroutput> </para></entry><entry thead="no"><para><computeroutput>Arrangement_2::Vertex_handle</computeroutput> </para></entry><entry thead="no"><para>Identify vertices in the graph. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>edge_descriptor</computeroutput> </para></entry><entry thead="no"><para><computeroutput>Arrangement_2::Halfedge_handle</computeroutput> </para></entry><entry thead="no"><para>Identify edges in the graph. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>adjacency_iterator</computeroutput> </para></entry><entry thead="no"><para>Not provided</para></entry><entry thead="no"><para></para></entry></row>
<row>
<entry thead="no"><para><computeroutput>out_edge_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></computeroutput> </para></entry><entry thead="no"><para>An edge iterator which only iterates over the outgoing halfedges around a vertex. It corresponds to a <computeroutput>Arrangement_2::Halfedge_around_vertex_circulator</computeroutput> with the difference that its value type is an edge descriptor and not <computeroutput>Arrangement_2::Halfedge</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>in_edge_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></computeroutput> </para></entry><entry thead="no"><para>An edge iterator which only iterates over the incoming edges around a vertex. It corresponds to a <computeroutput>Arrangement_2::Halfedge_around_vertex_circulator</computeroutput> with the difference that its value type is an edge descriptor and not <computeroutput>Arrangement_2::Halfedge</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vertex_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></computeroutput> </para></entry><entry thead="no"><para>An iterator corresponding to <computeroutput>Arrangement_2::Vertex_iterator</computeroutput>, with the difference that its value type is a vertex descriptor and not <computeroutput>Arrangement_2::Vertex</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>edge_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></computeroutput> </para></entry><entry thead="no"><para>An iterator corresponding to <computeroutput>Arrangement_2::Halfedge_iterator</computeroutput> with the difference that its value type is an edge descriptor and not <computeroutput>Arrangement_2::Halfedge</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>directed_category</computeroutput> </para></entry><entry thead="no"><para><computeroutput>boost::directed_tag</computeroutput> </para></entry><entry thead="no"><para>This graph is directed. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>edge_parallel_category</computeroutput> </para></entry><entry thead="no"><para><computeroutput>boost::allow_parallel_edge_tag</computeroutput> </para></entry><entry thead="no"><para>This graph supports multiedges. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>traversal_category</computeroutput> </para></entry><entry thead="no"><para>Inherits from <computeroutput>boost::bidirectional_graph_tag</computeroutput>, <computeroutput>boost::vertex_list_graph_tag</computeroutput>, and <computeroutput>boost::edge_list_graph_tag</computeroutput> </para></entry><entry thead="no"><para>The ways in which the vertices in the graph can be traversed. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vertices_size_type</computeroutput> </para></entry><entry thead="no"><para><computeroutput>Arrangement_2::Size</computeroutput> </para></entry><entry thead="no"><para>The size type of the vertex list. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>edges_size_type</computeroutput> </para></entry><entry thead="no"><para><computeroutput>Arrangement_2::Size</computeroutput> </para></entry><entry thead="no"><para>The size type of the edge list. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>degree_size_type</computeroutput> </para></entry><entry thead="no"><para><computeroutput>Arrangement_2::Size</computeroutput> </para></entry><entry thead="no"><para>The size type of the adjacency list. </para></entry></row>
</table>
</para></sect1>
<sect1 id="group__PkgBGLTraits_1BGLOMPAK">
<title>Specialization for the OpenMesh::PolyMesh_ArrayKernelT Class</title>
<para>Defined in <computeroutput>&lt;CGAL/boost/graph/graph_traits_PolyMesh_ArrayKernelT.h&gt;</computeroutput></para><para>We provide partial specialization for the class <computeroutput>OpenMesh::PolyMesh_ArrayKernelT</computeroutput> so that it is a model of the graph concepts <computeroutput><ref refid="classBidirectionalGraph" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">BidirectionalGraph</ref></computeroutput>, <computeroutput><ref refid="classVertexAndEdgeListGraph" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">VertexAndEdgeListGraph</ref></computeroutput>, <computeroutput><ref refid="classAdjacencyMatrix" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">AdjacencyMatrix</ref></computeroutput>, and <computeroutput><ref refid="classMutableFaceGraph" kindref="compound">MutableFaceGraph</ref></computeroutput>.</para><para>The traits class <computeroutput>boost::graph_traits&lt;OpenMesh::PolyMesh_ArrayKernelT&lt;K&gt; &gt;</computeroutput> provides the following types:</para><para><table rows="18" cols="3"><row>
<entry thead="yes"><para>Member </para></entry><entry thead="yes"><para>Value </para></entry><entry thead="yes"><para>Description  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vertex_descriptor</computeroutput> </para></entry><entry thead="no"><para><computeroutput>OpenMesh::PolyMesh_ArrayKernelT::VertexHandle</computeroutput> </para></entry><entry thead="no"><para>Identify vertices in the graph. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>edge_descriptor</computeroutput> </para></entry><entry thead="no"><para><computeroutput><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></computeroutput> </para></entry><entry thead="no"><para>Identify edges in the graph. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>halfedge_descriptor</computeroutput> </para></entry><entry thead="no"><para><computeroutput>OpenMesh::PolyMesh_ArrayKernelT::HalfedgeHandle</computeroutput> </para></entry><entry thead="no"><para>Identify halfedges in the graph. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>face_descriptor</computeroutput> </para></entry><entry thead="no"><para><computeroutput>OpenMesh::PolyMesh_ArrayKernelT::FaceHandle</computeroutput> </para></entry><entry thead="no"><para>Identify faces in the graph. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>adjacency_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></computeroutput> </para></entry><entry thead="no"><para>An iterator to traverse through the vertices adjacent to a vertex. Its value type is <computeroutput>vertex_descriptor</computeroutput>. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>out_edge_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput>CGAL::Out_edge_iterator&lt;OpenMesh::PolyMesh_ArrayKernelT&lt;K&gt; &gt;</computeroutput> </para></entry><entry thead="no"><para>An iterator to traverse through the outgoing edges incident to a vertex. Its value type is <computeroutput>edge_descriptor</computeroutput>. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>in_edge_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput>CGAL::In_edge_iterator&lt;OpenMesh::PolyMesh_ArrayKernelT&lt;K&gt; &gt;</computeroutput> </para></entry><entry thead="no"><para>An iterator to traverse through the incoming edges incident to a vertex. Its value type is <computeroutput>edge_descriptor</computeroutput>. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vertex_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput>OpenMesh::PolyMesh_ArrayKernelT::VertexIter</computeroutput> </para></entry><entry thead="no"><para>An iterator to traverse through the vertices of the graph. Its value type is <computeroutput>vertex_descriptor</computeroutput>. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>edge_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></computeroutput> </para></entry><entry thead="no"><para>An iterator to traverse through the edges of the graph. Its value type is <computeroutput>edge_descriptor</computeroutput>. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>halfedge_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput>OpenMesh::PolyMesh_ArrayKernelT::HalfedgeIter</computeroutput> </para></entry><entry thead="no"><para>An iterator to traverse through the halfedges of the graph. Its value type is <computeroutput>halfedge_descriptor</computeroutput>. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>face_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput>OpenMesh::PolyMesh_ArrayKernelT::FaceIter</computeroutput> </para></entry><entry thead="no"><para>An iterator to traverse through the faces of the graph. Its value type is <computeroutput>face_descriptor</computeroutput>. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>directed_category</computeroutput> </para></entry><entry thead="no"><para><computeroutput>boost::undirected_tag</computeroutput> </para></entry><entry thead="no"><para>This graph is not directed. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>edge_parallel_category</computeroutput> </para></entry><entry thead="no"><para><computeroutput>boost::disallow_parallel_edge_tag</computeroutput> </para></entry><entry thead="no"><para>This graph does not support multiedges. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>traversal_category</computeroutput> </para></entry><entry thead="no"><para>Inherits from <computeroutput>boost::bidirectional_graph_tag</computeroutput>, <computeroutput>boost::vertex_list_graph_tag</computeroutput>, and <computeroutput>boost::edge_list_graph_tag</computeroutput> </para></entry><entry thead="no"><para>The ways in which the vertices in the graph can be traversed. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vertices_size_type</computeroutput> </para></entry><entry thead="no"><para><computeroutput>unsigned int</computeroutput> </para></entry><entry thead="no"><para>The size type of the vertex list. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>edges_size_type</computeroutput> </para></entry><entry thead="no"><para><computeroutput>unsigned int</computeroutput> </para></entry><entry thead="no"><para>The size type of the edge list. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>degree_size_type</computeroutput> </para></entry><entry thead="no"><para><computeroutput>unsigned int</computeroutput> </para></entry><entry thead="no"><para>The size type of the adjacency list. </para></entry></row>
</table>
</para></sect1>
<sect1 id="group__PkgBGLTraits_1BGLOMTMAK">
<title>Specialization for the OpenMesh::TriMesh_ArrayKernelT Class</title>
<para>Defined in <computeroutput>&lt;CGAL/boost/graph/graph_traits_TriMesh_ArrayKernelT.h&gt;</computeroutput></para><para>We provide partial specialization for the class <computeroutput>OpenMesh::TriMesh_ArrayKernelT</computeroutput> so that it is a model of the graph concepts <computeroutput><ref refid="classBidirectionalGraph" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">BidirectionalGraph</ref></computeroutput>, <computeroutput><ref refid="classVertexAndEdgeListGraph" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">VertexAndEdgeListGraph</ref></computeroutput>, <computeroutput><ref refid="classAdjacencyMatrix" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">AdjacencyMatrix</ref></computeroutput>, and <computeroutput><ref refid="classMutableFaceGraph" kindref="compound">MutableFaceGraph</ref></computeroutput>.</para><para>The traits class <computeroutput>boost::graph_traits&lt;OpenMesh::TriMesh_ArrayKernelT&lt;K&gt; &gt;</computeroutput> provides the following types:</para><para><table rows="18" cols="3"><row>
<entry thead="yes"><para>Member </para></entry><entry thead="yes"><para>Value </para></entry><entry thead="yes"><para>Description  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vertex_descriptor</computeroutput> </para></entry><entry thead="no"><para><computeroutput>OpenMesh::TriMesh_ArrayKernelT::VertexHandle</computeroutput> </para></entry><entry thead="no"><para>Identify vertices in the graph. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>edge_descriptor</computeroutput> </para></entry><entry thead="no"><para><computeroutput><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></computeroutput> </para></entry><entry thead="no"><para>Identify edges in the graph. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>halfedge_descriptor</computeroutput> </para></entry><entry thead="no"><para><computeroutput>OpenMesh::TriMesh_ArrayKernelT::HalfedgeHandle</computeroutput> </para></entry><entry thead="no"><para>Identify halfedges in the graph. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>face_descriptor</computeroutput> </para></entry><entry thead="no"><para><computeroutput>OpenMesh::TriMesh_ArrayKernelT::FaceHandle</computeroutput> </para></entry><entry thead="no"><para>Identify faces in the graph. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>adjacency_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></computeroutput> </para></entry><entry thead="no"><para>An iterator to traverse through the vertices adjacent to a vertex. Its value type is <computeroutput>vertex_descriptor</computeroutput>. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>out_edge_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput>CGAL::Out_edge_iterator&lt;OpenMesh::TriMesh_ArrayKernelT&lt;K&gt; &gt;</computeroutput> </para></entry><entry thead="no"><para>An iterator to traverse through the outgoing edges incident to a vertex. Its value type is <computeroutput>edge_descriptor</computeroutput>. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>in_edge_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput>CGAL::In_edge_iterator&lt;OpenMesh::TriMesh_ArrayKernelT&lt;K&gt; &gt;</computeroutput> </para></entry><entry thead="no"><para>An iterator to traverse through the incoming edges incident to a vertex. Its value type is <computeroutput>edge_descriptor</computeroutput>. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vertex_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput>OpenMesh::PolyMesh_ArrayKernelT::VertexIter</computeroutput> </para></entry><entry thead="no"><para>An iterator to traverse through the vertices of the graph. Its value type is <computeroutput>vertex_descriptor</computeroutput>. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>edge_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></computeroutput> </para></entry><entry thead="no"><para>An iterator to traverse through the edges of the graph. Its value type is <computeroutput>edge_descriptor</computeroutput>. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>halfedge_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput>OpenMesh::TriMesh_ArrayKernelT::HalfedgeIter</computeroutput> </para></entry><entry thead="no"><para>An iterator to traverse through the halfedges of the graph. Its value type is <computeroutput>halfedge_descriptor</computeroutput>. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>face_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput>OpenMesh::TriMesh_ArrayKernelT::FaceIter</computeroutput> </para></entry><entry thead="no"><para>An iterator to traverse through the faces of the graph. Its value type is <computeroutput>face_descriptor</computeroutput>. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>directed_category</computeroutput> </para></entry><entry thead="no"><para><computeroutput>boost::undirected_tag</computeroutput> </para></entry><entry thead="no"><para>This graph is not directed. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>edge_parallel_category</computeroutput> </para></entry><entry thead="no"><para><computeroutput>boost::disallow_parallel_edge_tag</computeroutput> </para></entry><entry thead="no"><para>This graph does not support multiedges. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>traversal_category</computeroutput> </para></entry><entry thead="no"><para>Inherits from <computeroutput>boost::bidirectional_graph_tag</computeroutput>, <computeroutput>boost::vertex_list_graph_tag</computeroutput>, and <computeroutput>boost::edge_list_graph_tag</computeroutput> </para></entry><entry thead="no"><para>The ways in which the vertices in the graph can be traversed. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vertices_size_type</computeroutput> </para></entry><entry thead="no"><para><computeroutput>unsigned int</computeroutput> </para></entry><entry thead="no"><para>The size type of the vertex list. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>edges_size_type</computeroutput> </para></entry><entry thead="no"><para><computeroutput>unsigned int</computeroutput> </para></entry><entry thead="no"><para>The size type of the edge list. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>degree_size_type</computeroutput> </para></entry><entry thead="no"><para><computeroutput>unsigned int</computeroutput> </para></entry><entry thead="no"><para>The size type of the adjacency list. </para></entry></row>
</table>
</para></sect1>
<sect1 id="group__PkgBGLTraits_1BGLSeam_meshGT">
<title>Specialization for the Seam_mesh Class</title>
<para>Defined in <computeroutput>&lt;CGAL/boost/graph/graph_traits_Seam_mesh.h&gt;</computeroutput></para><para>We provide partial specialization for the class <computeroutput><ref refid="classCGAL_1_1Seam__mesh" kindref="compound">CGAL::Seam_mesh</ref></computeroutput> so that it is a model of the graph concepts <computeroutput><ref refid="classBidirectionalGraph" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">BidirectionalGraph</ref></computeroutput>, <computeroutput><ref refid="classVertexAndEdgeListGraph" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">VertexAndEdgeListGraph</ref></computeroutput>, <computeroutput><ref refid="classAdjacencyMatrix" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">AdjacencyMatrix</ref></computeroutput>, and <computeroutput><ref refid="classFaceListGraph" kindref="compound">FaceListGraph</ref></computeroutput>.</para><para>The traits class <computeroutput>boost::graph_traits&lt; <ref refid="classCGAL_1_1Seam__mesh" kindref="compound">CGAL::Seam_mesh</ref>&lt;T&gt; &gt;</computeroutput> provides the following types:</para><para><table rows="18" cols="3"><row>
<entry thead="yes"><para>Member </para></entry><entry thead="yes"><para>Value </para></entry><entry thead="yes"><para>Description  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vertex_descriptor</computeroutput> </para></entry><entry thead="no"><para><computeroutput>Seam_mesh::vertex_descriptor</computeroutput> </para></entry><entry thead="no"><para>Identify vertices in the graph. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>edge_descriptor</computeroutput> </para></entry><entry thead="no"><para><computeroutput>Seam_mesh::edge_descriptor</computeroutput> </para></entry><entry thead="no"><para>Identify edges in the graph. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>halfedge_descriptor</computeroutput> </para></entry><entry thead="no"><para><computeroutput>Seam_mesh::halfedge_descriptor</computeroutput> </para></entry><entry thead="no"><para>Identify halfedges in the graph. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>face_descriptor</computeroutput> </para></entry><entry thead="no"><para><computeroutput>Seam_mesh::face_descriptor</computeroutput> </para></entry><entry thead="no"><para>Identify faces in the graph. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>adjacency_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput><ref refid="classCGAL_1_1Vertex__around__target__iterator" kindref="compound">CGAL::Vertex_around_target_iterator</ref>&lt;<ref refid="classCGAL_1_1Seam__mesh" kindref="compound">CGAL::Seam_mesh</ref>&lt;T&gt; &gt;</computeroutput> </para></entry><entry thead="no"><para>An iterator to traverse through the vertices adjacent to a vertex. Its value type is <computeroutput>vertex_descriptor</computeroutput>. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>out_edge_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput>CGAL::Out_edge_iterator&lt;<ref refid="classCGAL_1_1Seam__mesh" kindref="compound">CGAL::Seam_mesh</ref>&lt;T&gt; &gt;</computeroutput> </para></entry><entry thead="no"><para>An iterator to traverse through the outgoing edges incident to a vertex. Its value type is <computeroutput>edge_descriptor</computeroutput>. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>in_edge_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput>CGAL::In_edge_iterator&lt;<ref refid="classCGAL_1_1Seam__mesh" kindref="compound">CGAL::Seam_mesh</ref>&lt;T&gt; &gt;</computeroutput> </para></entry><entry thead="no"><para>An iterator to traverse through the incoming edges incident to a vertex. Its value type is <computeroutput>edge_descriptor</computeroutput>. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vertex_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput>Seam_mesh::vertex_iterator</computeroutput> </para></entry><entry thead="no"><para>An iterator to traverse through the vertices of the graph. Its value type is <computeroutput>vertex_descriptor</computeroutput>. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>edge_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput>Seam_mesh::edge_iterator</computeroutput> </para></entry><entry thead="no"><para>An iterator to traverse through the edges of the graph. Its value type is <computeroutput>edge_descriptor</computeroutput>. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>halfedge_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput>Seam_mesh::halfedge_iterator</computeroutput> </para></entry><entry thead="no"><para>An iterator to traverse through the halfedges of the graph. Its value type is <computeroutput>halfedge_descriptor</computeroutput>. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>face_iterator</computeroutput> </para></entry><entry thead="no"><para><computeroutput>Seam_mesh::face_iterator</computeroutput> </para></entry><entry thead="no"><para>An iterator to traverse through the faces of the graph. Its value type is <computeroutput>face_descriptor</computeroutput>. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>directed_category</computeroutput> </para></entry><entry thead="no"><para><computeroutput>boost::undirected_tag</computeroutput> </para></entry><entry thead="no"><para>This graph is not directed. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>edge_parallel_category</computeroutput> </para></entry><entry thead="no"><para><computeroutput>boost::disallow_parallel_edge_tag</computeroutput> </para></entry><entry thead="no"><para>This graph does not support multiedges. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>traversal_category</computeroutput> </para></entry><entry thead="no"><para>Inherits from <computeroutput>boost::bidirectional_graph_tag</computeroutput>, <computeroutput>boost::vertex_list_graph_tag</computeroutput>, and <computeroutput>boost::edge_list_graph_tag</computeroutput> </para></entry><entry thead="no"><para>The ways in which the vertices in the graph can be traversed. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vertices_size_type</computeroutput> </para></entry><entry thead="no"><para><computeroutput>Seam_mesh::vertices_size_type</computeroutput> </para></entry><entry thead="no"><para>The size type of the vertex list. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>edges_size_type</computeroutput> </para></entry><entry thead="no"><para><computeroutput>Seam_mesh::edges_size_type</computeroutput> </para></entry><entry thead="no"><para>The size type of the edge list. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>degree_size_type</computeroutput> </para></entry><entry thead="no"><para><computeroutput>Seam_mesh::degree_size_type</computeroutput> </para></entry><entry thead="no"><para>The size type of the adjacency list. </para></entry></row>
</table>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
