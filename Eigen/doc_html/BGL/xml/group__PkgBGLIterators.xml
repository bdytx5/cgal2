<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__PkgBGLIterators" kind="group">
    <compoundname>PkgBGLIterators</compoundname>
    <title>Iterators and Circulators</title>
    <innerclass refid="classCGAL_1_1Halfedge__around__source__iterator" prot="public">CGAL::Halfedge_around_source_iterator</innerclass>
    <innerclass refid="classCGAL_1_1Halfedge__around__target__iterator" prot="public">CGAL::Halfedge_around_target_iterator</innerclass>
    <innerclass refid="classCGAL_1_1Halfedge__around__face__iterator" prot="public">CGAL::Halfedge_around_face_iterator</innerclass>
    <innerclass refid="classCGAL_1_1Halfedge__around__source__circulator" prot="public">CGAL::Halfedge_around_source_circulator</innerclass>
    <innerclass refid="classCGAL_1_1Face__around__target__circulator" prot="public">CGAL::Face_around_target_circulator</innerclass>
    <innerclass refid="classCGAL_1_1Halfedge__around__target__circulator" prot="public">CGAL::Halfedge_around_target_circulator</innerclass>
    <innerclass refid="classCGAL_1_1Halfedge__around__face__circulator" prot="public">CGAL::Halfedge_around_face_circulator</innerclass>
    <innerclass refid="classCGAL_1_1Face__around__face__iterator" prot="public">CGAL::Face_around_face_iterator</innerclass>
    <innerclass refid="classCGAL_1_1Face__around__face__circulator" prot="public">CGAL::Face_around_face_circulator</innerclass>
    <innerclass refid="classCGAL_1_1Face__around__target__iterator" prot="public">CGAL::Face_around_target_iterator</innerclass>
    <innerclass refid="classCGAL_1_1Vertex__around__face__iterator" prot="public">CGAL::Vertex_around_face_iterator</innerclass>
    <innerclass refid="classCGAL_1_1Vertex__around__target__circulator" prot="public">CGAL::Vertex_around_target_circulator</innerclass>
    <innerclass refid="classCGAL_1_1Vertex__around__target__iterator" prot="public">CGAL::Vertex_around_target_iterator</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgBGLIterators_1gae1d90234861673d1457922d276b4282b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Graph</type>
          </param>
        </templateparamlist>
        <type>Iterator_range&lt; Halfedge_around_source_iterator&lt; Graph &gt; &gt;</type>
        <definition>Iterator_range&lt;Halfedge_around_source_iterator&lt;Graph&gt; &gt; CGAL::halfedges_around_source</definition>
        <argsstring>(typename boost::graph_traits&lt; Graph &gt;::halfedge_descriptor h, const Graph &amp;g)</argsstring>
        <name>halfedges_around_source</name>
        <param>
          <type>typename boost::graph_traits&lt; Graph &gt;::halfedge_descriptor</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const Graph &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns an iterator range over all halfedges with vertex <computeroutput>source(h,g)</computeroutput> as source. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/iterator.h" line="824" column="1" bodyfile="CGAL/boost/graph/iterator.h" bodystart="824" bodyend="828"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLIterators_1gac257da1842bab20293c1db108cda75e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Graph</type>
          </param>
        </templateparamlist>
        <type>Iterator_range&lt; Halfedge_around_source_iterator&lt; Graph &gt; &gt;</type>
        <definition>Iterator_range&lt;Halfedge_around_source_iterator&lt;Graph&gt; &gt; CGAL::halfedges_around_source</definition>
        <argsstring>(typename boost::graph_traits&lt; Graph &gt;::vertex_descriptor v, const Graph &amp;g)</argsstring>
        <name>halfedges_around_source</name>
        <param>
          <type>typename boost::graph_traits&lt; Graph &gt;::vertex_descriptor</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const Graph &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns an iterator range over all halfedges with vertex <computeroutput>v</computeroutput> as source. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/iterator.h" line="836" column="1" bodyfile="CGAL/boost/graph/iterator.h" bodystart="836" bodyend="839"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLIterators_1ga2be4fd4d24b1e48e00a92f90f0f2923c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Graph</type>
          </param>
        </templateparamlist>
        <type>Iterator_range&lt; Halfedge_around_target_iterator&lt; Graph &gt; &gt;</type>
        <definition>Iterator_range&lt;Halfedge_around_target_iterator&lt;Graph&gt; &gt; CGAL::halfedges_around_target</definition>
        <argsstring>(typename boost::graph_traits&lt; Graph &gt;::halfedge_descriptor h, const Graph &amp;g)</argsstring>
        <name>halfedges_around_target</name>
        <param>
          <type>typename boost::graph_traits&lt; Graph &gt;::halfedge_descriptor</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const Graph &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns an iterator range over all halfedges with vertex <computeroutput>target(h,g)</computeroutput> as target. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/iterator.h" line="847" column="1" bodyfile="CGAL/boost/graph/iterator.h" bodystart="847" bodyend="851"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLIterators_1gad73c04db7b6ce124c7855652c5940641" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Graph</type>
          </param>
        </templateparamlist>
        <type>Iterator_range&lt; Halfedge_around_target_iterator&lt; Graph &gt; &gt;</type>
        <definition>Iterator_range&lt;Halfedge_around_target_iterator&lt;Graph&gt; &gt; CGAL::halfedges_around_target</definition>
        <argsstring>(typename boost::graph_traits&lt; Graph &gt;::vertex_descriptor v, const Graph &amp;g)</argsstring>
        <name>halfedges_around_target</name>
        <param>
          <type>typename boost::graph_traits&lt; Graph &gt;::vertex_descriptor</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const Graph &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns an iterator range over all halfedges with vertex <computeroutput>v</computeroutput> as target. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/iterator.h" line="859" column="1" bodyfile="CGAL/boost/graph/iterator.h" bodystart="859" bodyend="862"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLIterators_1ga37229df31508a78eb4acdaf907e637e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Graph</type>
          </param>
        </templateparamlist>
        <type>Iterator_range&lt; Halfedge_around_face_iterator&lt; Graph &gt; &gt;</type>
        <definition>Iterator_range&lt;Halfedge_around_face_iterator&lt;Graph&gt; &gt; CGAL::halfedges_around_face</definition>
        <argsstring>(typename boost::graph_traits&lt; Graph &gt;::halfedge_descriptor h, const Graph &amp;g)</argsstring>
        <name>halfedges_around_face</name>
        <param>
          <type>typename boost::graph_traits&lt; Graph &gt;::halfedge_descriptor</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const Graph &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns an iterator range over all halfedges incident to the same face or border as <computeroutput>h</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/iterator.h" line="870" column="1" bodyfile="CGAL/boost/graph/iterator.h" bodystart="870" bodyend="874"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLIterators_1ga603c8a5526457b2bf54addacc52943a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Graph</type>
          </param>
        </templateparamlist>
        <type>Iterator_range&lt; Face_around_target_iterator&lt; Graph &gt; &gt;</type>
        <definition>Iterator_range&lt;Face_around_target_iterator&lt;Graph&gt; &gt; CGAL::faces_around_target</definition>
        <argsstring>(typename boost::graph_traits&lt; Graph &gt;::halfedge_descriptor h, const Graph &amp;g)</argsstring>
        <name>faces_around_target</name>
        <param>
          <type>typename boost::graph_traits&lt; Graph &gt;::halfedge_descriptor</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const Graph &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns an iterator range over all faces around vertex <computeroutput>target(h,g)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/iterator.h" line="974" column="1" bodyfile="CGAL/boost/graph/iterator.h" bodystart="974" bodyend="978"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLIterators_1ga5a12f39e74a0667374570d61b859bfb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Graph</type>
          </param>
        </templateparamlist>
        <type>Iterator_range&lt; Face_around_face_iterator&lt; Graph &gt; &gt;</type>
        <definition>Iterator_range&lt;Face_around_face_iterator&lt;Graph&gt; &gt; CGAL::faces_around_face</definition>
        <argsstring>(typename boost::graph_traits&lt; Graph &gt;::halfedge_descriptor h, const Graph &amp;g)</argsstring>
        <name>faces_around_face</name>
        <param>
          <type>typename boost::graph_traits&lt; Graph &gt;::halfedge_descriptor</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const Graph &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns an iterator range over all edge-adjacent faces to the same face <computeroutput>face(h,g)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/iterator.h" line="986" column="1" bodyfile="CGAL/boost/graph/iterator.h" bodystart="986" bodyend="990"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLIterators_1gab494736881fb051038dc55e4b49b580a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Graph</type>
          </param>
        </templateparamlist>
        <type>Iterator_range&lt; Vertex_around_target_iterator&lt; Graph &gt; &gt;</type>
        <definition>Iterator_range&lt;Vertex_around_target_iterator&lt;Graph&gt; &gt; CGAL::vertices_around_target</definition>
        <argsstring>(typename boost::graph_traits&lt; Graph &gt;::halfedge_descriptor h, const Graph &amp;g)</argsstring>
        <name>vertices_around_target</name>
        <param>
          <type>typename boost::graph_traits&lt; Graph &gt;::halfedge_descriptor</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const Graph &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns an iterator range over all vertices adjacent to the vertex <computeroutput>target(h,g)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/iterator.h" line="1303" column="1" bodyfile="CGAL/boost/graph/iterator.h" bodystart="1303" bodyend="1307"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLIterators_1ga7746cb7b28520877375dfff6ec7bd32c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Graph</type>
          </param>
        </templateparamlist>
        <type>Iterator_range&lt; Vertex_around_face_iterator&lt; Graph &gt; &gt;</type>
        <definition>Iterator_range&lt;Vertex_around_face_iterator&lt;Graph&gt; &gt; CGAL::vertices_around_face</definition>
        <argsstring>(typename boost::graph_traits&lt; Graph &gt;::halfedge_descriptor h, const Graph &amp;g)</argsstring>
        <name>vertices_around_face</name>
        <param>
          <type>typename boost::graph_traits&lt; Graph &gt;::halfedge_descriptor</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const Graph &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns an iterator range over all vertices adjacent to the face <computeroutput>face(h,g)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/iterator.h" line="1322" column="1" bodyfile="CGAL/boost/graph/iterator.h" bodystart="1322" bodyend="1326"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Several iterators and circulators are provided that enable, for example, to iterate through the halfedges incident to a given face or vertex. </para>    </briefdescription>
    <detaileddescription>
<para>Starting at a halfedge <computeroutput>h</computeroutput>, applying several times <computeroutput>next(h,g)</computeroutput> brings us back to the halfedge where we started. All halfedges traversed on the way are incident to the same face. Using the composition of the <computeroutput>next(h,g)</computeroutput> and <computeroutput>opposite(h,g)</computeroutput> functions results in another cycle, namely the cycle of halfedges which are incident to the same vertex. For convenience, two iterator and circulator types enable iterating through all the halfedges incident to a given face, and all the halfedges having a given vertex as target.</para><para>All functions are in the header file <computeroutput>&lt;CGAL/boost/graph/iterator.h&gt;</computeroutput> </para>    </detaileddescription>
  </compounddef>
</doxygen>
