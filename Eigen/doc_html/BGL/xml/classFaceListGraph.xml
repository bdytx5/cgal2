<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classFaceListGraph" kind="class" language="C++" prot="public">
    <compoundname>FaceListGraph</compoundname>
    <includes local="no">Concepts/FaceListGraph.h</includes>
      <sectiondef kind="related">
      <memberdef kind="function" id="classFaceListGraph_1aa41f33712acf4d99ee07b3bcad5a43c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classFaceListGraph" kindref="compound">FaceListGraph</ref></type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; boost::graph_traits&lt; <ref refid="classFaceListGraph" kindref="compound">FaceListGraph</ref> &gt;::face_iterator, boost::graph_traits&lt; <ref refid="classFaceListGraph" kindref="compound">FaceListGraph</ref> &gt;::face_iterator &gt;</type>
        <definition>std::pair&lt; boost::graph_traits&lt; FaceListGraph &gt;::face_iterator, boost::graph_traits&lt; FaceListGraph &gt;::face_iterator &gt; faces</definition>
        <argsstring>(const FaceListGraph &amp;g)</argsstring>
        <name>faces</name>
        <param>
          <type>const <ref refid="classFaceListGraph" kindref="compound">FaceListGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns an iterator range over all faces. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/FaceListGraph.h" line="32" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classFaceListGraph_1ae3691e005c7de885c421251b4b713747" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classFaceListGraph" kindref="compound">FaceListGraph</ref></type>
          </param>
        </templateparamlist>
        <type>boost::graph_traits&lt; <ref refid="classFaceListGraph" kindref="compound">FaceListGraph</ref> &gt;::face_size_type</type>
        <definition>boost::graph_traits&lt; FaceListGraph &gt;::face_size_type num_faces</definition>
        <argsstring>(const FaceListGraph &amp;g)</argsstring>
        <name>num_faces</name>
        <param>
          <type>const <ref refid="classFaceListGraph" kindref="compound">FaceListGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns an upper bound of the number of faces of the graph. <simplesect kind="attention"><para><computeroutput><ref refid="classFaceListGraph_1ae3691e005c7de885c421251b4b713747" kindref="member">num_faces()</ref></computeroutput> may return a number larger than <computeroutput>std::distance(faces(g).first, faces(g).second)</computeroutput>. This is the case for implementations only marking faces deleted in the face container. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/FaceListGraph.h" line="42" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The concept <computeroutput><ref refid="classFaceListGraph" kindref="compound">FaceListGraph</ref></computeroutput> refines the concept <computeroutput><ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></computeroutput> and adds the requirement for traversal of all faces in a graph. </para>    </briefdescription>
    <detaileddescription>
<para> <variablelist>
<varlistentry><term>Associated Types</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para>boost::graph_traits&lt;FaceListGraph&gt;::face_iterator</para></entry><entry thead="no"><para>A face iterator (obtained via <computeroutput>faces(g)</computeroutput>) provides access to all of the faces in a graph. A face iterator type must meet the requirements of <computeroutput>MultiPassInputIterator</computeroutput>. The value type of the face iterator must be the same as the face descriptor of the graph. </para><para></para></entry></row>
</table>
</para></listitem>
</variablelist>
</para><para><xrefsect id="refines_1_refines000003"><xreftitle>Refines</xreftitle><xrefdescription><para><computeroutput><ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></computeroutput></para></xrefdescription></xrefsect></para><para><xrefsect id="hasModels_1_hasModels000003"><xreftitle>Has Models</xreftitle><xrefdescription><para>See <ref refid="group__PkgBGLTraits" kindref="compound">Boost Graph Traits Specializations </ref></para></xrefdescription></xrefsect></para><para><simplesect kind="see"><para><ref refid="group__PkgBGLConcepts" kindref="compound">Graph Concepts </ref> </para></simplesect>
</para>    </detaileddescription>
    <location file="Concepts/FaceListGraph.h" line="23" column="1" bodyfile="Concepts/FaceListGraph.h" bodystart="23" bodyend="23"/>
    <listofallmembers>
      <member refid="classFaceListGraph_1aa41f33712acf4d99ee07b3bcad5a43c3" prot="public" virt="non-virtual"><scope>FaceListGraph</scope><name>faces</name></member>
      <member refid="classFaceListGraph_1ae3691e005c7de885c421251b4b713747" prot="public" virt="non-virtual"><scope>FaceListGraph</scope><name>num_faces</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
