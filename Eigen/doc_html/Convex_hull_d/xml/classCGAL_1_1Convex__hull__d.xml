<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Convex__hull__d" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Convex_hull_d</compoundname>
    <includes local="no">CGAL/Convex_hull_d.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>R</declname>
        <defname>R</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <description><para>Note that each iterator fits the <computeroutput><ref refid="classHandle" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circulator.tag">Handle</ref></computeroutput> concept, i.e. iterators can be used as handles.</para><para>Note also that all iterator and handle types come also in a const flavor, e.g., <computeroutput>Vertex_const_iterator</computeroutput> is the constant version of <computeroutput>Vertex_iterator</computeroutput>. Const correctness requires to use the const version whenever the convex hull object is referenced as constant. The <computeroutput>Hull_vertex_iterator</computeroutput> is convertible to <computeroutput>Vertex_iterator</computeroutput> and <computeroutput>Vertex_handle</computeroutput>. </para></description>
      <memberdef kind="typedef" id="classCGAL_1_1Convex__hull__d_1afc2f767cef8142f3147f33b09912bcf9" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Convex_hull_d&lt; R &gt;::R</definition>
        <argsstring></argsstring>
        <name>R</name>
        <briefdescription>
<para>the representation class. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="106" column="1" bodyfile="CGAL/Convex_hull_d.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Convex__hull__d_1aa3c47872ae5aa3fa0221564b6ea0178a" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Convex_hull_d&lt; R &gt;::Point_d</definition>
        <argsstring></argsstring>
        <name>Point_d</name>
        <briefdescription>
<para>the point type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="111" column="1" bodyfile="CGAL/Convex_hull_d.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Convex__hull__d_1ae72ac9e247020c16a2cd69dc9187bab6" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Convex_hull_d&lt; R &gt;::Hyperplane_d</definition>
        <argsstring></argsstring>
        <name>Hyperplane_d</name>
        <briefdescription>
<para>the hyperplane type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="116" column="1" bodyfile="CGAL/Convex_hull_d.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Convex__hull__d_1a0b0ba14e7dfb71e1aec4a2cc8d521150" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Convex_hull_d&lt; R &gt;::Simplex_handle</definition>
        <argsstring></argsstring>
        <name>Simplex_handle</name>
        <briefdescription>
<para>handle for simplices. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="121" column="1" bodyfile="CGAL/Convex_hull_d.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Convex__hull__d_1ab5824a63825a2d3c927da67331437fdc" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Convex_hull_d&lt; R &gt;::Facet_handle</definition>
        <argsstring></argsstring>
        <name>Facet_handle</name>
        <briefdescription>
<para>handle for facets. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="126" column="1" bodyfile="CGAL/Convex_hull_d.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Convex__hull__d_1a35d50528234678fd96ea1df05a8e469e" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Convex_hull_d&lt; R &gt;::Vertex_handle</definition>
        <argsstring></argsstring>
        <name>Vertex_handle</name>
        <briefdescription>
<para>handle for vertices. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="131" column="1" bodyfile="CGAL/Convex_hull_d.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Convex__hull__d_1a910bf97da0fa85f01ad4deb1f993c02f" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Convex_hull_d&lt; R &gt;::Simplex_iterator</definition>
        <argsstring></argsstring>
        <name>Simplex_iterator</name>
        <briefdescription>
<para>iterator for simplices. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="136" column="1" bodyfile="CGAL/Convex_hull_d.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Convex__hull__d_1a208bf25f55de43b6c615df408344541f" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Convex_hull_d&lt; R &gt;::Facet_iterator</definition>
        <argsstring></argsstring>
        <name>Facet_iterator</name>
        <briefdescription>
<para>iterator for facets. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="141" column="1" bodyfile="CGAL/Convex_hull_d.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Convex__hull__d_1a30c09ed4edcb96351d127488628bde60" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Convex_hull_d&lt; R &gt;::Vertex_iterator</definition>
        <argsstring></argsstring>
        <name>Vertex_iterator</name>
        <briefdescription>
<para>iterator for vertices. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="146" column="1" bodyfile="CGAL/Convex_hull_d.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Convex__hull__d_1a8a80ec067b0dd4fa61038e0da5d9a1ea" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Convex_hull_d&lt; R &gt;::Hull_vertex_iterator</definition>
        <argsstring></argsstring>
        <name>Hull_vertex_iterator</name>
        <briefdescription>
<para>iterator for vertices that are part of the convex hull. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="152" column="1" bodyfile="CGAL/Convex_hull_d.h" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Convex__hull__d_1af67ff363f660e17f1b3f7d9ad868d058" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Convex_hull_d&lt; R &gt;::Point_const_iterator</definition>
        <argsstring></argsstring>
        <name>Point_const_iterator</name>
        <briefdescription>
<para>const iterator for all inserted points. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="158" column="1" bodyfile="CGAL/Convex_hull_d.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Convex__hull__d_1af3a391809dffdfac5a43dfa6e1a55558" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Convex_hull_d&lt; R &gt;::Hull_point_const_iterator</definition>
        <argsstring></argsstring>
        <name>Hull_point_const_iterator</name>
        <briefdescription>
<para>const iterator for all points that are part of the convex hull. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="164" column="1" bodyfile="CGAL/Convex_hull_d.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <description><para>The data type <computeroutput><ref refid="classCGAL_1_1Convex__hull__d" kindref="compound">Convex_hull_d</ref></computeroutput> offers neither copy constructor nor assignment operator. </para></description>
      <memberdef kind="function" id="classCGAL_1_1Convex__hull__d_1a9cf97c124cbf52bab38257eab95252e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Convex_hull_d&lt; R &gt;::Convex_hull_d</definition>
        <argsstring>(int d, R Kernel=R())</argsstring>
        <name>Convex_hull_d</name>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Convex__hull__d_1afc2f767cef8142f3147f33b09912bcf9" kindref="member">R</ref></type>
          <declname>Kernel</declname>
          <defval><ref refid="classCGAL_1_1Convex__hull__d_1afc2f767cef8142f3147f33b09912bcf9" kindref="member">R</ref>()</defval>
        </param>
        <briefdescription>
<para>creates an instance <computeroutput>C</computeroutput> of type <computeroutput><ref refid="classCGAL_1_1Convex__hull__d" kindref="compound">Convex_hull_d</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The dimension of the underlying space is <formula id="0">$ d$</formula> and <computeroutput>S</computeroutput> is initialized to the empty point set. The traits class <computeroutput>R</computeroutput> specifies the models of all types and the implementations of all geometric primitives used by the convex hull class. The default model is one of the <formula id="0">$ d$</formula>-dimensional representation classes (e.g., <computeroutput><ref refid="classCGAL_1_1Homogeneous__d" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">Homogeneous_d</ref></computeroutput>). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="164" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <description><para>All operations below that take a point <computeroutput>x</computeroutput> as argument have the common precondition that <computeroutput>x</computeroutput> is a point of ambient space. </para></description>
      <memberdef kind="function" id="classCGAL_1_1Convex__hull__d_1ac887cbe7f1c174ff316d8a7790cc9b92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CGAL::Convex_hull_d&lt; R &gt;::dimension</definition>
        <argsstring>()</argsstring>
        <name>dimension</name>
        <briefdescription>
<para>returns the dimension of ambient space. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="193" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Convex__hull__d_1a6b0a9995b1f96f255a50ed17ac8c8dfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CGAL::Convex_hull_d&lt; R &gt;::current_dimension</definition>
        <argsstring>()</argsstring>
        <name>current_dimension</name>
        <briefdescription>
<para>returns the affine dimension <computeroutput>dcur</computeroutput> of <formula id="25">$ S$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="198" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Convex__hull__d_1a5a1ce59b60fe03fa3f1684b5d4739c7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Convex__hull__d_1aa3c47872ae5aa3fa0221564b6ea0178a" kindref="member">Point_d</ref></type>
        <definition>Point_d CGAL::Convex_hull_d&lt; R &gt;::associated_point</definition>
        <argsstring>(Vertex_handle v)</argsstring>
        <name>associated_point</name>
        <param>
          <type><ref refid="classCGAL_1_1Convex__hull__d_1a35d50528234678fd96ea1df05a8e469e" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns the point associated with vertex <formula id="4">$ v$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="203" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Convex__hull__d_1ae460fd7a36215b9b5f79f12d651f39a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Convex__hull__d_1a35d50528234678fd96ea1df05a8e469e" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Convex_hull_d&lt; R &gt;::vertex_of_simplex</definition>
        <argsstring>(Simplex_handle s, int i)</argsstring>
        <name>vertex_of_simplex</name>
        <param>
          <type><ref refid="classCGAL_1_1Convex__hull__d_1a0b0ba14e7dfb71e1aec4a2cc8d521150" kindref="member">Simplex_handle</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>returns the vertex corresponding to the <formula id="26">$ i$</formula>-th vertex of <formula id="7">$ s$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><formula id="27">$ 0 \leq i \leq dcur$</formula>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="210" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Convex__hull__d_1a36dea30c424d776a1efa800d58f3b687" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Convex__hull__d_1aa3c47872ae5aa3fa0221564b6ea0178a" kindref="member">Point_d</ref></type>
        <definition>Point_d CGAL::Convex_hull_d&lt; R &gt;::point_of_simplex</definition>
        <argsstring>(Simplex_handle s, int i)</argsstring>
        <name>point_of_simplex</name>
        <param>
          <type><ref refid="classCGAL_1_1Convex__hull__d_1a0b0ba14e7dfb71e1aec4a2cc8d521150" kindref="member">Simplex_handle</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>same as <computeroutput>C.associated_point(C.vertex_of_simplex(s,i))</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="217" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Convex__hull__d_1a5cf16f1531a13ef1dfcda895acdd7395" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Convex__hull__d_1a0b0ba14e7dfb71e1aec4a2cc8d521150" kindref="member">Simplex_handle</ref></type>
        <definition>Simplex_handle CGAL::Convex_hull_d&lt; R &gt;::opposite_simplex</definition>
        <argsstring>(Simplex_handle s, int i)</argsstring>
        <name>opposite_simplex</name>
        <param>
          <type><ref refid="classCGAL_1_1Convex__hull__d_1a0b0ba14e7dfb71e1aec4a2cc8d521150" kindref="member">Simplex_handle</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>returns the simplex opposite to the <formula id="26">$ i$</formula>-th vertex of <formula id="7">$ s$</formula> (<computeroutput><ref refid="classCGAL_1_1Convex__hull__d_1a0b0ba14e7dfb71e1aec4a2cc8d521150" kindref="member">Simplex_handle()</ref></computeroutput> if there is no such simplex). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><formula id="27">$ 0 \leq i \leq dcur$</formula>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="223" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Convex__hull__d_1a9fb48cd3315932aa8524f19418324cd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CGAL::Convex_hull_d&lt; R &gt;::index_of_vertex_in_opposite_simplex</definition>
        <argsstring>(Simplex_handle s, int i)</argsstring>
        <name>index_of_vertex_in_opposite_simplex</name>
        <param>
          <type><ref refid="classCGAL_1_1Convex__hull__d_1a0b0ba14e7dfb71e1aec4a2cc8d521150" kindref="member">Simplex_handle</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>returns the index of the vertex opposite to the <formula id="26">$ i$</formula>-th vertex of <formula id="7">$ s$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><formula id="27">$ 0 \leq i \leq dcur$</formula> and there is a simplex opposite to the <formula id="26">$ i$</formula>-th vertex of <formula id="7">$ s$</formula>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="230" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Convex__hull__d_1a7bdf3c38c5472fa0a8c585dbdb36385c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Convex__hull__d_1a0b0ba14e7dfb71e1aec4a2cc8d521150" kindref="member">Simplex_handle</ref></type>
        <definition>Simplex_handle CGAL::Convex_hull_d&lt; R &gt;::simplex</definition>
        <argsstring>(Vertex_handle v)</argsstring>
        <name>simplex</name>
        <param>
          <type><ref refid="classCGAL_1_1Convex__hull__d_1a35d50528234678fd96ea1df05a8e469e" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns a simplex of which <formula id="4">$ v$</formula> is a node. </para>        </briefdescription>
        <detaileddescription>
<para>Note that this simplex is not unique. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="237" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Convex__hull__d_1a082c0d143a27894135c8d0d186c804a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CGAL::Convex_hull_d&lt; R &gt;::index</definition>
        <argsstring>(Vertex_handle v)</argsstring>
        <name>index</name>
        <param>
          <type><ref refid="classCGAL_1_1Convex__hull__d_1a35d50528234678fd96ea1df05a8e469e" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns the index of <formula id="4">$ v$</formula> in <computeroutput>simplex(v)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="243" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Convex__hull__d_1ac6e6a4c16b06d65f01a38adc58574e6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Convex__hull__d_1a35d50528234678fd96ea1df05a8e469e" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Convex_hull_d&lt; R &gt;::vertex_of_facet</definition>
        <argsstring>(Facet_handle f, int i)</argsstring>
        <name>vertex_of_facet</name>
        <param>
          <type><ref refid="classCGAL_1_1Convex__hull__d_1ab5824a63825a2d3c927da67331437fdc" kindref="member">Facet_handle</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>returns the vertex corresponding to the <formula id="26">$ i$</formula>-th vertex of <formula id="9">$ f$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><formula id="28">$ 0 \leq i &lt; dcur$</formula>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="249" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Convex__hull__d_1af0ee46542ee5d9bd175695de7b9c7883" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Convex__hull__d_1aa3c47872ae5aa3fa0221564b6ea0178a" kindref="member">Point_d</ref></type>
        <definition>Point_d CGAL::Convex_hull_d&lt; R &gt;::point_of_facet</definition>
        <argsstring>(Facet_handle f, int i)</argsstring>
        <name>point_of_facet</name>
        <param>
          <type><ref refid="classCGAL_1_1Convex__hull__d_1ab5824a63825a2d3c927da67331437fdc" kindref="member">Facet_handle</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>same as <computeroutput>C.associated_point(C.vertex_of_facet(f,i))</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="256" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Convex__hull__d_1a6b33b7a8463e1faa44bf4c588b9a07c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Convex__hull__d_1ab5824a63825a2d3c927da67331437fdc" kindref="member">Facet_handle</ref></type>
        <definition>Facet_handle CGAL::Convex_hull_d&lt; R &gt;::opposite_facet</definition>
        <argsstring>(Facet_handle f, int i)</argsstring>
        <name>opposite_facet</name>
        <param>
          <type><ref refid="classCGAL_1_1Convex__hull__d_1ab5824a63825a2d3c927da67331437fdc" kindref="member">Facet_handle</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>returns the facet opposite to the <formula id="26">$ i$</formula>-th vertex of <formula id="9">$ f$</formula> (<computeroutput><ref refid="classCGAL_1_1Convex__hull__d_1ab5824a63825a2d3c927da67331437fdc" kindref="member">Facet_handle()</ref></computeroutput> if there is no such facet). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><formula id="28">$ 0 \leq i &lt; dcur$</formula> and <computeroutput>dcur &gt; 1</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="262" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Convex__hull__d_1a7e22f117e7f2b5b14bc0d80bbbbff052" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CGAL::Convex_hull_d&lt; R &gt;::index_of_vertex_in_opposite_facet</definition>
        <argsstring>(Facet_handle f, int i)</argsstring>
        <name>index_of_vertex_in_opposite_facet</name>
        <param>
          <type><ref refid="classCGAL_1_1Convex__hull__d_1ab5824a63825a2d3c927da67331437fdc" kindref="member">Facet_handle</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>returns the index of the vertex opposite to the <formula id="26">$ i$</formula>-th vertex of <formula id="9">$ f$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><formula id="28">$ 0 \leq i &lt; dcur$</formula> and <computeroutput>dcur &gt; 1</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="269" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Convex__hull__d_1a7e116aba96e2a309271175cc929e2790" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Convex__hull__d_1ae72ac9e247020c16a2cd69dc9187bab6" kindref="member">Hyperplane_d</ref></type>
        <definition>Hyperplane_d CGAL::Convex_hull_d&lt; R &gt;::hyperplane_supporting</definition>
        <argsstring>(Facet_handle f)</argsstring>
        <name>hyperplane_supporting</name>
        <param>
          <type><ref refid="classCGAL_1_1Convex__hull__d_1ab5824a63825a2d3c927da67331437fdc" kindref="member">Facet_handle</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>returns a hyperplane supporting facet <computeroutput>f</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The hyperplane is oriented such that the interior of <computeroutput>C</computeroutput> is on the negative side of it. <simplesect kind="pre"><para><computeroutput>f</computeroutput> is a facet of <computeroutput>C</computeroutput> and <computeroutput>dcur &gt; 1</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="276" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Convex__hull__d_1a91ebcfb4c864ad780f9ab3e2c70566ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Convex__hull__d_1a35d50528234678fd96ea1df05a8e469e" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Convex_hull_d&lt; R &gt;::insert</definition>
        <argsstring>(const Point_d &amp;x)</argsstring>
        <name>insert</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Convex__hull__d_1aa3c47872ae5aa3fa0221564b6ea0178a" kindref="member">Point_d</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>adds point <computeroutput>x</computeroutput> to the underlying set of points. </para>        </briefdescription>
        <detaileddescription>
<para>If <formula id="14">$ x$</formula> is equal to (the point associated with) a vertex of the current hull this vertex is returned and its associated point is changed to <formula id="14">$ x$</formula>. If <formula id="14">$ x$</formula> lies outside the current hull, a new vertex <computeroutput>v</computeroutput> with associated point <formula id="14">$ x$</formula> is added to the hull and returned. In all other cases, i.e., if <formula id="14">$ x$</formula> lies in the interior of the hull or on the boundary but not on a vertex, the current hull is not changed and <computeroutput><ref refid="classCGAL_1_1Convex__hull__d_1a35d50528234678fd96ea1df05a8e469e" kindref="member">Vertex_handle()</ref></computeroutput> is returned. If <computeroutput>CGAL_CHECK_EXPENSIVE</computeroutput> is defined then the validity check <computeroutput>is_valid(true)</computeroutput> is executed as a post condition. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="290" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Convex__hull__d_1ac269e134b31c5b7c812a1742b7805db3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Forward_iterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Convex_hull_d&lt; R &gt;::insert</definition>
        <argsstring>(Forward_iterator first, Forward_iterator last)</argsstring>
        <name>insert</name>
        <param>
          <type>Forward_iterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>Forward_iterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>adds <computeroutput>S = set [first,last)</computeroutput> to the underlying set of points. </para>        </briefdescription>
        <detaileddescription>
<para>If any point <computeroutput>S[i]</computeroutput> is equal to (the point associated with) a vertex of the current hull its associated point is changed to <computeroutput>S[i]</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="299" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Convex__hull__d_1acfef07e66e4835e3ec47224d622f7285" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Convex_hull_d&lt; R &gt;::is_dimension_jump</definition>
        <argsstring>(const Point_d &amp;x)</argsstring>
        <name>is_dimension_jump</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Convex__hull__d_1aa3c47872ae5aa3fa0221564b6ea0178a" kindref="member">Point_d</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>returns true if <formula id="14">$ x$</formula> is not contained in the affine hull of <computeroutput>S</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="305" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Convex__hull__d_1ad315ca5f623ae8a5b4d16b665f4ea7c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::list&lt; <ref refid="classCGAL_1_1Convex__hull__d_1ab5824a63825a2d3c927da67331437fdc" kindref="member">Facet_handle</ref> &gt;</type>
        <definition>std::list&lt;Facet_handle&gt; CGAL::Convex_hull_d&lt; R &gt;::facets_visible_from</definition>
        <argsstring>(const Point_d &amp;x)</argsstring>
        <name>facets_visible_from</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Convex__hull__d_1aa3c47872ae5aa3fa0221564b6ea0178a" kindref="member">Point_d</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>returns the list of all facets that are visible from <computeroutput>x</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>x</computeroutput> is contained in the affine hull of <computeroutput>S</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="312" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Convex__hull__d_1affa57ae6ec4fd4b91f688d5fb3922a1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1gaf6030e89dadcc1f45369b0cdc5d9e111" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Bounded_side</ref></type>
        <definition>Bounded_side CGAL::Convex_hull_d&lt; R &gt;::bounded_side</definition>
        <argsstring>(const Point_d &amp;x)</argsstring>
        <name>bounded_side</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Convex__hull__d_1aa3c47872ae5aa3fa0221564b6ea0178a" kindref="member">Point_d</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>ON_BOUNDED_SIDE</computeroutput> (<computeroutput>ON_BOUNDARY</computeroutput>,<computeroutput>ON_UNBOUNDED_SIDE</computeroutput>) if <computeroutput>x</computeroutput> is contained in the interior (lies on the boundary, is contained in the exterior) of <computeroutput>C</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>x</computeroutput> is contained in the affine hull of <computeroutput>S</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="321" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Convex__hull__d_1a9dba29e4f927a197be41adb242d4a33d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Convex_hull_d&lt; R &gt;::clear</definition>
        <argsstring>(int d)</argsstring>
        <name>clear</name>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>re-initializes <computeroutput>C</computeroutput> to an empty hull in <formula id="0">$ d$</formula>-dimensional space. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="327" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Convex__hull__d_1af64483a3187d43a0336a2b0b7ea25bb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CGAL::Convex_hull_d&lt; R &gt;::number_of_vertices</definition>
        <argsstring>()</argsstring>
        <name>number_of_vertices</name>
        <briefdescription>
<para>returns the number of vertices of <computeroutput>C</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="333" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Convex__hull__d_1ade0bee6a1db8b07791bf0be45a90834f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CGAL::Convex_hull_d&lt; R &gt;::number_of_facets</definition>
        <argsstring>()</argsstring>
        <name>number_of_facets</name>
        <briefdescription>
<para>returns the number of facets of <computeroutput>C</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="339" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Convex__hull__d_1a6ff9d78d514b86c1b999c4d9b9f91434" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CGAL::Convex_hull_d&lt; R &gt;::number_of_simplices</definition>
        <argsstring>()</argsstring>
        <name>number_of_simplices</name>
        <briefdescription>
<para>returns the number of bounded simplices of <computeroutput>C</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="345" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Convex__hull__d_1afeac624dafdd00950ce926027ec7886a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Convex_hull_d&lt; R &gt;::print_statistics</definition>
        <argsstring>()</argsstring>
        <name>print_statistics</name>
        <briefdescription>
<para>gives information about the size of the current hull and the number of visibility tests performed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="351" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Convex__hull__d_1af73a81800e8d7daf4cae8e96552cefdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Convex_hull_d&lt; R &gt;::is_valid</definition>
        <argsstring>(bool throw_exceptions=false)</argsstring>
        <name>is_valid</name>
        <param>
          <type>bool</type>
          <declname>throw_exceptions</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>checks the validity of the data structure. </para>        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>throw_exceptions == thrue</computeroutput> then the program throws the following exceptions to inform about the problem. <computeroutput>chull_has_center_on_wrong_side_of_hull_facet</computeroutput> the hyperplane supporting a facet has the wrong orientation.</para><para><computeroutput>chull_has_local_non_convexity</computeroutput> a ridge is locally non convex.</para><para><computeroutput>chull_has_double_coverage</computeroutput> the hull has a winding number larger than 1. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="366" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Lists and Iterators</header>
      <memberdef kind="function" id="classCGAL_1_1Convex__hull__d_1ae1b4367940f288092b0064548fde5698" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Convex__hull__d_1a30c09ed4edcb96351d127488628bde60" kindref="member">Vertex_iterator</ref></type>
        <definition>Vertex_iterator CGAL::Convex_hull_d&lt; R &gt;::vertices_begin</definition>
        <argsstring>()</argsstring>
        <name>vertices_begin</name>
        <briefdescription>
<para>an iterator of <computeroutput>C</computeroutput> to start the iteration over all vertices of the complex. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="377" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Convex__hull__d_1a6b8e7096b271216bbe2e088bcdff899e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Convex__hull__d_1a30c09ed4edcb96351d127488628bde60" kindref="member">Vertex_iterator</ref></type>
        <definition>Vertex_iterator CGAL::Convex_hull_d&lt; R &gt;::vertices_end</definition>
        <argsstring>()</argsstring>
        <name>vertices_end</name>
        <briefdescription>
<para>the past the end iterator for vertices. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="383" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Convex__hull__d_1a03c05b8ab6fb2d0a920f78ea650e602f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Convex__hull__d_1a910bf97da0fa85f01ad4deb1f993c02f" kindref="member">Simplex_iterator</ref></type>
        <definition>Simplex_iterator CGAL::Convex_hull_d&lt; R &gt;::simplices_begin</definition>
        <argsstring>()</argsstring>
        <name>simplices_begin</name>
        <briefdescription>
<para>an iterator of <computeroutput>C</computeroutput> to start the iteration over all simplices of the complex. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="389" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Convex__hull__d_1ae89bbba2013f5560a30a3eb4985b01ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Convex__hull__d_1a910bf97da0fa85f01ad4deb1f993c02f" kindref="member">Simplex_iterator</ref></type>
        <definition>Simplex_iterator CGAL::Convex_hull_d&lt; R &gt;::simplices_end</definition>
        <argsstring>()</argsstring>
        <name>simplices_end</name>
        <briefdescription>
<para>the past the end iterator for simplices. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="395" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Convex__hull__d_1a1f48779ef4a169b7750af660e9a562d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Convex__hull__d_1a208bf25f55de43b6c615df408344541f" kindref="member">Facet_iterator</ref></type>
        <definition>Facet_iterator CGAL::Convex_hull_d&lt; R &gt;::facets_begin</definition>
        <argsstring>()</argsstring>
        <name>facets_begin</name>
        <briefdescription>
<para>an iterator of <computeroutput>C</computeroutput> to start the iteration over all facets of the complex. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="401" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Convex__hull__d_1ae3840f7879becd354bfa411dcba8337f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Convex__hull__d_1a208bf25f55de43b6c615df408344541f" kindref="member">Facet_iterator</ref></type>
        <definition>Facet_iterator CGAL::Convex_hull_d&lt; R &gt;::facets_end</definition>
        <argsstring>()</argsstring>
        <name>facets_end</name>
        <briefdescription>
<para>the past the end iterator for facets. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="407" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Convex__hull__d_1ae52601833b4081837c1db6f2b0d5f1c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Convex__hull__d_1a8a80ec067b0dd4fa61038e0da5d9a1ea" kindref="member">Hull_vertex_iterator</ref></type>
        <definition>Hull_vertex_iterator CGAL::Convex_hull_d&lt; R &gt;::hull_vertices_begin</definition>
        <argsstring>()</argsstring>
        <name>hull_vertices_begin</name>
        <briefdescription>
<para>an iterator to start the iteration over all vertices of <computeroutput>C</computeroutput> that are part of the convex hull. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="414" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Convex__hull__d_1a32d0e9c13932301e1b7cc70a8d83ae58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Convex__hull__d_1a8a80ec067b0dd4fa61038e0da5d9a1ea" kindref="member">Hull_vertex_iterator</ref></type>
        <definition>Hull_vertex_iterator CGAL::Convex_hull_d&lt; R &gt;::hull_vertices_end</definition>
        <argsstring>()</argsstring>
        <name>hull_vertices_end</name>
        <briefdescription>
<para>the past the end iterator for hull vertices. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="420" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Convex__hull__d_1a1c13a034585b0bd0556a71cd286d7b40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Convex__hull__d_1af67ff363f660e17f1b3f7d9ad868d058" kindref="member">Point_const_iterator</ref></type>
        <definition>Point_const_iterator CGAL::Convex_hull_d&lt; R &gt;::points_begin</definition>
        <argsstring>()</argsstring>
        <name>points_begin</name>
        <briefdescription>
<para>returns the start iterator for all points that have been inserted to construct <computeroutput>C</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="426" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Convex__hull__d_1a61f344a2efcbe380c9d528ab9e131ba4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Convex__hull__d_1af67ff363f660e17f1b3f7d9ad868d058" kindref="member">Point_const_iterator</ref></type>
        <definition>Point_const_iterator CGAL::Convex_hull_d&lt; R &gt;::points_end</definition>
        <argsstring>()</argsstring>
        <name>points_end</name>
        <briefdescription>
<para>returns the past the end iterator for points. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="432" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Convex__hull__d_1a5072c4b2f7323bceb49ba732dd2ad11a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Convex__hull__d_1af3a391809dffdfac5a43dfa6e1a55558" kindref="member">Hull_point_const_iterator</ref></type>
        <definition>Hull_point_const_iterator CGAL::Convex_hull_d&lt; R &gt;::hull_points_begin</definition>
        <argsstring>()</argsstring>
        <name>hull_points_begin</name>
        <briefdescription>
<para>returns an iterator to start the iteration over all points in the convex hull <computeroutput>C</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Included are points in the interior of facets. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="439" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Convex__hull__d_1ad4caae048696beca1796815504fef3c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Convex__hull__d_1af3a391809dffdfac5a43dfa6e1a55558" kindref="member">Hull_point_const_iterator</ref></type>
        <definition>Hull_point_const_iterator CGAL::Convex_hull_d&lt; R &gt;::hull_points_end</definition>
        <argsstring>()</argsstring>
        <name>hull_points_end</name>
        <briefdescription>
<para>returns the past the end iterator for points in the convex hull. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="445" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Convex__hull__d_1aeacfb8c7e6654dbb3095981ba4da1cc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Visitor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Convex_hull_d&lt; R &gt;::visit_all_facets</definition>
        <argsstring>(const Visitor &amp;V)</argsstring>
        <name>visit_all_facets</name>
        <param>
          <type>const Visitor &amp;</type>
          <declname>V</declname>
        </param>
        <briefdescription>
<para>each facet of <computeroutput>C</computeroutput> is visited by the visitor object <computeroutput>V</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>V</computeroutput> has to have a function call operator: <computeroutput>void operator()(Facet_handle) const</computeroutput> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="453" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Convex__hull__d_1ac06b9c248449a158f93c5d865b903143" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::list&lt; <ref refid="classCGAL_1_1Convex__hull__d_1aa3c47872ae5aa3fa0221564b6ea0178a" kindref="member">Point_d</ref> &gt; &amp;</type>
        <definition>const std::list&lt;Point_d&gt;&amp; CGAL::Convex_hull_d&lt; R &gt;::all_points</definition>
        <argsstring>()</argsstring>
        <name>all_points</name>
        <briefdescription>
<para>returns a list of all points that have been inserted to construct <computeroutput>C</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="460" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Convex__hull__d_1a4af323e683bf6f76da939dec552f4f60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::list&lt; <ref refid="classCGAL_1_1Convex__hull__d_1a35d50528234678fd96ea1df05a8e469e" kindref="member">Vertex_handle</ref> &gt;</type>
        <definition>std::list&lt;Vertex_handle&gt; CGAL::Convex_hull_d&lt; R &gt;::all_vertices</definition>
        <argsstring>()</argsstring>
        <name>all_vertices</name>
        <briefdescription>
<para>returns a list of all vertices of <computeroutput>C</computeroutput> (also interior ones). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="466" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Convex__hull__d_1a90e0b1df0435098386ec6d854284c9e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::list&lt; <ref refid="classCGAL_1_1Convex__hull__d_1a0b0ba14e7dfb71e1aec4a2cc8d521150" kindref="member">Simplex_handle</ref> &gt;</type>
        <definition>std::list&lt;Simplex_handle&gt; CGAL::Convex_hull_d&lt; R &gt;::all_simplices</definition>
        <argsstring>()</argsstring>
        <name>all_simplices</name>
        <briefdescription>
<para>returns a list of all simplices in <computeroutput>C</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="472" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Convex__hull__d_1a6feb8b75e5f30552fe936640b93aa78f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::list&lt; <ref refid="classCGAL_1_1Convex__hull__d_1ab5824a63825a2d3c927da67331437fdc" kindref="member">Facet_handle</ref> &gt;</type>
        <definition>std::list&lt;Facet_handle&gt; CGAL::Convex_hull_d&lt; R &gt;::all_facets</definition>
        <argsstring>()</argsstring>
        <name>all_facets</name>
        <briefdescription>
<para>returns a list of all facets of <computeroutput>C</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d.h" line="478" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="related">
      <memberdef kind="function" id="classCGAL_1_1Convex__hull__d_1a018db48a7f7d92111ae03d0d18bf3ece" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classCGAL_1_1Convex__hull__d_1afc2f767cef8142f3147f33b09912bcf9" kindref="member">R</ref></type>
          </param>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class HDS</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void convex_hull_d_to_polyhedron_3</definition>
        <argsstring>(const Convex_hull_d&lt; R &gt; &amp;C, Polyhedron_3&lt; T, HDS &gt; &amp;P)</argsstring>
        <name>convex_hull_d_to_polyhedron_3</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Convex__hull__d" kindref="compound">Convex_hull_d</ref>&lt; <ref refid="classCGAL_1_1Convex__hull__d_1afc2f767cef8142f3147f33b09912bcf9" kindref="member">R</ref> &gt; &amp;</type>
          <declname>C</declname>
        </param>
        <param>
          <type>Polyhedron_3&lt; T, HDS &gt; &amp;</type>
          <declname>P</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000002"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This package is deprecated since the version 4.6 of CGAL.</para></xrefdescription></xrefsect>The package <ref refid="packages_1PkgTriangulationsSummary" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">dD Triangulations</ref> should be used instead.</para><para>converts the convex hull <computeroutput>C</computeroutput> to polyhedral surface stored in <computeroutput>P</computeroutput>. <simplesect kind="pre"><para><computeroutput>dim == 3</computeroutput> and <computeroutput>dcur == 3</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d_to_polyhedron_3.h" line="13" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Convex__hull__d_1a133ccb5b098057a96e6f75317c81c4c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classCGAL_1_1Convex__hull__d_1afc2f767cef8142f3147f33b09912bcf9" kindref="member">R</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void d3_surface_map</definition>
        <argsstring>(const Convex_hull_d&lt; R &gt; &amp;C, GRAPH&lt; typename Convex_hull_d&lt; R &gt;::Point_d, int &gt; &amp;G)</argsstring>
        <name>d3_surface_map</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Convex__hull__d" kindref="compound">Convex_hull_d</ref>&lt; <ref refid="classCGAL_1_1Convex__hull__d_1afc2f767cef8142f3147f33b09912bcf9" kindref="member">R</ref> &gt; &amp;</type>
          <declname>C</declname>
        </param>
        <param>
          <type>GRAPH&lt; typename <ref refid="classCGAL_1_1Convex__hull__d" kindref="compound">Convex_hull_d</ref>&lt; <ref refid="classCGAL_1_1Convex__hull__d_1afc2f767cef8142f3147f33b09912bcf9" kindref="member">R</ref> &gt;::<ref refid="classCGAL_1_1Convex__hull__d_1aa3c47872ae5aa3fa0221564b6ea0178a" kindref="member">Point_d</ref>, int &gt; &amp;</type>
          <declname>G</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000003"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This package is deprecated since the version 4.6 of CGAL.</para></xrefdescription></xrefsect>The package <ref refid="packages_1PkgTriangulationsSummary" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">dD Triangulations</ref> should be used instead</para><para>constructs the representation of the surface of <computeroutput>C</computeroutput> as a bidirected LEDA graph <computeroutput>G</computeroutput>. <simplesect kind="pre"><para><computeroutput>dim == 3</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_d_to_polyhedron_3.h" line="25" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This package is deprecated since the version 4.6 of CGAL.</para></xrefdescription></xrefsect>The package <ref refid="packages_1PkgTriangulationsSummary" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">dD Triangulations</ref> should be used instead.</para><para>An instance <computeroutput>C</computeroutput> of type <computeroutput><ref refid="classCGAL_1_1Convex__hull__d" kindref="compound">Convex_hull_d</ref>&lt;R&gt;</computeroutput> is the convex hull of a multi-set <computeroutput>S</computeroutput> of points in <formula id="0">$ d$</formula>-dimensional space. We call <computeroutput>S</computeroutput> the underlying point set and <formula id="0">$ d$</formula> or <computeroutput>dim</computeroutput> the dimension of the underlying space. We use <computeroutput>dcur</computeroutput> to denote the affine dimension of <computeroutput>S</computeroutput>. The data type supports incremental construction of hulls.</para><para>The closure of the hull is maintained as a simplicial complex, i.e., as a collection of simplices. The intersection of any two is a face of both (The empty set if a facet of every simplex). In the sequel we reserve the word simplex for the simplices of dimension <computeroutput>dcur</computeroutput>. For each simplex there is a handle of type <computeroutput>Simplex_handle</computeroutput> and for each vertex there is a handle of type <computeroutput>Vertex_handle</computeroutput>. Each simplex has <computeroutput>1 + dcur</computeroutput> vertices indexed from <computeroutput>0</computeroutput> to <computeroutput>dcur</computeroutput>; for a simplex <computeroutput>s</computeroutput> and an index <computeroutput>i</computeroutput>, <computeroutput>C.vertex(s,i)</computeroutput> returns the <computeroutput>i</computeroutput>-th vertex of <computeroutput>s</computeroutput>. For any simplex <computeroutput>s</computeroutput> and any index <computeroutput>i</computeroutput> of <computeroutput>s</computeroutput> there may or may not be a simplex <computeroutput>t</computeroutput> opposite to the <computeroutput>i</computeroutput>-th vertex of <computeroutput>s</computeroutput>. The function <computeroutput>C.opposite_simplex(s,i)</computeroutput> returns <computeroutput>t</computeroutput> if it exists and returns <computeroutput><ref refid="classCGAL_1_1Convex__hull__d_1a0b0ba14e7dfb71e1aec4a2cc8d521150" kindref="member">Simplex_handle()</ref></computeroutput> (the undefined handle) otherwise. If <computeroutput>t</computeroutput> exists then <computeroutput>s</computeroutput> and <computeroutput>t</computeroutput> share <computeroutput>dcur</computeroutput> vertices, namely all but the vertex with index <computeroutput>i</computeroutput> of <computeroutput>s</computeroutput> and the vertex with index <computeroutput>C.index_of_vertex_in_opposite_simplex(s,i)</computeroutput> of <computeroutput>t</computeroutput>. Assume that <computeroutput>t</computeroutput> exists and let <computeroutput>j = C.index_of_vertex_in_opposite_simplex(s,i)</computeroutput>. Then <computeroutput>s = C.opposite_simplex(t,j)</computeroutput> and <computeroutput>i = C.index_of_vertex_in_opposite_simplex(t,j)</computeroutput>.</para><para>The boundary of the hull is also a simplicial complex. All simplices in this complex have dimension <computeroutput>dcur - 1</computeroutput>. For each boundary simplex there is a handle of type <computeroutput>Facet_handle</computeroutput>. Each facet has <computeroutput>dcur</computeroutput> vertices indexed from <computeroutput>0</computeroutput> to <computeroutput>dcur - 1</computeroutput>. If <computeroutput>dcur&gt; 1</computeroutput> then for each facet <computeroutput>f</computeroutput> and each index <computeroutput>i</computeroutput>, <computeroutput>0 &lt;= i &lt; dcur</computeroutput>, there is a facet <computeroutput>g</computeroutput> opposite to the <computeroutput>i</computeroutput>-th vertex of <computeroutput>f</computeroutput>. The function <computeroutput>C.opposite_facet(f,i)</computeroutput> returns <computeroutput>g</computeroutput>. Two neighboring facets <computeroutput>f</computeroutput> and <computeroutput>g</computeroutput> share <computeroutput>dcur - 1</computeroutput> vertices, namely all but the vertex with index <computeroutput>i</computeroutput> of <computeroutput>f</computeroutput> and the vertex with index <computeroutput>C.index_of_vertex_in_opposite_facet(f,i)</computeroutput> of <computeroutput>g</computeroutput>. Let <computeroutput>j = C.index_of_vertex_in_opposite_facet(f,i)</computeroutput>. Then <computeroutput>f = C.opposite_facet(g,j)</computeroutput> and <computeroutput>i =C.index_of_vertex_in_opposite_facet(g,j)</computeroutput>.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>R</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of the concept <computeroutput><ref refid="classConvexHullTraits__d" kindref="compound">ConvexHullTraits_d</ref></computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<bold>Iteration Statements</bold><linebreak/>
</para><para><bold>forall_ch_vertices</bold>( <formula id="1">$ v,C$</formula>) <formula id="2">$ \{$</formula> the vertices of <formula id="3">$ C$</formula> are successively assigned to <formula id="4">$ v$</formula> <formula id="5">$ \}$</formula></para><para><bold>forall_ch_simplices</bold>( <formula id="6">$ s,C$</formula>) <formula id="2">$ \{$</formula> the simplices of <formula id="3">$ C$</formula> are successively assigned to <formula id="7">$ s$</formula> <formula id="5">$ \}$</formula></para><para><bold>forall_ch_facets</bold>( <formula id="8">$ f,C$</formula>) <formula id="2">$ \{$</formula> the facets of <formula id="3">$ C$</formula> are successively assigned to <formula id="9">$ f$</formula> <formula id="5">$ \}$</formula></para><para><bold>Implementation</bold><linebreak/>
</para><para>The implementation of type <computeroutput><ref refid="classCGAL_1_1Convex__hull__d" kindref="compound">Convex_hull_d</ref></computeroutput> is based on <ref refid="citelist_1CITEREF_cms-frric-93" kindref="member">[2]</ref> and <ref refid="citelist_1CITEREF_bms-dgc-94" kindref="member">[1]</ref>. The details of the implementation can be found in the implementation document available at the download site of this package.</para><para>The time and space requirements are input dependent. Let <formula id="10">$C_1$</formula>, <formula id="11">$C_2$</formula>, <formula id="12">$C_3$</formula>, <formula id="13">$\ldots$</formula> be the sequence of hulls constructed and for a point <formula id="14">$ x$</formula> let <formula id="15">$ k_i$</formula> be the number of facets of <formula id="16">$ C_i$</formula> that are visible from <formula id="14">$ x$</formula> and that are not already facets of <formula id="17">$ C_{i-1}$</formula>.</para><para>Then the time for inserting <formula id="14">$ x$</formula> is <formula id="18">$ O(dim \sum_i k_i)$</formula> and the number of new simplices constructed during the insertion of <formula id="19">$x$</formula> is the number of facets of the hull which were not already facets of the hull before the insertion.</para><para>The data type <computeroutput><ref refid="classCGAL_1_1Convex__hull__d" kindref="compound">Convex_hull_d</ref></computeroutput> is derived from <computeroutput>Regular_complex_d</computeroutput>. The space requirement of regular complexes is essentially <formula id="20">$ 12(dim +2 )$</formula> bytes times the number of simplices plus the space for the points. <computeroutput><ref refid="classCGAL_1_1Convex__hull__d" kindref="compound">Convex_hull_d</ref></computeroutput> needs an additional <formula id="21">$ 8 + (4 + x)dim$</formula> bytes per simplex where <formula id="14">$ x$</formula> is the space requirement of the underlying number type and an additional <formula id="22">$ 12$</formula> bytes per point. The total is therefore <formula id="23">$ (16 + x)dim + 32$</formula> bytes times the number of simplices plus <formula id="24">$ 28 + x \cdot dim$</formula> bytes times the number of points. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="0">
        <label>CGAL::Convex_hull_d&lt; R &gt;</label>
        <link refid="classCGAL_1_1Convex__hull__d"/>
      </node>
      <node id="1">
        <label>CGAL::Convex_hull_d&lt; Lifted_R &gt;</label>
        <link refid="classCGAL_1_1Convex__hull__d"/>
        <childnode refid="0" relation="template-instance">
          <edgelabel>&lt; Lifted_R &gt;</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>CGAL::Delaunay_d&lt; R, Lifted_R &gt;</label>
        <link refid="classCGAL_1_1Delaunay__d"/>
        <childnode refid="1" relation="private-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="CGAL/Convex_hull_d.h" line="89" column="1" bodyfile="CGAL/Convex_hull_d.h" bodystart="89" bodyend="480"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Convex__hull__d_1a6feb8b75e5f30552fe936640b93aa78f" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>all_facets</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1ac06b9c248449a158f93c5d865b903143" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>all_points</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1a90e0b1df0435098386ec6d854284c9e6" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>all_simplices</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1a4af323e683bf6f76da939dec552f4f60" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>all_vertices</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1a5a1ce59b60fe03fa3f1684b5d4739c7f" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>associated_point</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1affa57ae6ec4fd4b91f688d5fb3922a1a" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>bounded_side</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1a9dba29e4f927a197be41adb242d4a33d" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>clear</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1a9cf97c124cbf52bab38257eab95252e2" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>Convex_hull_d</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1a018db48a7f7d92111ae03d0d18bf3ece" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>convex_hull_d_to_polyhedron_3</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1a6b0a9995b1f96f255a50ed17ac8c8dfa" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>current_dimension</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1a133ccb5b098057a96e6f75317c81c4c9" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>d3_surface_map</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1ac887cbe7f1c174ff316d8a7790cc9b92" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>dimension</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1ab5824a63825a2d3c927da67331437fdc" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>Facet_handle</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1a208bf25f55de43b6c615df408344541f" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>Facet_iterator</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1a1f48779ef4a169b7750af660e9a562d9" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>facets_begin</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1ae3840f7879becd354bfa411dcba8337f" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>facets_end</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1ad315ca5f623ae8a5b4d16b665f4ea7c8" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>facets_visible_from</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1af3a391809dffdfac5a43dfa6e1a55558" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>Hull_point_const_iterator</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1a5072c4b2f7323bceb49ba732dd2ad11a" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>hull_points_begin</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1ad4caae048696beca1796815504fef3c1" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>hull_points_end</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1a8a80ec067b0dd4fa61038e0da5d9a1ea" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>Hull_vertex_iterator</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1ae52601833b4081837c1db6f2b0d5f1c2" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>hull_vertices_begin</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1a32d0e9c13932301e1b7cc70a8d83ae58" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>hull_vertices_end</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1ae72ac9e247020c16a2cd69dc9187bab6" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>Hyperplane_d</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1a7e116aba96e2a309271175cc929e2790" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>hyperplane_supporting</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1a082c0d143a27894135c8d0d186c804a6" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>index</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1a7e22f117e7f2b5b14bc0d80bbbbff052" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>index_of_vertex_in_opposite_facet</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1a9fb48cd3315932aa8524f19418324cd5" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>index_of_vertex_in_opposite_simplex</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1a91ebcfb4c864ad780f9ab3e2c70566ea" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1ac269e134b31c5b7c812a1742b7805db3" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1acfef07e66e4835e3ec47224d622f7285" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>is_dimension_jump</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1af73a81800e8d7daf4cae8e96552cefdc" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>is_valid</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1ade0bee6a1db8b07791bf0be45a90834f" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>number_of_facets</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1a6ff9d78d514b86c1b999c4d9b9f91434" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>number_of_simplices</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1af64483a3187d43a0336a2b0b7ea25bb7" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>number_of_vertices</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1a6b33b7a8463e1faa44bf4c588b9a07c7" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>opposite_facet</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1a5cf16f1531a13ef1dfcda895acdd7395" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>opposite_simplex</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1af67ff363f660e17f1b3f7d9ad868d058" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>Point_const_iterator</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1aa3c47872ae5aa3fa0221564b6ea0178a" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>Point_d</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1af0ee46542ee5d9bd175695de7b9c7883" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>point_of_facet</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1a36dea30c424d776a1efa800d58f3b687" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>point_of_simplex</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1a1c13a034585b0bd0556a71cd286d7b40" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>points_begin</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1a61f344a2efcbe380c9d528ab9e131ba4" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>points_end</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1afeac624dafdd00950ce926027ec7886a" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>print_statistics</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1afc2f767cef8142f3147f33b09912bcf9" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>R</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1a7bdf3c38c5472fa0a8c585dbdb36385c" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>simplex</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1a0b0ba14e7dfb71e1aec4a2cc8d521150" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>Simplex_handle</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1a910bf97da0fa85f01ad4deb1f993c02f" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>Simplex_iterator</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1a03c05b8ab6fb2d0a920f78ea650e602f" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>simplices_begin</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1ae89bbba2013f5560a30a3eb4985b01ba" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>simplices_end</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1a35d50528234678fd96ea1df05a8e469e" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>Vertex_handle</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1a30c09ed4edcb96351d127488628bde60" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>Vertex_iterator</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1ac6e6a4c16b06d65f01a38adc58574e6f" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>vertex_of_facet</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1ae460fd7a36215b9b5f79f12d651f39a6" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>vertex_of_simplex</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1ae1b4367940f288092b0064548fde5698" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>vertices_begin</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1a6b8e7096b271216bbe2e088bcdff899e" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>vertices_end</name></member>
      <member refid="classCGAL_1_1Convex__hull__d_1aeacfb8c7e6654dbb3095981ba4da1cc0" prot="public" virt="non-virtual"><scope>CGAL::Convex_hull_d</scope><name>visit_all_facets</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
