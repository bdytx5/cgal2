<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="Polynomial_2construction_8cpp-example" kind="example">
    <compoundname>Polynomial/construction.cpp</compoundname>
    <detaileddescription>
<para><programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Polynomial.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Polynomial_traits_d.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Polynomial_type_generator.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgIOstreams_1ga2f2176255429973ea7bf156804a53857" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Stream_support.tag">CGAL::set_pretty_mode</ref>(std::cout);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">CGAL::Polynomial_type_generator&lt;int,2&gt;::Type</ref><sp/>Poly_2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">CGAL::Polynomial_traits_d&lt;Poly_2&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PT_2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>PT_2::Coefficient_type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Poly_1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>PT_2::Innermost_coefficient_type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Integer;<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>PT_2::Construct_polynomial<sp/>construct_polynomial;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Poly_2<sp/>dc;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>constructing<sp/>a<sp/>constant<sp/>polynomial<sp/>from<sp/>int</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Poly_2<sp/>two(2);<sp/></highlight><highlight class="comment">//<sp/>=<sp/>2<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;A<sp/>constant<sp/>polynomial:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>two<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>construction<sp/>from<sp/>an<sp/>iterator<sp/>range<sp/>of<sp/>univariate<sp/>polynomials</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::list&lt;Poly_1&gt;<sp/>univariate_coeffs;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>univariate_coeffs.push_back(Poly_1(3));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>univariate_coeffs.push_back(Poly_1(0));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>univariate_coeffs.push_back(Poly_1(5));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Poly_2<sp/>F<sp/>=<sp/></highlight><highlight class="comment">//<sp/>5*y^2<sp/>+<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>construct_polynomial(univariate_coeffs.begin(),univariate_coeffs.end());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>bivariate<sp/>polynomial<sp/>F:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>F<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>construction<sp/>from<sp/>an<sp/>iterator<sp/>range<sp/>over<sp/>monomials<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::list&lt;std::pair&lt;CGAL::Exponent_vector,<sp/>Integer&gt;<sp/>&gt;<sp/>innermost_coeffs;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>innermost_coeffs.push_back(std::make_pair(<ref refid="classCGAL_1_1Exponent__vector" kindref="compound">CGAL::Exponent_vector</ref>(0,0),-2));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>innermost_coeffs.push_back(std::make_pair(<ref refid="classCGAL_1_1Exponent__vector" kindref="compound">CGAL::Exponent_vector</ref>(3,5),2));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Poly_2<sp/>G<sp/>=<sp/></highlight><highlight class="comment">//<sp/>(2*x^3)*y^5<sp/>+<sp/>(-2)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>construct_polynomial(innermost_coeffs.begin(),innermost_coeffs.end());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>bivariate<sp/>polynomial<sp/>G:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>G<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//construction<sp/>using<sp/>shift<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>PT_2::Shift<sp/><ref refid="group__PkgPolynomialFunctions_1ga19a6f91ab72ba7ad5139f7c7bc759e08" kindref="member">shift</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Poly_2<sp/>x<sp/>=<sp/><ref refid="group__PkgPolynomialFunctions_1ga19a6f91ab72ba7ad5139f7c7bc759e08" kindref="member">shift</ref>(Poly_2(1),1,0);<sp/></highlight><highlight class="comment">//<sp/>&apos;multiply&apos;<sp/>1<sp/>by<sp/>x_0^1</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Poly_2<sp/>y<sp/>=<sp/><ref refid="group__PkgPolynomialFunctions_1ga19a6f91ab72ba7ad5139f7c7bc759e08" kindref="member">shift</ref>(Poly_2(1),1,1);<sp/></highlight><highlight class="comment">//<sp/>&apos;multiply&apos;<sp/>1<sp/>by<sp/>x_1^1</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Poly_2<sp/>H<sp/>=<sp/>5<sp/>*<sp/>x<sp/>*<sp/>y<sp/>+<sp/>3<sp/>*<sp/>y<sp/>*<sp/>y;<sp/></highlight><highlight class="comment">//<sp/>=<sp/>3*y^2<sp/>+<sp/>(5*x)*y</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>bivariate<sp/>polynomial<sp/>H:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>H<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>    </detaileddescription>
  </compounddef>
</doxygen>
