<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__PkgPolynomialFunctions" kind="group">
    <compoundname>PkgPolynomialFunctions</compoundname>
    <title>Functions</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga01adc4ff64da4e12534dead6a49e5cc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Canonicalize::result_type</type>
        <definition>Polynomial_traits_d&lt;Polynomial_d&gt;::Canonicalize::result_type CGAL::canonicalize</definition>
        <argsstring>(const Polynomial_d &amp;p)</argsstring>
        <name>canonicalize</name>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Canonicalize</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1Canonicalize" kindref="compound">PolynomialTraits_d::Canonicalize</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1Canonicalize" kindref="compound">PolynomialTraits_d::Canonicalize</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="22" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga63a364251f773259ff860dc98098b2aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Compare::result_type</type>
        <definition>Polynomial_traits_d&lt;Polynomial_d&gt;::Compare::result_type CGAL::compare</definition>
        <argsstring>(const Polynomial_d &amp;p, const Polynomial_d &amp;q)</argsstring>
        <name>compare</name>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Compare</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1Compare" kindref="compound">PolynomialTraits_d::Compare</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1Compare" kindref="compound">PolynomialTraits_d::Compare</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="41" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1gaa84566608255db58148c67fec626aa1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Degree::result_type</type>
        <definition>Polynomial_traits_d&lt;Polynomial_d&gt;::Degree::result_type CGAL::degree</definition>
        <argsstring>(const Polynomial_d &amp;p, int i, index=Polynomial_traits_d&lt; Polynomial_d &gt;::d-1)</argsstring>
        <name>degree</name>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>index</type>
          <defval>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::d-1</defval>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Degree</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1Degree" kindref="compound">PolynomialTraits_d::Degree</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1Degree" kindref="compound">PolynomialTraits_d::Degree</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1gaf3368de315ff982392d6fe5afdde8830" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Degree_vector::result_type</type>
        <definition>Polynomial_traits_d&lt;Polynomial_d&gt;::Degree_vector::result_type CGAL::degree_vector</definition>
        <argsstring>(const Polynomial_d &amp;p)</argsstring>
        <name>degree_vector</name>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::DegreeVector</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1DegreeVector" kindref="compound">PolynomialTraits_d::DegreeVector</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1a86de73158bf1c121a88f86d7637ed6ea" kindref="member">PolynomialTraits_d::Degree_vector</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1gac4c1323dabfb07c0e2ca9b299a0cbbcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Differentiate::result_type</type>
        <definition>Polynomial_traits_d&lt;Polynomial_d&gt;::Differentiate::result_type CGAL::differentiate</definition>
        <argsstring>(const Polynomial_d &amp;p, index=Polynomial_traits_d&lt; Polynomial_d &gt;::d-1)</argsstring>
        <name>differentiate</name>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>index</type>
          <defval>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::d-1</defval>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Differentiate</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1Differentiate" kindref="compound">PolynomialTraits_d::Differentiate</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1Differentiate" kindref="compound">PolynomialTraits_d::Differentiate</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga4b77c62f33967f4e9aeef11a73a7f064" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Evaluate_homogeneous::result_type</type>
        <definition>Polynomial_traits_d&lt;Polynomial_d&gt;::Evaluate_homogeneous::result_type CGAL::evaluate_homogeneous</definition>
        <argsstring>(const Polynomial_d &amp;p, Polynomial_traits_d&lt; Polynomial_d &gt;::Coefficient_type u, Polynomial_traits_d&lt; Polynomial_d &gt;::Coefficient_type v)</argsstring>
        <name>evaluate_homogeneous</name>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Coefficient_type</type>
          <declname>u</declname>
        </param>
        <param>
          <type>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Coefficient_type</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Evaluate_homogeneous</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1EvaluateHomogeneous" kindref="compound">PolynomialTraits_d::EvaluateHomogeneous</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1EvaluateHomogeneous" kindref="compound">PolynomialTraits_d::EvaluateHomogeneous</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1gafa3f901a791e00db48197828c4ccae78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Evaluate::result_type</type>
        <definition>Polynomial_traits_d&lt;Polynomial_d&gt;::Evaluate::result_type CGAL::evaluate</definition>
        <argsstring>(const Polynomial_d &amp;p, Polynomial_traits_d&lt; Polynomial_d &gt;::Coefficient_type x)</argsstring>
        <name>evaluate</name>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Coefficient_type</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Evaluate</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1Evaluate" kindref="compound">PolynomialTraits_d::Evaluate</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1Evaluate" kindref="compound">PolynomialTraits_d::Evaluate</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1gae5f6c8df16ef0b2b41312be8531d4e5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Gcd_up_to_constant_factor::result_type</type>
        <definition>Polynomial_traits_d&lt;Polynomial_d&gt;::Gcd_up_to_constant_factor::result_type CGAL::gcd_up_to_constant_factor</definition>
        <argsstring>(const Polynomial_d &amp;p, const Polynomial_d &amp;q)</argsstring>
        <name>gcd_up_to_constant_factor</name>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Gcd_up_to_constant_factor</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1GcdUpToConstantFactor" kindref="compound">PolynomialTraits_d::GcdUpToConstantFactor</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1GcdUpToConstantFactor" kindref="compound">PolynomialTraits_d::GcdUpToConstantFactor</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="179" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1gaefbd9822a52e0a98a0709d9efdae3d42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::get_coefficient::result_type</type>
        <definition>Polynomial_traits_d&lt;Polynomial_d&gt;::get_coefficient::result_type CGAL::get_coefficient</definition>
        <argsstring>(const Polynomial_d &amp;p, int i)</argsstring>
        <name>get_coefficient</name>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::GetCoefficient</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1GetCoefficient" kindref="compound">PolynomialTraits_d::GetCoefficient</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1GetCoefficient" kindref="compound">PolynomialTraits_d::GetCoefficient</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1GetInnermostCoefficient" kindref="compound">PolynomialTraits_d::GetInnermostCoefficient</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="202" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga8e0c9a503e0cebc718170e5e64b5260e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::get_innermost_coefficient::result_type</type>
        <definition>Polynomial_traits_d&lt;Polynomial_d&gt;::get_innermost_coefficient::result_type CGAL::get_innermost_coefficient</definition>
        <argsstring>(const Polynomial_d &amp;p, Exponent_vector ev)</argsstring>
        <name>get_innermost_coefficient</name>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>Exponent_vector</type>
          <declname>ev</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::GetInnermostCoefficient</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1GetInnermostCoefficient" kindref="compound">PolynomialTraits_d::GetInnermostCoefficient</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1GetCoefficient" kindref="compound">PolynomialTraits_d::GetCoefficient</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1GetInnermostCoefficient" kindref="compound">PolynomialTraits_d::GetInnermostCoefficient</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="225" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga87d121b746753399badbcaf4f6ac2ef6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Innermost_leading_coefficient::result_type</type>
        <definition>Polynomial_traits_d&lt;Polynomial_d&gt;::Innermost_leading_coefficient::result_type CGAL::innermost_leading_coefficient</definition>
        <argsstring>(const Polynomial_d &amp;p)</argsstring>
        <name>innermost_leading_coefficient</name>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::InnermostLeadingCoefficient</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1InnermostLeadingCoefficient" kindref="compound">PolynomialTraits_d::InnermostLeadingCoefficient</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1InnermostLeadingCoefficient" kindref="compound">PolynomialTraits_d::InnermostLeadingCoefficient</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="248" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga64fd050b01f1e6490bb1876cbefcf926" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Integral_division_up_to_constant_factor::result_type</type>
        <definition>Polynomial_traits_d&lt;Polynomial_d&gt;::Integral_division_up_to_constant_factor::result_type CGAL::integral_division_up_to_constant_factor</definition>
        <argsstring>(const Polynomial_d &amp;p, const Polynomial_d &amp;q)</argsstring>
        <name>integral_division_up_to_constant_factor</name>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Integral_division_up_to_constant_factor</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1IntegralDivisionUpToConstantFactor" kindref="compound">PolynomialTraits_d::IntegralDivisionUpToConstantFactor</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1IntegralDivisionUpToConstantFactor" kindref="compound">PolynomialTraits_d::IntegralDivisionUpToConstantFactor</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="270" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1gac48e11d09a65747d85f88fb315348cbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Invert::result_type</type>
        <definition>Polynomial_traits_d&lt;Polynomial_d&gt;::Invert::result_type CGAL::invert</definition>
        <argsstring>(const Polynomial_d &amp;p, int index=Polynomial_traits_d&lt; Polynomial_d &gt;::d-1)</argsstring>
        <name>invert</name>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
          <defval>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::d-1</defval>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Invert</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1Invert" kindref="compound">PolynomialTraits_d::Invert</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1Invert" kindref="compound">PolynomialTraits_d::Invert</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="292" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1gaa48c2d5c1a1346287f9cd54e25df14bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Is_square_free::result_type</type>
        <definition>Polynomial_traits_d&lt;Polynomial_d&gt;::Is_square_free::result_type CGAL::is_square_free</definition>
        <argsstring>(const Polynomial_d &amp;p)</argsstring>
        <name>is_square_free</name>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Is_square_free</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1IsSquareFree" kindref="compound">PolynomialTraits_d::IsSquareFree</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1IsSquareFree" kindref="compound">PolynomialTraits_d::IsSquareFree</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="314" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1gaeaede31af8545da4af6eb595fb797b45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
          <param>
            <type>class <ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          </param>
        </templateparamlist>
        <type>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Is_zero_at_homogeneous::result_type</type>
        <definition>Polynomial_traits_d&lt;Polynomial_d&gt;::Is_zero_at_homogeneous::result_type CGAL::is_zero_at_homogeneous</definition>
        <argsstring>(const Polynomial_d &amp;p, InputIterator begin, InputIterator end)</argsstring>
        <name>is_zero_at_homogeneous</name>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>begin</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Is_zero_at_homogeneous</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1IsZeroAtHomogeneous" kindref="compound">PolynomialTraits_d::IsZeroAtHomogeneous</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1IsZeroAtHomogeneous" kindref="compound">PolynomialTraits_d::IsZeroAtHomogeneous</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="336" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga32d6ce085c68a634286864e4f44422c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
          <param>
            <type>class <ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          </param>
        </templateparamlist>
        <type>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Is_zero_at::result_type</type>
        <definition>Polynomial_traits_d&lt;Polynomial_d&gt;::Is_zero_at::result_type CGAL::is_zero_at</definition>
        <argsstring>(const Polynomial_d &amp;p, InputIterator begin, InputIterator end)</argsstring>
        <name>is_zero_at</name>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>begin</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Is_zero_at</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1IsZeroAt" kindref="compound">PolynomialTraits_d::IsZeroAt</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1IsZeroAt" kindref="compound">PolynomialTraits_d::IsZeroAt</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="359" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga161d584d744543f6f2510c6de42b4285" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Leading_coefficient::result_type</type>
        <definition>Polynomial_traits_d&lt;Polynomial_d&gt;::Leading_coefficient::result_type CGAL::leading_coefficient</definition>
        <argsstring>(const Polynomial_d &amp;p)</argsstring>
        <name>leading_coefficient</name>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Leading_coefficient</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1LeadingCoefficient" kindref="compound">PolynomialTraits_d::LeadingCoefficient</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1LeadingCoefficient" kindref="compound">PolynomialTraits_d::LeadingCoefficient</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="382" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga1dfb36ba7bef19569bc16c3cc53664bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Make_square_free::result_type</type>
        <definition>Polynomial_traits_d&lt;Polynomial_d&gt;::Make_square_free::result_type CGAL::make_square_free</definition>
        <argsstring>(const Polynomial_d &amp;p)</argsstring>
        <name>make_square_free</name>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Make_square_free</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1MakeSquareFree" kindref="compound">PolynomialTraits_d::MakeSquareFree</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1MakeSquareFree" kindref="compound">PolynomialTraits_d::MakeSquareFree</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="404" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga0a646debf9094d532bfaaf024e32ae12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Move::result_type</type>
        <definition>Polynomial_traits_d&lt;Polynomial_d&gt;::Move::result_type CGAL::move</definition>
        <argsstring>(const Polynomial_d &amp;p, int i, int j)</argsstring>
        <name>move</name>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Move</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1Move" kindref="compound">PolynomialTraits_d::Move</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1Move" kindref="compound">PolynomialTraits_d::Move</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="426" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga1a8b6b65580be1d41c7f12716b56f034" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Multivariate_content::result_type</type>
        <definition>Polynomial_traits_d&lt;Polynomial_d&gt;::Multivariate_content::result_type CGAL::multivariate_content</definition>
        <argsstring>(const Polynomial_d &amp;p)</argsstring>
        <name>multivariate_content</name>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Multivariate_content</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1MultivariateContent" kindref="compound">PolynomialTraits_d::MultivariateContent</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1MultivariateContent" kindref="compound">PolynomialTraits_d::MultivariateContent</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="448" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1gac68f9812777c79b0cfbddda7db2b72fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Negate::result_type</type>
        <definition>Polynomial_traits_d&lt;Polynomial_d&gt;::Negate::result_type CGAL::negate</definition>
        <argsstring>(const Polynomial_d &amp;p, int index=Polynomial_traits_d&lt; Polynomial_d &gt;::d-1)</argsstring>
        <name>negate</name>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
          <defval>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::d-1</defval>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Negate</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1Negate" kindref="compound">PolynomialTraits_d::Negate</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1Negate" kindref="compound">PolynomialTraits_d::Negate</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="470" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga0148f1612807b08b433f96c3ce07f2be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int CGAL::number_of_real_roots</definition>
        <argsstring>(Polynomial_d f)</argsstring>
        <name>number_of_real_roots</name>
        <param>
          <type><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>computes the number of distinct real roots of <formula id="6">$f$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Given a polynomial <formula id="7">$ f$</formula>, or a range of values that is interpreted as the principal Sturm-Habicht coefficients of <formula id="7">$ f$</formula>, the function computes <formula id="8">\[ m:=\# \{\alpha\in\mathbb{R}\mid f(\alpha)=0\} \]</formula> that is, the number of distinct real roots of <formula id="7">$ f$</formula>.</para><para>The coefficient type of the polynomial, or the value type of the iterator range, respectively must be a model of <computeroutput><ref refid="classRealEmbeddable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RealEmbeddable</ref></computeroutput>. In the second version, it is not required to pass the exact princiapl Sturm-Habicht coefficients to the functions; it is only required that the sign of each element corresponds to the sign of the actual principal Sturm-Habicht coefficient.</para><para></para><para>We explain the internals of this function. For a sequence <formula id="9">$ I:=(a_0,\ldots,a_n)$</formula> of real numbers with <formula id="10">$ a_0\neq 0$</formula>, define <formula id="11">\[ C(I)=\ccSum{i=1}{s}\epsilon_i \]</formula> where <formula id="12">$ s$</formula> is the number of subsequences of <formula id="13">$ I$</formula> of the form</para><para><image type="html" name="underbrace.png"></image>
 <image type="latex" name="underbrace.png"></image>
</para><para>with <formula id="14">$ a\neq 0,b\neq 0, k\geq 0$</formula>.</para><para>For the <formula id="15">$ i$</formula>-th subsequence of <formula id="13">$ I$</formula>, define</para><para><formula id="16">\[ \epsilon_i:=\begin{array}{cc} 0 &amp; \mbox{if $k$ is odd},\\ (-1)^{k/2}\mathrm{sign}(ab) &amp; \mbox{if $k$ is even}. \end{array} \]</formula></para><para>For <formula id="17">$ f\in\mathbb{R}[x]$</formula> with <formula id="18">$ \deg f=n$</formula>, we have: <formula id="19">\[ C(\mathrm{stha}_n(f),\ldots,\mathrm{stha}_0(f)) = \#\{\alpha\in\R\mid f(\alpha)=0\} \]</formula> In other words, the signs of the principal Sturm-Habicht coefficients determine the number of distinct real roots of <formula id="7">$ f$</formula>. </para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1PrincipalSturmHabichtSequence" kindref="compound">PolynomialTraits_d::PrincipalSturmHabichtSequence</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="522" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1gae838e680fe5c167b28d39d76684e7abc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int CGAL::number_of_real_roots</definition>
        <argsstring>(InputIterator start, InputIterator end)</argsstring>
        <name>number_of_real_roots</name>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>start</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>computes the number of distinct real roots of <formula id="7">$ f$</formula> whose principal Sturm-Habicht coefficients are passed by the iterator range. </para>        </briefdescription>
        <detaileddescription>
<para>Given a polynomial <formula id="7">$ f$</formula>, or a range of values that is interpreted as the principal Sturm-Habicht coefficients of <formula id="7">$ f$</formula>, the function computes <formula id="8">\[ m:=\# \{\alpha\in\mathbb{R}\mid f(\alpha)=0\} \]</formula> that is, the number of distinct real roots of <formula id="7">$ f$</formula>.</para><para>The coefficient type of the polynomial, or the value type of the iterator range, respectively must be a model of <computeroutput><ref refid="classRealEmbeddable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RealEmbeddable</ref></computeroutput>. In the second version, it is not required to pass the exact princiapl Sturm-Habicht coefficients to the functions; it is only required that the sign of each element corresponds to the sign of the actual principal Sturm-Habicht coefficient.</para><para></para><para>We explain the internals of this function. For a sequence <formula id="9">$ I:=(a_0,\ldots,a_n)$</formula> of real numbers with <formula id="10">$ a_0\neq 0$</formula>, define <formula id="11">\[ C(I)=\ccSum{i=1}{s}\epsilon_i \]</formula> where <formula id="12">$ s$</formula> is the number of subsequences of <formula id="13">$ I$</formula> of the form</para><para><image type="html" name="underbrace.png"></image>
 <image type="latex" name="underbrace.png"></image>
</para><para>with <formula id="14">$ a\neq 0,b\neq 0, k\geq 0$</formula>.</para><para>For the <formula id="15">$ i$</formula>-th subsequence of <formula id="13">$ I$</formula>, define</para><para><formula id="16">\[ \epsilon_i:=\begin{array}{cc} 0 &amp; \mbox{if $k$ is odd},\\ (-1)^{k/2}\mathrm{sign}(ab) &amp; \mbox{if $k$ is even}. \end{array} \]</formula></para><para>For <formula id="17">$ f\in\mathbb{R}[x]$</formula> with <formula id="18">$ \deg f=n$</formula>, we have: <formula id="19">\[ C(\mathrm{stha}_n(f),\ldots,\mathrm{stha}_0(f)) = \#\{\alpha\in\R\mid f(\alpha)=0\} \]</formula> In other words, the signs of the principal Sturm-Habicht coefficients determine the number of distinct real roots of <formula id="7">$ f$</formula>. </para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1PrincipalSturmHabichtSequence" kindref="compound">PolynomialTraits_d::PrincipalSturmHabichtSequence</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="574" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga2a622bd113102bff26ca196256718346" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
          <param>
            <type>class <ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          </param>
        </templateparamlist>
        <type>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Permute::result_type</type>
        <definition>Polynomial_traits_d&lt;Polynomial_d&gt;::Permute::result_type CGAL::permute</definition>
        <argsstring>(const Polynomial_d &amp;p, InputIterator begin, InputIterator end)</argsstring>
        <name>permute</name>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>begin</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Permute</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1Permute" kindref="compound">PolynomialTraits_d::Permute</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1Permute" kindref="compound">PolynomialTraits_d::Permute</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="594" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga53bc65cafc49799ed8896fe2a8a4861f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
          <param>
            <type>typename <ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::polynomial_subresultants</definition>
        <argsstring>(Polynomial_d p, Polynomial_d q, OutputIterator out)</argsstring>
        <name>polynomial_subresultants</name>
        <param>
          <type><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          <declname>q</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>computes the polynomial subresultants of <formula id="20">$ p$</formula> and <formula id="21">$ q$</formula>, with respect to the outermost variable. </para>        </briefdescription>
        <detaileddescription>
<para>Each element is of type <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>.</para><para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1PolynomialSubresultants" kindref="compound">PolynomialTraits_d::PolynomialSubresultants</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1PolynomialSubresultants" kindref="compound">PolynomialTraits_d::PolynomialSubresultants</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="616" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1gaf4322cdb76c362dc6a76522a169f0402" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
          <param>
            <type>typename OutputIterator1</type>
          </param>
          <param>
            <type>typename OutputIterator2</type>
          </param>
          <param>
            <type>typename OutputIterator3</type>
          </param>
        </templateparamlist>
        <type>OutputIterator1</type>
        <definition>OutputIterator1 CGAL::polynomial_subresultants_with_cofactors</definition>
        <argsstring>(Polynomial_d p, Polynomial_d q, OutputIterator1 sres_out, OutputIterator2 coP_out, OutputIterator3 coQ_out)</argsstring>
        <name>polynomial_subresultants_with_cofactors</name>
        <param>
          <type><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          <declname>q</declname>
        </param>
        <param>
          <type>OutputIterator1</type>
          <declname>sres_out</declname>
        </param>
        <param>
          <type>OutputIterator2</type>
          <declname>coP_out</declname>
        </param>
        <param>
          <type>OutputIterator3</type>
          <declname>coQ_out</declname>
        </param>
        <briefdescription>
<para>computes the polynomial subresultants of <formula id="20">$ p$</formula> and <formula id="21">$ q$</formula>, <computeroutput>sres_out</computeroutput>, with respect to the outermost variable, and the cofactors for <formula id="22">$ P$</formula>, <computeroutput>coP_out</computeroutput> and <formula id="23">$ Q$</formula>, <computeroutput>coQ_out</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The elements of each output range are of type <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>.</para><para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1PolynomialSubresultantsWithCofactors" kindref="compound">PolynomialTraits_d::PolynomialSubresultantsWithCofactors</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1PolynomialSubresultantsWithCofactors" kindref="compound">PolynomialTraits_d::PolynomialSubresultantsWithCofactors</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="646" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga070e1d5407391e7105bb031ec556bff5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
          <param>
            <type>typename <ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::principal_sturm_habicht_sequence</definition>
        <argsstring>(typename Polynomial_d f, OutputIterator out)</argsstring>
        <name>principal_sturm_habicht_sequence</name>
        <param>
          <type>typename <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>computes the principal Sturm-Habicht coefficients of <formula id="7">$ f$</formula> with respect to the outermost variable. </para>        </briefdescription>
        <detaileddescription>
<para>Each element is of type <computeroutput>Polynomial_traits_d::Coefficient_type</computeroutput>b.</para><para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1PrincipalSturmHabichtSequence" kindref="compound">PolynomialTraits_d::PrincipalSturmHabichtSequence</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1PrincipalSturmHabichtSequence" kindref="compound">PolynomialTraits_d::PrincipalSturmHabichtSequence</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="674" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga5152759065025a30768f213f9a715e74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
          <param>
            <type>typename <ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::principal_subresultants</definition>
        <argsstring>(Polynomial_d p, Polynomial_d q, OutputIterator out)</argsstring>
        <name>principal_subresultants</name>
        <param>
          <type><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          <declname>q</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>computes the principal subresultants of <formula id="20">$ p$</formula> and <formula id="21">$ q$</formula>, with respect to the outermost variable. </para>        </briefdescription>
        <detaileddescription>
<para>Each element is of type <computeroutput>Polynomial_traits_d::Coefficient_type</computeroutput>.</para><para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1PrincipalSubresultants" kindref="compound">PolynomialTraits_d::PrincipalSubresultants</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1PrincipalSubresultants" kindref="compound">PolynomialTraits_d::PrincipalSubresultants</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="698" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1gaf4ca3b27f40196a63298a6b9f158e979" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::pseudo_division</definition>
        <argsstring>(const Polynomial_d &amp;f, const Polynomial_d &amp;g, Polynomial_d &amp;q, Polynomial_d &amp;r, Polynomial_traits_d&lt; Polynomial_d &gt;::Coefficient_type &amp;D)</argsstring>
        <name>pseudo_division</name>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Coefficient_type &amp;</type>
          <declname>D</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Pseudo_division</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1PseudoDivision" kindref="compound">PolynomialTraits_d::PseudoDivision</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1PseudoDivision" kindref="compound">PolynomialTraits_d::PseudoDivision</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="721" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga99af0d77f7c9b3172e38559f3795e40b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Pseudo_division_quotient::result_type</type>
        <definition>Polynomial_traits_d&lt;Polynomial_d&gt;::Pseudo_division_quotient::result_type CGAL::pseudo_division_quotient</definition>
        <argsstring>(const Polynomial_d &amp;p, const Polynomial_d &amp;q)</argsstring>
        <name>pseudo_division_quotient</name>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Pseudo_division_quotient</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1PseudoDivisionQuotient" kindref="compound">PolynomialTraits_d::PseudoDivisionQuotient</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1PseudoDivisionQuotient" kindref="compound">PolynomialTraits_d::PseudoDivisionQuotient</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="746" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1gab149193f21323bc72114d5f4fec7ccf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Pseudo_division_remainder::result_type</type>
        <definition>Polynomial_traits_d&lt;Polynomial_d&gt;::Pseudo_division_remainder::result_type CGAL::pseudo_division_remainder</definition>
        <argsstring>(const Polynomial_d &amp;p, const Polynomial_d &amp;q)</argsstring>
        <name>pseudo_division_remainder</name>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Pseudo_division_remainder</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1PseudoDivisionRemainder" kindref="compound">PolynomialTraits_d::PseudoDivisionRemainder</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1PseudoDivisionRemainder" kindref="compound">PolynomialTraits_d::PseudoDivisionRemainder</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="767" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1gae9a956401279deeecd1caededf9a3f2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Resultant::result_type</type>
        <definition>Polynomial_traits_d&lt;Polynomial_d&gt;::Resultant::result_type CGAL::resultant</definition>
        <argsstring>(const Polynomial_d &amp;p, const Polynomial_d &amp;q)</argsstring>
        <name>resultant</name>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Resultant</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1Resultant" kindref="compound">PolynomialTraits_d::Resultant</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1Resultant" kindref="compound">PolynomialTraits_d::Resultant</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="788" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga2e8318e6db05a8ff968e233534fcb971" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Scale_homogeneous::result_type</type>
        <definition>Polynomial_traits_d&lt;Polynomial_d&gt;::Scale_homogeneous::result_type CGAL::scale_homogeneous</definition>
        <argsstring>(const Polynomial_d &amp;p, const Polynomial_traits_d&lt; Polynomial_d &gt;::Innermost_coefficient_type &amp;u, const Polynomial_traits_d&lt; Polynomial_d &gt;::Innermost_coefficient_type &amp;v, int index=Polynomial_traits_d&lt; Polynomial_d &gt;::d-1)</argsstring>
        <name>scale_homogeneous</name>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Innermost_coefficient_type &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Innermost_coefficient_type &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
          <defval>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::d-1</defval>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Scale_homogeneous</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1ScaleHomogeneous" kindref="compound">PolynomialTraits_d::ScaleHomogeneous</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1ScaleHomogeneous" kindref="compound">PolynomialTraits_d::ScaleHomogeneous</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="809" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1gac3974a1cc5472c3d6fc9839ac006ba42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Scale::result_type</type>
        <definition>Polynomial_traits_d&lt;Polynomial_d&gt;::Scale::result_type CGAL::scale</definition>
        <argsstring>(const Polynomial_d &amp;p, const Polynomial_traits_d&lt; Polynomial_d &gt;::Innermost_coefficient_type &amp;a, int index=Polynomial_traits_d&lt; Polynomial_d &gt;::d-1)</argsstring>
        <name>scale</name>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Innermost_coefficient_type &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
          <defval>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::d-1</defval>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Scale</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1Scale" kindref="compound">PolynomialTraits_d::Scale</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1Scale" kindref="compound">PolynomialTraits_d::Scale</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="834" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga19a6f91ab72ba7ad5139f7c7bc759e08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Shift::result_type</type>
        <definition>Polynomial_traits_d&lt;Polynomial_d&gt;::Shift::result_type CGAL::shift</definition>
        <argsstring>(const Polynomial_d &amp;p, int i, int index=Polynomial_traits_d&lt; Polynomial_d &gt;::d-1)</argsstring>
        <name>shift</name>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
          <defval>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::d-1</defval>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Shift</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1Shift" kindref="compound">PolynomialTraits_d::Shift</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1Shift" kindref="compound">PolynomialTraits_d::Shift</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="857" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga68029db4a3453cf6dd6b4621008fdcbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
          <param>
            <type>class <ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          </param>
        </templateparamlist>
        <type>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Sign_at_homogeneous::result_type</type>
        <definition>Polynomial_traits_d&lt;Polynomial_d&gt;::Sign_at_homogeneous::result_type CGAL::sign_at_homogeneous</definition>
        <argsstring>(const Polynomial_d &amp;p, InputIterator begin, InputIterator end)</argsstring>
        <name>sign_at_homogeneous</name>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>begin</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Sign_at_homogeneous</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1SignAtHomogeneous" kindref="compound">PolynomialTraits_d::SignAtHomogeneous</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1SignAtHomogeneous" kindref="compound">PolynomialTraits_d::SignAtHomogeneous</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="879" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga642fc79148ddbe2212110ab77471a440" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
          <param>
            <type>class <ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          </param>
        </templateparamlist>
        <type>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Sign_at::result_type</type>
        <definition>Polynomial_traits_d&lt;Polynomial_d&gt;::Sign_at::result_type CGAL::sign_at</definition>
        <argsstring>(const Polynomial_d &amp;p, InputIterator begin, InputIterator end)</argsstring>
        <name>sign_at</name>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>begin</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Sign_at</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1SignAt" kindref="compound">PolynomialTraits_d::SignAt</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1SignAt" kindref="compound">PolynomialTraits_d::SignAt</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="902" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga58d5d7c20cbbe6bddf320483f44fb53d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
          <param>
            <type>class <ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::square_free_factorize</definition>
        <argsstring>(const Polynomial_d &amp;p, OutputIterator it, Polynomial_traits_d&lt; Polynomial &gt;::Innermost_coefficient &amp;a)</argsstring>
        <name>square_free_factorize</name>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>it</declname>
        </param>
        <param>
          <type>Polynomial_traits_d&lt; Polynomial &gt;::Innermost_coefficient &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Square_free_factorize</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1SquareFreeFactorize" kindref="compound">PolynomialTraits_d::SquareFreeFactorize</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1SquareFreeFactorize" kindref="compound">PolynomialTraits_d::SquareFreeFactorize</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="925" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga102be1c2899b1ae965b165d7a1c5a481" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
          <param>
            <type>class <ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::square_free_factorize</definition>
        <argsstring>(const Polynomial_d &amp;p, OutputIterator it)</argsstring>
        <name>square_free_factorize</name>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Square_free_factorize</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1SquareFreeFactorize" kindref="compound">PolynomialTraits_d::SquareFreeFactorize</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1SquareFreeFactorize" kindref="compound">PolynomialTraits_d::SquareFreeFactorize</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="949" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga12371bd1188ab9853a10715738d57e4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
          <param>
            <type>class <ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::square_free_factorize_up_to_constant_factor</definition>
        <argsstring>(const Polynomial_d &amp;p, OutputIterator it)</argsstring>
        <name>square_free_factorize_up_to_constant_factor</name>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Square_free_factorize_up_to_constant_factor</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1SquareFreeFactorizeUpToConstantFactor" kindref="compound">PolynomialTraits_d::SquareFreeFactorizeUpToConstantFactor</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1SquareFreeFactorizeUpToConstantFactor" kindref="compound">PolynomialTraits_d::SquareFreeFactorizeUpToConstantFactor</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="971" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1gadbcadbf6f98613eac77b422cdfcbce64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
          <param>
            <type>typename <ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::sturm_habicht_sequence</definition>
        <argsstring>(Polynomial_d f, OutputIterator out)</argsstring>
        <name>sturm_habicht_sequence</name>
        <param>
          <type><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>computes the Sturm-Habicht-sequence of <formula id="7">$ f$</formula> with respect to the outermost variable. </para>        </briefdescription>
        <detaileddescription>
<para>Each element is of type <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>.</para><para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1SturmHabichtSequence" kindref="compound">PolynomialTraits_d::SturmHabichtSequence</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1SturmHabichtSequence" kindref="compound">PolynomialTraits_d::SturmHabichtSequence</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="993" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga5e5bd2891071ccd2d103e45d22fee496" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
          <param>
            <type>typename OutputIterator1</type>
          </param>
          <param>
            <type>typename OutputIterator2</type>
          </param>
          <param>
            <type>typename OutputIterator3</type>
          </param>
        </templateparamlist>
        <type>OutputIterator1</type>
        <definition>OutputIterator1 CGAL::sturm_habicht_sequence_with_cofactors</definition>
        <argsstring>(Polynomial_d f, OutputIterator1 stha_out, OutputIterator2 cof_out, OutputIterator3 cofx_out)</argsstring>
        <name>sturm_habicht_sequence_with_cofactors</name>
        <param>
          <type><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type>OutputIterator1</type>
          <declname>stha_out</declname>
        </param>
        <param>
          <type>OutputIterator2</type>
          <declname>cof_out</declname>
        </param>
        <param>
          <type>OutputIterator3</type>
          <declname>cofx_out</declname>
        </param>
        <briefdescription>
<para>computes the Sturm-Habicht sequence of <formula id="7">$ f$</formula> <computeroutput>stha_out</computeroutput>, with respect to the outermost variable, and the cofactors for <formula id="7">$ f$</formula>, <computeroutput>cof_out</computeroutput> and <formula id="24">$ f&apos;$</formula>, <computeroutput>cofx_out</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The elements of each output range are of type <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>.</para><para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1SturmHabichtSequenceWithCofactors" kindref="compound">PolynomialTraits_d::SturmHabichtSequenceWithCofactors</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1SturmHabichtSequenceWithCofactors" kindref="compound">PolynomialTraits_d::SturmHabichtSequenceWithCofactors</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="1021" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1gada3175d15716c0369c62033ca3c6efbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
          <param>
            <type>class <ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="structCGAL_1_1Coercion__traits" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">CGAL::Coercion_traits</ref>&lt; Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Innermost_coefficient, std::iterator_traits&lt; Input_iterator &gt;::value_type &gt;::Type</type>
        <definition>CGAL::Coercion_traits&lt;Polynomial_traits_d&lt;Polynomial_d&gt;::Innermost_coefficient,std::iterator_traits&lt;Input_iterator&gt;::value_type&gt;::Type CGAL::substitute_homogeneous</definition>
        <argsstring>(const Polynomial_d &amp;p, InputIterator begin, InputIterator end)</argsstring>
        <name>substitute_homogeneous</name>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>begin</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Substitute_homogeneous</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1SubstituteHomogeneous" kindref="compound">PolynomialTraits_d::SubstituteHomogeneous</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1SubstituteHomogeneous" kindref="compound">PolynomialTraits_d::SubstituteHomogeneous</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="1049" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1gab56d5f9b520a1a95aeb7823335088653" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
          <param>
            <type>class <ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="structCGAL_1_1Coercion__traits" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">CGAL::Coercion_traits</ref>&lt; Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Innermost_coefficient, std::iterator_traits&lt; Input_iterator &gt;::value_type &gt;::Type</type>
        <definition>CGAL::Coercion_traits&lt;Polynomial_traits_d&lt;Polynomial_d&gt;::Innermost_coefficient,std::iterator_traits&lt;Input_iterator&gt;::value_type&gt;::Type CGAL::substitute</definition>
        <argsstring>(const Polynomial_d &amp;p, InputIterator begin, InputIterator end)</argsstring>
        <name>substitute</name>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>begin</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Substitute</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1Substitute" kindref="compound">PolynomialTraits_d::Substitute</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1Substitute" kindref="compound">PolynomialTraits_d::Substitute</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="1075" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1gaa555a2d0a5bf3730c337f08f07356c07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Swap::result_type</type>
        <definition>Polynomial_traits_d&lt;Polynomial_d&gt;::Swap::result_type CGAL::swap</definition>
        <argsstring>(const Polynomial_d &amp;p, int i, int j)</argsstring>
        <name>swap</name>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Swap</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1Swap" kindref="compound">PolynomialTraits_d::Swap</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1Swap" kindref="compound">PolynomialTraits_d::Swap</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="1098" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga240791d9e31b77bbd8f4b0cae54520dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Total_degree::result_type</type>
        <definition>Polynomial_traits_d&lt;Polynomial_d&gt;::Total_degree::result_type CGAL::total_degree</definition>
        <argsstring>(const Polynomial_d &amp;p)</argsstring>
        <name>total_degree</name>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Total_degree</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1TotalDegree" kindref="compound">PolynomialTraits_d::TotalDegree</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1TotalDegree" kindref="compound">PolynomialTraits_d::TotalDegree</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="1120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga35f4b0c8133903dc4f9ee862edc41633" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Translate_homogeneous::result_type</type>
        <definition>Polynomial_traits_d&lt;Polynomial_d&gt;::Translate_homogeneous::result_type CGAL::translate_homogeneous</definition>
        <argsstring>(const Polynomial_d &amp;p, const Polynomial_traits_d&lt; Polynomial_d &gt;::Innermost_coefficient_type &amp;u, const Polynomial_traits_d&lt; Polynomial_d &gt;::Innermost_coefficient_type &amp;v, int index=Polynomial_traits_d&lt; Polynomial_d &gt;::d-1)</argsstring>
        <name>translate_homogeneous</name>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Innermost_coefficient_type &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Innermost_coefficient_type &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
          <defval>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::d-1</defval>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Translate_homogeneous</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1TranslateHomogeneous" kindref="compound">PolynomialTraits_d::TranslateHomogeneous</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1TranslateHomogeneous" kindref="compound">PolynomialTraits_d::TranslateHomogeneous</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="1142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1gab83a53e36323dfc3c09e775091fe08c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Translate::result_type</type>
        <definition>Polynomial_traits_d&lt;Polynomial_d&gt;::Translate::result_type CGAL::translate</definition>
        <argsstring>(const Polynomial_d &amp;p, const Polynomial_traits_d&lt; Polynomial_d &gt;::Innermost_coefficient_type &amp;a, int index=Polynomial_traits_d&lt; Polynomial_d &gt;::d-1)</argsstring>
        <name>translate</name>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Innermost_coefficient_type &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
          <defval>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::d-1</defval>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Translate</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1Translate" kindref="compound">PolynomialTraits_d::Translate</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1Translate" kindref="compound">PolynomialTraits_d::Translate</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="1168" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1gacc1787ccc9ee24f9682190e8f77f8431" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Univariate_content::result_type</type>
        <definition>Polynomial_traits_d&lt;Polynomial_d&gt;::Univariate_content::result_type CGAL::univariate_content</definition>
        <argsstring>(const Polynomial_d &amp;p)</argsstring>
        <name>univariate_content</name>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::UnivariateContent</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1UnivariateContent" kindref="compound">PolynomialTraits_d::UnivariateContent</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput>PolynomialTraits_d::Univariate_Content</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="1193" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga1a9cdc681385072e833eee7e161cf9fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type>Polynomial_traits_d&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Univariate_content_up_to_constant_factor::result_type</type>
        <definition>Polynomial_traits_d&lt;Polynomial_d&gt;::Univariate_content_up_to_constant_factor::result_type CGAL::univariate_content_up_to_constant_factor</definition>
        <argsstring>(const Polynomial_d &amp;p)</argsstring>
        <name>univariate_content_up_to_constant_factor</name>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Univariate_content_up_to_constant_factor</computeroutput>.</para><para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1UnivariateContentUpToConstantFactor" kindref="compound">PolynomialTraits_d::UnivariateContentUpToConstantFactor</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1UnivariateContentUpToConstantFactor" kindref="compound">PolynomialTraits_d::UnivariateContentUpToConstantFactor</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="1213" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
