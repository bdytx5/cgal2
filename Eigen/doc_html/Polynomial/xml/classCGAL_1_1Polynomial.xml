<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Polynomial" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Polynomial</compoundname>
    <includes local="no">CGAL/Polynomial.h</includes>
    <templateparamlist>
      <param>
        <type>typename Coeff</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Polynomial_1a97a5a7bec1f3ca2ac4588580fec1d56d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Polynomial&lt; Coeff &gt;::Polynomial</definition>
        <argsstring>()</argsstring>
        <name>Polynomial</name>
        <briefdescription>
<para>Introduces an variable initialized with 0. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polynomial.h" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polynomial_1a971cfe1202a4ff2306b5bb0371675f25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Polynomial&lt; Coeff &gt;::Polynomial</definition>
        <argsstring>(const Polynomial &amp;x)</argsstring>
        <name>Polynomial</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Polynomial" kindref="compound">Polynomial</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>copy constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polynomial.h" line="82" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polynomial_1a84f71d2c12ff83f51c299cdef78f2e20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Polynomial&lt; Coeff &gt;::Polynomial</definition>
        <argsstring>(const int &amp;i)</argsstring>
        <name>Polynomial</name>
        <param>
          <type>const int &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Constructor from int. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polynomial.h" line="87" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polynomial_1aad2c54e38c83adb9ec6e1c2ad26659f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Polynomial&lt; Coeff &gt;::Polynomial</definition>
        <argsstring>(const Coeff &amp;x)</argsstring>
        <name>Polynomial</name>
        <param>
          <type>const Coeff &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Constructor from type Coeff. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polynomial.h" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polynomial_1a4c038945d2b44ae15cc71cc2a955dddc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Forward_iterator</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>CGAL::Polynomial&lt; Coeff &gt;::Polynomial</definition>
        <argsstring>(Forward_iterator first, Forward_iterator last)</argsstring>
        <name>Polynomial</name>
        <param>
          <type>Forward_iterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>Forward_iterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Constructor from iterator range with value type Coeff. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polynomial.h" line="98" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <memberdef kind="function" id="classCGAL_1_1Polynomial_1aa897c57da183c247d6db93e905d16949" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator CGAL::Polynomial&lt; Coeff &gt;::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
<para>A const random access iterator pointing to the constant coefficient. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polynomial.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polynomial_1ad7ab359dd0fdb3f20832c240bb54cef5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator CGAL::Polynomial&lt; Coeff &gt;::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
<para>A const random access iterator pointing beyond the leading coefficient. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polynomial.h" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polynomial_1a128e5f6b9c341620d1d68639004b80a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CGAL::Polynomial&lt; Coeff &gt;::degree</definition>
        <argsstring>() const</argsstring>
        <name>degree</name>
        <briefdescription>
<para>The degree of the polynomial in <formula id="4">$ x$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>The degree of the zero polynomial is 0. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polynomial.h" line="118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polynomial_1af7c8e8a60d67eac5d541219623bd52ce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const NT &amp;</type>
        <definition>const NT&amp; CGAL::Polynomial&lt; Coeff &gt;::operator[]</definition>
        <argsstring>(unsigned int i) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Const access to the coefficient of <formula id="5">$ x^i$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polynomial.h" line="123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polynomial_1a979281b1eb60b276e00e2092a3729000" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const NT &amp;</type>
        <definition>const NT&amp; CGAL::Polynomial&lt; Coeff &gt;::lcoeff</definition>
        <argsstring>() const</argsstring>
        <name>lcoeff</name>
        <briefdescription>
<para>Const access to the leading coefficient. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polynomial.h" line="128" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="related">
      <memberdef kind="function" id="classCGAL_1_1Polynomial_1af1bb56d21dde8b8ddbd244b3885f12b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Polynomial&lt; Coeff &gt; &amp;poly)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Polynomial" kindref="compound">Polynomial</ref>&lt; Coeff &gt; &amp;</type>
          <declname>poly</declname>
        </param>
        <briefdescription>
<para>Writes <computeroutput>poly</computeroutput> to ostream <computeroutput>os</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The format depends on the <computeroutput>CGAL::IO::MODE</computeroutput> of <computeroutput>os</computeroutput>. In case the mode is <computeroutput><ref refid="group__PkgIOstreams_1ggac0c882c273b950eb9efca32420e2bef0a13a67787bf1f5275048052d9001e1bee" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Stream_support.tag">CGAL::IO::ASCII</ref></computeroutput> the format is <formula id="2">$ P[d(0,a_0)(1,a_1)\dots(d,a_d)]$</formula>, where <formula id="3">$ d$</formula> is the degree of the polynomial. The format is output sensitive, that is, coefficients that are zero are not reported. In case the mode is <computeroutput><ref refid="group__PkgIOstreams_1ggac0c882c273b950eb9efca32420e2bef0a5d045c18474dfd381b1c2b1dd1e612c5" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Stream_support.tag">CGAL::IO::PRETTY</ref></computeroutput> the format is human readable. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polynomial.h" line="145" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polynomial_1ae471c62d442cc5d7970a88914ad6de1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, const Polynomial&lt; Coeff &gt; &amp;poly)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Polynomial" kindref="compound">Polynomial</ref>&lt; Coeff &gt; &amp;</type>
          <declname>poly</declname>
        </param>
        <briefdescription>
<para>Reads <computeroutput>poly</computeroutput> from istream <computeroutput>is</computeroutput> in format <formula id="2">$ P[d(0,a_0)(1,a_1)\dots(d,a_d)]$</formula>, the output format in mode <computeroutput><ref refid="group__PkgIOstreams_1ggac0c882c273b950eb9efca32420e2bef0a13a67787bf1f5275048052d9001e1bee" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Stream_support.tag">CGAL::IO::ASCII</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polynomial.h" line="153" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An instance of the data type <computeroutput><ref refid="classCGAL_1_1Polynomial" kindref="compound">Polynomial</ref></computeroutput> represents a polynomial <formula id="0">$ p = a_0 + a_1*x + ...a_i*x^i$</formula> from the ring <formula id="1">$ \mathrm{Coeff}[x]$</formula>. </para>    </briefdescription>
    <detaileddescription>
<para><computeroutput>Coeff</computeroutput> can itself be an instance of <computeroutput><ref refid="classCGAL_1_1Polynomial" kindref="compound">Polynomial</ref></computeroutput>, yielding a form of multivariate polynomials.</para><para>The template argument <computeroutput>Coeff</computeroutput> must be at least a model of <computeroutput><ref refid="classIntegralDomainWithoutDivision" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">IntegralDomainWithoutDivision</ref></computeroutput>. For all operations naturally involving division, an <computeroutput><ref refid="classIntegralDomain" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">IntegralDomain</ref></computeroutput> is required. <computeroutput><ref refid="classCGAL_1_1Polynomial" kindref="compound">Polynomial</ref></computeroutput> offers a full set of algebraic operators, i.e. binary <computeroutput>+</computeroutput>, <computeroutput>-</computeroutput>, <computeroutput>*</computeroutput>, <computeroutput>/</computeroutput> as well as <computeroutput>+=</computeroutput>, <computeroutput>-=</computeroutput>, <computeroutput>*=</computeroutput>, <computeroutput>/=</computeroutput>; not only for polynomials but also for a polynomial and a number of the coefficient type. (The <computeroutput>/</computeroutput> operator must only be used for integral divisions, i.e. those with remainder zero.) The operations are implemented naively: <computeroutput>+</computeroutput> and <computeroutput>-</computeroutput> need a number of <computeroutput>Coeff</computeroutput> operations which is linear in the degree while * is quadratic. Unary <computeroutput>+</computeroutput> and <computeroutput>-</computeroutput> and (in)equality <computeroutput>==</computeroutput>, <computeroutput>!=</computeroutput> are provided as well.</para><para><computeroutput><ref refid="classCGAL_1_1Polynomial" kindref="compound">Polynomial</ref></computeroutput> is a model of <computeroutput><ref refid="classLessThanComparable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">LessThanComparable</ref></computeroutput> if <computeroutput>Coeff</computeroutput> is a model of <computeroutput><ref refid="classLessThanComparable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">LessThanComparable</ref></computeroutput>. In this case <computeroutput><ref refid="classCGAL_1_1Polynomial" kindref="compound">Polynomial</ref></computeroutput> provides comparison operators <computeroutput>&lt;</computeroutput>, <computeroutput>&gt;</computeroutput>, <computeroutput>&lt;=</computeroutput>, <computeroutput>&gt;=</computeroutput>, where the comparison amounts to lexicographic comparison of the coefficient sequence, with the coefficient of the highest power taking precedence over those of lower powers.</para><para><computeroutput><ref refid="classCGAL_1_1Polynomial" kindref="compound">Polynomial</ref></computeroutput> is a model of <computeroutput><ref refid="classFraction" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">Fraction</ref></computeroutput> if <computeroutput>Coeff</computeroutput> is a model of <computeroutput><ref refid="classFraction" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">Fraction</ref></computeroutput>. In this case <ref refid="classCGAL_1_1Polynomial" kindref="compound">Polynomial</ref> may be decomposed into a (scalar) denominator and a compound numerator with a simpler coefficient type. Often operations can be performed faster on these denominator-free multiples.</para><para><computeroutput><ref refid="classCGAL_1_1Polynomial" kindref="compound">Polynomial</ref></computeroutput> is a model of <computeroutput><ref refid="classModularizable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Modular_arithmetic.tag">Modularizable</ref></computeroutput> if <computeroutput>Coeff</computeroutput> is a model of <computeroutput><ref refid="classModularizable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Modular_arithmetic.tag">Modularizable</ref></computeroutput>, where the homomorphic map on the polynomials is simply defined as the canonical extension of the homomorphic map which is defined on the coefficient type.</para><para><bold>Implementation</bold><linebreak/>
</para><para>Inexact and limited-precision types can be used as coefficients, but at the user&apos;s risk. The algorithms implemented were written with exact number types in mind.</para><para>This data type is implemented as a handle type with value semantics using <computeroutput>CGAL::Handle_with_policy</computeroutput>, where <computeroutput>HandlePolicy</computeroutput> is <computeroutput>Handle_policy_no_union</computeroutput>. An important invariant to be preserved by all methods is that the coefficient sequence does not contain leading zero coefficients (where leading means at the high-degree end), with the exception that the zero polynomial is represented by a single zero coefficient.</para><para><xrefsect id="models_1_models000002"><xreftitle>Is Model Of</xreftitle><xrefdescription><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para><para><computeroutput><ref refid="classAssignable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">Assignable</ref></computeroutput> </para><para><computeroutput><ref refid="classCopyConstructible" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">CopyConstructible</ref></computeroutput> </para><para><computeroutput><ref refid="classDefaultConstructible" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">DefaultConstructible</ref></computeroutput> </para><para><computeroutput><ref refid="classEqualityComparable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">EqualityComparable</ref></computeroutput> </para><para><computeroutput><ref refid="classImplicitInteroperable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">ImplicitInteroperable</ref></computeroutput> with int </para><para><computeroutput><ref refid="classImplicitInteroperable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">ImplicitInteroperable</ref></computeroutput> with Coeff </para><para><computeroutput><ref refid="classFraction" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">Fraction</ref></computeroutput> if Coeff is model of <computeroutput><ref refid="classFraction" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">Fraction</ref></computeroutput> </para><para><computeroutput><ref refid="classLessThanComparable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">LessThanComparable</ref></computeroutput> if Coeff is model of <computeroutput><ref refid="classLessThanComparable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">LessThanComparable</ref></computeroutput> </para><para><computeroutput><ref refid="classModularizable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Modular_arithmetic.tag">Modularizable</ref></computeroutput> if <computeroutput>Coeff</computeroutput> is model of <computeroutput><ref refid="classModularizable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Modular_arithmetic.tag">Modularizable</ref></computeroutput> </para></xrefdescription></xrefsect></para>    </detaileddescription>
    <location file="CGAL/Polynomial.h" line="68" column="1" bodyfile="CGAL/Polynomial.h" bodystart="68" bodyend="132"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Polynomial_1aa897c57da183c247d6db93e905d16949" prot="public" virt="non-virtual"><scope>CGAL::Polynomial</scope><name>begin</name></member>
      <member refid="classCGAL_1_1Polynomial_1a128e5f6b9c341620d1d68639004b80a2" prot="public" virt="non-virtual"><scope>CGAL::Polynomial</scope><name>degree</name></member>
      <member refid="classCGAL_1_1Polynomial_1ad7ab359dd0fdb3f20832c240bb54cef5" prot="public" virt="non-virtual"><scope>CGAL::Polynomial</scope><name>end</name></member>
      <member refid="classCGAL_1_1Polynomial_1a979281b1eb60b276e00e2092a3729000" prot="public" virt="non-virtual"><scope>CGAL::Polynomial</scope><name>lcoeff</name></member>
      <member refid="classCGAL_1_1Polynomial_1af1bb56d21dde8b8ddbd244b3885f12b3" prot="public" virt="non-virtual"><scope>CGAL::Polynomial</scope><name>operator&lt;&lt;</name></member>
      <member refid="classCGAL_1_1Polynomial_1ae471c62d442cc5d7970a88914ad6de1d" prot="public" virt="non-virtual"><scope>CGAL::Polynomial</scope><name>operator&gt;&gt;</name></member>
      <member refid="classCGAL_1_1Polynomial_1af7c8e8a60d67eac5d541219623bd52ce" prot="public" virt="non-virtual"><scope>CGAL::Polynomial</scope><name>operator[]</name></member>
      <member refid="classCGAL_1_1Polynomial_1a97a5a7bec1f3ca2ac4588580fec1d56d" prot="public" virt="non-virtual"><scope>CGAL::Polynomial</scope><name>Polynomial</name></member>
      <member refid="classCGAL_1_1Polynomial_1a971cfe1202a4ff2306b5bb0371675f25" prot="public" virt="non-virtual"><scope>CGAL::Polynomial</scope><name>Polynomial</name></member>
      <member refid="classCGAL_1_1Polynomial_1a84f71d2c12ff83f51c299cdef78f2e20" prot="public" virt="non-virtual"><scope>CGAL::Polynomial</scope><name>Polynomial</name></member>
      <member refid="classCGAL_1_1Polynomial_1aad2c54e38c83adb9ec6e1c2ad26659f2" prot="public" virt="non-virtual"><scope>CGAL::Polynomial</scope><name>Polynomial</name></member>
      <member refid="classCGAL_1_1Polynomial_1a4c038945d2b44ae15cc71cc2a955dddc" prot="public" virt="non-virtual"><scope>CGAL::Polynomial</scope><name>Polynomial</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
