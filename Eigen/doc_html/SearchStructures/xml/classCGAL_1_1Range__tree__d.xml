<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Range__tree__d" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Range_tree_d</compoundname>
    <includes local="no">CGAL/Range_tree_d.h</includes>
    <templateparamlist>
      <param>
        <type>typename <ref refid="classCGAL_1_1Range__tree__d_1ad9fb8b0271a6a4810d67268cfb9ffa9f" kindref="member">Data</ref></type>
      </param>
      <param>
        <type>typename <ref refid="classCGAL_1_1Range__tree__d_1aa35fe46d5c5d3be9df752e2a0e968b9b" kindref="member">Window</ref></type>
      </param>
      <param>
        <type>typename <ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">Traits</ref></type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classCGAL_1_1Range__tree__d_1ad9fb8b0271a6a4810d67268cfb9ffa9f" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Range_tree_d&lt; Data, Window, Traits &gt;::Data</definition>
        <argsstring></argsstring>
        <name>Data</name>
        <briefdescription>
<para>container <computeroutput>Data</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Range_tree_d.h" line="29" column="1" bodyfile="CGAL/Range_tree_d.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Range__tree__d_1aa35fe46d5c5d3be9df752e2a0e968b9b" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Range_tree_d&lt; Data, Window, Traits &gt;::Window</definition>
        <argsstring></argsstring>
        <name>Window</name>
        <briefdescription>
<para>container <computeroutput>Window</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Range_tree_d.h" line="34" column="1" bodyfile="CGAL/Range_tree_d.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Range__tree__d_1a22d6d67d41740d8c503a01692e4fa571" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Range__tree__d" kindref="compound">Range_tree_d</ref>&lt; <ref refid="classCGAL_1_1Range__tree__d_1ad9fb8b0271a6a4810d67268cfb9ffa9f" kindref="member">Data</ref>, <ref refid="classCGAL_1_1Range__tree__d_1aa35fe46d5c5d3be9df752e2a0e968b9b" kindref="member">Window</ref>, <ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">Traits</ref> &gt;</type>
        <definition>Range_tree_d&lt;Data, Window, Traits&gt; CGAL::Range_tree_d&lt; Data, Window, Traits &gt;::r</definition>
        <argsstring>(Tree_base&lt; Data, Window &gt; sublayer_tree)</argsstring>
        <name>r</name>
        <param>
          <type>Tree_base&lt; <ref refid="classCGAL_1_1Range__tree__d_1ad9fb8b0271a6a4810d67268cfb9ffa9f" kindref="member">Data</ref>, <ref refid="classCGAL_1_1Range__tree__d_1aa35fe46d5c5d3be9df752e2a0e968b9b" kindref="member">Window</ref> &gt;</type>
          <declname>sublayer_tree</declname>
        </param>
        <briefdescription>
<para>A range tree is constructed, such that the subtree of each vertex is of the same type prototype <computeroutput>sublayer_tree</computeroutput> is. </para>        </briefdescription>
        <detaileddescription>
<para>We assume that the dimension of the tree is <formula id="0">$ d$</formula>. This means, that <computeroutput>sublayer_tree</computeroutput> is a prototype of a <formula id="4">$ d-1$</formula>-dimensional tree. All data items of the <formula id="0">$ d$</formula>-dimensional range tree have container type <computeroutput>Data</computeroutput>. The query window of the tree has container type <computeroutput>Window</computeroutput>. <computeroutput>Traits</computeroutput> provides access to the corresponding data slots of container <computeroutput>Data</computeroutput> and <computeroutput>Window</computeroutput> for the <formula id="0">$ d$</formula>-th dimension. The traits class <computeroutput>Traits</computeroutput> must at least provide all functions and type definitions as described in, for example, the reference page for <computeroutput><ref refid="classCGAL_1_1tree__point__traits" kindref="compound">tree_point_traits</ref></computeroutput>. The template class described there is fully generic and should fulfill the most requirements one can have. In order to generate a one-dimensional range tree instantiate <computeroutput><ref refid="classCGAL_1_1Tree__anchor" kindref="compound">Tree_anchor</ref>&lt;Data, Window&gt; sublayer_tree</computeroutput> with the same template parameters (<computeroutput>Data</computeroutput> and <computeroutput>Window</computeroutput>) <computeroutput><ref refid="classCGAL_1_1Range__tree__d" kindref="compound">Range_tree_d</ref></computeroutput> is defined. In order to construct a two-dimensional range tree, create <computeroutput><ref refid="classCGAL_1_1Range__tree__d" kindref="compound">Range_tree_d</ref></computeroutput> with a one-dimensional <computeroutput><ref refid="classCGAL_1_1Range__tree__d" kindref="compound">Range_tree_d</ref></computeroutput> with the corresponding <computeroutput>Traits</computeroutput> class of the first dimension.</para><para><simplesect kind="pre"><para><computeroutput>Traits::Data==Data</computeroutput> and <computeroutput>Traits::Window==Window.</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Range_tree_d.h" line="79" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <memberdef kind="function" id="classCGAL_1_1Range__tree__d_1aa6452da6851a8459e661c813636b5af0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Range_tree_d&lt; Data, Window, Traits &gt;::make_tree</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last)</argsstring>
        <name>make_tree</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>The tree is constructed according to the data items in the sequence between the element pointed by iterator <computeroutput>first</computeroutput> and iterator <computeroutput>last</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The data items of the iterator must have type <computeroutput>Data</computeroutput>. <simplesect kind="pre"><para>This function can only be called once. If it is the first call the tree is build and <computeroutput>true</computeroutput> is returned. Otherwise, nothing is done but a CGAL warning is given and <computeroutput>false</computeroutput> returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Range_tree_d.h" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Range__tree__d_1a57706a4b8d778e8a6800b706ec5772cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::Range_tree_d&lt; Data, Window, Traits &gt;::window_query</definition>
        <argsstring>(Window win, OutputIterator result)</argsstring>
        <name>window_query</name>
        <param>
          <type><ref refid="classCGAL_1_1Range__tree__d_1aa35fe46d5c5d3be9df752e2a0e968b9b" kindref="member">Window</ref></type>
          <declname>win</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>All elements that lay inside the <formula id="0">$ d$</formula>-dimensional interval defined through <computeroutput>win</computeroutput> are placed in the sequence container of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput>; the output iterator that points to the last location the function wrote to is returned. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Range_tree_d.h" line="105" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Range__tree__d_1add237e6ce25a438526b125a7e2312fa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Range_tree_d&lt; Data, Window, Traits &gt;::is_valid</definition>
        <argsstring>()</argsstring>
        <name>is_valid</name>
        <briefdescription>
<para>The tree structure is checked. </para>        </briefdescription>
        <detaileddescription>
<para>For each vertex the subtree is checked on being valid and it is checked whether the value of the <computeroutput>Key_type</computeroutput> of a vertex corresponds to the highest <computeroutput>Key_type</computeroutput> value of the left subtree. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Range_tree_d.h" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Range__tree__d_1a9996f1780de02d4d64278b3ece30587f" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Range_tree_d&lt; Data, Window, Traits &gt;::is_inside</definition>
        <argsstring>(Window win, Data object)</argsstring>
        <name>is_inside</name>
        <param>
          <type><ref refid="classCGAL_1_1Range__tree__d_1aa35fe46d5c5d3be9df752e2a0e968b9b" kindref="member">Window</ref></type>
          <declname>win</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Range__tree__d_1ad9fb8b0271a6a4810d67268cfb9ffa9f" kindref="member">Data</ref></type>
          <declname>object</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, if the data of <computeroutput>object</computeroutput> lies between the start and endpoint of interval <computeroutput>win</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>false</computeroutput> otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Range_tree_d.h" line="123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Range__tree__d_1a4af23a5c8f2c2674204ba591d0571403" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Range_tree_d&lt; Data, Window, Traits &gt;::is_anchor</definition>
        <argsstring>()</argsstring>
        <name>is_anchor</name>
        <briefdescription>
<para>returns false. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Range_tree_d.h" line="129" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A <formula id="0">$ d$</formula>-dimensional range tree stores points and can be used to determine all points that lie inside a given <formula id="0">$ d$</formula>-dimensional interval. </para>    </briefdescription>
    <detaileddescription>
<para><bold>Implementation</bold><linebreak/>
</para><para>The construction of a <formula id="0">$ d$</formula>-dimensional range tree takes <formula id="1">$ {O}(n\log n^{d-1})$</formula> time. The points in the query window are reported in time <formula id="2">$ {O}(k+{\log}^d n )$</formula>, where <formula id="3">$ k$</formula> is the number of reported points. The tree uses <formula id="1">$ {O}(n\log n^{d-1})$</formula> storage. </para>    </detaileddescription>
    <location file="CGAL/Range_tree_d.h" line="20" column="1" bodyfile="CGAL/Range_tree_d.h" bodystart="20" bodyend="133"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Range__tree__d_1ad9fb8b0271a6a4810d67268cfb9ffa9f" prot="public" virt="non-virtual"><scope>CGAL::Range_tree_d</scope><name>Data</name></member>
      <member refid="classCGAL_1_1Range__tree__d_1a4af23a5c8f2c2674204ba591d0571403" prot="protected" virt="non-virtual"><scope>CGAL::Range_tree_d</scope><name>is_anchor</name></member>
      <member refid="classCGAL_1_1Range__tree__d_1a9996f1780de02d4d64278b3ece30587f" prot="protected" virt="non-virtual"><scope>CGAL::Range_tree_d</scope><name>is_inside</name></member>
      <member refid="classCGAL_1_1Range__tree__d_1add237e6ce25a438526b125a7e2312fa0" prot="public" virt="non-virtual"><scope>CGAL::Range_tree_d</scope><name>is_valid</name></member>
      <member refid="classCGAL_1_1Range__tree__d_1aa6452da6851a8459e661c813636b5af0" prot="public" virt="non-virtual"><scope>CGAL::Range_tree_d</scope><name>make_tree</name></member>
      <member refid="classCGAL_1_1Range__tree__d_1a22d6d67d41740d8c503a01692e4fa571" prot="public" virt="non-virtual"><scope>CGAL::Range_tree_d</scope><name>r</name></member>
      <member refid="classCGAL_1_1Range__tree__d_1aa35fe46d5c5d3be9df752e2a0e968b9b" prot="public" virt="non-virtual"><scope>CGAL::Range_tree_d</scope><name>Window</name></member>
      <member refid="classCGAL_1_1Range__tree__d_1a57706a4b8d778e8a6800b706ec5772cd" prot="public" virt="non-virtual"><scope>CGAL::Range_tree_d</scope><name>window_query</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
