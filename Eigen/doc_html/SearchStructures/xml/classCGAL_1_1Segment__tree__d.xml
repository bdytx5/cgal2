<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Segment__tree__d" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Segment_tree_d</compoundname>
    <includes local="no">CGAL/Segment_tree_d.h</includes>
    <templateparamlist>
      <param>
        <type>typename <ref refid="classCGAL_1_1Segment__tree__d_1a5f0dc11923b170e96314b0c7835e96a5" kindref="member">Data</ref></type>
      </param>
      <param>
        <type>typename <ref refid="classCGAL_1_1Segment__tree__d_1af436f372b004ecb8906009a5d596539f" kindref="member">Window</ref></type>
      </param>
      <param>
        <type>typename <ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">Traits</ref></type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classCGAL_1_1Segment__tree__d_1a5f0dc11923b170e96314b0c7835e96a5" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Segment_tree_d&lt; Data, Window, Traits &gt;::Data</definition>
        <argsstring></argsstring>
        <name>Data</name>
        <briefdescription>
<para>container <computeroutput>Data</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_tree_d.h" line="27" column="1" bodyfile="CGAL/Segment_tree_d.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Segment__tree__d_1af436f372b004ecb8906009a5d596539f" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Segment_tree_d&lt; Data, Window, Traits &gt;::Window</definition>
        <argsstring></argsstring>
        <name>Window</name>
        <briefdescription>
<para>container <computeroutput>Window</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_tree_d.h" line="32" column="1" bodyfile="CGAL/Segment_tree_d.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Segment__tree__d_1aef36939f6cc05e8a2be27bcbb38c4f60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Segment__tree__d" kindref="compound">Segment_tree_d</ref>&lt; <ref refid="classCGAL_1_1Segment__tree__d_1a5f0dc11923b170e96314b0c7835e96a5" kindref="member">Data</ref>, <ref refid="classCGAL_1_1Segment__tree__d_1af436f372b004ecb8906009a5d596539f" kindref="member">Window</ref>, <ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">Traits</ref> &gt;</type>
        <definition>Segment_tree_d&lt;Data, Window, Traits&gt; CGAL::Segment_tree_d&lt; Data, Window, Traits &gt;::s</definition>
        <argsstring>(Tree_base&lt; Data, Window &gt; sublayer_tree)</argsstring>
        <name>s</name>
        <param>
          <type>Tree_base&lt; <ref refid="classCGAL_1_1Segment__tree__d_1a5f0dc11923b170e96314b0c7835e96a5" kindref="member">Data</ref>, <ref refid="classCGAL_1_1Segment__tree__d_1af436f372b004ecb8906009a5d596539f" kindref="member">Window</ref> &gt;</type>
          <declname>sublayer_tree</declname>
        </param>
        <briefdescription>
<para>A segment tree is defined, such that the subtree of each vertex is of the same type prototype <computeroutput>sublayer_tree</computeroutput> is. </para>        </briefdescription>
        <detaileddescription>
<para>We assume that the dimension of the tree is <formula id="0">$ d$</formula>. This means, that <computeroutput>sublayer_tree</computeroutput> is a prototype of a <formula id="4">$ d-1$</formula>-dimensional tree. All data items of the <formula id="0">$ d$</formula>-dimensional segment tree have container type <computeroutput>Data</computeroutput>. The query window of the tree has container type <computeroutput>Window</computeroutput>. <computeroutput>Traits</computeroutput> provides access to the corresponding data slots of container <computeroutput>Data</computeroutput> and <computeroutput>Window</computeroutput> for the <formula id="0">$ d$</formula>-th dimension. The traits class <computeroutput>Traits</computeroutput> must at least provide all functions and type definitions described, for example, in the reference page for <computeroutput><ref refid="classCGAL_1_1tree__point__traits" kindref="compound">tree_point_traits</ref></computeroutput>. The template class described there is fully generic and should fulfill the most requirements one can have. In order to generate a one-dimensional segment tree instantiate <computeroutput><ref refid="classCGAL_1_1Tree__anchor" kindref="compound">Tree_anchor</ref>&lt;Data, Window&gt; sublayer_tree</computeroutput> with the same template parameters <computeroutput>Data</computeroutput> and <computeroutput>Window</computeroutput> <computeroutput><ref refid="classCGAL_1_1Segment__tree__d" kindref="compound">Segment_tree_d</ref></computeroutput> is defined. In order to construct a two-dimensional segment tree, create <computeroutput><ref refid="classCGAL_1_1Segment__tree__d" kindref="compound">Segment_tree_d</ref></computeroutput> with a one-dimensional <computeroutput><ref refid="classCGAL_1_1Segment__tree__d" kindref="compound">Segment_tree_d</ref></computeroutput> with the corresponding <computeroutput>Traits</computeroutput> of the first dimension.</para><para><simplesect kind="pre"><para><computeroutput>Traits::Data==Data</computeroutput> and <computeroutput>Traits::Window==Window.</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_tree_d.h" line="75" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <memberdef kind="function" id="classCGAL_1_1Segment__tree__d_1a29800de28275bacb2ca02b79eb336fc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Segment_tree_d&lt; Data, Window, Traits &gt;::make_tree</definition>
        <argsstring>(In_it first, In_it last)</argsstring>
        <name>make_tree</name>
        <param>
          <type>In_it</type>
          <declname>first</declname>
        </param>
        <param>
          <type>In_it</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>The tree is constructed according to the data items in the sequence between the element pointed by iterator <computeroutput>first</computeroutput> and iterator <computeroutput>last</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>This function can only be called once. If it is the first call the tree is build and <computeroutput>true</computeroutput> is returned. Otherwise, nothing is done but a <computeroutput><ref refid="namespaceCGAL" kindref="compound">CGAL</ref> warning</computeroutput> is given and <computeroutput>false</computeroutput> returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_tree_d.h" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__tree__d_1ab918c59400398bb8c17a3f4f832e5b37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::Segment_tree_d&lt; Data, Window, Traits &gt;::window_query</definition>
        <argsstring>(Window win, OutputIterator result)</argsstring>
        <name>window_query</name>
        <param>
          <type><ref refid="classCGAL_1_1Segment__tree__d_1af436f372b004ecb8906009a5d596539f" kindref="member">Window</ref></type>
          <declname>win</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para><computeroutput>win</computeroutput> <formula id="6">$ =[a_1,b_1),\ldots, [a_d,b_d)$</formula>, <formula id="7">$ a_i,b_i\in T_i$</formula>, <formula id="8">$ 1\le i\le d$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>All elements that intersect the associated <formula id="0">$ d$</formula>-dimensional interval of <computeroutput>win</computeroutput> are placed in the associated sequence container of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> and returns an output iterator that points to the last location the function wrote to. In order to perform an inverse range query, a range query of <formula id="9">$ \epsilon$</formula> width has to be performed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_tree_d.h" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__tree__d_1a3e1409f32a09139b795c9346a6c4a7e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::Segment_tree_d&lt; Data, Window, Traits &gt;::enclosing_query</definition>
        <argsstring>(Window win, OutputIterator result)</argsstring>
        <name>enclosing_query</name>
        <param>
          <type><ref refid="classCGAL_1_1Segment__tree__d_1af436f372b004ecb8906009a5d596539f" kindref="member">Window</ref></type>
          <declname>win</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>All elements that enclose the associated <formula id="0">$ d$</formula>-dimensional interval of <computeroutput>win</computeroutput> are placed in the associated sequence container of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> and returns an output iterator that points to the last location the function wrote to. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_tree_d.h" line="111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__tree__d_1a62d19ce1de0bce5377088f2c4151299c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Segment_tree_d&lt; Data, Window, Traits &gt;::is_valid</definition>
        <argsstring>()</argsstring>
        <name>is_valid</name>
        <briefdescription>
<para>The tree structure is checked. </para>        </briefdescription>
        <detaileddescription>
<para>For each vertex either the sublayer tree is a tree anchor, or it stores a (possibly empty) list of data items. In the first case, the sublayer tree of the vertex is checked on being valid. In the second case, each data item is checked weather it contains the associated interval of the vertex and does not contain the associated interval of the parent vertex or not. <computeroutput>true</computeroutput> is returned if the tree structure is valid, <computeroutput>false</computeroutput> otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_tree_d.h" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__tree__d_1a2793f9ed0e15405b31b93f97c4d94c1b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Segment_tree_d&lt; Data, Window, Traits &gt;::is_inside</definition>
        <argsstring>(Window win, Data object)</argsstring>
        <name>is_inside</name>
        <param>
          <type><ref refid="classCGAL_1_1Segment__tree__d_1af436f372b004ecb8906009a5d596539f" kindref="member">Window</ref></type>
          <declname>win</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Segment__tree__d_1a5f0dc11923b170e96314b0c7835e96a5" kindref="member">Data</ref></type>
          <declname>object</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, if the interval of <computeroutput>object</computeroutput> is contained in the interval of <computeroutput>win</computeroutput>, <computeroutput>false</computeroutput> otherwise. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_tree_d.h" line="133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__tree__d_1a825d6d941f3525becbe1e131ab0d354a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Segment_tree_d&lt; Data, Window, Traits &gt;::is_anchor</definition>
        <argsstring>()</argsstring>
        <name>is_anchor</name>
        <briefdescription>
<para>returns false. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_tree_d.h" line="138" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A <formula id="0">$ d$</formula>-dimensional segment tree stores <formula id="0">$ d$</formula>-dimensional intervals and can be used to find all intervals that enclose, partially overlap, or contain a query interval, which may be a point. </para>    </briefdescription>
    <detaileddescription>
<para><bold>Implementation</bold><linebreak/>
</para><para>A <formula id="0">$ d$</formula>-dimensional segment tree is constructed in <formula id="5">$ {O}(n\log n^d)$</formula> time. An inverse range query is performed in time <formula id="2">$ {O}(k+{\log}^d n )$</formula>, where <formula id="3">$ k$</formula> is the number of reported intervals. The tree uses <formula id="5">$ {O}(n\log n^d)$</formula> storage. </para>    </detaileddescription>
    <location file="CGAL/Segment_tree_d.h" line="18" column="1" bodyfile="CGAL/Segment_tree_d.h" bodystart="18" bodyend="142"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Segment__tree__d_1a5f0dc11923b170e96314b0c7835e96a5" prot="public" virt="non-virtual"><scope>CGAL::Segment_tree_d</scope><name>Data</name></member>
      <member refid="classCGAL_1_1Segment__tree__d_1a3e1409f32a09139b795c9346a6c4a7e0" prot="public" virt="non-virtual"><scope>CGAL::Segment_tree_d</scope><name>enclosing_query</name></member>
      <member refid="classCGAL_1_1Segment__tree__d_1a825d6d941f3525becbe1e131ab0d354a" prot="protected" virt="non-virtual"><scope>CGAL::Segment_tree_d</scope><name>is_anchor</name></member>
      <member refid="classCGAL_1_1Segment__tree__d_1a2793f9ed0e15405b31b93f97c4d94c1b" prot="protected" virt="non-virtual"><scope>CGAL::Segment_tree_d</scope><name>is_inside</name></member>
      <member refid="classCGAL_1_1Segment__tree__d_1a62d19ce1de0bce5377088f2c4151299c" prot="public" virt="non-virtual"><scope>CGAL::Segment_tree_d</scope><name>is_valid</name></member>
      <member refid="classCGAL_1_1Segment__tree__d_1a29800de28275bacb2ca02b79eb336fc1" prot="public" virt="non-virtual"><scope>CGAL::Segment_tree_d</scope><name>make_tree</name></member>
      <member refid="classCGAL_1_1Segment__tree__d_1aef36939f6cc05e8a2be27bcbb38c4f60" prot="public" virt="non-virtual"><scope>CGAL::Segment_tree_d</scope><name>s</name></member>
      <member refid="classCGAL_1_1Segment__tree__d_1af436f372b004ecb8906009a5d596539f" prot="public" virt="non-virtual"><scope>CGAL::Segment_tree_d</scope><name>Window</name></member>
      <member refid="classCGAL_1_1Segment__tree__d_1ab918c59400398bb8c17a3f4f832e5b37" prot="public" virt="non-virtual"><scope>CGAL::Segment_tree_d</scope><name>window_query</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
