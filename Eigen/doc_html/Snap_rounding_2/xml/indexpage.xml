<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>User Manual</title>
    <detaileddescription>
<para><anchor id="index_1Chapter_2D_Snap_Rounding"/><anchor id="index_1chapterSnapRounding"/> <simplesect kind="author"><para>Eli Packer</para></simplesect>
</para><sect1 id="index_1Snap_rounding_2Introduction">
<title>Introduction</title>
<para> <formula id="0">$ \def\A{{\cal A}} $</formula> <formula id="1">$ \def\S{{\cal S}} $</formula></para><para>Snap Rounding (SR, for short) is a well known method for converting arbitrary-precision arrangements of segments into a fixed-precision representation <ref refid="citelist_1CITEREF_gght-srlse-97" kindref="member">[1]</ref>, <ref refid="citelist_1CITEREF_gm-rad-98" kindref="member">[2]</ref>, <ref refid="citelist_1CITEREF_h-psifp-99" kindref="member">[4]</ref>. In the study of robust geometric computing, it can be classified as a finite precision approximation technique. Iterated Snap Rounding (ISR, for short) is a modification of SR in which each vertex is at least half-the-width-of-a-pixel away from any non-incident edge <ref refid="citelist_1CITEREF_cgal:hp-isr-02" kindref="member">[3]</ref>. This package supports both methods. Algorithmic details and experimental results are given in <ref refid="citelist_1CITEREF_cgal:hp-isr-02" kindref="member">[3]</ref>.</para><para><anchor id="index_1fig__figsr1"/><image type="html" name="sr1.png"></image>
 <image type="latex" name="sr1.png" width="15cm"></image>
  <ref refid="index_1fig__figsr1" kindref="member">fig__figsr1</ref> An arrangement of segments before (a) and after (b) SR (hot pixels are shaded)  <linebreak/>
</para></sect1>
<sect1 id="index_1Snap_rounding_2What">
<title>What is Snap Rounding/Iterated Snap Rounding</title>
<para>Given a finite collection <formula id="2">$ \S$</formula> of segments in the plane, the arrangement of <formula id="2">$ \S$</formula> denoted <formula id="3">$ \A(\S)$</formula> is the subdivision of the plane into vertices, edges, and faces induced by <formula id="2">$ \S$</formula>. A <emphasis>vertex</emphasis> of the arrangement is either a segment endpoint or the intersection of two segments. Given an arrangement of segments whose vertices are represented with arbitrary-precision coordinates, the function <computeroutput><ref refid="group__PkgSnapRounding2_1gabf9cbdb9bfcfd83513d30908e9679bbe" kindref="member">snap_rounding_2()</ref></computeroutput> proceeds as follows. We tile the plane with a grid of unit squares, <emphasis>pixels</emphasis>, each centered at a point with integer coordinates. A pixel is <emphasis>hot</emphasis> if it contains a vertex of the arrangement. Each vertex of the arrangement is replaced by the center of the hot pixel containing it and each edge <formula id="4">$ e$</formula> is replaced by the polygonal chain through the centers of the hot pixels met by <formula id="4">$ e$</formula>, in the same order as they are met by <formula id="4">$ e$</formula>. <ref refid="index_1fig__figsr1" kindref="member">fig__figsr1</ref> demonstrates the results of SR.</para><para>In a snap-rounded arrangement, the distance between a vertex and a non-incident edge can be extremely small compared with the width of a pixel in the grid used for rounding. ISR is a modification of SR which makes a vertex and a non-incident edge well separated (the distance between each is at least half-the-width-of-a-pixel). However, the guaranteed quality of the approximation in ISR degrades. <ref refid="index_1fig__figisr_vs_sr" kindref="member">fig__figisr_vs_sr</ref> depicts the results of SR and ISR on the same input. Conceptually, the ISR procedure is equivalent to repeated application of SR, namely we apply SR to the original set of segments, then we use the output of SR as input to another round of SR and so on until all the vertices are well separated from non-incident edges. Algorithmically we operate differently, as this repeated application of SR would have resulted in an efficient overall process. The algorithmic details are given in <ref refid="citelist_1CITEREF_cgal:hp-isr-02" kindref="member">[3]</ref>.</para></sect1>
<sect1 id="index_1Snap_rounding_2Terms">
<title>Terms and Software Design</title>
<para>Our package supports both schemes, implementing the algorithm described in <ref refid="citelist_1CITEREF_cgal:hp-isr-02" kindref="member">[3]</ref>. Although the paper only describes an algorithm for ISR, it is easy to derive an algorithm for SR, by performing only the first rounding level for each segment.</para><para>The input to the program is a set <formula id="14">$ S$</formula> of <formula id="15">$ n$</formula> segments, <formula id="16">$ S=\{s_1,\ldots,s_n\}$</formula> and the output is a set <formula id="17">$ G$</formula> of <formula id="15">$ n$</formula> polylines, with a polyline <formula id="18">$ g_i$</formula> for each input segments <formula id="19">$ s_i$</formula>. An input segment is given by the coordinates of its endpoints. An output polyline is given by the ordered set of vertices <formula id="20">$ v_0,\ldots,v_k$</formula> along the polyline. The polyline consists of the segments <formula id="21">$ (v_0v_1),\ldots,(v_{k-1}v_k)$</formula>.</para><para>There are three template parameters: <computeroutput>Traits</computeroutput> is the underlying geometry, i.e., the number type used and the coordinate representation. <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput> is the type of the iterators that point to the first and after-the-last elements of the input. Finally, <computeroutput>OutputContainer</computeroutput> is the type of the output container.</para><para>Since the algorithm requires kernel functionalities such as the rounding to the center of a pixel, a special traits class must be provided. The precise description of the requirements is given by the concept <computeroutput><ref refid="classSnapRoundingTraits__2" kindref="compound">SnapRoundingTraits_2</ref></computeroutput>. The class <computeroutput><ref refid="classCGAL_1_1Snap__rounding__traits__2" kindref="compound">Snap_rounding_traits_2</ref></computeroutput> is a model of this concept.</para><para><anchor id="index_1fig__figisr_vs_sr"/><image type="html" name="isr_vs_sr.png"></image>
 <image type="latex" name="isr_vs_sr.png" width="15cm"></image>
  <ref refid="index_1fig__figisr_vs_sr" kindref="member">fig__figisr_vs_sr</ref> An arrangement of segments before (a), after SR (b) and ISR (c) (hot pixels are shaded).  <linebreak/>
</para></sect1>
<sect1 id="index_1Snap_rounding_2Four">
<title>Four Line Segment Example</title>
<para>The following example generates an ISR representation of an arrangement of four line segments. In particular it produces a list of points that are the vertices of the resulting polylines in a plane tiled with one-unit square pixels.</para><para><linebreak/>
<bold>File</bold> <ref refid="Snap_rounding_2_2snap_rounding_8cpp-example" kindref="compound">Snap_rounding_2/snap_rounding.cpp</ref> <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Cartesian.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Quotient.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/MP_Float.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Snap_rounding_traits_2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Snap_rounding_2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CGAL::Quotient&lt;CGAL::MP_Float&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Number_type;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Cartesian" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Cartesian&lt;Number_type&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kernel;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Snap__rounding__traits__2" kindref="compound">CGAL::Snap_rounding_traits_2&lt;Kernel&gt;</ref><sp/><sp/><sp/><sp/><sp/>Traits;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classKernel_1_1Segment__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel::Segment_2</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Segment_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classKernel_1_1Point__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel::Point_2</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::list&lt;Segment_2&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Segment_list_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::list&lt;Point_2&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Polyline_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::list&lt;Polyline_2&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Polyline_list_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Segment_list_2<sp/>seg_list;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Polyline_list_2<sp/>output_list;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>seg_list.push_back(Segment_2(Point_2(0,<sp/>0),<sp/>Point_2(10,<sp/>10)));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>seg_list.push_back(Segment_2(Point_2(0,<sp/>10),<sp/>Point_2(10,<sp/>0)));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>seg_list.push_back(Segment_2(Point_2(3,<sp/>0),<sp/>Point_2(3,<sp/>10)));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>seg_list.push_back(Segment_2(Point_2(7,<sp/>0),<sp/>Point_2(7,<sp/>10)));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Generate<sp/>an<sp/>iterated<sp/>snap-rounding<sp/>representation,<sp/>where<sp/>the<sp/>centers<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>hot<sp/>pixels<sp/>bear<sp/>their<sp/>original<sp/>coordinates,<sp/>using<sp/>5<sp/>kd<sp/>trees:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>CGAL::snap_rounding_2&lt;Traits,Segment_list_2::const_iterator,Polyline_list_2&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>(seg_list.begin(),<sp/>seg_list.end(),<sp/>output_list,<sp/>1.0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>counter<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Polyline_list_2::const_iterator<sp/>iter1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(iter1<sp/>=<sp/>output_list.begin();<sp/>iter1<sp/>!=<sp/>output_list.end();<sp/>++iter1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Polyline<sp/>number<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>++counter<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Polyline_2::const_iterator<sp/>iter2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(iter2<sp/>=<sp/>iter1-&gt;begin();<sp/>iter2<sp/>!=<sp/>iter1-&gt;end();<sp/>++iter2)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>iter2-&gt;x()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>iter2-&gt;y()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>This program generates four polylines, one for each input segment. The exact output follows:</para><para><verbatim>Polyline number 1:
(0/4:0/4)
(12/4:12/4)
(20/4:20/4)
(28/4:28/4)
(40/4:40/4)
Polyline number 2:
(0/4:40/4)
(12/4:28/4)
(20/4:20/4)
(28/4:12/4)
(40/4:0/4)
Polyline number 3:
(12/4:0/4)
(12/4:12/4)
(12/4:28/4)
(12/4:40/4)
Polyline number 4:
(28/4:0/4)
(28/4:12/4)
(28/4:28/4)
(28/4:40/4)
</verbatim></para><para>The package is supplied with a graphical demo program that opens a window, allows the user to edit segments dynamically, applies a selected snap-rounding procedures, and displays the result onto the same window (see <computeroutput>&lt;CGAL_ROOT&gt;/demo/Snap_rounding_2/demo.cpp</computeroutput>). </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
