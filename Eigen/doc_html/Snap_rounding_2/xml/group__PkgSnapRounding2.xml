<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__PkgSnapRounding2" kind="group">
    <compoundname>PkgSnapRounding2</compoundname>
    <title>2D Snap Rounding Reference</title>
    <innerclass refid="classCGAL_1_1Snap__rounding__traits__2" prot="public">CGAL::Snap_rounding_traits_2</innerclass>
    <innergroup refid="group__PkgSnapRounding2Concepts">Concepts</innergroup>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgSnapRounding2_1gabf9cbdb9bfcfd83513d30908e9679bbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Traits</type>
          </param>
          <param>
            <type>class <ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          </param>
          <param>
            <type>class OutputContainer</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::snap_rounding_2</definition>
        <argsstring>(InputIterator begin, InputIterator end, OutputContainer &amp;output_container, typename Traits::FT pixel_size, bool do_isr=true, bool int_output=true, unsigned int number_of_kd_trees=1)</argsstring>
        <name>snap_rounding_2</name>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>begin</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>end</declname>
        </param>
        <param>
          <type>OutputContainer &amp;</type>
          <declname>output_container</declname>
        </param>
        <param>
          <type>typename Traits::FT</type>
          <declname>pixel_size</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_isr</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>int_output</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>number_of_kd_trees</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para> <formula id="0">$ \def\A{{\cal A}} $</formula> <formula id="1">$ \def\S{{\cal S}} $</formula> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Traits</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classSnapRoundingTraits__2" kindref="compound">SnapRoundingTraits_2</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>must be an iterator with value type <computeroutput>Traits::Segment_2</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutputContainer</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a container with a method <computeroutput>push_back(const OutputContainer::value_type&amp; c)</computeroutput>, where <computeroutput>OutputContainer::value_type</computeroutput> must be a container with a method <computeroutput>push_back(const Traits::Point_2&amp; p)</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin</parametername>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>The first two parameters denote the iterator range of the input segments.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output_container</parametername>
</parameternamelist>
<parameterdescription>
<para>is a reference to a container of the output polylines. Since a polyline is composed of a sequence of points, a polyline is a container itself.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_isr</parametername>
</parameternamelist>
<parameterdescription>
<para>The fifth parameter determines whether to apply ISR or SR.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pixel_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The fourth parameter denotes the pixel size <computeroutput>w</computeroutput>. The plane will be tiled with square pixels of width <computeroutput>w</computeroutput> such that the origin is the center of a pixel. <computeroutput>pixel_size</computeroutput> must have a positive value.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int_output</parametername>
</parameternamelist>
<parameterdescription>
<para>The sixth parameter denotes the output representation. If the value of the sixth parameter is <computeroutput>true</computeroutput> then the centers of pixels constitute the integer grid, and hence the vertices of the output polylines will be integers. For example, the coordinates of the center of the pixel to the right of the pixel containing the origin will be <computeroutput>(1,0)</computeroutput> regardless of the pixel width. If the value of the sixth parameter is <computeroutput>false</computeroutput>, then the centers of hot pixels (and hence the vertices of the output polylines) will bear their original coordinates, which may not necessarily be integers. In the latter case, the coordinates of the center of the pixel to the right of the pixel containing the origin, for example, will be <computeroutput>(w,0)</computeroutput>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>number_of_kd_trees</parametername>
</parameternamelist>
<parameterdescription>
<para>The seventh parameter is briefly described later on this page; for a detailed description see <ref refid="citelist_1CITEREF_cgal:hp-isr-02" kindref="member">[3]</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
Snap Rounding (SR, for short) is a well known method for converting arbitrary-precision arrangements of segments into a fixed-precision representation <ref refid="citelist_1CITEREF_gght-srlse-97" kindref="member">[1]</ref>, <ref refid="citelist_1CITEREF_gm-rad-98" kindref="member">[2]</ref>, <ref refid="citelist_1CITEREF_h-psifp-99" kindref="member">[4]</ref>. In the study of robust geometric computing, it can be classified as a finite precision approximation technique. Iterated Snap Rounding (ISR, for short) is a modification of SR in which each vertex is at least half-the-width-of-a-pixel away from any non-incident edge <ref refid="citelist_1CITEREF_cgal:hp-isr-02" kindref="member">[3]</ref>. This package supports both methods. Algorithmic details and experimental results are given in <ref refid="citelist_1CITEREF_cgal:hp-isr-02" kindref="member">[3]</ref>.</para><para>Given a finite collection <formula id="2">$ \S$</formula> of segments in the plane, the arrangement of <formula id="2">$ \S$</formula> denoted <formula id="3">$ \A(\S)$</formula> is the subdivision of the plane into vertices, edges, and faces induced by <formula id="2">$ \S$</formula>. A <emphasis>vertex</emphasis> of the arrangement is either a segment endpoint or the intersection of two segments. Given an arrangement of segments whose vertices are represented with arbitrary-precision coordinates, SR proceeds as follows. We tile the plane with a grid of unit squares, <emphasis>pixels</emphasis>, each centered at a point with integer coordinates. A pixel is <emphasis>hot</emphasis> if it contains a vertex of the arrangement. Each vertex of the arrangement is replaced by the center of the hot pixel containing it and each edge <formula id="4">$ e$</formula> is replaced by the polygonal chain through the centers of the hot pixels met by <formula id="4">$ e$</formula>, in the same order as they are met by <formula id="4">$ e$</formula>.</para><para>In a snap-rounded arrangement, the distance between a vertex and a non-incident edge can be extremely small compared with the width of a pixel in the grid used for rounding. ISR is a modification of SR which makes a vertex and a non-incident edge well separated (the distance between each is at least half-the-width-of-a-pixel). However, the guaranteed quality of the approximation in ISR degrades. For more details on ISR see <ref refid="citelist_1CITEREF_cgal:hp-isr-02" kindref="member">[3]</ref>.</para><para>The traits used here must support (arbitrary-precision) rational number type as this is a basic requirement of SR.</para><para><bold>About the Number of kd-Trees</bold><linebreak/>
</para><para>A basic query used in the algorithm is to report the hot pixels of size <formula id="5">$ w$</formula> that a certain segment <formula id="6">$ s$</formula> intersects. An alternative way to do the same is to query the hot pixels&apos; centers contained in a Minkowski sum of <formula id="6">$ s$</formula> with a pixel of width <formula id="5">$ w$</formula> centered at the origin; we denote this Minkowski sum by <formula id="7">$ M(s)$</formula>. Since efficiently implementing this kind of query is difficult, we use an orthogonal range-search structure instead. We query with the bounding box <formula id="8">$ B(M(s))$</formula> of <formula id="7">$ M(s)$</formula> in a two-dimensional kd-tree which stores the centers of hot pixels. Since <formula id="8">$ B(M(s))$</formula> in general is larger than <formula id="7">$ M(s)$</formula>, we still need to filter out the hot pixels which do not intersect <formula id="6">$ s$</formula>.</para><para>While this approach is easy to implement with <ref refid="namespaceCGAL" kindref="compound">CGAL</ref>, it may incur considerable overhead since the area of <formula id="8">$ B(M(s))$</formula> may be much larger than the area of <formula id="7">$ M(s)$</formula>, possibly resulting in many redundant hot pixels to filter out. Our heuristic solution, which we describe next, is to use a cluster of kd-trees rather than just one. The cluster includes several kd-trees, each has the plane, and hence the centers of hot pixels, rotated by a different angle in the first quadrant of the plane; for our purpose, a rotation by angles outside this quadrant is symmetric to a rotation by an angle in the first quadrant.</para><para>Given a parameter <formula id="9">$ c$</formula>, the angles of rotation are <formula id="10">$ (i - 1) \frac{\pi}{2c}, i=1,\ldots,c$</formula>, and we construct a kd-tree corresponding to each of these angles. Then for a query segment <formula id="6">$ s$</formula>, we choose the kd-tree for which the area of <formula id="8">$ B(M(s))$</formula> is the smallest, in order to (potentially) get less hot pixels to filter out. Since constructing many kd-trees may be costly, our algorithm avoids building a kd-tree which it expects to be queried a relatively small number of times (we estimate this number in advance). How many kd-trees should be used? It is difficult to provide a simple answer for that. There are inputs for which the time to build more than one kd-tree is far greater than the time saved by having to filter out less hot pixels (sparse arrangements demonstrate this behavior), and there are inputs which benefit from using several kd-trees. Thus, the user can control the number of kd-trees with the parameter <computeroutput>number_of_kd_trees</computeroutput>. Typically, but not always, one kd-tree (the default) is sufficient. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Snap_rounding_2.h" line="121" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para> <image type="html" name="snap-detail.png"></image>
   Eli Packer Snap Rounding is a well known method for converting arbitrary-precision arrangements of segments into a fixed-precision representation. In the study of robust geometric computing, it can be classified as a finite precision approximation technique. Iterated Snap Rounding is a modification of Snap Rounding in which each vertex is at least half-the-width-of-a-pixel away from any non-incident edge. This package supports both methods. <linebreak/>
   <bold>Introduced in:</bold> CGAL 3.1<linebreak/>
 <bold>Depends on:</bold> <ref refid="packages_1PkgArrangement2Summary" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">2D Arrangements</ref> <linebreak/>
 <bold>BibTeX:</bold> <ulink url="../Manual/how_to_cite_cgal.html#cgal:p-sr2-18b">cgal:p-sr2-18b</ulink><linebreak/>
 <bold>License:</bold> <ref refid="preliminaries_1licensesGPL" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">GPL</ref> <linebreak/>
 <bold>Windows Demo:</bold> <ulink url="https://www.cgal.org/demo/4.13/snap_rounding_2.zip">2D Snap Rounding</ulink><linebreak/>
<bold>Common Demo Dlls:</bold> <ulink url="https://www.cgal.org/demo/4.13/CGAL-demoDLLs.zip">dlls</ulink><linebreak/>
  </para>    </detaileddescription>
  </compounddef>
</doxygen>
