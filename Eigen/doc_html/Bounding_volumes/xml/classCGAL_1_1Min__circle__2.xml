<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Min__circle__2" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Min_circle_2</compoundname>
    <includes local="no">CGAL/Min_circle_2.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>Traits</declname>
        <defname>Traits</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classCGAL_1_1Min__circle__2_1acaff2d7da19f3c8ca5bf8845253f6039" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Min_circle_2&lt; Traits &gt;::Point</definition>
        <argsstring></argsstring>
        <name>Point</name>
        <briefdescription>
<para>typedef to <computeroutput>Traits::Point</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Min_circle_2.h" line="84" column="1" bodyfile="CGAL/Min_circle_2.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Min__circle__2_1a48aea3450e5b91924646e784481ff44d" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Min_circle_2&lt; Traits &gt;::Circle</definition>
        <argsstring></argsstring>
        <name>Circle</name>
        <briefdescription>
<para>typedef to <computeroutput>Traits::Circle</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Min_circle_2.h" line="89" column="1" bodyfile="CGAL/Min_circle_2.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Min__circle__2_1a716c27257a327f9eb570de854ccb57f4" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Min_circle_2&lt; Traits &gt;::Point_iterator</definition>
        <argsstring></argsstring>
        <name>Point_iterator</name>
        <briefdescription>
<para>non-mutable model of the STL concept <emphasis><ref refid="classBidirectionalIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">BidirectionalIterator</ref></emphasis> with value type <computeroutput>Point</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Used to access the points of the smallest enclosing circle. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Min_circle_2.h" line="97" column="1" bodyfile="CGAL/Min_circle_2.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Min__circle__2_1a694816c6d92ee807ea6a3daba1a8f421" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Min_circle_2&lt; Traits &gt;::Support_point_iterator</definition>
        <argsstring></argsstring>
        <name>Support_point_iterator</name>
        <briefdescription>
<para>non-mutable model of the STL concept <emphasis><ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></emphasis> with value type <computeroutput>Point</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Used to access the support points of the smallest enclosing circle. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Min_circle_2.h" line="105" column="1" bodyfile="CGAL/Min_circle_2.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <description><para>A <computeroutput><ref refid="classCGAL_1_1Min__circle__2" kindref="compound">Min_circle_2</ref></computeroutput> object can be created from an arbitrary point set <formula id="9">$ P$</formula> and by specialized construction methods expecting no, one, two or three points as arguments.</para><para>The latter methods can be useful for reconstructing <formula id="76">$ mc(P)$</formula> from a given support set <formula id="24">$ S$</formula> of <formula id="9">$ P$</formula>. </para></description>
      <memberdef kind="function" id="classCGAL_1_1Min__circle__2_1a14b72d0065ac73ade159c3ab25855917" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>CGAL::Min_circle_2&lt; Traits &gt;::Min_circle_2</definition>
        <argsstring>(InputIterator first, InputIterator last, bool randomize, Random &amp;random=CGAL::get_default_random(), const Traits &amp;traits=Traits())</argsstring>
        <name>Min_circle_2</name>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>last</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>randomize</declname>
        </param>
        <param>
          <type>Random &amp;</type>
          <declname>random</declname>
          <defval>CGAL::get_default_random()</defval>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>traits</declname>
          <defval>Traits()</defval>
        </param>
        <briefdescription>
<para>initializes <computeroutput>min_circle</computeroutput> to <formula id="76">$ mc(P)$</formula> with <formula id="9">$ P$</formula> being the set of points in the range [<computeroutput>first</computeroutput>,<computeroutput>last</computeroutput>). </para>        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>randomize</computeroutput> is <computeroutput>true</computeroutput>, a random permutation of <formula id="9">$ P$</formula> is computed in advance, using the random numbers generator <computeroutput>random</computeroutput>. Usually, this will not be necessary, however, the algorithm&apos;s efficiency depends on the order in which the points are processed, and a bad order might lead to extremely poor performance (see example below). <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput> with <computeroutput>Point</computeroutput> as value type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Min_circle_2.h" line="130" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Min__circle__2_1aebee8cf6b4ef8484b0a12f39332bc539" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Min_circle_2&lt; Traits &gt;::Min_circle_2</definition>
        <argsstring>(const Traits &amp;traits=Traits())</argsstring>
        <name>Min_circle_2</name>
        <param>
          <type>const Traits &amp;</type>
          <declname>traits</declname>
          <defval>Traits()</defval>
        </param>
        <briefdescription>
<para>initializes <computeroutput>min_circle</computeroutput> to <formula id="80">$ mc(\emptyset)$</formula>, the empty set. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="post"><para><computeroutput>min_circle.is_empty()</computeroutput> = <computeroutput>true</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Min_circle_2.h" line="142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Min__circle__2_1a1725a75ed64d54ef41c7fe3eb59931a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Min_circle_2&lt; Traits &gt;::Min_circle_2</definition>
        <argsstring>(const Point &amp;p, const Traits &amp;traits=Traits())</argsstring>
        <name>Min_circle_2</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Min__circle__2_1acaff2d7da19f3c8ca5bf8845253f6039" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>traits</declname>
          <defval>Traits()</defval>
        </param>
        <briefdescription>
<para>initializes <computeroutput>min_circle</computeroutput> to <formula id="81">$ mc(\{p\})$</formula>, the set <formula id="82">$ \{p\}$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="post"><para><computeroutput>min_circle.is_degenerate()</computeroutput> = <computeroutput>true</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Min_circle_2.h" line="149" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Min__circle__2_1aa6e065ed602ef49dcbf064d749f7cd32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Min_circle_2&lt; Traits &gt;::Min_circle_2</definition>
        <argsstring>(const Point &amp;p1, const Point &amp;p2, const Traits &amp;traits=Traits())</argsstring>
        <name>Min_circle_2</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Min__circle__2_1acaff2d7da19f3c8ca5bf8845253f6039" kindref="member">Point</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Min__circle__2_1acaff2d7da19f3c8ca5bf8845253f6039" kindref="member">Point</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>traits</declname>
          <defval>Traits()</defval>
        </param>
        <briefdescription>
<para>initializes <computeroutput>min_circle</computeroutput> to <formula id="83">$ mc(\{p1,p2\})$</formula>, the circle with diameter equal to the segment connecting <formula id="84">$ p1$</formula> and <formula id="85">$ p2$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Min_circle_2.h" line="157" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Min__circle__2_1ab68687584c9a3593e2316a26acc57ca5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Min_circle_2&lt; Traits &gt;::Min_circle_2</definition>
        <argsstring>(const Point &amp;p1, const Point &amp;p2, const Point &amp;p3, const Traits &amp;traits=Traits())</argsstring>
        <name>Min_circle_2</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Min__circle__2_1acaff2d7da19f3c8ca5bf8845253f6039" kindref="member">Point</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Min__circle__2_1acaff2d7da19f3c8ca5bf8845253f6039" kindref="member">Point</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Min__circle__2_1acaff2d7da19f3c8ca5bf8845253f6039" kindref="member">Point</ref> &amp;</type>
          <declname>p3</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>traits</declname>
          <defval>Traits()</defval>
        </param>
        <briefdescription>
<para>initializes <computeroutput>min_circle</computeroutput> to <formula id="86">$ mc(\{p1,p2,p3\})$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Min_circle_2.h" line="165" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Access Functions</header>
      <memberdef kind="function" id="classCGAL_1_1Min__circle__2_1ae833665313f26e701bae246cc6dea68a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CGAL::Min_circle_2&lt; Traits &gt;::number_of_points</definition>
        <argsstring>() const</argsstring>
        <name>number_of_points</name>
        <briefdescription>
<para>returns the number of points of <computeroutput>min_circle</computeroutput>, i.e. <formula id="46">$ |P|$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Min_circle_2.h" line="179" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Min__circle__2_1ac87c3d760053509a41be898771111854" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CGAL::Min_circle_2&lt; Traits &gt;::number_of_support_points</definition>
        <argsstring>() const</argsstring>
        <name>number_of_support_points</name>
        <briefdescription>
<para>returns the number of support points of <computeroutput>min_circle</computeroutput>, i.e. <formula id="73">$ |S|$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Min_circle_2.h" line="185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Min__circle__2_1ade14badb14c8b404d099f637ff53be87" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Min__circle__2_1a716c27257a327f9eb570de854ccb57f4" kindref="member">Point_iterator</ref></type>
        <definition>Point_iterator CGAL::Min_circle_2&lt; Traits &gt;::points_begin</definition>
        <argsstring>() const</argsstring>
        <name>points_begin</name>
        <briefdescription>
<para>returns an iterator referring to the first point of <computeroutput>min_circle</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Min_circle_2.h" line="191" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Min__circle__2_1aa98f7f868d6c7cacd137bb18cc4ec527" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Min__circle__2_1a716c27257a327f9eb570de854ccb57f4" kindref="member">Point_iterator</ref></type>
        <definition>Point_iterator CGAL::Min_circle_2&lt; Traits &gt;::points_end</definition>
        <argsstring>() const</argsstring>
        <name>points_end</name>
        <briefdescription>
<para>returns the corresponding past-the-end iterator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Min_circle_2.h" line="197" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Min__circle__2_1acb33d435a72cfcda800b739ba172082d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Min__circle__2_1a694816c6d92ee807ea6a3daba1a8f421" kindref="member">Support_point_iterator</ref></type>
        <definition>Support_point_iterator CGAL::Min_circle_2&lt; Traits &gt;::support_points_begin</definition>
        <argsstring>() const</argsstring>
        <name>support_points_begin</name>
        <briefdescription>
<para>returns an iterator referring to the first support point of <computeroutput>min_circle</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Min_circle_2.h" line="203" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Min__circle__2_1af808f54e70621f0fe201c4b327b5de3b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Min__circle__2_1a694816c6d92ee807ea6a3daba1a8f421" kindref="member">Support_point_iterator</ref></type>
        <definition>Support_point_iterator CGAL::Min_circle_2&lt; Traits &gt;::support_points_end</definition>
        <argsstring>() const</argsstring>
        <name>support_points_end</name>
        <briefdescription>
<para>returns the corresponding past-the-end iterator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Min_circle_2.h" line="209" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Min__circle__2_1a5a544c739e6e46c2ced10d54720f89ec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classCGAL_1_1Min__circle__2_1acaff2d7da19f3c8ca5bf8845253f6039" kindref="member">Point</ref> &amp;</type>
        <definition>const Point&amp; CGAL::Min_circle_2&lt; Traits &gt;::support_point</definition>
        <argsstring>(int i) const</argsstring>
        <name>support_point</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>returns the <computeroutput>i</computeroutput>-th support point of <computeroutput>min_circle</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Between two modifying operations (see below) any call to <computeroutput>min_circle.support_point(i)</computeroutput> with the same <computeroutput>i</computeroutput> returns the same point. <simplesect kind="pre"><para><formula id="87">$ 0 \leq i&lt; $</formula> <computeroutput>min_circle.number_of_support_points()</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Min_circle_2.h" line="219" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Min__circle__2_1a0e6629c5d9af38017400dc812edb584a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classCGAL_1_1Min__circle__2_1a48aea3450e5b91924646e784481ff44d" kindref="member">Circle</ref> &amp;</type>
        <definition>const Circle&amp; CGAL::Min_circle_2&lt; Traits &gt;::circle</definition>
        <argsstring>() const</argsstring>
        <name>circle</name>
        <briefdescription>
<para>returns the current circle of <computeroutput>min_circle</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Min_circle_2.h" line="225" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Predicates</header>
      <description><para>By definition, an empty <computeroutput><ref refid="classCGAL_1_1Min__circle__2" kindref="compound">Min_circle_2</ref></computeroutput> has no boundary and no bounded side, i.e. its unbounded side equals the whole space <formula id="75">$ \E^2$</formula>. </para></description>
      <memberdef kind="function" id="classCGAL_1_1Min__circle__2_1a5e222fd1ba182d24bd6c10e0d31b2c75" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1gaf6030e89dadcc1f45369b0cdc5d9e111" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Bounded_side</ref></type>
        <definition>CGAL::Bounded_side CGAL::Min_circle_2&lt; Traits &gt;::bounded_side</definition>
        <argsstring>(const Point &amp;p) const</argsstring>
        <name>bounded_side</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Min__circle__2_1acaff2d7da19f3c8ca5bf8845253f6039" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput><ref refid="group__kernel__enums_1ggaf6030e89dadcc1f45369b0cdc5d9e111ad8333d35d4801c08b3a5ae9e94d7cabe" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::ON_BOUNDED_SIDE</ref></computeroutput>, <computeroutput><ref refid="group__kernel__enums_1ggaf6030e89dadcc1f45369b0cdc5d9e111a060193157c0875fb2e6445a648f3ac1f" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::ON_BOUNDARY</ref></computeroutput>, or <computeroutput><ref refid="group__kernel__enums_1ggaf6030e89dadcc1f45369b0cdc5d9e111a3a96e6da84164cc8300c9e130be23f71" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::ON_UNBOUNDED_SIDE</ref></computeroutput> iff <computeroutput>p</computeroutput> lies properly inside, on the boundary of, or properly outside of <computeroutput>min_circle</computeroutput>, resp. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Min_circle_2.h" line="243" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Min__circle__2_1ac3c6dadb9c3289c43396f8a439c6257f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Min_circle_2&lt; Traits &gt;::has_on_bounded_side</definition>
        <argsstring>(const Point &amp;p) const</argsstring>
        <name>has_on_bounded_side</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Min__circle__2_1acaff2d7da19f3c8ca5bf8845253f6039" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff <computeroutput>p</computeroutput> lies properly inside <computeroutput>min_circle</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Min_circle_2.h" line="249" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Min__circle__2_1a649ea54cd5c4d679eecabe3f2e7d29b2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Min_circle_2&lt; Traits &gt;::has_on_boundary</definition>
        <argsstring>(const Point &amp;p) const</argsstring>
        <name>has_on_boundary</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Min__circle__2_1acaff2d7da19f3c8ca5bf8845253f6039" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff <computeroutput>p</computeroutput> lies on the boundary of <computeroutput>min_circle</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Min_circle_2.h" line="256" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Min__circle__2_1a2fc4e34c6e70fffc3489f113c9ccc29c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Min_circle_2&lt; Traits &gt;::has_on_unbounded_side</definition>
        <argsstring>(const Point &amp;p) const</argsstring>
        <name>has_on_unbounded_side</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Min__circle__2_1acaff2d7da19f3c8ca5bf8845253f6039" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff <computeroutput>p</computeroutput> lies properly outside of <computeroutput>min_circle</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Min_circle_2.h" line="262" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Min__circle__2_1a6138cc0e8a507e8298a00d8070e2338f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Min_circle_2&lt; Traits &gt;::is_empty</definition>
        <argsstring>() const</argsstring>
        <name>is_empty</name>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff <computeroutput>min_circle</computeroutput> is empty (this implies degeneracy). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Min_circle_2.h" line="269" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Min__circle__2_1a7340949b73e772788fab0a5ed2a7e005" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Min_circle_2&lt; Traits &gt;::is_degenerate</definition>
        <argsstring>() const</argsstring>
        <name>is_degenerate</name>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff <computeroutput>min_circle</computeroutput> is degenerate, i.e. if <computeroutput>min_circle</computeroutput> is empty or equal to a single point, equivalently if the number of support points is less than 2. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Min_circle_2.h" line="277" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Modifiers</header>
      <description><para>New points can be added to an existing <computeroutput>min_circle</computeroutput>, allowing to build <formula id="76">$ mc(P)$</formula> incrementally, e.g.</para><para>if <formula id="9">$ P$</formula> is not known in advance. Compared to the direct creation of <formula id="76">$ mc(P)$</formula>, this is not much slower, because the construction method is incremental itself. </para></description>
      <memberdef kind="function" id="classCGAL_1_1Min__circle__2_1a36fb0e4da0884d5c184f9d506c93fbd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Min_circle_2&lt; Traits &gt;::insert</definition>
        <argsstring>(const Point &amp;p)</argsstring>
        <name>insert</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Min__circle__2_1acaff2d7da19f3c8ca5bf8845253f6039" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>inserts <computeroutput>p</computeroutput> into <computeroutput>min_circle</computeroutput> and recomputes the smallest enclosing circle. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Min_circle_2.h" line="294" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Min__circle__2_1a063d28d21dc5a4a222c9fe201eb168cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Min_circle_2&lt; Traits &gt;::insert</definition>
        <argsstring>(InputIterator first, InputIterator last)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>inserts the points in the range [<computeroutput>first</computeroutput>,<computeroutput>last</computeroutput>) into <computeroutput>min_circle</computeroutput> and recomputes the smallest enclosing circle by calling <computeroutput>insert(p)</computeroutput> for each point <computeroutput>p</computeroutput> in [<computeroutput>first</computeroutput>,<computeroutput>last</computeroutput>). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput> with <computeroutput>Point</computeroutput> as value type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Min_circle_2.h" line="305" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Min__circle__2_1a3dd9c86b2ca28f8bd7d9274091d726eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Min_circle_2&lt; Traits &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>deletes all points in <computeroutput>min_circle</computeroutput> and sets <computeroutput>min_circle</computeroutput> to the empty set. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="post"><para><computeroutput>min_circle.is_empty()</computeroutput> = <computeroutput>true</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Min_circle_2.h" line="313" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Validity Check</header>
      <description><para>An object <computeroutput>min_circle</computeroutput> is valid, iff</para><para><itemizedlist>
<listitem>
<para><computeroutput>min_circle</computeroutput> contains all points of its defining set <formula id="9">$ P$</formula>, </para></listitem>
<listitem>
<para><computeroutput>min_circle</computeroutput> is the smallest circle spanned by its support set <formula id="24">$ S$</formula>, and </para></listitem>
<listitem>
<para><formula id="24">$ S$</formula> is minimal, i.e. no support point is redundant. </para></listitem>
</itemizedlist>
</para></description>
      <memberdef kind="function" id="classCGAL_1_1Min__circle__2_1af773edd312c5194118bf2842ecda170a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Min_circle_2&lt; Traits &gt;::is_valid</definition>
        <argsstring>(bool verbose=false, int level=0) const</argsstring>
        <name>is_valid</name>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff <computeroutput>min_circle</computeroutput> is valid. </para>        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>verbose</computeroutput> is <computeroutput>true</computeroutput>, some messages concerning the performed checks are written to standard error stream. The second parameter <computeroutput>level</computeroutput> is not used, we provide it only for consistency with interfaces of other classes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Min_circle_2.h" line="332" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Miscellaneous</header>
      <memberdef kind="function" id="classCGAL_1_1Min__circle__2_1aab9f3aa378f5a4ef4c87a7fde63c0b4e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const Traits &amp;</type>
        <definition>const Traits&amp; CGAL::Min_circle_2&lt; Traits &gt;::traits</definition>
        <argsstring>() const</argsstring>
        <name>traits</name>
        <briefdescription>
<para>returns a const reference to the traits class object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Min_circle_2.h" line="344" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="related">
      <memberdef kind="function" id="classCGAL_1_1Min__circle__2_1a693dca04f21bc2c897f489f085a0fbff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Min_circle_2&lt; Traits &gt; &amp;min_circle)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Min__circle__2" kindref="compound">Min_circle_2</ref>&lt; Traits &gt; &amp;</type>
          <declname>min_circle</declname>
        </param>
        <briefdescription>
<para>writes <computeroutput>min_circle</computeroutput> to output stream <computeroutput>os</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>An overload of <computeroutput>operator&lt;&lt;</computeroutput> must be defined for <computeroutput>Point</computeroutput> (and for <computeroutput><ref refid="classCircle" kindref="compound">Circle</ref></computeroutput>, if pretty printing is used). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Min_circle_2.h" line="356" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Min__circle__2_1a8c0e384847bfe95d8f8dc7c5291547c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, Min_circle_2&lt; Traits &gt; min_circle &amp;)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Min__circle__2" kindref="compound">Min_circle_2</ref>&lt; Traits &gt; min_circle &amp;</type>
        </param>
        <briefdescription>
<para>reads <computeroutput>min_circle</computeroutput> from input stream <computeroutput>is</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>An overload of <computeroutput>operator&gt;&gt;</computeroutput> must be defined for <computeroutput>Point</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Min_circle_2.h" line="367" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An object of the class <computeroutput><ref refid="classCGAL_1_1Min__circle__2" kindref="compound">Min_circle_2</ref></computeroutput> is the unique circle of smallest area enclosing a finite (multi)set of points in two-dimensional Euclidean space <formula id="75">$ \E^2$</formula>. </para>    </briefdescription>
    <detaileddescription>
<para>For a point set <formula id="9">$ P$</formula> we denote by <formula id="76">$ mc(P)$</formula> the smallest circle that contains all points of <formula id="9">$ P$</formula>. Note that <formula id="76">$ mc(P)$</formula> can be degenerate, i.e. <formula id="77">$ mc(P)=\emptyset$</formula> if <formula id="66">$ P=\emptyset$</formula> and <formula id="78">$ mc(P)=\{p\}$</formula> if <formula id="68">$ P=\{p\}$</formula>.</para><para>An inclusion-minimal subset <formula id="24">$ S$</formula> of <formula id="9">$ P$</formula> with <formula id="79">$ mc(S)=mc(P)$</formula> is called a <emphasis>support set</emphasis>, the points in <formula id="24">$ S$</formula> are the <emphasis>support points</emphasis>. A support set has size at most three, and all its points lie on the boundary of <formula id="76">$ mc(P)$</formula>. In general, neither the support set nor its size are necessarily unique.</para><para>The underlying algorithm can cope with all kinds of input, e.g. <formula id="9">$ P$</formula> may be empty or points may occur more than once. The algorithm computes a support set <formula id="24">$ S$</formula> which remains fixed until the next insert or clear operation.</para><para><bold>Please note:</bold> This class is (almost) obsolete. The class <computeroutput><ref refid="classCGAL_1_1Min__sphere__of__spheres__d" kindref="compound">CGAL::Min_sphere_of_spheres_d</ref>&lt;Traits&gt;</computeroutput> solves a more general problem and is faster then <computeroutput><ref refid="classCGAL_1_1Min__circle__2" kindref="compound">Min_circle_2</ref></computeroutput> even if used only for points in two dimensions as input. Most importantly, <computeroutput><ref refid="classCGAL_1_1Min__sphere__of__spheres__d" kindref="compound">CGAL::Min_sphere_of_spheres_d</ref>&lt;Traits&gt;</computeroutput> has a specialized implementation for floating-point arithmetic which ensures correct results in a large number of cases (including highly degenerate ones). In contrast, <computeroutput><ref refid="classCGAL_1_1Min__circle__2" kindref="compound">Min_circle_2</ref></computeroutput> is not tuned for floating-point computations. The only advantage of <computeroutput><ref refid="classCGAL_1_1Min__circle__2" kindref="compound">Min_circle_2</ref></computeroutput> over <computeroutput><ref refid="classCGAL_1_1Min__sphere__of__spheres__d" kindref="compound">CGAL::Min_sphere_of_spheres_d</ref>&lt;Traits&gt;</computeroutput> is that the former can deal with points in homogeneous coordinates, in which case the algorithm is division-free. Thus, <computeroutput><ref refid="classCGAL_1_1Min__circle__2" kindref="compound">Min_circle_2</ref></computeroutput> might still be an option in case your input number type cannot (efficiently) divide.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Traits</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model for <computeroutput><ref refid="classMinCircle2Traits" kindref="compound">MinCircle2Traits</ref></computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
We provide the model <computeroutput><ref refid="classCGAL_1_1Min__circle__2__traits__2" kindref="compound">CGAL::Min_circle_2_traits_2</ref></computeroutput> using the two-dimensional CGAL kernel.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Min__ellipse__2" kindref="compound">CGAL::Min_ellipse_2</ref>&lt;Traits&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Min__sphere__d" kindref="compound">CGAL::Min_sphere_d</ref>&lt;Traits&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Min__sphere__of__spheres__d" kindref="compound">CGAL::Min_sphere_of_spheres_d</ref>&lt;Traits&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Min__circle__2__traits__2" kindref="compound">CGAL::Min_circle_2_traits_2</ref>&lt;K&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classMinCircle2Traits" kindref="compound">MinCircle2Traits</ref></computeroutput></para></simplesect>
<bold>Implementation</bold><linebreak/>
</para><para>We implement the incremental algorithm of Welzl, with move-to-front heuristic <ref refid="citelist_1CITEREF_w-sedbe-91a" kindref="member">[16]</ref>. The whole implementation is described in <ref refid="citelist_1CITEREF_cgal:gs-seceg-98" kindref="member">[5]</ref>.</para><para>If randomization is chosen, the creation time is almost always linear in the number of points. Access functions and predicates take constant time, inserting a point might take up to linear time, but substantially less than computing the new smallest enclosing circle from scratch. The clear operation and the check for validity each takes linear time.</para><para><bold>Example</bold><linebreak/>
</para><para>To illustrate the creation of <computeroutput><ref refid="classCGAL_1_1Min__circle__2" kindref="compound">Min_circle_2</ref></computeroutput> and to show that randomization can be useful in certain cases, we give an example.</para><para><linebreak/>
<bold>File</bold> <ref refid="Min_circle_2_2min_circle_2_8cpp-example" kindref="compound">Min_circle_2/min_circle_2.cpp</ref> <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_exact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Min_circle_2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Min_circle_2_traits_2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>typedefs</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/><ref refid="classCGAL_1_1Exact__predicates__exact__constructions__kernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Exact_predicates_exact_constructions_kernel</ref><sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/><ref refid="classCGAL_1_1Min__circle__2__traits__2" kindref="compound">CGAL::Min_circle_2_traits_2&lt;K&gt;</ref><sp/><sp/>Traits;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/><ref refid="classCGAL_1_1Min__circle__2" kindref="compound">CGAL::Min_circle_2&lt;Traits&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/>Min_circle;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/>K::Point_2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCGAL_1_1Min__circle__2_1acaff2d7da19f3c8ca5bf8845253f6039" kindref="member">Point</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">main(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>100;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Point<sp/>P[n];</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>P[<sp/>i]<sp/>=<sp/><ref refid="classCGAL_1_1Min__circle__2_1acaff2d7da19f3c8ca5bf8845253f6039" kindref="member">Point</ref>(<sp/>(i%2<sp/>==<sp/>0<sp/>?<sp/>i<sp/>:<sp/>-i),<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(0,0),<sp/>(-1,0),<sp/>(2,0),<sp/>(-3,0),<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Min_circle<sp/><sp/>mc1(<sp/>P,<sp/>P+n,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>very<sp/>slow</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Min_circle<sp/><sp/>mc2(<sp/>P,<sp/>P+n,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fast</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__PkgIOstreams_1ga2f2176255429973ea7bf156804a53857" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Stream_support.tag">CGAL::set_pretty_mode</ref>(<sp/>std::cout);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>mc2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>    </detaileddescription>
    <location file="CGAL/Min_circle_2.h" line="75" column="1" bodyfile="CGAL/Min_circle_2.h" bodystart="75" bodyend="348"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Min__circle__2_1a5e222fd1ba182d24bd6c10e0d31b2c75" prot="public" virt="non-virtual"><scope>CGAL::Min_circle_2</scope><name>bounded_side</name></member>
      <member refid="classCGAL_1_1Min__circle__2_1a48aea3450e5b91924646e784481ff44d" prot="public" virt="non-virtual"><scope>CGAL::Min_circle_2</scope><name>Circle</name></member>
      <member refid="classCGAL_1_1Min__circle__2_1a0e6629c5d9af38017400dc812edb584a" prot="public" virt="non-virtual"><scope>CGAL::Min_circle_2</scope><name>circle</name></member>
      <member refid="classCGAL_1_1Min__circle__2_1a3dd9c86b2ca28f8bd7d9274091d726eb" prot="public" virt="non-virtual"><scope>CGAL::Min_circle_2</scope><name>clear</name></member>
      <member refid="classCGAL_1_1Min__circle__2_1a649ea54cd5c4d679eecabe3f2e7d29b2" prot="public" virt="non-virtual"><scope>CGAL::Min_circle_2</scope><name>has_on_boundary</name></member>
      <member refid="classCGAL_1_1Min__circle__2_1ac3c6dadb9c3289c43396f8a439c6257f" prot="public" virt="non-virtual"><scope>CGAL::Min_circle_2</scope><name>has_on_bounded_side</name></member>
      <member refid="classCGAL_1_1Min__circle__2_1a2fc4e34c6e70fffc3489f113c9ccc29c" prot="public" virt="non-virtual"><scope>CGAL::Min_circle_2</scope><name>has_on_unbounded_side</name></member>
      <member refid="classCGAL_1_1Min__circle__2_1a36fb0e4da0884d5c184f9d506c93fbd3" prot="public" virt="non-virtual"><scope>CGAL::Min_circle_2</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Min__circle__2_1a063d28d21dc5a4a222c9fe201eb168cd" prot="public" virt="non-virtual"><scope>CGAL::Min_circle_2</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Min__circle__2_1a7340949b73e772788fab0a5ed2a7e005" prot="public" virt="non-virtual"><scope>CGAL::Min_circle_2</scope><name>is_degenerate</name></member>
      <member refid="classCGAL_1_1Min__circle__2_1a6138cc0e8a507e8298a00d8070e2338f" prot="public" virt="non-virtual"><scope>CGAL::Min_circle_2</scope><name>is_empty</name></member>
      <member refid="classCGAL_1_1Min__circle__2_1af773edd312c5194118bf2842ecda170a" prot="public" virt="non-virtual"><scope>CGAL::Min_circle_2</scope><name>is_valid</name></member>
      <member refid="classCGAL_1_1Min__circle__2_1a14b72d0065ac73ade159c3ab25855917" prot="public" virt="non-virtual"><scope>CGAL::Min_circle_2</scope><name>Min_circle_2</name></member>
      <member refid="classCGAL_1_1Min__circle__2_1aebee8cf6b4ef8484b0a12f39332bc539" prot="public" virt="non-virtual"><scope>CGAL::Min_circle_2</scope><name>Min_circle_2</name></member>
      <member refid="classCGAL_1_1Min__circle__2_1a1725a75ed64d54ef41c7fe3eb59931a5" prot="public" virt="non-virtual"><scope>CGAL::Min_circle_2</scope><name>Min_circle_2</name></member>
      <member refid="classCGAL_1_1Min__circle__2_1aa6e065ed602ef49dcbf064d749f7cd32" prot="public" virt="non-virtual"><scope>CGAL::Min_circle_2</scope><name>Min_circle_2</name></member>
      <member refid="classCGAL_1_1Min__circle__2_1ab68687584c9a3593e2316a26acc57ca5" prot="public" virt="non-virtual"><scope>CGAL::Min_circle_2</scope><name>Min_circle_2</name></member>
      <member refid="classCGAL_1_1Min__circle__2_1ae833665313f26e701bae246cc6dea68a" prot="public" virt="non-virtual"><scope>CGAL::Min_circle_2</scope><name>number_of_points</name></member>
      <member refid="classCGAL_1_1Min__circle__2_1ac87c3d760053509a41be898771111854" prot="public" virt="non-virtual"><scope>CGAL::Min_circle_2</scope><name>number_of_support_points</name></member>
      <member refid="classCGAL_1_1Min__circle__2_1a693dca04f21bc2c897f489f085a0fbff" prot="public" virt="non-virtual"><scope>CGAL::Min_circle_2</scope><name>operator&lt;&lt;</name></member>
      <member refid="classCGAL_1_1Min__circle__2_1a8c0e384847bfe95d8f8dc7c5291547c6" prot="public" virt="non-virtual"><scope>CGAL::Min_circle_2</scope><name>operator&gt;&gt;</name></member>
      <member refid="classCGAL_1_1Min__circle__2_1acaff2d7da19f3c8ca5bf8845253f6039" prot="public" virt="non-virtual"><scope>CGAL::Min_circle_2</scope><name>Point</name></member>
      <member refid="classCGAL_1_1Min__circle__2_1a716c27257a327f9eb570de854ccb57f4" prot="public" virt="non-virtual"><scope>CGAL::Min_circle_2</scope><name>Point_iterator</name></member>
      <member refid="classCGAL_1_1Min__circle__2_1ade14badb14c8b404d099f637ff53be87" prot="public" virt="non-virtual"><scope>CGAL::Min_circle_2</scope><name>points_begin</name></member>
      <member refid="classCGAL_1_1Min__circle__2_1aa98f7f868d6c7cacd137bb18cc4ec527" prot="public" virt="non-virtual"><scope>CGAL::Min_circle_2</scope><name>points_end</name></member>
      <member refid="classCGAL_1_1Min__circle__2_1a5a544c739e6e46c2ced10d54720f89ec" prot="public" virt="non-virtual"><scope>CGAL::Min_circle_2</scope><name>support_point</name></member>
      <member refid="classCGAL_1_1Min__circle__2_1a694816c6d92ee807ea6a3daba1a8f421" prot="public" virt="non-virtual"><scope>CGAL::Min_circle_2</scope><name>Support_point_iterator</name></member>
      <member refid="classCGAL_1_1Min__circle__2_1acb33d435a72cfcda800b739ba172082d" prot="public" virt="non-virtual"><scope>CGAL::Min_circle_2</scope><name>support_points_begin</name></member>
      <member refid="classCGAL_1_1Min__circle__2_1af808f54e70621f0fe201c4b327b5de3b" prot="public" virt="non-virtual"><scope>CGAL::Min_circle_2</scope><name>support_points_end</name></member>
      <member refid="classCGAL_1_1Min__circle__2_1aab9f3aa378f5a4ef4c87a7fde63c0b4e" prot="public" virt="non-virtual"><scope>CGAL::Min_circle_2</scope><name>traits</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
