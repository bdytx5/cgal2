<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="Triangulation_3_2simple_triangulation_3_8cpp-example" kind="example">
    <compoundname>Triangulation_3/simple_triangulation_3.cpp</compoundname>
    <detaileddescription>
<para><programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_inexact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CGAL::Exact_predicates_inexact_constructions_kernel<sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Triangulation__3" kindref="compound">CGAL::Triangulation_3&lt;K&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/>Triangulation;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Triangulation::Cell_handle<sp/><sp/><sp/><sp/>Cell_handle;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Triangulation::Vertex_handle<sp/><sp/>Vertex_handle;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Triangulation::Locate_type<sp/><sp/><sp/><sp/>Locate_type;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Triangulation::Point<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>construction<sp/>from<sp/>a<sp/>list<sp/>of<sp/>points<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::list&lt;Point&gt;<sp/>L;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>L.push_front(Point(0,0,0));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>L.push_front(Point(1,0,0));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>L.push_front(Point(0,1,0));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Triangulation<sp/>T(L.begin(),<sp/>L.end());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Triangulation::size_type<sp/>n<sp/>=<sp/>T.number_of_vertices();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>insertion<sp/>from<sp/>a<sp/>vector<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;Point&gt;<sp/>V(3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>V[0]<sp/>=<sp/>Point(0,0,1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>V[1]<sp/>=<sp/>Point(1,1,1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>V[2]<sp/>=<sp/>Point(2,2,2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>n<sp/>+<sp/>T.insert(V.begin(),<sp/>V.end());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>assert(<sp/>n<sp/>==<sp/>6<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>6<sp/>points<sp/>have<sp/>been<sp/>inserted</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>assert(<sp/>T.is_valid()<sp/>);<sp/></highlight><highlight class="comment">//<sp/>checking<sp/>validity<sp/>of<sp/>T</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Locate_type<sp/>lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>li,<sp/>lj;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Point<sp/>p(0,0,0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Cell_handle<sp/>c<sp/>=<sp/>T.locate(p,<sp/>lt,<sp/>li,<sp/>lj);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>p<sp/>is<sp/>the<sp/>vertex<sp/>of<sp/>c<sp/>of<sp/>index<sp/>li<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>assert(<sp/>lt<sp/>==<sp/>Triangulation::VERTEX<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>assert(<sp/>c-&gt;vertex(li)-&gt;point()<sp/>==<sp/>p<sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Vertex_handle<sp/>v<sp/>=<sp/>c-&gt;vertex(<sp/>(li+1)&amp;3<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>v<sp/>is<sp/>another<sp/>vertex<sp/>of<sp/>c</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Cell_handle<sp/>nc<sp/>=<sp/>c-&gt;neighbor(li);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>nc<sp/>=<sp/>neighbor<sp/>of<sp/>c<sp/>opposite<sp/>to<sp/>the<sp/>vertex<sp/>associated<sp/>with<sp/>p</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>nc<sp/>must<sp/>have<sp/>vertex<sp/>v<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nli;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>assert(<sp/>nc-&gt;has_vertex(<sp/>v,<sp/>nli<sp/>)<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>nli<sp/>is<sp/>the<sp/>index<sp/>of<sp/>v<sp/>in<sp/>nc</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::ofstream<sp/>oFileT(</highlight><highlight class="stringliteral">&quot;output&quot;</highlight><highlight class="normal">,std::ios::out);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>writing<sp/>file<sp/>output;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>oFileT<sp/>&lt;&lt;<sp/>T;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Triangulation<sp/>T1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::ifstream<sp/>iFileT(</highlight><highlight class="stringliteral">&quot;output&quot;</highlight><highlight class="normal">,std::ios::in);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>reading<sp/>file<sp/>output;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>iFileT<sp/>&gt;&gt;<sp/>T1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>assert(<sp/>T1.is_valid()<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>assert(<sp/>T1.number_of_vertices()<sp/>==<sp/>T.number_of_vertices()<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>assert(<sp/>T1.number_of_cells()<sp/>==<sp/>T.number_of_cells()<sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>    </detaileddescription>
  </compounddef>
</doxygen>
