<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Regular__triangulation__3" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Regular_triangulation_3</compoundname>
    <basecompoundref refid="classCGAL_1_1Triangulation__3" prot="public" virt="non-virtual">CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;</basecompoundref>
    <includes local="no">CGAL/Regular_triangulation_3.h</includes>
    <templateparamlist>
      <param>
        <type>typename Traits</type>
      </param>
      <param>
        <type>typename TDS</type>
      </param>
      <param>
        <type>typename SLDS</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classCGAL_1_1Regular__triangulation__3_1af8044e9eb2ce15c7a6d602026d662532" prot="public" static="no">
        <type>Traits::Point_3</type>
        <definition>typedef Traits::Point_3 CGAL::Regular_triangulation_3&lt; Traits, TDS, SLDS &gt;::Bare_point</definition>
        <argsstring></argsstring>
        <name>Bare_point</name>
        <briefdescription>
<para>The type for points <computeroutput>p</computeroutput> of weighted points <formula id="9">$ {p}^{(w)}=(p,w_p)$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_3.h" line="69" column="1" bodyfile="CGAL/Regular_triangulation_3.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Regular__triangulation__3_1a692e373287e44bab1b63f69ac44f59ee" prot="public" static="no">
        <type>Traits::Weighted_point_3</type>
        <definition>typedef Traits::Weighted_point_3 CGAL::Regular_triangulation_3&lt; Traits, TDS, SLDS &gt;::Weighted_point</definition>
        <argsstring></argsstring>
        <name>Weighted_point</name>
        <briefdescription>
<para>The type for weighted points. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_3.h" line="74" column="1" bodyfile="CGAL/Regular_triangulation_3.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Regular__triangulation__3_1a89fb7d04b8a9880bd351f8db0c09c63b" prot="public" static="no">
        <type>SLDS</type>
        <definition>typedef SLDS CGAL::Regular_triangulation_3&lt; Traits, TDS, SLDS &gt;::Lock_data_structure</definition>
        <argsstring></argsstring>
        <name>Lock_data_structure</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_3.h" line="79" column="1" bodyfile="CGAL/Regular_triangulation_3.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__3_1ae2d6e2f0c249b0429dd2c53996e0bdbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Regular_triangulation_3&lt; Traits, TDS, SLDS &gt;::Regular_triangulation_3</definition>
        <argsstring>(const Traits &amp;traits=Traits(), Lock_data_structure *lock_ds=NULL)</argsstring>
        <name>Regular_triangulation_3</name>
        <param>
          <type>const Traits &amp;</type>
          <declname>traits</declname>
          <defval>Traits()</defval>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Regular__triangulation__3_1a89fb7d04b8a9880bd351f8db0c09c63b" kindref="member">Lock_data_structure</ref> *</type>
          <declname>lock_ds</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Creates an empty regular triangulation, possibly specifying a traits class <computeroutput>traits</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>lock_ds</computeroutput> is an optional pointer to the lock data structure for parallel operations. It must be provided if concurrency is enabled. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_3.h" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__3_1ac4736c663c175565e7cf62a05892c82a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Regular_triangulation_3&lt; Traits, TDS, SLDS &gt;::Regular_triangulation_3</definition>
        <argsstring>(const Regular_triangulation_3 &amp;rt1)</argsstring>
        <name>Regular_triangulation_3</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Regular__triangulation__3" kindref="compound">Regular_triangulation_3</ref> &amp;</type>
          <declname>rt1</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>        </briefdescription>
        <detaileddescription>
<para>The pointer to the lock data structure is not copied. Thus, the copy won&apos;t be concurrency-safe as long as the user has not called <computeroutput><ref refid="classCGAL_1_1Triangulation__3_1afba384e440c57f3bb0a71e4b4f7f9944" kindref="member">Triangulation_3::set_lock_data_structure</ref></computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_3.h" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__3_1ad4c6831a0ec28baca17d20de1f968402" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>CGAL::Regular_triangulation_3&lt; Traits, TDS, SLDS &gt;::Regular_triangulation_3</definition>
        <argsstring>(InputIterator first, InputIterator last, const Traits &amp;traits=Traits(), Lock_data_structure *lock_ds=NULL)</argsstring>
        <name>Regular_triangulation_3</name>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>last</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>traits</declname>
          <defval>Traits()</defval>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Regular__triangulation__3_1a89fb7d04b8a9880bd351f8db0c09c63b" kindref="member">Lock_data_structure</ref> *</type>
          <declname>lock_ds</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Equivalent to constructing an empty triangulation with the optional traits class argument and calling <computeroutput>insert(first,last)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>If parallelism is enabled, the points will be inserted in parallel. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>must be an input iterator with value type <computeroutput><ref refid="classCGAL_1_1Weighted__point" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_2.tag">Weighted_point</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_3.h" line="109" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__3_1aa85fe1588169ab880e99614a48b06bc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>CGAL::Regular_triangulation_3&lt; Traits, TDS, SLDS &gt;::Regular_triangulation_3</definition>
        <argsstring>(InputIterator first, InputIterator last, Lock_data_structure *lock_ds, const Traits &amp;traits=Traits())</argsstring>
        <name>Regular_triangulation_3</name>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>last</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Regular__triangulation__3_1a89fb7d04b8a9880bd351f8db0c09c63b" kindref="member">Lock_data_structure</ref> *</type>
          <declname>lock_ds</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>traits</declname>
          <defval>Traits()</defval>
        </param>
        <briefdescription>
<para>Same as before, with last two parameters in reverse order. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_3.h" line="117" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Insertion</header>
      <description><para>The following methods, which already exist in <computeroutput><ref refid="classCGAL_1_1Triangulation__3" kindref="compound">Triangulation_3</ref></computeroutput>, are overloaded to ensure the property that all power spheres are regular.</para><para>The following method allows one to insert several points. </para></description>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__3_1a1f9d427d62b0bf666216471597210b86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Regular_triangulation_3&lt; Traits, TDS, SLDS &gt;::insert</definition>
        <argsstring>(const Weighted_point &amp;p, Cell_handle start=Cell_handle(), bool *could_lock_zone=NULL)</argsstring>
        <name>insert</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Regular__triangulation__3_1a692e373287e44bab1b63f69ac44f59ee" kindref="member">Weighted_point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>start</declname>
          <defval><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref>()</defval>
        </param>
        <param>
          <type>bool *</type>
          <declname>could_lock_zone</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Inserts the weighted point <computeroutput>p</computeroutput> in the triangulation. </para>        </briefdescription>
        <detaileddescription>
<para>The optional argument <computeroutput>start</computeroutput> is used as a starting place for the search.</para><para>If this insertion creates a vertex, this vertex is returned.</para><para>If <computeroutput>p</computeroutput> coincides with an existing vertex and has a greater weight, then the existing weighted point becomes hidden (see <computeroutput><ref refid="classRegularTriangulationCellBase__3" kindref="compound">RegularTriangulationCellBase_3</ref></computeroutput>) and <computeroutput>p</computeroutput> replaces it as vertex of the triangulation.</para><para>If <computeroutput>p</computeroutput> coincides with an already existing vertex (both point and weights being equal), then this vertex is returned and the triangulation remains unchanged.</para><para>Otherwise if <computeroutput>p</computeroutput> does not appear as a vertex of the triangulation, then it is stored as a hidden point and this method returns the default constructed handle.</para><para>The optional argument <computeroutput>could_lock_zone</computeroutput> is used by the concurrency-safe version of the triangulation. If the pointer is not null, the insertion will try to lock all the cells of the conflict zone, i.e. all the vertices that are inside or on the boundary of the conflict zone. If it succeeds, <computeroutput>*could_lock_zone</computeroutput> is true, otherwise it is false (and the point is not inserted). In any case, the locked cells are not unlocked by the function, leaving this choice to the user. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_3.h" line="153" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__3_1ad5c9a3f6ba52bac19f4158bfa5b18028" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Regular_triangulation_3&lt; Traits, TDS, SLDS &gt;::insert</definition>
        <argsstring>(const Weighted_point &amp;p, Vertex_handle hint, bool *could_lock_zone=NULL)</argsstring>
        <name>insert</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Regular__triangulation__3_1a692e373287e44bab1b63f69ac44f59ee" kindref="member">Weighted_point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
          <declname>hint</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>could_lock_zone</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Same as above but uses <computeroutput>hint</computeroutput> as a starting place for the search. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_3.h" line="159" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__3_1ac62167a6dcfba79c9cd70169d7f30a7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Regular_triangulation_3&lt; Traits, TDS, SLDS &gt;::insert</definition>
        <argsstring>(const Weighted_point &amp;p, Locate_type lt, Cell_handle loc, int li, int lj, bool *could_lock_zone=NULL)</argsstring>
        <name>insert</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Regular__triangulation__3_1a692e373287e44bab1b63f69ac44f59ee" kindref="member">Weighted_point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a5bea7d3470854571f97c18a675daca75" kindref="member">Locate_type</ref></type>
          <declname>lt</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>loc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>li</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lj</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>could_lock_zone</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Inserts the weighted point <computeroutput>p</computeroutput> in the triangulation and returns the corresponding vertex. </para>        </briefdescription>
        <detaileddescription>
<para>Similar to the above <computeroutput><ref refid="classCGAL_1_1Regular__triangulation__3_1a1f9d427d62b0bf666216471597210b86" kindref="member">insert()</ref></computeroutput> function, but takes as additional parameter the return values of a previous location query. See description of <computeroutput><ref refid="classCGAL_1_1Triangulation__3_1a280891e681597215a86d63399ae7464c" kindref="member">Triangulation_3::locate()</ref></computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_3.h" line="167" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__3_1a00b6db69dc74987ef4ba23baedcdde12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          </param>
        </templateparamlist>
        <type>std::ptrdiff_t</type>
        <definition>std::ptrdiff_t CGAL::Regular_triangulation_3&lt; Traits, TDS, SLDS &gt;::insert</definition>
        <argsstring>(InputIterator first, InputIterator last)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Inserts the weighted points in the range <computeroutput>[first,last)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>It returns the difference of the number of vertices between after and before the insertions (it may be negative due to hidden points). Note that this function is not guaranteed to insert the points following the order of <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput>, as <computeroutput><ref refid="group__PkgSpatialSortingFunctions_1ga2f4d770272b84481f7c4c9b20b7174c7" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Spatial_sorting.tag">spatial_sort()</ref></computeroutput> is used to improve efficiency. If parallelism is enabled, the points will be inserted in parallel.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>must be an input iterator with value type <computeroutput><ref refid="classCGAL_1_1Weighted__point" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_2.tag">Weighted_point</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_3.h" line="183" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__3_1a868abe8b492f4da67e3929db4ad3aceb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class WeightedPointWithInfoInputIterator</type>
          </param>
        </templateparamlist>
        <type>std::ptrdiff_t</type>
        <definition>std::ptrdiff_t CGAL::Regular_triangulation_3&lt; Traits, TDS, SLDS &gt;::insert</definition>
        <argsstring>(WeightedPointWithInfoInputIterator first, WeightedPointWithInfoInputIterator last)</argsstring>
        <name>insert</name>
        <param>
          <type>WeightedPointWithInfoInputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>WeightedPointWithInfoInputIterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Inserts the weighted points in the iterator range <computeroutput>[first,last)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>It returns the difference of the number of vertices between after and before the insertions (it may be negative due to hidden points). Note that this function is not guaranteed to insert the weighted points following the order of <computeroutput>WeightedPointWithInfoInputIterator</computeroutput>, as <computeroutput><ref refid="group__PkgSpatialSortingFunctions_1ga2f4d770272b84481f7c4c9b20b7174c7" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Spatial_sorting.tag">spatial_sort()</ref></computeroutput> is used to improve efficiency. If parallelism is enabled, the points will be inserted in parallel. Given a pair <computeroutput>(p,i)</computeroutput>, the vertex <computeroutput>v</computeroutput> storing <computeroutput>p</computeroutput> also stores <computeroutput>i</computeroutput>, that is <computeroutput>v.point() == p</computeroutput> and <computeroutput>v.info() == i</computeroutput>. If several pairs have the same point, only one vertex is created, one of the objects of type <computeroutput>Vertex::Info</computeroutput> will be stored in the vertex. <simplesect kind="pre"><para><computeroutput>Vertex</computeroutput> must be model of the concept <computeroutput><ref refid="classTriangulationVertexBaseWithInfo__3" kindref="compound">TriangulationVertexBaseWithInfo_3</ref></computeroutput>. </para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>(WeightedPointWithInfoInputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be an input iterator with value type <computeroutput>std::pair&lt;<ref refid="classCGAL_1_1Weighted__point" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_2.tag">Weighted_point</ref>,Vertex::Info&gt;</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_3.h" line="202" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <description><para>The following methods, which already exist in <computeroutput><ref refid="classCGAL_1_1Triangulation__3" kindref="compound">Triangulation_3</ref></computeroutput>, are overloaded to ensure that hidden points are well created and maintained. </para></description>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__3_1a8be9603586dbf6c4b28ddfff424fcddc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CellIt</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Regular_triangulation_3&lt; Traits, TDS, SLDS &gt;::insert_in_hole</definition>
        <argsstring>(const Weighted_point &amp;p, CellIt cell_begin, CellIt cell_end, Cell_handle begin, int i)</argsstring>
        <name>insert_in_hole</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Regular__triangulation__3_1a692e373287e44bab1b63f69ac44f59ee" kindref="member">Weighted_point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>CellIt</type>
          <declname>cell_begin</declname>
        </param>
        <param>
          <type>CellIt</type>
          <declname>cell_end</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>begin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Creates a new vertex by starring a hole. </para>        </briefdescription>
        <detaileddescription>
<para>It takes an iterator range <computeroutput>[cell_begin,cell_end)</computeroutput> of <computeroutput>Cell_handle</computeroutput>s which specifies a hole: a set of connected cells (resp. facets in dimension 2) which is star-shaped wrt <computeroutput>p</computeroutput>. (<computeroutput>begin</computeroutput>, <computeroutput>i</computeroutput>) is a facet (resp. an edge) on the boundary of the hole, that is, <computeroutput>begin</computeroutput> belongs to the set of cells (resp. facets) previously described, and <computeroutput>begin-&gt;neighbor(i)</computeroutput> does not. Then this function deletes all the cells (resp. facets) describing the hole, creates a new vertex <computeroutput>v</computeroutput>, and for each facet (resp. edge) on the boundary of the hole, creates a new cell (resp. facet) with <computeroutput>v</computeroutput> as vertex. Then <computeroutput>v-&gt;set_point(p)</computeroutput> is called and <computeroutput>v</computeroutput> is returned.</para><para>If the hole contains interior vertices, each of them is hidden by the insertion of <computeroutput>p</computeroutput> and is stored in the new cell which contains it. <simplesect kind="pre"><para><computeroutput>rt</computeroutput>.<computeroutput><ref refid="classCGAL_1_1Triangulation__3_1a80ba1634c96f534d18d2d2420f65561f" kindref="member">dimension()</ref></computeroutput> <formula id="3">$ \geq2$</formula>, the set of cells (resp. facets in dimension 2) is connected, not empty, its boundary is connected, and <computeroutput>p</computeroutput> lies inside the hole, which is star-shaped wrt <computeroutput>p</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_3.h" line="231" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__3_1aef5f37a0797e310ce1e938f8d24ded2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CellIt</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Regular_triangulation_3&lt; Traits, TDS, SLDS &gt;::insert_in_hole</definition>
        <argsstring>(const Weighted_point &amp;p, CellIt cell_begin, CellIt cell_end, Cell_handle begin, int i, Vertex_handle newv)</argsstring>
        <name>insert_in_hole</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Regular__triangulation__3_1a692e373287e44bab1b63f69ac44f59ee" kindref="member">Weighted_point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>CellIt</type>
          <declname>cell_begin</declname>
        </param>
        <param>
          <type>CellIt</type>
          <declname>cell_end</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>begin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
          <declname>newv</declname>
        </param>
        <briefdescription>
<para>Same as above, except that <computeroutput>newv</computeroutput> will be used as the new vertex, which must have been allocated previously with, e.g. <computeroutput>create_vertex</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_3.h" line="240" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Removal</header>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__3_1a0a035197a152e7e24f37746acfe7e5c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Regular_triangulation_3&lt; Traits, TDS, SLDS &gt;::remove</definition>
        <argsstring>(Vertex_handle v)</argsstring>
        <name>remove</name>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Removes the vertex <computeroutput>v</computeroutput> from the triangulation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_3.h" line="252" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__3_1af4ecfa0186a4acf38117e4f5e95915a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Regular_triangulation_3&lt; Traits, TDS, SLDS &gt;::remove</definition>
        <argsstring>(Vertex_handle v, bool *could_lock_zone)</argsstring>
        <name>remove</name>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>could_lock_zone</declname>
        </param>
        <briefdescription>
<para>Removes the vertex <computeroutput>v</computeroutput> from the triangulation. </para>        </briefdescription>
        <detaileddescription>
<para>This function is concurrency-safe if the triangulation is concurrency-safe. It will first try to lock all the cells adjacent to <computeroutput>v</computeroutput>. If it succeeds, <computeroutput>*could_lock_zone</computeroutput> is true, otherwise it is false (and the point is not removed). In any case, the locked cells are not unlocked by the function, leaving this choice to the user.</para><para>This function will try to remove <computeroutput>v</computeroutput> only if the removal does not decrease the dimension. The return value is only meaningful if <computeroutput>*could_lock_zone</computeroutput> is true:<itemizedlist>
<listitem><para>returns true if the vertex was removed</para></listitem><listitem><para>returns false if the vertex wasn&apos;t removed since it would decrease the dimension.</para></listitem></itemizedlist>
</para><para><simplesect kind="pre"><para><computeroutput>v</computeroutput> is a finite vertex of the triangulation. </para></simplesect>
<simplesect kind="pre"><para><computeroutput>dt</computeroutput>.<computeroutput><ref refid="classCGAL_1_1Triangulation__3_1a80ba1634c96f534d18d2d2420f65561f" kindref="member">dimension()</ref></computeroutput> <formula id="2">$ =3$</formula>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_3.h" line="273" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__3_1a758a02ce12e1c1e94cf2564a7c68cbe5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int CGAL::Regular_triangulation_3&lt; Traits, TDS, SLDS &gt;::remove</definition>
        <argsstring>(InputIterator first, InputIterator beyond)</argsstring>
        <name>remove</name>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>beyond</declname>
        </param>
        <briefdescription>
<para>Removes the vertices specified by the iterator range <computeroutput>[first, beyond)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The number of vertices removed is returned. If parallelism is enabled, the points will be removed in parallel. Note that if at some step, the triangulation dimension becomes lower than 3, the removal of the remaining points will go on sequentially.</para><para><simplesect kind="pre"><para>(i) all vertices of the range are finite vertices of the triangulation; and (ii) no vertices are repeated in the range.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>must be an input iterator with value type <computeroutput>Vertex_handle</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_3.h" line="287" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Queries</header>
      <description><para>Let us remark that <formula id="18">$ \Pi({p}^{(w)}-{z}^{(w)}) &gt; 0 $</formula> is equivalent to <computeroutput>p</computeroutput> lies outside the sphere with center <computeroutput>z</computeroutput> and radius <formula id="19">$ \sqrt{w_p^2+w_z^2}$</formula>.</para><para>This remark helps provide an intuition about the following predicates.</para><para><anchor id="classCGAL_1_1Regular__triangulation__3_1Triangulation3figsidedim2"/><image type="html" name="sidedim2.svg">side_of_power_circle</image>
 <image type="latex" name="sidedim2.png">side_of_power_circle</image>
 </para></description>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__3_1a463fb64b21b8a0d762d48eb6ca9d0300" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1gaf6030e89dadcc1f45369b0cdc5d9e111" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Bounded_side</ref></type>
        <definition>Bounded_side CGAL::Regular_triangulation_3&lt; Traits, TDS, SLDS &gt;::side_of_power_sphere</definition>
        <argsstring>(Cell_handle c, const Weighted_point &amp;p) const</argsstring>
        <name>side_of_power_sphere</name>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Regular__triangulation__3_1a692e373287e44bab1b63f69ac44f59ee" kindref="member">Weighted_point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns the position of the weighted point <formula id="4">$ p$</formula> with respect to the power sphere of <computeroutput>c</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>More precisely, it returns:</para><para><itemizedlist>
<listitem><para><computeroutput>ON_BOUNDED_SIDE</computeroutput> if <formula id="20">$ \Pi({p}^{(w)}-{z(c)}^{(w)})&lt;0$</formula> where <formula id="21">$ {z(c)}^{(w)}$</formula> is the power sphere of <computeroutput>c</computeroutput>. For an infinite cell this means either that <computeroutput>p</computeroutput> lies strictly in the half space limited by its finite facet and not containing any other point of the triangulation, or that the angle between <computeroutput>p</computeroutput> and the power circle of the <emphasis>finite</emphasis> facet of <computeroutput>c</computeroutput> is greater than <formula id="22">$ \pi/2$</formula>.</para></listitem><listitem><para><computeroutput>ON_BOUNDARY</computeroutput> if p is orthogonal to the power sphere of <computeroutput>c</computeroutput> i.e. <formula id="23">$ \Pi({p}^{(w)}-{z(c)}^{(w)})=0$</formula>. For an infinite cell this means that <computeroutput>p</computeroutput> is orthogonal to the power circle of its <emphasis>finite</emphasis> facet.</para></listitem><listitem><para><computeroutput>ON_UNBOUNDED_SIDE</computeroutput> if <formula id="24">$ \Pi({p}^{(w)}-{z(c)}^{(w)})&gt;0$</formula> i.e. the angle between the weighted point <computeroutput>p</computeroutput> and the power sphere of <computeroutput>c</computeroutput> is less than <formula id="22">$ \pi/2$</formula> or if these two spheres do not intersect. For an infinite cell this means that <computeroutput>p</computeroutput> does not satisfy either of the two previous conditions. <simplesect kind="pre"><para><computeroutput>rt</computeroutput>.<computeroutput><ref refid="classCGAL_1_1Triangulation__3_1a80ba1634c96f534d18d2d2420f65561f" kindref="member">dimension()</ref></computeroutput> <formula id="2">$ =3$</formula>. </para></simplesect>
</para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_3.h" line="326" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__3_1ade070c7904bfd8a06211fbc082a9477d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1gaf6030e89dadcc1f45369b0cdc5d9e111" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Bounded_side</ref></type>
        <definition>Bounded_side CGAL::Regular_triangulation_3&lt; Traits, TDS, SLDS &gt;::side_of_power_circle</definition>
        <argsstring>(const Facet &amp;f, const Weighted_point &amp;p) const</argsstring>
        <name>side_of_power_circle</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1aa100228164b0cf78d5c2b1009c2df258" kindref="member">Facet</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Regular__triangulation__3_1a692e373287e44bab1b63f69ac44f59ee" kindref="member">Weighted_point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns the position of the point <computeroutput>p</computeroutput> with respect to the power circle of <computeroutput>f</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>More precisely, it returns:</para><para><itemizedlist>
<listitem><para>in dimension 3:</para></listitem><listitem><para>For a finite facet,</para></listitem></itemizedlist>
</para><para><computeroutput>ON_BOUNDARY</computeroutput> if <computeroutput>p</computeroutput> is orthogonal to the power circle in the plane of the facet,</para><para><computeroutput>ON_UNBOUNDED_SIDE</computeroutput> when their angle is less than <formula id="22">$ \pi/2$</formula>,</para><para><computeroutput>ON_BOUNDED_SIDE</computeroutput> when it is greater than <formula id="22">$ \pi/2$</formula> (see Figure <ref refid="classCGAL_1_1Regular__triangulation__3_1Triangulation3figsidedim2" kindref="member">Triangulation3figsidedim2</ref>).</para><para><itemizedlist>
<listitem><para>For an infinite facet, it considers the plane defined by the finite facet of the cell <computeroutput>f.first</computeroutput>, and does the same as in dimension 2 in this plane.</para></listitem><listitem><para>in dimension 2:</para></listitem><listitem><para>For a finite facet,</para></listitem></itemizedlist>
</para><para><computeroutput>ON_BOUNDARY</computeroutput> if <computeroutput>p</computeroutput> is orthogonal to the circle,</para><para><computeroutput>ON_UNBOUNDED_SIDE</computeroutput> when the angle between <computeroutput>p</computeroutput> and the power circle of <computeroutput>f</computeroutput> is less than <formula id="22">$ \pi/2$</formula>, <computeroutput>ON_BOUNDED_SIDE</computeroutput> when it is greater than <formula id="22">$ \pi/2$</formula>.</para><para><itemizedlist>
<listitem><para>For an infinite facet,</para></listitem></itemizedlist>
</para><para><computeroutput>ON_BOUNDED_SIDE</computeroutput> for a point in the open half plane defined by <computeroutput>f</computeroutput> and not containing any other point of the triangulation,</para><para><computeroutput>ON_UNBOUNDED_SIDE</computeroutput> in the other open half plane.</para><para>If the point <computeroutput>p</computeroutput> is collinear with the finite edge <computeroutput>e</computeroutput> of <computeroutput>f</computeroutput>, it returns:</para><para><computeroutput>ON_BOUNDED_SIDE</computeroutput> if <formula id="25">$ \Pi({p}^{(w)}-{z(e)}^{(w)})&lt;0$</formula>, where <formula id="26">$ {z(e)}^{(w)}$</formula> is the power segment of <computeroutput>e</computeroutput> in the line supporting <computeroutput>e</computeroutput>,</para><para><computeroutput>ON_BOUNDARY</computeroutput> if <formula id="27">$ \Pi({p}^{(w)}-{z(e)}^{(w)})=0$</formula>,</para><para><computeroutput>ON_UNBOUNDED_SIDE</computeroutput> if <formula id="28">$ \Pi({p}^{(w)}-{z(e)}^{(w)})&gt;0$</formula> . <simplesect kind="pre"><para><computeroutput>rt</computeroutput>.<computeroutput><ref refid="classCGAL_1_1Triangulation__3_1a80ba1634c96f534d18d2d2420f65561f" kindref="member">dimension()</ref></computeroutput> <formula id="3">$ \geq2$</formula>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_3.h" line="378" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__3_1a3f0722c65c1b18b6e4cef6fe82d954d6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1gaf6030e89dadcc1f45369b0cdc5d9e111" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Bounded_side</ref></type>
        <definition>Bounded_side CGAL::Regular_triangulation_3&lt; Traits, TDS, SLDS &gt;::side_of_power_circle</definition>
        <argsstring>(Cell_handle c, int i, const Weighted_point &amp;p) const</argsstring>
        <name>side_of_power_circle</name>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Regular__triangulation__3_1a692e373287e44bab1b63f69ac44f59ee" kindref="member">Weighted_point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Same as the previous method for facet <computeroutput>i</computeroutput> of cell <computeroutput>c</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_3.h" line="385" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__3_1af45da5a569fb5308ff139480d96e875f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1gaf6030e89dadcc1f45369b0cdc5d9e111" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Bounded_side</ref></type>
        <definition>Bounded_side CGAL::Regular_triangulation_3&lt; Traits, TDS, SLDS &gt;::side_of_power_segment</definition>
        <argsstring>(Cell_handle c, const Weighted_point &amp;p) const</argsstring>
        <name>side_of_power_segment</name>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Regular__triangulation__3_1a692e373287e44bab1b63f69ac44f59ee" kindref="member">Weighted_point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>In dimension 1, returns. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>ON_BOUNDED_SIDE</computeroutput> if <formula id="20">$ \Pi({p}^{(w)}-{z(c)}^{(w)})&lt;0$</formula>, where <formula id="21">$ {z(c)}^{(w)}$</formula> is the power segment of the edge represented by <computeroutput>c</computeroutput>,</para><para><computeroutput>ON_BOUNDARY</computeroutput> if <formula id="23">$ \Pi({p}^{(w)}-{z(c)}^{(w)})=0$</formula>,</para><para><computeroutput>ON_UNBOUNDED_SIDE</computeroutput> if <formula id="24">$ \Pi({p}^{(w)}-{z(c)}^{(w)})&gt;0$</formula> . <simplesect kind="pre"><para><computeroutput>rt</computeroutput>.<computeroutput><ref refid="classCGAL_1_1Triangulation__3_1a80ba1634c96f534d18d2d2420f65561f" kindref="member">dimension()</ref></computeroutput> <formula id="29">$ = 1$</formula>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_3.h" line="401" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__3_1a1a266ada84a73c87e6b67cac76e840d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Regular_triangulation_3&lt; Traits, TDS, SLDS &gt;::nearest_power_vertex</definition>
        <argsstring>(const Bare_point &amp;p, Cell_handle c=Cell_handle())</argsstring>
        <name>nearest_power_vertex</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Regular__triangulation__3_1af8044e9eb2ce15c7a6d602026d662532" kindref="member">Bare_point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
          <defval><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref>()</defval>
        </param>
        <briefdescription>
<para>Returns the vertex of the triangulation which is nearest to <formula id="4">$ p$</formula> with respect to the power distance. </para>        </briefdescription>
        <detaileddescription>
<para>This means that the power of the query point <computeroutput>p</computeroutput> with respect to the weighted point in the returned vertex is smaller than the power of <computeroutput>p</computeroutput> with respect to the weighted point for any other vertex. Ties are broken arbitrarily. The default constructed handle is returned if the triangulation is empty. The optional argument <computeroutput>c</computeroutput> is a hint specifying where to start the search. <simplesect kind="pre"><para><computeroutput>c</computeroutput> is a cell of <computeroutput>rt</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_3.h" line="418" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__3_1aa4ccab9d0f529486aa34a09ec667e1c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Regular_triangulation_3&lt; Traits, TDS, SLDS &gt;::nearest_power_vertex_in_cell</definition>
        <argsstring>(const Bare_point &amp;p, Cell_handle c)</argsstring>
        <name>nearest_power_vertex_in_cell</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Regular__triangulation__3_1af8044e9eb2ce15c7a6d602026d662532" kindref="member">Bare_point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Returns the vertex of the cell <computeroutput>c</computeroutput> that is nearest to <formula id="4">$ p$</formula> with respect to the power distance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_3.h" line="427" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <description><para>A weighted point <computeroutput>p</computeroutput> is said to be in conflict with a cell <computeroutput>c</computeroutput> in dimension 3 (resp. with a facet <computeroutput>f</computeroutput> in dimension 2) if it has a negative power distance to the power sphere of <computeroutput>c</computeroutput> (resp. to the power circle of <computeroutput>f</computeroutput>). The set of cells (resp. facets in dimension 2) which are in conflict with <computeroutput>p</computeroutput> is connected. </para></description>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__3_1ab039831ea2f961ba9de1cb35ed03f44d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OutputIteratorBoundaryFacets</type>
          </param>
          <param>
            <type>class OutputIteratorCells</type>
          </param>
          <param>
            <type>class OutputIteratorInternalFacets</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Triple" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Triple</ref>&lt; OutputIteratorBoundaryFacets, OutputIteratorCells, OutputIteratorInternalFacets &gt;</type>
        <definition>Triple&lt;OutputIteratorBoundaryFacets, OutputIteratorCells, OutputIteratorInternalFacets&gt; CGAL::Regular_triangulation_3&lt; Traits, TDS, SLDS &gt;::find_conflicts</definition>
        <argsstring>(const Weighted_point p, Cell_handle c, OutputIteratorBoundaryFacets bfit, OutputIteratorCells cit, OutputIteratorInternalFacets ifit, bool *could_lock_zone=NULL, const Facet *this_facet_must_be_in_the_cz=NULL, bool *the_facet_is_in_its_cz=NULL)</argsstring>
        <name>find_conflicts</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Regular__triangulation__3_1a692e373287e44bab1b63f69ac44f59ee" kindref="member">Weighted_point</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>OutputIteratorBoundaryFacets</type>
          <declname>bfit</declname>
        </param>
        <param>
          <type>OutputIteratorCells</type>
          <declname>cit</declname>
        </param>
        <param>
          <type>OutputIteratorInternalFacets</type>
          <declname>ifit</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>could_lock_zone</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1aa100228164b0cf78d5c2b1009c2df258" kindref="member">Facet</ref> *</type>
          <declname>this_facet_must_be_in_the_cz</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>bool *</type>
          <declname>the_facet_is_in_its_cz</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Compute the conflicts with <computeroutput>p</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The query point. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The starting cell. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cit</parametername>
</parameternamelist>
<parameterdescription>
<para>The cells (resp. facets) in conflict with <computeroutput>p</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bfit</parametername>
</parameternamelist>
<parameterdescription>
<para>The facets (resp. edges) on the boundary of the conflict zone, that is, the facets (resp. edges) <computeroutput>(t, i)</computeroutput> where the cell (resp.. facet) <computeroutput>t</computeroutput> is in conflict, but <computeroutput>t-&gt;neighbor(i)</computeroutput> is not. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ifit</parametername>
</parameternamelist>
<parameterdescription>
<para>The facets (resp. edges) inside the conflict zone, that facets incident to two cells (resp. facets) in conflict. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>could_lock_zone</parametername>
</parameternamelist>
<parameterdescription>
<para>The optional argument <computeroutput>could_lock_zone</computeroutput> is used by the concurrency-safe version of the triangulation. If the pointer is not null, the algorithm will try to lock all the cells of the conflict zone, i.e. all the vertices that are inside or on the boundary of the conflict zone (as a result, the boundary cells become partially locked). If it succeeds, <computeroutput>*could_lock_zone</computeroutput> is true, otherwise it is false (and the returned conflict zone is only partial). In any case, the locked cells are not unlocked by the function, leaving this choice to the user. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>this_facet_must_be_in_the_cz</parametername>
</parameternamelist>
<parameterdescription>
<para>If the optional argument <computeroutput>this_facet_must_be_in_the_cz</computeroutput> is not null, the algorithm will check if this facet is in the conflict zone (it may be internal as well as boundary). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>the_facet_is_in_its_cz</parametername>
</parameternamelist>
<parameterdescription>
<para>This argument must be not null if the previous <computeroutput>this_facet_must_be_in_the_cz</computeroutput> argument is not null. The boolean value pointed by this pointer is set to true if *<computeroutput>this_facet_must_be_in_the_cz</computeroutput> is among the internal or boundary facets of the conflict zone, and false otherwise.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>The starting cell (resp. facet) <computeroutput>c</computeroutput> must be in conflict with <computeroutput>p</computeroutput>. </para></simplesect>
<simplesect kind="pre"><para><computeroutput>rt</computeroutput>.<computeroutput><ref refid="classCGAL_1_1Triangulation__3_1a80ba1634c96f534d18d2d2420f65561f" kindref="member">dimension()</ref></computeroutput> <formula id="3">$ \geq2$</formula>, and <computeroutput>c</computeroutput> is in conflict with <computeroutput>p</computeroutput>.</para></simplesect>
<simplesect kind="return"><para>the <computeroutput><ref refid="classCGAL_1_1Triple" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Triple</ref></computeroutput> composed of the resulting output iterators. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_3.h" line="476" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__3_1af97fd391edf9462d1f0898a66fbf509c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::Regular_triangulation_3&lt; Traits, TDS, SLDS &gt;::vertices_in_conflict</definition>
        <argsstring>(const Weighted_point &amp;p, Cell_handle c, OutputIterator res)</argsstring>
        <name>vertices_in_conflict</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Regular__triangulation__3_1a692e373287e44bab1b63f69ac44f59ee" kindref="member">Weighted_point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000002"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function is renamed <computeroutput>vertices_on_conflict_zone_boundary</computeroutput> since CGAL-3.8.</para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_3.h" line="489" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__3_1a1a497ef5547f04a43ed51fd0c9c5c200" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::Regular_triangulation_3&lt; Traits, TDS, SLDS &gt;::vertices_on_conflict_zone_boundary</definition>
        <argsstring>(const Weighted_point &amp;p, Cell_handle c, OutputIterator res)</argsstring>
        <name>vertices_on_conflict_zone_boundary</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Regular__triangulation__3_1a692e373287e44bab1b63f69ac44f59ee" kindref="member">Weighted_point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>Similar to <computeroutput><ref refid="classCGAL_1_1Regular__triangulation__3_1ab039831ea2f961ba9de1cb35ed03f44d" kindref="member">find_conflicts()</ref></computeroutput>, but reports the vertices which are on the boundary of the conflict zone of <computeroutput>p</computeroutput>, in the output iterator <computeroutput>res</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the resulting output iterator. <simplesect kind="pre"><para><computeroutput>rt</computeroutput>.<computeroutput><ref refid="classCGAL_1_1Triangulation__3_1a80ba1634c96f534d18d2d2420f65561f" kindref="member">dimension()</ref></computeroutput> <formula id="3">$ \geq2$</formula>, and <computeroutput>c</computeroutput> is a cell containing <computeroutput>p</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_3.h" line="500" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__3_1ab1f4f7020f4b7140f1974e73628637ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::Regular_triangulation_3&lt; Traits, TDS, SLDS &gt;::vertices_inside_conflict_zone</definition>
        <argsstring>(const Weighted_point &amp;p, Cell_handle c, OutputIterator res)</argsstring>
        <name>vertices_inside_conflict_zone</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Regular__triangulation__3_1a692e373287e44bab1b63f69ac44f59ee" kindref="member">Weighted_point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>Similar to <computeroutput><ref refid="classCGAL_1_1Regular__triangulation__3_1ab039831ea2f961ba9de1cb35ed03f44d" kindref="member">find_conflicts()</ref></computeroutput>, but reports the vertices which are in the interior of the conflict zone of <computeroutput>p</computeroutput>, in the output iterator <computeroutput>res</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The vertices that are on the boundary of the conflict zone are not reported. Returns the resulting output iterator. <simplesect kind="pre"><para><computeroutput>rt</computeroutput>.<computeroutput><ref refid="classCGAL_1_1Triangulation__3_1a80ba1634c96f534d18d2d2420f65561f" kindref="member">dimension()</ref></computeroutput> <formula id="3">$ \geq2$</formula>, and <computeroutput>c</computeroutput> is a cell containing <computeroutput>p</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_3.h" line="513" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <description><para>In the weighted setting, a face (cell, facet, edge or vertex) is said to be a Gabriel face iff the smallest sphere orthogonal to the weighted points associated to its vertices, has a positive power product with the weighted point of any other vertex of the triangulation.</para><para>Any weighted Gabriel face belongs to the regular triangulation, but the reciprocal is not true. The following member functions test the Gabriel property of the faces of the regular triangulation. </para></description>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__3_1a38664a80cbecc32514ca1b20de266e80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Regular_triangulation_3&lt; Traits, TDS, SLDS &gt;::is_Gabriel</definition>
        <argsstring>(Cell_handle c, int i)</argsstring>
        <name>is_Gabriel</name>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_3.h" line="527" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__3_1a2dd935551f72f67ec9d5a5e535421d87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Regular_triangulation_3&lt; Traits, TDS, SLDS &gt;::is_Gabriel</definition>
        <argsstring>(Cell_handle c, int i, int j)</argsstring>
        <name>is_Gabriel</name>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_3.h" line="532" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__3_1a711553ee4abb6489d2db82313298a82f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Regular_triangulation_3&lt; Traits, TDS, SLDS &gt;::is_Gabriel</definition>
        <argsstring>(const Facet &amp;f)</argsstring>
        <name>is_Gabriel</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1aa100228164b0cf78d5c2b1009c2df258" kindref="member">Facet</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_3.h" line="537" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__3_1ac9232cddc0febfcb6165577d3980d605" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Regular_triangulation_3&lt; Traits, TDS, SLDS &gt;::is_Gabriel</definition>
        <argsstring>(const Edge &amp;e)</argsstring>
        <name>is_Gabriel</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1a0f355dbb38cf631f24d4df8abd7a942f" kindref="member">Edge</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_3.h" line="542" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__3_1a706edfe0ba0ce7a8eed8ebbf976f5d9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Regular_triangulation_3&lt; Traits, TDS, SLDS &gt;::is_Gabriel</definition>
        <argsstring>(Vertex_handle v)</argsstring>
        <name>is_Gabriel</name>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_3.h" line="547" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Power Diagram</header>
      <description><para>CGAL offers several functionalities to display the power diagram of a set of points in 3D.</para><para>Note that the user should use a kernel with exact constructions in order to guarantee the computation of the Voronoi diagram (as opposed to computing the triangulation only, which requires only exact predicates). </para></description>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__3_1aabd5c7e6163257364e30f2b148a7a8a9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Regular__triangulation__3_1af8044e9eb2ce15c7a6d602026d662532" kindref="member">Bare_point</ref></type>
        <definition>Bare_point CGAL::Regular_triangulation_3&lt; Traits, TDS, SLDS &gt;::dual</definition>
        <argsstring>(Cell_handle c) const</argsstring>
        <name>dual</name>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Returns the weighted circumcenter of the four vertices of c. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>rt</computeroutput>.<computeroutput><ref refid="classCGAL_1_1Triangulation__3_1a80ba1634c96f534d18d2d2420f65561f" kindref="member">dimension()</ref></computeroutput> <formula id="2">$ =3$</formula> and <computeroutput>c</computeroutput> is not infinite. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_3.h" line="560" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__3_1ae5a66fca163b8792e2698798531a1133" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Object" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Object</ref></type>
        <definition>Object CGAL::Regular_triangulation_3&lt; Traits, TDS, SLDS &gt;::dual</definition>
        <argsstring>(Facet f) const</argsstring>
        <name>dual</name>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1aa100228164b0cf78d5c2b1009c2df258" kindref="member">Facet</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Returns the dual of facet <computeroutput>f</computeroutput>, which is. </para>        </briefdescription>
        <detaileddescription>
<para>in dimension 3: either a segment, if the two cells incident to <computeroutput>f</computeroutput> are finite, or a ray, if one of them is infinite;</para><para>in dimension 2: a point. <simplesect kind="pre"><para><computeroutput>rt</computeroutput>.<computeroutput><ref refid="classCGAL_1_1Triangulation__3_1a80ba1634c96f534d18d2d2420f65561f" kindref="member">dimension()</ref></computeroutput> <formula id="3">$ \geq2$</formula> and <computeroutput>f</computeroutput> is not infinite. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_3.h" line="571" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__3_1a6a4efc996c672fd04b6883a93cb8fe81" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Object" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Object</ref></type>
        <definition>Object CGAL::Regular_triangulation_3&lt; Traits, TDS, SLDS &gt;::dual</definition>
        <argsstring>(Cell_handle c, int i) const</argsstring>
        <name>dual</name>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>same as the previous method for facet <computeroutput>(c,i)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_3.h" line="576" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__3_1ab890e4e94fa298d1bc2aac07586ebde1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Stream</type>
          </param>
        </templateparamlist>
        <type>Stream &amp;</type>
        <definition>Stream&amp; CGAL::Regular_triangulation_3&lt; Traits, TDS, SLDS &gt;::draw_dual</definition>
        <argsstring>(Stream &amp;os)</argsstring>
        <name>draw_dual</name>
        <param>
          <type>Stream &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
<para>Sends the set of duals to all the facets of <computeroutput>rt</computeroutput> into <computeroutput>os</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_3.h" line="581" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Checking</header>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__3_1af7311a51a93ce692d7c8f8f0ffd08a19" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Regular_triangulation_3&lt; Traits, TDS, SLDS &gt;::is_valid</definition>
        <argsstring>(bool verbose=false) const</argsstring>
        <name>is_valid</name>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>This is a function for debugging purpose. </para>        </briefdescription>
        <detaileddescription>
<para></para><para>Checks the combinatorial validity of the triangulation and the validity of its geometric embedding (see Section <ref refid="index_1Triangulation3secintro" kindref="member">Representation</ref>). Also checks that all the power spheres (resp. power circles in dimension 2, power segments in dimension 1) of cells (resp. facets in dimension 2, edges in dimension 1) are regular. When <computeroutput>verbose</computeroutput> is set to true, messages describing the first invalidity encountered are printed. This method is mainly a debugging help for the users of advanced features.  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_3.h" line="604" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Let <formula id="5">$ {S}^{(w)}$</formula> be a set of weighted points in <formula id="6">$ \mathbb{R}^3$</formula>. </para>    </briefdescription>
    <detaileddescription>
<para>Let <formula id="7">$ {p}^{(w)}=(p,w_p), p\in\mathbb{R}^3, w_p\in\mathbb{R}$</formula> and <formula id="8">$ {z}^{(w)}=(z,w_z), z\in\mathbb{R}^3, w_z\in\mathbb{R}$</formula> be two weighted points. A weighted point <formula id="9">$ {p}^{(w)}=(p,w_p)$</formula> can also be seen as a sphere of center <formula id="4">$ p$</formula> and radius <formula id="10">$ \sqrt{w_p}$</formula>. The <emphasis>power product</emphasis> (or <emphasis>power distance</emphasis> ) between <formula id="11">$ {p}^{(w)}$</formula> and <formula id="12">$ {z}^{(w)}$</formula> is defined as <formula id="13">\[ \Pi({p}^{(w)},{z}^{(w)}) = {\|{p-z}\|^2-w_p-w_z} \]</formula> where <formula id="14">$ \|{p-z}\|$</formula> is the Euclidean distance between <formula id="4">$ p$</formula> and <formula id="15">$ z$</formula>. <formula id="11">$ {p}^{(w)}$</formula> and <formula id="12">$ {z}^{(w)}$</formula> are said to be <emphasis>orthogonal</emphasis> if <formula id="16">$ \Pi{({p}^{(w)}-{z}^{(w)})} = 0$</formula> (see <ref refid="index_1fig__Triangulation3figortho" kindref="member">fig__Triangulation3figortho</ref>).</para><para>Four weighted points have a unique common orthogonal weighted point called the <emphasis>power sphere</emphasis>. A sphere <formula id="12">$ {z}^{(w)}$</formula> is said to be <emphasis>regular</emphasis> if <formula id="17">$ \forall {p}^{(w)}\in{S}^{(w)}, \Pi{({p}^{(w)}-{z}^{(w)})}\geq 0$</formula>.</para><para>A triangulation of <formula id="5">$ {S}^{(w)}$</formula> is <emphasis>regular</emphasis> if the power spheres of all simplices are regular.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Traits</parametername>
</parameternamelist>
<parameterdescription>
<para>is the geometric traits class, and must be a model of <computeroutput><ref refid="classRegularTriangulationTraits__3" kindref="compound">RegularTriangulationTraits_3</ref></computeroutput></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TDS</parametername>
</parameternamelist>
<parameterdescription>
<para>is the triangulation data structure and must be a model of <computeroutput><ref refid="classTriangulationDataStructure__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/TDS_3.tag">TriangulationDataStructure_3</ref></computeroutput>. <computeroutput><ref refid="structCGAL_1_1Default" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Default</ref></computeroutput> may be used with default value <computeroutput><ref refid="classCGAL_1_1Triangulation__data__structure__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/TDS_3.tag">Triangulation_data_structure_3</ref>&lt;<ref refid="classCGAL_1_1Regular__triangulation__vertex__base__3" kindref="compound">Regular_triangulation_vertex_base_3</ref>&lt;Traits&gt;, <ref refid="classCGAL_1_1Regular__triangulation__cell__base__3" kindref="compound">Regular_triangulation_cell_base_3</ref>&lt;Traits&gt; &gt;</computeroutput>. Any custom type can be used instead of <computeroutput><ref refid="classCGAL_1_1Regular__triangulation__vertex__base__3" kindref="compound">Regular_triangulation_vertex_base_3</ref></computeroutput> and <computeroutput><ref refid="classCGAL_1_1Regular__triangulation__cell__base__3" kindref="compound">Regular_triangulation_cell_base_3</ref></computeroutput>, provided that they are models of the concepts <computeroutput><ref refid="classRegularTriangulationVertexBase__3" kindref="compound">RegularTriangulationVertexBase_3</ref></computeroutput> and <computeroutput><ref refid="classRegularTriangulationCellBase__3" kindref="compound">RegularTriangulationCellBase_3</ref></computeroutput>, respectively.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SLDS</parametername>
</parameternamelist>
<parameterdescription>
<para>is an optional parameter to specify the type of the spatial lock data structure. It must be a model of the <computeroutput><ref refid="classSurjectiveLockDataStructure" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">SurjectiveLockDataStructure</ref></computeroutput> concept, with <computeroutput><ref refid="classCGAL_1_1Object" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Object</ref></computeroutput> being a <computeroutput>Point</computeroutput>. It is only used if the triangulation data structure used is concurrency-safe (i.e. when <computeroutput>TDS::Concurrency_tag</computeroutput> is <computeroutput><ref refid="structCGAL_1_1Parallel__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Parallel_tag</ref></computeroutput>). The default value is <computeroutput><ref refid="classCGAL_1_1Spatial__lock__grid__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Spatial_lock_grid_3</ref>&lt;Tag_priority_blocking&gt;</computeroutput> if the triangulation data structure is concurrency-safe, and <computeroutput>void</computeroutput> otherwise. In order to use concurrent operations, the user must provide a reference to a <computeroutput>SLDS</computeroutput> instance via the constructor or <computeroutput><ref refid="classCGAL_1_1Triangulation__3_1afba384e440c57f3bb0a71e4b4f7f9944" kindref="member">Triangulation_3::set_lock_data_structure</ref></computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
If <computeroutput>TDS::Concurrency_tag</computeroutput> is <computeroutput><ref refid="structCGAL_1_1Parallel__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Parallel_tag</ref></computeroutput>, some operations, such as insertion/removal of a range of points, are performed in parallel. See the documentation of the operations for more details.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Triangulation__3" kindref="compound">CGAL::Triangulation_3</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Delaunay__triangulation__3" kindref="compound">CGAL::Delaunay_triangulation_3</ref></computeroutput> </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="17">
        <label>CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;</label>
        <link refid="classCGAL_1_1Triangulation__3"/>
        <childnode refid="18" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>CGAL::Regular_triangulation_3&lt; Traits, TDS, SLDS &gt;</label>
        <link refid="classCGAL_1_1Regular__triangulation__3"/>
        <childnode refid="17" relation="public-inheritance">
        </childnode>
      </node>
      <node id="18">
        <label>CGAL::Triangulation_utils_3</label>
        <link refid="structCGAL_1_1Triangulation__utils__3" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/TDS_3.tag"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="20">
        <label>CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;</label>
        <link refid="classCGAL_1_1Triangulation__3"/>
        <childnode refid="21" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19">
        <label>CGAL::Regular_triangulation_3&lt; Traits, TDS, SLDS &gt;</label>
        <link refid="classCGAL_1_1Regular__triangulation__3"/>
        <childnode refid="20" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21">
        <label>CGAL::Triangulation_utils_3</label>
        <link refid="structCGAL_1_1Triangulation__utils__3" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/TDS_3.tag"/>
      </node>
    </collaborationgraph>
    <location file="CGAL/Regular_triangulation_3.h" line="60" column="1" bodyfile="CGAL/Regular_triangulation_3.h" bodystart="59" bodyend="608"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Triangulation__3_1aa9814b11ee0a6e024fd3cee4cff066c3" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>adjacent_vertices</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ad20bfae1b250b357d8ae5bc48eef1f10" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>all_cells_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1aacfd26fa0d3b2a8b2d8008af3b08930a" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>all_cells_end</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1aff2c019af34403770e6e922d616eaf0f" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>All_cells_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1af284c5406d004ea3316ed61f5a825887" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>all_edges_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a2d4389833767a0ac0a469c6d3f1c2604" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>all_edges_end</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a67ff0ee4eca14392f1fcb55acd5a6edc" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>All_edges_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1af412b76826082617ad5cd7a6428561b0" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>all_facets_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a2cf3371698886ce3d219ba98c0a2452b" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>all_facets_end</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a086ed61d6d43a10f77f6a4d695a256fc" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>All_facets_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1aba04013896bdd4ea1398320869e2d886" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>all_vertices_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a8f2932dc2d9c018421d195757d9c5ffa" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>all_vertices_end</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ab930d6f34c8346b5191e93ab79475c70" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>All_vertices_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a04ae7357b56d2bc5bd18c657e5577f79" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>are_equal</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a0460db28850be85188a8dec7c2425c3d" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>are_equal</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a9f0c69f352b9e7fd325980807778b031" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>are_equal</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__3_1af8044e9eb2ce15c7a6d602026d662532" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>Bare_point</name></member>
      <member refid="structCGAL_1_1Triangulation__utils__3_1a3e483dd7b1e45dd3bcce3dbc7f94bd70" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>ccw</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a6ccf0bf0c3ca54b4a2e8f2f1b09a103f" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>Cell</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a5bea7d3470854571f97c18a675daca75aa264f5df83d639caa57ea1def2f16f36" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>CELL</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a064fb43553690504ee55c4b9a74188e5" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>Cell_circulator</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>Cell_handle</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a0713863e5ff5ceb0a0eb290c4f6767c8" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>clear</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a029910b5cfe5d470afdd8f79ea49e24e" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>Concurrency_tag</name></member>
      <member refid="structCGAL_1_1Triangulation__utils__3_1a39b8813b2f15dcb4446ff42b5c100529" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>cw</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a158716f1ea0f94c5f837a5ae244e2fe3" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>degree</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a4f5b67204a2a310e48525abd3cdd3660" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>difference_type</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a80ba1634c96f534d18d2d2420f65561f" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>dimension</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__3_1ab890e4e94fa298d1bc2aac07586ebde1" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>draw_dual</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__3_1aabd5c7e6163257364e30f2b148a7a8a9" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>dual</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__3_1ae5a66fca163b8792e2698798531a1133" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>dual</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__3_1a6a4efc996c672fd04b6883a93cb8fe81" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>dual</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a5bea7d3470854571f97c18a675daca75a708387eea38c6e1ffbd7ef5ef695f2e1" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>EDGE</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a0f355dbb38cf631f24d4df8abd7a942f" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>Edge</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a5bea7d3470854571f97c18a675daca75acb284e3051bc02bd4645aca6b2382b42" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>FACET</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1aa100228164b0cf78d5c2b1009c2df258" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>Facet</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a1c904fc6cbfe189b2cb09f7175044b00" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>Facet_circulator</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__3_1ab039831ea2f961ba9de1cb35ed03f44d" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>find_conflicts</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1af779084dce02eb4abba8bd1916891214" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>finite_adjacent_vertices</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a433fa868d7637f2719a40c251bd2ae65" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>finite_cells_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a3431b35584d93e305c1548228cf93110" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>finite_cells_end</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a6d1b83cb6fba001622452aa0f6592e02" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>Finite_cells_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1af682021f6f9be1437fe29be125ad14e8" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>finite_edges_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a5455f4b903db664c1d57634ec15cd13a" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>finite_edges_end</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a1c91aeb6128d5bf33995dca02398d330" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>Finite_edges_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1adcb08049b8d50168079bbba248f3344d" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>finite_facets_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1aee05b9fc603428dfda9712b6c069e4e5" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>finite_facets_end</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a6bc54bfb8362670059a4c1a416269994" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>Finite_facets_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1af3ca792eed2f27ccb932d5f67ce4c6b9" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>finite_incident_cells</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ab5b49dae39468e544c183142169208f1" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>finite_incident_edges</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a1a08f1fcb24e5cd713d862e339ff3f4d" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>finite_incident_facets</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1af43b5f09e0fdcb9b8fff939133f2e814" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>finite_vertices_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a6bff5471a8bd32d16c396948fdbc3495" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>finite_vertices_end</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1af8d044953011cb5ff6a5ecf87e6f308e" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>Finite_vertices_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a883fed00b53cae9e85feb20230f54dd9" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>flip</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a5dfdcfc38bf0bf30860d26d0fef7fdc7" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>flip</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a659e70e1b740a44b7d6b9886d323f571" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>flip</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a8050a0e63dcf0fed2e205ce69b0fa2fe" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>flip</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a54b04cf190a4643d43dd67cd808b7fad" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>flip_flippable</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ac31682068c1ff25dc5ccd6f366fd1156" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>flip_flippable</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a2547de40ced9bfa49e16ff4ba2e1c52f" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>flip_flippable</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a1d8720ff50a61985bcbe474268d9d275" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>flip_flippable</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ab250045d0412b06d83977a0c2cf33ff9" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>Geom_traits</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a5fda3a9a54f244f864d0f711f6ba90d6" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>geom_traits</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a89a5c93d1e8a43cef317ef289f1d5482" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>has_vertex</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1abf51c96f47c1e295fb984ad521634229" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>has_vertex</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a21e33ef0b19042320b461a0a7a0f4e36" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>has_vertex</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a9d997837c2cb5ecca65658ccf6dc3010" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>has_vertex</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a0741a861a6291131384529349cb994a4" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>incident_cells</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a49921c82183b7bfdb5fac1de73c8d941" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>incident_cells</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a85d53f656ef4d67ccbf6eaed424e0a35" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>incident_cells</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1afd3ed4f0381fdeefb8a9439caa435b2f" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>incident_cells</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ad9890c64030969cd74f35a007cb6b049" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>incident_cells</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a81373c29a596ba2f1d6d93e62d1f0d79" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>incident_edges</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a997be4328927428bce5aee9f775e5e55" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>incident_facets</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1abdf765a8077bfc18de39734fbe7ab012" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>incident_facets</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a1cbaaed93e5d67671302649501585a98" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>incident_facets</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a4cc635bb45ddcb7c1ab46f90592425d2" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>incident_facets</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a5d41217a20ef2851d44315b5166eaf76" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>incident_facets</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a5d490167eab1facd3ef982613eb5d242" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>incident_facets</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a2776f24c7e4cdefc0c511edebf1d3599" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>incident_facets</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1af33632f0d268cc25d0df2caa57f69609" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>inexact_locate</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a4ef94a8a137601e4cb1905dcdad16c6c" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>infinite_cell</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a0dde82d53bcd9f705f3a676329c1df2d" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>infinite_vertex</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__3_1a1f9d427d62b0bf666216471597210b86" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__3_1ad5c9a3f6ba52bac19f4158bfa5b18028" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__3_1ac62167a6dcfba79c9cd70169d7f30a7b" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__3_1a00b6db69dc74987ef4ba23baedcdde12" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__3_1a868abe8b492f4da67e3929db4ad3aceb" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ad8d7a1aa3b310ba8d86ede726746fcb3" prot="public" virt="non-virtual" ambiguityscope="CGAL::Triangulation_3::"><scope>CGAL::Regular_triangulation_3</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a579619f972362fa8cd35d1de72dd677c" prot="public" virt="non-virtual" ambiguityscope="CGAL::Triangulation_3::"><scope>CGAL::Regular_triangulation_3</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1af41ac521888fafda75100fcd36650aa4" prot="public" virt="non-virtual" ambiguityscope="CGAL::Triangulation_3::"><scope>CGAL::Regular_triangulation_3</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1aff8be2085c18e293f6d1a26c282acbc7" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>insert_in_cell</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a5c1349d7fcffeac6f98cfc8b8febf564" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>insert_in_edge</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a06ba9d64000edc9e5d595ae1c7595922" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>insert_in_edge</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a80f8771ed8bca545ca451afae14b77ed" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>insert_in_facet</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1aa43e9ac9d97a9a2fa18ae18e21bb25b3" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>insert_in_facet</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__3_1a8be9603586dbf6c4b28ddfff424fcddc" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>insert_in_hole</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__3_1aef5f37a0797e310ce1e938f8d24ded2e" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>insert_in_hole</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a4b298ac4b2d8585dec9e436bb9e65ff0" prot="public" virt="non-virtual" ambiguityscope="CGAL::Triangulation_3::"><scope>CGAL::Regular_triangulation_3</scope><name>insert_in_hole</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ad5f7bba4f49683befd2f70b35f2d7079" prot="public" virt="non-virtual" ambiguityscope="CGAL::Triangulation_3::"><scope>CGAL::Regular_triangulation_3</scope><name>insert_in_hole</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a6f3e038498843f6ce7c0c70015ddaff9" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>insert_outside_affine_hull</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a2798aa7502b4929ccaa8cab9bacbff18" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>insert_outside_convex_hull</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a0b9e348637a4c392f71fed0ef3ff2ad8" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>is_cell</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a24095561c8bd3390a58f7b7c9e45d4eb" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>is_cell</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a8766c9a0c2a84203be31537e5e015646" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>is_cell</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a55b3dd5c4161a2612bd8aa60d64fb4f1" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>is_edge</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1aef7c688eb2a28c0aec936c41df46a172" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>is_facet</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__3_1a38664a80cbecc32514ca1b20de266e80" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>is_Gabriel</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__3_1a2dd935551f72f67ec9d5a5e535421d87" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>is_Gabriel</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__3_1a711553ee4abb6489d2db82313298a82f" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>is_Gabriel</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__3_1ac9232cddc0febfcb6165577d3980d605" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>is_Gabriel</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__3_1a706edfe0ba0ce7a8eed8ebbf976f5d9c" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>is_Gabriel</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a0a5aa10a1bb88f33b3f07d33f89dd5cc" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a8bc2a0fa204265bf32f1e6dc103988b4" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ad66e030d66fdf1ee66e4c280e8894c71" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a0ece46e036b7dabfd34fd4662973e221" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ab84793de9c9899d8ecc33cdac411d324" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a6ca23f6bdd390ac23e7829e7f326efd5" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__3_1af7311a51a93ce692d7c8f8f0ffd08a19" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>is_valid</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a57226e0d36b9fb236a0d6711cda456d0" prot="public" virt="non-virtual" ambiguityscope="CGAL::Triangulation_3::"><scope>CGAL::Regular_triangulation_3</scope><name>is_valid</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a5b45572c663e5d2c10f26e7be421e140" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>is_vertex</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a1d1c9daa1c2031a66c9acc0a958bdb8e" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>is_vertex</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a280891e681597215a86d63399ae7464c" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>locate</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a1837cc26eead99cbcf973f516d871291" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>locate</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a69018849a5ff4d7c01d1ddb2d8c52d4f" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>locate</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a59f326e56c23e172643d3a7c3c07be21" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>locate</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a5bea7d3470854571f97c18a675daca75" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>Locate_type</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__3_1a89fb7d04b8a9880bd351f8db0c09c63b" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>Lock_data_structure</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ae443600f92d600b8e7d63a7fe2b5220c" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>mirror_facet</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a74cfefe0ac5dbe8e734461cda606a189" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>mirror_index</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a35ba5a05076bfeb5357ccdc182b12fee" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>mirror_vertex</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__3_1a1a266ada84a73c87e6b67cac76e840d6" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>nearest_power_vertex</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__3_1aa4ccab9d0f529486aa34a09ec667e1c6" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>nearest_power_vertex_in_cell</name></member>
      <member refid="structCGAL_1_1Triangulation__utils__3_1a54bf42467e28dcbea13bfd022ef49217" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>next_around_edge</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a2040b9c297817fb934d3d48908234d13" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>number_of_cells</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a05f820202e1348187eb69693b6ce3d44" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>number_of_edges</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a014b6d2caf1747a3bf2865adb158cbb7" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>number_of_facets</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a584b3359337efc7f687513b7ef958b94" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>number_of_finite_cells</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a37efcac10647c16b7ea331e30493cb24" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>number_of_finite_edges</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1af332a576da991acf508cbd4473249e0b" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>number_of_finite_facets</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a065228f3255a5d41d096fe782b61669f" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>number_of_vertices</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1afe3483443d5cc96aec2f0603095b95f5" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>operator!=</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a0c1a9ffba823502938c0c87ff91edbd4" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>operator&lt;&lt;</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ac33649b83bd5c708f5157286cc263c60" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>operator=</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a20b6e473c9ba697893aed432ba3d9754" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>operator==</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1abb84b5cde2cbb8c580790c10f3f0ddbb" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>operator&gt;&gt;</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a5bea7d3470854571f97c18a675daca75a922f153be5cccf0228b56f5160e47e6a" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>OUTSIDE_AFFINE_HULL</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a5bea7d3470854571f97c18a675daca75a4ed6b6faec7f4a57a66120b7c5c11471" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>OUTSIDE_CONVEX_HULL</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a32b9a309996aefea6e958e8380a33daf" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>point</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a482336074079c22dd94a5b66e60f775c" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>point</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a064de663ce02121ba3f0f4223547e064" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>Point</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a3ec38d2d1afffea88a760f5a50c4f9f0" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>Point_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a067b365119a53428aff40652e0ccb400" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>points_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ac69f365fe85f589224868cdfc859c078" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>points_end</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__3_1ae2d6e2f0c249b0429dd2c53996e0bdbf" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>Regular_triangulation_3</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__3_1ac4736c663c175565e7cf62a05892c82a" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>Regular_triangulation_3</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__3_1ad4c6831a0ec28baca17d20de1f968402" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>Regular_triangulation_3</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__3_1aa85fe1588169ab880e99614a48b06bc7" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>Regular_triangulation_3</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__3_1a0a035197a152e7e24f37746acfe7e5c4" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>remove</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__3_1af4ecfa0186a4acf38117e4f5e95915a1" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>remove</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__3_1a758a02ce12e1c1e94cf2564a7c68cbe5" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>remove</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a22bb4874ea8dc28c07584f1f55628707" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>segment</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ae28b76ae0e1f364fc55d1b67f5b57249" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>segment</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a2ee20454a8adb0ff5d6db5acabd10e05" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>Segment</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1af50326c40f34f13a01bb0fd0935301f0" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>set_infinite_vertex</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1afba384e440c57f3bb0a71e4b4f7f9944" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>set_lock_data_structure</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a0ad86d1f011118565cbef93ad35d673b" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>side_of_cell</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a3155746fefa1a1f87a834b4d575c904b" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>side_of_edge</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a60b867e74736abf01e8ce50e13c0aa9a" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>side_of_edge</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a6f26ad9ce68fbe3cb97ed211a68ab21f" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>side_of_facet</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a4b2b97440867950f7a7723262bf93462" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>side_of_facet</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__3_1ade070c7904bfd8a06211fbc082a9477d" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>side_of_power_circle</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__3_1a3f0722c65c1b18b6e4cef6fe82d954d6" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>side_of_power_circle</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__3_1af45da5a569fb5308ff139480d96e875f" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>side_of_power_segment</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__3_1a463fb64b21b8a0d762d48eb6ca9d0300" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>side_of_power_sphere</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a431de9481031045367856fa156fc643f" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>Simplex</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ab33c8cdfd6a571cf9635a531d2d261a0" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>size_type</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a767066a964b4d7b14376e5f5d1a04b34" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>swap</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ac00984a034bfe3b0f149498143ce76c8" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>tds</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ac6bd2d6740346b20377028653111b918" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>tds</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a83d347f8d914b78f17f6817fdb0b7a14" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>tetrahedron</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1aa88be907873b0469824cc3b2212f2eee" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>Tetrahedron</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ac2efcfbc0dcef89c512f65e4d13d4563" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>triangle</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a6f9a07c130cde8a27869944396ab09e7" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>triangle</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1adc409424d433ef56a79d5e71c02b8e15" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>Triangle</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ac6313707bf6f9cb001424cbc1a448431" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>Triangulation_3</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ac097eac836c8cd171f967d6d2bb8cb86" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>Triangulation_3</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a7018c73a59388a6d005e8fea1b5c1c32" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>Triangulation_3</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a46bcd9c0010bf0f9fc86af29996811ad" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>Triangulation_3</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a142364d710a44fb68daf6cbd185861ce" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>Triangulation_data_structure</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ace9dd63ba3a24d11d9b829198e514535" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>try_lock_and_get_incident_cells</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a689822c56fb0d30a538df471fe076fc1" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>Vertex</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a5bea7d3470854571f97c18a675daca75a285953109776e1f27769b65bb7249994" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>VERTEX</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>Vertex_handle</name></member>
      <member refid="structCGAL_1_1Triangulation__utils__3_1a71288c8c2833f954a73090336ed60054" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>vertex_triple_index</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__3_1af97fd391edf9462d1f0898a66fbf509c" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>vertices_in_conflict</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__3_1ab1f4f7020f4b7140f1974e73628637ab" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>vertices_inside_conflict_zone</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__3_1a1a497ef5547f04a43ed51fd0c9c5c200" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>vertices_on_conflict_zone_boundary</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__3_1a692e373287e44bab1b63f69ac44f59ee" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_3</scope><name>Weighted_point</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
