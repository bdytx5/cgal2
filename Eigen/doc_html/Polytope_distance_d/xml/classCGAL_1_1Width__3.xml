<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Width__3" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Width_3</compoundname>
    <includes local="no">CGAL/Width_3.h</includes>
    <templateparamlist>
      <param>
        <type>typename <ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">Traits</ref></type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classCGAL_1_1Width__3_1a7833c24b7d293ae186378e103b2f8b22" prot="public" static="no">
        <type>Traits::Point_3</type>
        <definition>typedef Traits::Point_3 CGAL::Width_3&lt; Traits &gt;::Point_3</definition>
        <argsstring></argsstring>
        <name>Point_3</name>
        <briefdescription>
<para>point type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Width_3.h" line="95" column="1" bodyfile="CGAL/Width_3.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Width__3_1ab7efe5acd03e35870e9a567f737830bd" prot="public" static="no">
        <type>Traits::Plane_3</type>
        <definition>typedef Traits::Plane_3 CGAL::Width_3&lt; Traits &gt;::Plane_3</definition>
        <argsstring></argsstring>
        <name>Plane_3</name>
        <briefdescription>
<para>plane type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Width_3.h" line="100" column="1" bodyfile="CGAL/Width_3.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Width__3_1a52cfc9d798b2413744dc2b87f0f3e1cc" prot="public" static="no">
        <type>Traits::Vector_3</type>
        <definition>typedef Traits::Vector_3 CGAL::Width_3&lt; Traits &gt;::Vector_3</definition>
        <argsstring></argsstring>
        <name>Vector_3</name>
        <briefdescription>
<para>vector type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Width_3.h" line="105" column="1" bodyfile="CGAL/Width_3.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Width__3_1a90ce9018b6f4803dba01107d4c2780b8" prot="public" static="no">
        <type>Traits::RT</type>
        <definition>typedef Traits::RT CGAL::Width_3&lt; Traits &gt;::RT</definition>
        <argsstring></argsstring>
        <name>RT</name>
        <briefdescription>
<para>algebraic ring type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Width_3.h" line="110" column="1" bodyfile="CGAL/Width_3.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Width__3_1a1f9812bf609c1a82fcbbe15b2c93d4c2" prot="public" static="no">
        <type>Traits::ChullTraits</type>
        <definition>typedef Traits::ChullTraits CGAL::Width_3&lt; Traits &gt;::ChullTraits</definition>
        <argsstring></argsstring>
        <name>ChullTraits</name>
        <briefdescription>
<para>traits class for the 3D convex hull algorithm. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Width_3.h" line="116" column="1" bodyfile="CGAL/Width_3.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Width__3_1a6dca8f0f36dd98d918cda831c8fbf93e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>CGAL::Width_3&lt; Traits &gt;::Width_3</definition>
        <argsstring>(InputIterator first, InputIterator beyond)</argsstring>
        <name>Width_3</name>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>beyond</declname>
        </param>
        <briefdescription>
<para>creates a variable <computeroutput>width</computeroutput> initialized to the width of <formula id="28">$ \mathcal{S}$</formula> - with <formula id="28">$ \mathcal{S}$</formula> being the set of points in the range [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>has <computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Point_3</ref></computeroutput> as value type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Width_3.h" line="132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Width__3_1ae21f318e94520ef72ec786df44b2fa2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Polyhedron</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>CGAL::Width_3&lt; Traits &gt;::Width_3</definition>
        <argsstring>(Polyhedron &amp;P)</argsstring>
        <name>Width_3</name>
        <param>
          <type>Polyhedron &amp;</type>
          <declname>P</declname>
        </param>
        <briefdescription>
<para>creates a variable <computeroutput>width</computeroutput> initialized to the width of the polyhedron <formula id="0">$ P$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Note that the vertex point coordinates are altered! <simplesect kind="pre"><para><formula id="0">$ P$</formula> is a convex polyhedron.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Polyhedron</parametername>
</parameternamelist>
<parameterdescription>
<para>is a <computeroutput>CGAL::Polyhedron_3</computeroutput> with facets supporting plane equations where <computeroutput>Polyhedron::Point_3</computeroutput> <formula id="35">$ \equiv$</formula> <computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Point_3</ref></computeroutput> and <computeroutput>Polyhedron::Plane_3</computeroutput> <formula id="35">$ \equiv$</formula> <computeroutput><ref refid="classCGAL_1_1Plane__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Plane_3</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Width_3.h" line="146" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Access Functions</header>
      <memberdef kind="function" id="classCGAL_1_1Width__3_1abbdf5bd949aea7e58875226e1f62da51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Width_3&lt; Traits &gt;::get_squared_width</definition>
        <argsstring>(RT &amp;width_num, RT &amp;width_denom)</argsstring>
        <name>get_squared_width</name>
        <param>
          <type><ref refid="classCGAL_1_1Width__3_1a90ce9018b6f4803dba01107d4c2780b8" kindref="member">RT</ref> &amp;</type>
          <declname>width_num</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Width__3_1a90ce9018b6f4803dba01107d4c2780b8" kindref="member">RT</ref> &amp;</type>
          <declname>width_denom</declname>
        </param>
        <briefdescription>
<para>returns the squared width. </para>        </briefdescription>
        <detaileddescription>
<para>For the reason of exact computation not the width itself is stored, but the <emphasis>squared</emphasis> width as a fraction: The numerator in <computeroutput>width_num</computeroutput> and the denominator in <computeroutput>width_denom</computeroutput>. The width of the point set <formula id="28">$ \mathcal{S}$</formula> is <formula id="36">$ \sqrt{\frac{width\_num}{width\_denom}}$</formula>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Width_3.h" line="161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Width__3_1a9d9ae919d2a1cb22d6b912e87eac80ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Width_3&lt; Traits &gt;::get_width_planes</definition>
        <argsstring>(Plane_3 &amp;e1, Plane_3 &amp;e2)</argsstring>
        <name>get_width_planes</name>
        <param>
          <type><ref refid="classCGAL_1_1Width__3_1ab7efe5acd03e35870e9a567f737830bd" kindref="member">Plane_3</ref> &amp;</type>
          <declname>e1</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Width__3_1ab7efe5acd03e35870e9a567f737830bd" kindref="member">Plane_3</ref> &amp;</type>
          <declname>e2</declname>
        </param>
        <briefdescription>
<para>The planes <computeroutput>e1</computeroutput> and <computeroutput>e2</computeroutput> are the two parallel supporting planes, which distance is minimal (among all such planes). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Width_3.h" line="169" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Width__3_1a9f9e0ec0f1956f5db6e4152a255c4954" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Width_3&lt; Traits &gt;::get_width_coefficients</definition>
        <argsstring>(RT &amp;A, RT &amp;B, RT &amp;C, RT &amp;D, RT &amp;K)</argsstring>
        <name>get_width_coefficients</name>
        <param>
          <type><ref refid="classCGAL_1_1Width__3_1a90ce9018b6f4803dba01107d4c2780b8" kindref="member">RT</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Width__3_1a90ce9018b6f4803dba01107d4c2780b8" kindref="member">RT</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Width__3_1a90ce9018b6f4803dba01107d4c2780b8" kindref="member">RT</ref> &amp;</type>
          <declname>C</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Width__3_1a90ce9018b6f4803dba01107d4c2780b8" kindref="member">RT</ref> &amp;</type>
          <declname>D</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Width__3_1a90ce9018b6f4803dba01107d4c2780b8" kindref="member">RT</ref> &amp;</type>
          <declname>K</declname>
        </param>
        <briefdescription>
<para>The returned coefficients <computeroutput>A,B,C,D,K</computeroutput> have the property that width-plane <computeroutput>e1</computeroutput> is given by the equation <formula id="37">$ Ax+By+Cz+D=0$</formula> and width-plane <computeroutput>e2</computeroutput> by <formula id="38">$ Ax+By+Cz+K=0$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Width_3.h" line="176" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Width__3_1a8eb1023edf8c3a8f1d0e40ba73161356" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Width__3_1a52cfc9d798b2413744dc2b87f0f3e1cc" kindref="member">Vector_3</ref></type>
        <definition>Vector_3 CGAL::Width_3&lt; Traits &gt;::get_build_direction</definition>
        <argsstring>()</argsstring>
        <name>get_build_direction</name>
        <briefdescription>
<para>returns a direction <formula id="33">$ \mathbf{d}_{opt}$</formula> such that the width-planes <computeroutput>e1</computeroutput> and <computeroutput>e2</computeroutput> are perpendicular to <formula id="33">$ \mathbf{d}_{opt}$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>The width of the point set is minimal in this direction. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Width_3.h" line="185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Width__3_1ae855684ea9c849a322fae24f6ac2545e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Width_3&lt; Traits &gt;::get_all_build_directions</definition>
        <argsstring>(std::vector&lt; Vector_3 &gt; &amp;dir)</argsstring>
        <name>get_all_build_directions</name>
        <param>
          <type>std::vector&lt; <ref refid="classCGAL_1_1Width__3_1a52cfc9d798b2413744dc2b87f0f3e1cc" kindref="member">Vector_3</ref> &gt; &amp;</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>All the build directions are stored in the vector <computeroutput>dir</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>It might happen that a certain body has several different build directions, but it is also possible to have only one build direction. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Width_3.h" line="193" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Width__3_1a5d14c0cd7b6164046002ea5a14c6e737" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CGAL::Width_3&lt; Traits &gt;::get_number_of_optimal_solutions</definition>
        <argsstring>()</argsstring>
        <name>get_number_of_optimal_solutions</name>
        <briefdescription>
<para>returns the number of optimal solutions, i.e., the number of optimal build directions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Width_3.h" line="201" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Given a set of points <formula id="26">$ \mathcal{S}=\left\{p_1,\ldots , p_n\right\}$</formula> in <formula id="27">$ \mathbb{R}^3$</formula>. </para>    </briefdescription>
    <detaileddescription>
<para>The width of <formula id="28">$ \mathcal{S}$</formula>, denoted as <formula id="29">$ \mathcal{W(S)}$</formula>, is defined as the minimum distance between two parallel planes of support of <formula id="30">$ \mathit{conv(\mathcal{S})}$</formula>; where <formula id="30">$ \mathit{conv(\mathcal{S})}$</formula> denotes the convex hull of <formula id="28">$ \mathcal{S}$</formula>. The width in direction <formula id="31">$ \mathbf{d}$</formula>, denoted as <formula id="32">$ \mathcal{W}_d\mathcal{(S)}$</formula>, is the distance between two parallel planes of support of <formula id="30">$ \mathit{conv(\mathcal{S})}$</formula>, which are orthogonal to <formula id="31">$ \mathbf{d}$</formula>.</para><para>Subject to the applications of the width algorithm, several objects might be interesting: <orderedlist>
<listitem>
<para>The two parallel planes of support such that the distance between them is as small as possible. These planes are called width-planes in further considerations. </para></listitem>
<listitem>
<para>The width <formula id="29">$ \mathcal{W(S)}$</formula>, i.e., the distance between the width-planes. </para></listitem>
<listitem>
<para>The direction <formula id="33">$ \mathbf{d}_{opt}$</formula> such that <formula id="34">$ \mathcal{W(S)}=\mathcal{W}_{d_{opt}}\mathcal{(S)}$</formula> </para></listitem>
</orderedlist>
</para><para><emphasis>Note:</emphasis> There might be several optimal build directions. Hence neither the width-planes nor the direction <formula id="33">$ \mathbf{d}_{opt}$</formula> are unique - only the width is.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Traits</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model for <computeroutput><ref refid="classWidthTraits__3" kindref="compound">WidthTraits_3</ref></computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
We provide the model <computeroutput><ref refid="classCGAL_1_1Width__default__traits__3" kindref="compound">Width_default_traits_3</ref>&lt;<ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref>&gt;</computeroutput> based on a three-dimensional CGAL kernel.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Width__default__traits__3" kindref="compound">CGAL::Width_default_traits_3</ref>&lt;K&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classWidthTraits__3" kindref="compound">WidthTraits_3</ref></computeroutput></para></simplesect>
<bold>Implementation</bold><linebreak/>
</para><para>Since the width of the point set <formula id="28">$ \mathcal{S}$</formula> and the width of the convex hull of <formula id="28">$ \mathcal{S}$</formula> ( <formula id="30">$ \mathit{conv(\mathcal{S})}$</formula>) is the same, the algorithm uses the 3D convex hull algorithm CGAL provides.</para><para>The width-algorithm is not incremental and therefore inserting and erasing points cause not an &apos;automatic&apos; update of the width. Instead you have to run the width-algorithm again even if the point set is extended by only one new point.</para><para><bold>Large Numbers.</bold></para><para>Because there is no need for dividing values during the algorithm, the numbers can get really huge (all the computations are made using a lot of multiplications). Therefore it is strongly recommended to use a number type that can handle numbers of arbitrary length (e.g., <computeroutput>leda_integer</computeroutput> in combination with the homogeneous representation of the points). But these large numbers have a disadvantage: Operations on them are slower as greater the number gets. Therefore it is possible to shorten the numbers by using the compiler flag -Dsimplify. For using this option it is required that the underlying number type provides the &apos;modulo&apos; operation.</para><para><bold>Information Output during the Computations.</bold></para><para>If during the algorithm the program should output some information (e.g., during the debugging phase) you can turn on the output information by giving the compiler flag debug. In the file <computeroutput>width_assertions.h</computeroutput> you can turn on/off the output of some functions and additional informations by changing the defined values from 0 (no output) to 1 (output available). But then it is required that the <computeroutput>operator&lt;&lt;()</computeroutput> has to been overloaded for <computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Point_3</ref></computeroutput>, <computeroutput><ref refid="classCGAL_1_1Plane__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Plane_3</ref></computeroutput>, <computeroutput><ref refid="classCGAL_1_1Vector__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Vector_3</ref></computeroutput> and <computeroutput>RT</computeroutput>.</para><para><bold>Example</bold><linebreak/>
</para><para><linebreak/>
<bold>File</bold> <ref refid="Polytope_distance_d_2width_simplex_8cpp-example" kindref="compound">Polytope_distance_d/width_simplex.cpp</ref> <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Homogeneous.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Width_default_traits_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Width_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CGAL_USE_GMP)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Gmpz.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CGAL::Gmpz<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCGAL_1_1Width__3_1a90ce9018b6f4803dba01107d4c2780b8" kindref="member">RT</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined<sp/>(CGAL_USE_LEDA)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/leda_integer.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>leda_integer<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCGAL_1_1Width__3_1a90ce9018b6f4803dba01107d4c2780b8" kindref="member">RT</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/MP_Float.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CGAL::MP_Float<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCGAL_1_1Width__3_1a90ce9018b6f4803dba01107d4c2780b8" kindref="member">RT</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Homogeneous" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Homogeneous&lt;RT&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kernel;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classKernel_1_1Point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel::Point_3</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCGAL_1_1Width__3_1a7833c24b7d293ae186378e103b2f8b22" kindref="member">Point_3</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classKernel_1_1Plane__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel::Plane_3</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCGAL_1_1Width__3_1ab7efe5acd03e35870e9a567f737830bd" kindref="member">Plane_3</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Width__default__traits__3" kindref="compound">CGAL::Width_default_traits_3&lt;Kernel&gt;</ref><sp/><sp/>Width_traits;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Width__3" kindref="compound">CGAL::Width_3&lt;Width_traits&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Width;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>simplex<sp/>using<sp/>homogeneous<sp/>integer<sp/>coordinates</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Point_3&gt;<sp/>points;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>points.push_back(<sp/><ref refid="classCGAL_1_1Width__3_1a7833c24b7d293ae186378e103b2f8b22" kindref="member">Point_3</ref>(2,0,0,1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>points.push_back(<sp/><ref refid="classCGAL_1_1Width__3_1a7833c24b7d293ae186378e103b2f8b22" kindref="member">Point_3</ref>(0,1,0,1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>points.push_back(<sp/><ref refid="classCGAL_1_1Width__3_1a7833c24b7d293ae186378e103b2f8b22" kindref="member">Point_3</ref>(0,0,1,1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>points.push_back(<sp/><ref refid="classCGAL_1_1Width__3_1a7833c24b7d293ae186378e103b2f8b22" kindref="member">Point_3</ref>(0,0,0,1));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>width<sp/>of<sp/>simplex</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Width<sp/>simplex(<sp/>points.begin(),<sp/>points.end());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Output<sp/>of<sp/>squared<sp/>width,<sp/>width-planes,<sp/>and<sp/>optimal<sp/>direction</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>RT<sp/>wnum,<sp/>wdenom;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>simplex.get_squared_width(<sp/>wnum,<sp/>wdenom);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Squared<sp/>Width:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>wnum<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>wdenom<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Direction:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>simplex.get_build_direction()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Plane_3<sp/><sp/>e1,<sp/>e2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>simplex.get_width_planes<sp/>(e1,<sp/>e2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Planes:<sp/>E1:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>e1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.<sp/><sp/>E2:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>e2<sp/>&lt;&lt;std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>optimal<sp/>solutions:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>simplex.get_number_of_optimal_solutions()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>    </detaileddescription>
    <location file="CGAL/Width_3.h" line="81" column="1" bodyfile="CGAL/Width_3.h" bodystart="81" bodyend="205"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Width__3_1a1f9812bf609c1a82fcbbe15b2c93d4c2" prot="public" virt="non-virtual"><scope>CGAL::Width_3</scope><name>ChullTraits</name></member>
      <member refid="classCGAL_1_1Width__3_1ae855684ea9c849a322fae24f6ac2545e" prot="public" virt="non-virtual"><scope>CGAL::Width_3</scope><name>get_all_build_directions</name></member>
      <member refid="classCGAL_1_1Width__3_1a8eb1023edf8c3a8f1d0e40ba73161356" prot="public" virt="non-virtual"><scope>CGAL::Width_3</scope><name>get_build_direction</name></member>
      <member refid="classCGAL_1_1Width__3_1a5d14c0cd7b6164046002ea5a14c6e737" prot="public" virt="non-virtual"><scope>CGAL::Width_3</scope><name>get_number_of_optimal_solutions</name></member>
      <member refid="classCGAL_1_1Width__3_1abbdf5bd949aea7e58875226e1f62da51" prot="public" virt="non-virtual"><scope>CGAL::Width_3</scope><name>get_squared_width</name></member>
      <member refid="classCGAL_1_1Width__3_1a9f9e0ec0f1956f5db6e4152a255c4954" prot="public" virt="non-virtual"><scope>CGAL::Width_3</scope><name>get_width_coefficients</name></member>
      <member refid="classCGAL_1_1Width__3_1a9d9ae919d2a1cb22d6b912e87eac80ad" prot="public" virt="non-virtual"><scope>CGAL::Width_3</scope><name>get_width_planes</name></member>
      <member refid="classCGAL_1_1Width__3_1ab7efe5acd03e35870e9a567f737830bd" prot="public" virt="non-virtual"><scope>CGAL::Width_3</scope><name>Plane_3</name></member>
      <member refid="classCGAL_1_1Width__3_1a7833c24b7d293ae186378e103b2f8b22" prot="public" virt="non-virtual"><scope>CGAL::Width_3</scope><name>Point_3</name></member>
      <member refid="classCGAL_1_1Width__3_1a90ce9018b6f4803dba01107d4c2780b8" prot="public" virt="non-virtual"><scope>CGAL::Width_3</scope><name>RT</name></member>
      <member refid="classCGAL_1_1Width__3_1a52cfc9d798b2413744dc2b87f0f3e1cc" prot="public" virt="non-virtual"><scope>CGAL::Width_3</scope><name>Vector_3</name></member>
      <member refid="classCGAL_1_1Width__3_1a6dca8f0f36dd98d918cda831c8fbf93e" prot="public" virt="non-virtual"><scope>CGAL::Width_3</scope><name>Width_3</name></member>
      <member refid="classCGAL_1_1Width__3_1ae21f318e94520ef72ec786df44b2fa2f" prot="public" virt="non-virtual"><scope>CGAL::Width_3</scope><name>Width_3</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
