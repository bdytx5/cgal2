<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>User Manual</title>
    <detaileddescription>
<para><anchor id="index_1Chapter_Optimal_Distances"/><anchor id="index_1chapOptimalDistances"/> <simplesect kind="authors"><para>Kaspar Fischer, Bernd G<aumlaut/>rtner, Thomas Herrmann, Michael Hoffmann, and Sven Sch<oumlaut/>nherr</para></simplesect>
This chapter describes how to compute the distance between the convex hulls of two given point sets in <formula id="3">$ d$</formula>-dimensional Euclidean space (<computeroutput><ref refid="classCGAL_1_1Polytope__distance__d" kindref="compound">Polytope_distance_d</ref>&lt;Traits&gt;</computeroutput>). Moreover, it is possible to compute the width of a point set in three dimensions (<computeroutput><ref refid="classCGAL_1_1Width__3" kindref="compound">Width_3</ref>&lt;Traits&gt;</computeroutput>).</para><para><image type="html" name="polydist.png"></image>
 <image type="latex" name="polydist.png"></image>
</para><para>The obvious application is collision detection between convex bodies in space. In the spirit of the bounding volume application above, it also makes sense for nonconvex objects: a full intersection test between complicated objects could in a first stage be approximated with the test between the convex hulls of the objects. Only if the hulls intersect, a full intersection test is necessary.</para><para>To dampen fears concerning the performance of the distance computation, we want to mention that the convex hulls of the input point sets are not explicitly computed. This avoids a runtime which grows exponentially in <formula id="3">$ d$</formula>. In fact, the runtime is almost always linear in the size of the two point sets. </para>    </detaileddescription>
  </compounddef>
</doxygen>
