<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__PkgOptimalDistances" kind="group">
    <compoundname>PkgOptimalDistances</compoundname>
    <title>Optimal Distances Reference</title>
    <innerclass refid="classCGAL_1_1Polytope__distance__d" prot="public">CGAL::Polytope_distance_d</innerclass>
    <innerclass refid="classCGAL_1_1Polytope__distance__d__traits__2" prot="public">CGAL::Polytope_distance_d_traits_2</innerclass>
    <innerclass refid="classCGAL_1_1Polytope__distance__d__traits__3" prot="public">CGAL::Polytope_distance_d_traits_3</innerclass>
    <innerclass refid="classCGAL_1_1Polytope__distance__d__traits__d" prot="public">CGAL::Polytope_distance_d_traits_d</innerclass>
    <innerclass refid="classCGAL_1_1Width__3" prot="public">CGAL::Width_3</innerclass>
    <innerclass refid="classCGAL_1_1Width__default__traits__3" prot="public">CGAL::Width_default_traits_3</innerclass>
    <innergroup refid="group__PkgOptimalDistancesConcepts">Concepts</innergroup>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgOptimalDistances_1gacf62ba91aec2e0efa5729ede03e24f9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></type>
          </param>
          <param>
            <type>class <ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::all_furthest_neighbors_2</definition>
        <argsstring>(RandomAccessIterator points_begin, RandomAccessIterator points_end, OutputIterator o, Traits t=Default_traits)</argsstring>
        <name>all_furthest_neighbors_2</name>
        <param>
          <type><ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></type>
          <declname>points_begin</declname>
        </param>
        <param>
          <type><ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></type>
          <declname>points_end</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>o</declname>
        </param>
        <param>
          <type>Traits</type>
          <declname>t</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
<para>computes all furthest neighbors for the vertices of the convex polygon described by the range [<computeroutput>points_begin</computeroutput>, <computeroutput>points_end</computeroutput>), writes their indices (relative to <computeroutput>points_begin</computeroutput>) to <computeroutput>o</computeroutput>the furthest neighbor of <computeroutput>points_begin[i]</computeroutput> is <computeroutput>points_begin[i-th number written to o]</computeroutput> and returns the past-the-end iterator of this sequence. </para>        </briefdescription>
        <detaileddescription>
<para>The function <computeroutput><ref refid="group__PkgOptimalDistances_1gacf62ba91aec2e0efa5729ede03e24f9b" kindref="member">all_furthest_neighbors_2()</ref></computeroutput> computes all furthest neighbors for the vertices of a convex polygon <formula id="0">$ P$</formula>, i.e. for each vertex <formula id="1">$ v$</formula> of <formula id="0">$ P$</formula> a vertex <formula id="2">$ f_v$</formula> of <formula id="0">$ P$</formula> such that the distance between <formula id="1">$ v$</formula> and <formula id="2">$ f_v$</formula> is maximized.</para><para><simplesect kind="pre"><para>The points denoted by the non-empty range [<computeroutput>points_begin</computeroutput>, <computeroutput>points_end</computeroutput>) form the boundary of a convex polygon <formula id="0">$ P$</formula> (oriented clock- or counterclockwise).</para></simplesect>
The geometric types and operations to be used for the computation are specified by the traits class parameter <computeroutput>t</computeroutput>. This parameter can be omitted if <computeroutput><ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></computeroutput> refers to a point type from a <computeroutput><ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput>. In this case, the kernel is used as default traits class.</para><para><bold>Requires</bold><linebreak/>
</para><para><orderedlist>
<listitem>
<para>If <computeroutput>t</computeroutput> is specified explicitly, <computeroutput>Traits</computeroutput> is a model for <computeroutput><ref refid="classAllFurthestNeighborsTraits__2" kindref="compound">AllFurthestNeighborsTraits_2</ref></computeroutput>. </para></listitem>
<listitem>
<para>Value type of <computeroutput><ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></computeroutput> is <computeroutput>Traits::Point_2</computeroutput> or, if <computeroutput>t</computeroutput> is not specified explicitly, <computeroutput>K::Point_2</computeroutput> where <computeroutput>K</computeroutput> is a model for <computeroutput><ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput>. </para></listitem>
<listitem>
<para><computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> accepts <computeroutput>int</computeroutput> as value type. </para></listitem>
</orderedlist>
</para><para><simplesect kind="see"><para><computeroutput><ref refid="classAllFurthestNeighborsTraits__2" kindref="compound">AllFurthestNeighborsTraits_2</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput>CGAL::monotone_matrix_search()</computeroutput></para></simplesect>
<bold>Implementation</bold><linebreak/>
</para><para>The implementation uses monotone matrix search <ref refid="citelist_1CITEREF_akmsw-gamsa-87" kindref="member">[1]</ref>. Its runtime complexity is linear in the number of vertices of <formula id="0">$ P$</formula>.</para><para><bold>Example</bold><linebreak/>
</para><para>The following code generates a random convex polygon <computeroutput>p</computeroutput> with ten vertices, computes all furthest neighbors and writes the sequence of their indices (relative to <computeroutput>points_begin</computeroutput>) to <computeroutput>cout</computeroutput> (e.g. a sequence of <computeroutput>4788911224</computeroutput> means the furthest neighbor of <computeroutput>points_begin[0]</computeroutput> is <computeroutput>points_begin[4]</computeroutput>, the furthest neighbor of <computeroutput>points_begin[1]</computeroutput> is <computeroutput>points_begin[7]</computeroutput> etc.).</para><para><linebreak/>
<bold>File</bold> <ref refid="Polytope_distance_d_2all_furthest_neighbors_2_8cpp-example" kindref="compound">Polytope_distance_d/all_furthest_neighbors_2.cpp</ref> <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Cartesian.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Polygon_2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/point_generators_2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/random_convex_set_2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/all_furthest_neighbors_2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/IO/Ostream_iterator.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FT;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Cartesian" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Cartesian&lt;FT&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kernel;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classKernel_1_1Point__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel::Point_2</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Index_cont;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CGAL::Polygon_2&lt;Kernel&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Polygon_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CGAL::Random_points_in_square_2&lt;Point&gt;<sp/><sp/><sp/><sp/>Generator;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Ostream__iterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Stream_support.tag">CGAL::Ostream_iterator&lt;int,std::ostream&gt;</ref><sp/><sp/>Oiterator;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>generate<sp/>random<sp/>convex<sp/>polygon:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Polygon_2<sp/>p;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>CGAL::random_convex_set_2(10,<sp/>std::back_inserter(p),<sp/>Generator(1));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>all<sp/>furthest<sp/>neighbors:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgOptimalDistances_1gacf62ba91aec2e0efa5729ede03e24f9b" kindref="member">CGAL::all_furthest_neighbors_2</ref>(p.vertices_begin(),<sp/>p.vertices_end(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Oiterator(std::cout));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/all_furthest_neighbors_2.h" line="61" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para> <image type="html" name="dist.png"></image>
   Kaspar Fischer, Bernd Gärtner, Thomas Herrmann, Michael Hoffmann, and Sven Schönherr This package provides algorithms for computing the distance between the convex hulls of two point sets in d-dimensional space, without explicitely constructing the convex hulls. It further provides an algorithm to compute the width of a point set, and the furthest point for each vertex of a convex polygon.  <linebreak/>
   <bold>Introduced in:</bold> CGAL 1.1<linebreak/>
 <bold>BibTeX:</bold> <ulink url="../Manual/how_to_cite_cgal.html#cgal:fghhs-od-18b">cgal:fghhs-od-18b</ulink><linebreak/>
 <bold>License:</bold> <ref refid="preliminaries_1licensesGPL" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">GPL</ref> <linebreak/>
 </para><para><heading level="2">Assertions</heading>
</para><para>The optimization code uses infix <computeroutput>OPTIMISATION</computeroutput> in the assertions, e.g. defining the compiler flag <computeroutput>CGAL_OPTIMISATION_NO_PRECONDITIONS</computeroutput> switches precondition checking off, cf. Section <ref refid="index_1secchecks" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Checks</ref>.</para><para></para><para><heading level="2">All furthest neighbors</heading>
</para><para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__PkgOptimalDistances_1gacf62ba91aec2e0efa5729ede03e24f9b" kindref="member">CGAL::all_furthest_neighbors_2</ref></computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classAllFurthestNeighborsTraits__2" kindref="compound">AllFurthestNeighborsTraits_2</ref></computeroutput></para></listitem></itemizedlist>
</para><para><heading level="2">Width</heading>
</para><para><itemizedlist>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Width__3" kindref="compound">CGAL::Width_3</ref>&lt;Traits&gt;</computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Width__default__traits__3" kindref="compound">CGAL::Width_default_traits_3</ref>&lt;K&gt;</computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classWidthTraits__3" kindref="compound">WidthTraits_3</ref></computeroutput></para></listitem></itemizedlist>
</para><para><heading level="2">Polytope Distance</heading>
</para><para><itemizedlist>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Polytope__distance__d" kindref="compound">CGAL::Polytope_distance_d</ref>&lt;Traits&gt;</computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Polytope__distance__d__traits__2" kindref="compound">CGAL::Polytope_distance_d_traits_2</ref>&lt;K,ET,NT&gt;</computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Polytope__distance__d__traits__3" kindref="compound">CGAL::Polytope_distance_d_traits_3</ref>&lt;K,ET,NT&gt;</computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Polytope__distance__d__traits__d" kindref="compound">CGAL::Polytope_distance_d_traits_d</ref>&lt;K,ET,NT&gt;</computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classPolytopeDistanceDTraits" kindref="compound">PolytopeDistanceDTraits</ref></computeroutput> </para></listitem></itemizedlist>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
