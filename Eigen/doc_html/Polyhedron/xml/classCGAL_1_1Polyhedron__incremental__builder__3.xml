<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Polyhedron__incremental__builder__3" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Polyhedron_incremental_builder_3</compoundname>
    <includes local="no">CGAL/Polyhedron_incremental_builder_3.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>HDS</declname>
        <defname>HDS</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classCGAL_1_1Polyhedron__incremental__builder__3_1a4d6b47abdda805ccc6142ecbe78002c7" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Polyhedron_incremental_builder_3&lt; HDS &gt;::HalfedgeDS</definition>
        <argsstring></argsstring>
        <name>HalfedgeDS</name>
        <briefdescription>
<para>halfedge data structure <computeroutput>HDS</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_incremental_builder_3.h" line="71" column="1" bodyfile="CGAL/Polyhedron_incremental_builder_3.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Polyhedron__incremental__builder__3_1afba104cd587fb0f7a4ac4a43ea3e9f75" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Polyhedron_incremental_builder_3&lt; HDS &gt;::Point_3</definition>
        <argsstring></argsstring>
        <name>Point_3</name>
        <briefdescription>
<para>point type of the vertex. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_incremental_builder_3.h" line="76" column="1" bodyfile="CGAL/Polyhedron_incremental_builder_3.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Polyhedron__incremental__builder__3_1a95d43a6f6f66bf12b17bada5d2a44ede" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Polyhedron_incremental_builder_3&lt; HDS &gt;::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <briefdescription>
<para>size type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_incremental_builder_3.h" line="81" column="1" bodyfile="CGAL/Polyhedron_incremental_builder_3.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Polyhedron__incremental__builder__3_1ab2b2fc2eaf5b797c0dcc277447ddb4be" prot="public" static="no">
        <type><ref refid="classHalfedgeDS_1ad8d5f4214d7cf243b742b172c860a721" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/HalfedgeDS.tag">HalfedgeDS::Vertex_handle</ref></type>
        <definition>typedef HalfedgeDS::Vertex_handle CGAL::Polyhedron_incremental_builder_3&lt; HDS &gt;::Vertex_handle</definition>
        <argsstring></argsstring>
        <name>Vertex_handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_incremental_builder_3.h" line="86" column="1" bodyfile="CGAL/Polyhedron_incremental_builder_3.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Polyhedron__incremental__builder__3_1ab3d834ff1dcadd23b55a4d1589ace457" prot="public" static="no">
        <type><ref refid="classHalfedgeDS_1a10511462c9686c726943cffafa84ce2c" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/HalfedgeDS.tag">HalfedgeDS::Halfedge_handle</ref></type>
        <definition>typedef HalfedgeDS::Halfedge_handle CGAL::Polyhedron_incremental_builder_3&lt; HDS &gt;::Halfedge_handle</definition>
        <argsstring></argsstring>
        <name>Halfedge_handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_incremental_builder_3.h" line="91" column="1" bodyfile="CGAL/Polyhedron_incremental_builder_3.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Polyhedron__incremental__builder__3_1a606eee04fdd0e73fb9e571aba416e7a9" prot="public" static="no">
        <type><ref refid="classHalfedgeDS_1a4c6840664c100a595f53a8526ad63bf1" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/HalfedgeDS.tag">HalfedgeDS::Face_handle</ref></type>
        <definition>typedef HalfedgeDS::Face_handle CGAL::Polyhedron_incremental_builder_3&lt; HDS &gt;::Facet_handle</definition>
        <argsstring></argsstring>
        <name>Facet_handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_incremental_builder_3.h" line="96" column="1" bodyfile="CGAL/Polyhedron_incremental_builder_3.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Constants</header>
      <memberdef kind="enum" id="classCGAL_1_1Polyhedron__incremental__builder__3_1a9170b2b38da4c51af6112903240e4c0c" prot="public" static="no">
        <name>@0</name>
        <enumvalue id="classCGAL_1_1Polyhedron__incremental__builder__3_1a9170b2b38da4c51af6112903240e4c0ca3947a27b56138673255b394819e100d0" prot="public">
          <name>RELATIVE_INDEXING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classCGAL_1_1Polyhedron__incremental__builder__3_1a9170b2b38da4c51af6112903240e4c0ca556e93184fde3f2a89aa80de54463f4c" prot="public">
          <name>ABSOLUTE_INDEXING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>two different indexing modes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_incremental_builder_3.h" line="106" column="1" bodyfile="CGAL/Polyhedron_incremental_builder_3.h" bodystart="106" bodyend="106"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__incremental__builder__3_1acb8216ef40323e777f57cd4656d98c83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Polyhedron_incremental_builder_3&lt; HDS &gt;::Polyhedron_incremental_builder_3</definition>
        <argsstring>(HDS &amp;hds, bool verbose=false)</argsstring>
        <name>Polyhedron_incremental_builder_3</name>
        <param>
          <type>HDS &amp;</type>
          <declname>hds</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>stores a reference to the halfedge data structure <computeroutput>hds</computeroutput> of a polyhedral surface in its internal state. </para>        </briefdescription>
        <detaileddescription>
<para>An existing polyhedral surface in <computeroutput>hds</computeroutput> remains unchanged. The incremental builder appends the new polyhedral surface. If <computeroutput>verbose</computeroutput> is <computeroutput>true</computeroutput>, diagnostic messages will be printed to <computeroutput>cerr</computeroutput> in case of malformed input data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_incremental_builder_3.h" line="121" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Surface Creation</header>
      <description><para>To build a polyhedral surface, the following regular expression gives the correct and allowed order and nesting of method calls from this section:</para><para><programlisting><codeline><highlight class="normal">begin_surface<sp/>(<sp/>add_vertex<sp/><sp/>|<sp/>(<sp/>begin_facet<sp/><sp/>add_vertex_to_facet<sp/><sp/>end_facet<sp/>)<sp/>)<sp/>end_surface</highlight></codeline>
</programlisting> </para></description>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__incremental__builder__3_1a925a593ae76f78a4f41d7784bba91af6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Polyhedron_incremental_builder_3&lt; HDS &gt;::begin_surface</definition>
        <argsstring>(size_type v, size_type f, size_type h=0, int mode=RELATIVE_INDEXING)</argsstring>
        <name>begin_surface</name>
        <param>
          <type><ref refid="classCGAL_1_1Polyhedron__incremental__builder__3_1a95d43a6f6f66bf12b17bada5d2a44ede" kindref="member">size_type</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Polyhedron__incremental__builder__3_1a95d43a6f6f66bf12b17bada5d2a44ede" kindref="member">size_type</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Polyhedron__incremental__builder__3_1a95d43a6f6f66bf12b17bada5d2a44ede" kindref="member">size_type</ref></type>
          <declname>h</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>mode</declname>
          <defval><ref refid="classCGAL_1_1Polyhedron__incremental__builder__3_1a9170b2b38da4c51af6112903240e4c0ca3947a27b56138673255b394819e100d0" kindref="member">RELATIVE_INDEXING</ref></defval>
        </param>
        <briefdescription>
<para>starts the construction. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>v</computeroutput> is the number of new vertices to expect, <computeroutput>f</computeroutput> the number of new facets, and <computeroutput>h</computeroutput> the number of new halfedges. If <computeroutput>h</computeroutput> is unspecified (<computeroutput>== 0</computeroutput>) it is estimated using Euler&apos;s equation (plus 5% for the so far unknown holes and genus of the object). These values are used to reserve space in the halfedge data structure <computeroutput>hds</computeroutput>. If the representation supports insertion these values do not restrict the class of constructible polyhedra. If the representation does not support insertion the object must fit into the reserved sizes.</para><para>If <computeroutput>mode</computeroutput> is set to <computeroutput>ABSOLUTE_INDEXING</computeroutput> the incremental builder uses absolute indexing and the vertices of the old polyhedral surface can be used in new facets (needs preprocessing time linear in the size of the old surface). Otherwise relative indexing is used starting with new indices for the new construction. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_incremental_builder_3.h" line="156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__incremental__builder__3_1abc6f512872df9509a0393d9fcd4fa2e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__incremental__builder__3_1ab2b2fc2eaf5b797c0dcc277447ddb4be" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Polyhedron_incremental_builder_3&lt; HDS &gt;::add_vertex</definition>
        <argsstring>(const Point_3 &amp;p)</argsstring>
        <name>add_vertex</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Polyhedron__incremental__builder__3_1afba104cd587fb0f7a4ac4a43ea3e9f75" kindref="member">Point_3</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>adds a new vertex for <computeroutput>p</computeroutput> and returns its handle. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_incremental_builder_3.h" line="163" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__incremental__builder__3_1a36e32e762d26786afb8cbf3c4d4a9ebd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__incremental__builder__3_1a606eee04fdd0e73fb9e571aba416e7a9" kindref="member">Facet_handle</ref></type>
        <definition>Facet_handle CGAL::Polyhedron_incremental_builder_3&lt; HDS &gt;::begin_facet</definition>
        <argsstring>()</argsstring>
        <name>begin_facet</name>
        <briefdescription>
<para>starts a new facet and returns its handle. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_incremental_builder_3.h" line="169" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__incremental__builder__3_1a2fdeee856c6746314d1c9c4851e404c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Polyhedron_incremental_builder_3&lt; HDS &gt;::add_vertex_to_facet</definition>
        <argsstring>(size_type i)</argsstring>
        <name>add_vertex_to_facet</name>
        <param>
          <type><ref refid="classCGAL_1_1Polyhedron__incremental__builder__3_1a95d43a6f6f66bf12b17bada5d2a44ede" kindref="member">size_type</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>adds a vertex with index <computeroutput>i</computeroutput> to the current facet. </para>        </briefdescription>
        <detaileddescription>
<para>The first point added with <computeroutput><ref refid="classCGAL_1_1Polyhedron__incremental__builder__3_1abc6f512872df9509a0393d9fcd4fa2e8" kindref="member">add_vertex()</ref></computeroutput> has the index 0 if <computeroutput>mode</computeroutput> was set to <computeroutput>RELATIVE_INDEXING</computeroutput>, otherwise the first vertex in the referenced <computeroutput>hds</computeroutput> has the index 0. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_incremental_builder_3.h" line="178" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__incremental__builder__3_1a24a3c6a73111e1171bb23b6e75f8ee73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__incremental__builder__3_1ab3d834ff1dcadd23b55a4d1589ace457" kindref="member">Halfedge_handle</ref></type>
        <definition>Halfedge_handle CGAL::Polyhedron_incremental_builder_3&lt; HDS &gt;::end_facet</definition>
        <argsstring>()</argsstring>
        <name>end_facet</name>
        <briefdescription>
<para>ends a newly constructed facet. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the handle to the halfedge incident to the new facet that points to the vertex added first. The halfedge can be safely used to traverse the halfedge cycle around the new facet. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_incremental_builder_3.h" line="186" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__incremental__builder__3_1a51c4d472aec12c4ad5d41e0695d91ead" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Polyhedron_incremental_builder_3&lt; HDS &gt;::end_surface</definition>
        <argsstring>()</argsstring>
        <name>end_surface</name>
        <briefdescription>
<para>ends the construction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_incremental_builder_3.h" line="191" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Additional Operations</header>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__incremental__builder__3_1ace001d4b34037e60f4c139c50c71799a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Polyhedron__incremental__builder__3_1ab3d834ff1dcadd23b55a4d1589ace457" kindref="member">Halfedge_handle</ref></type>
        <definition>Halfedge_handle CGAL::Polyhedron_incremental_builder_3&lt; HDS &gt;::add_facet</definition>
        <argsstring>(InputIterator first, InputIterator beyond)</argsstring>
        <name>add_facet</name>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>beyond</declname>
        </param>
        <briefdescription>
<para>is a synonym for <computeroutput><ref refid="classCGAL_1_1Polyhedron__incremental__builder__3_1a36e32e762d26786afb8cbf3c4d4a9ebd" kindref="member">begin_facet()</ref></computeroutput>, a call to <computeroutput><ref refid="classCGAL_1_1Polyhedron__incremental__builder__3_1a2fdeee856c6746314d1c9c4851e404c5" kindref="member">add_vertex_to_facet()</ref></computeroutput> for each value in the range <computeroutput>[first,beyond)</computeroutput>, and a call to <computeroutput><ref refid="classCGAL_1_1Polyhedron__incremental__builder__3_1a24a3c6a73111e1171bb23b6e75f8ee73" kindref="member">end_facet()</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the return value of <computeroutput><ref refid="classCGAL_1_1Polyhedron__incremental__builder__3_1a24a3c6a73111e1171bb23b6e75f8ee73" kindref="member">end_facet()</ref></computeroutput>. <simplesect kind="pre"><para>The value type of <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput> is <computeroutput>std::size_t</computeroutput>. All indices must refer to vertices already added. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_incremental_builder_3.h" line="206" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__incremental__builder__3_1a2b82ced26f21b4c297aba57792029860" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polyhedron_incremental_builder_3&lt; HDS &gt;::test_facet</definition>
        <argsstring>(InputIterator first, InputIterator beyond)</argsstring>
        <name>test_facet</name>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>beyond</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if a facet described by the vertex indices in the range <computeroutput>[first,beyond)</computeroutput> can be successfully inserted, e.g., with <computeroutput>add_facet(first,beyond)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The value type of <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput> is <computeroutput>std::size_t</computeroutput>. All indices must refer to vertices already added. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_incremental_builder_3.h" line="216" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__incremental__builder__3_1acf2f65abeb4af0b40fe99abf55854d69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__incremental__builder__3_1ab2b2fc2eaf5b797c0dcc277447ddb4be" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Polyhedron_incremental_builder_3&lt; HDS &gt;::vertex</definition>
        <argsstring>(std::size_t i)</argsstring>
        <name>vertex</name>
        <param>
          <type>std::size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>returns handle for the vertex of index <computeroutput>i</computeroutput>, or <computeroutput>Vertex_handle</computeroutput> if there is no <computeroutput>i</computeroutput>-th vertex. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_incremental_builder_3.h" line="223" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__incremental__builder__3_1ac59035edb88e2ad47085a6f4f6951581" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Polyhedron_incremental_builder_3&lt; HDS &gt;::error</definition>
        <argsstring>() const</argsstring>
        <name>error</name>
        <briefdescription>
<para>returns error status of the builder. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_incremental_builder_3.h" line="228" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__incremental__builder__3_1af5afb910f4ee79b8c0f37517aa338b3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Polyhedron_incremental_builder_3&lt; HDS &gt;::rollback</definition>
        <argsstring>()</argsstring>
        <name>rollback</name>
        <briefdescription>
<para>undoes all changes made to the halfedge data structure since the last <computeroutput><ref refid="classCGAL_1_1Polyhedron__incremental__builder__3_1a925a593ae76f78a4f41d7784bba91af6" kindref="member">begin_surface()</ref></computeroutput> in relative indexing, and deletes the whole surface in absolute indexing. </para>        </briefdescription>
        <detaileddescription>
<para>It needs a new call to <computeroutput><ref refid="classCGAL_1_1Polyhedron__incremental__builder__3_1a925a593ae76f78a4f41d7784bba91af6" kindref="member">begin_surface()</ref></computeroutput> to start inserting again. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_incremental_builder_3.h" line="236" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__incremental__builder__3_1ae52dc79713a2008c7b864045222fe993" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Polyhedron_incremental_builder_3&lt; HDS &gt;::check_unconnected_vertices</definition>
        <argsstring>()</argsstring>
        <name>check_unconnected_vertices</name>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if unconnected vertices are detected. </para>        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>verbose</computeroutput> was set to <computeroutput>true</computeroutput> (see the constructor above) debug information about the unconnected vertices is printed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_incremental_builder_3.h" line="244" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__incremental__builder__3_1a69fdb0a788b8294a0de9f33edea26801" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Polyhedron_incremental_builder_3&lt; HDS &gt;::remove_unconnected_vertices</definition>
        <argsstring>()</argsstring>
        <name>remove_unconnected_vertices</name>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if all unconnected vertices could be removed successfully. </para>        </briefdescription>
        <detaileddescription>
<para>This happens either if no unconnected vertices had appeared or if the halfedge data structure supports the removal of individual elements. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_incremental_builder_3.h" line="252" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      </sectiondef>
    <briefdescription>
<para>The auxiliary class <computeroutput><ref refid="classCGAL_1_1Polyhedron__incremental__builder__3" kindref="compound">Polyhedron_incremental_builder_3</ref></computeroutput> supports the incremental construction of polyhedral surfaces, which is for example convenient when constructing polyhedral surfaces from file formats, such as the Object File Format (OFF) <ref refid="citelist_1CITEREF_cgal:p-gmgv16-96" kindref="member">[5]</ref>, OpenInventor <ref refid="citelist_1CITEREF_cgal:w-impoo-94" kindref="member">[7]</ref> or VRML <ref refid="citelist_1CITEREF_cgal:bpp-vrml-95" kindref="member">[1]</ref>, <ref refid="citelist_1CITEREF_cgal:vrmls-97" kindref="member">[6]</ref>. </para>    </briefdescription>
    <detaileddescription>
<para><computeroutput><ref refid="classCGAL_1_1Polyhedron__incremental__builder__3" kindref="compound">Polyhedron_incremental_builder_3</ref></computeroutput> needs access to the internal halfedge data structure of type <computeroutput>HDS</computeroutput> of the polyhedral surface. It is intended to be used within a modifier, see <computeroutput><ref refid="classCGAL_1_1Modifier__base" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Miscellany.tag">Modifier_base</ref></computeroutput>.</para><para>The incremental builder might be of broader interest for other uses of the halfedge data structures, but it is specifically bound to the definition of polyhedral surfaces given here. During construction all conditions of polyhedral surfaces are checked and in case of violation an error status is set. A diagnostic message will be issued to <computeroutput>std::cerr</computeroutput> if the <computeroutput>verbose</computeroutput> flag has been set at construction time.</para><para>The incremental construction starts with a list of all point coordinates and concludes with a list of all facet polygons. Edges are not explicitly specified. They are derived from the vertex incidence information provided from the facet polygons. The polygons are given as a sequence of vertex indices. The halfedge data structure <computeroutput>HDS</computeroutput> must support vertices (i.e., <computeroutput>Supports_halfedge_vertex</computeroutput> <formula id="2">$ \equiv$</formula> <computeroutput>Tag_true</computeroutput>). Vertices and facets can be added in arbitrary order as long as a call to <computeroutput><ref refid="classCGAL_1_1Polyhedron__incremental__builder__3_1a2fdeee856c6746314d1c9c4851e404c5" kindref="member">add_vertex_to_facet()</ref></computeroutput> refers only to a vertex index that is already known. Some methods return already handles to vertices, facets, and halfedges newly constructed. They can be used to initialize additional fields, however, the incidences in the halfedge-data structure are not stable and are not allowed to be changed.</para><para>The incremental builder can work in two modes: <computeroutput>RELATIVE_INDEXING</computeroutput> (the default), in which a polyhedral surface already contained in the halfedge data structure is ignored and all indices are relative to the newly added surface, or <computeroutput>ABSOLUTE_INDEXING</computeroutput>, in which all indices are absolute indices including an already existing polyhedral surface. The former mode allows to create easily independent connected components, while the latter mode allows to to continue the construction of an existing surface, the absolute indexing allows to address existing vertices when creating new facets.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Polyhedron__3" kindref="compound">CGAL::Polyhedron_3</ref>&lt;Traits&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classHalfedgeDS" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/HalfedgeDS.tag">HalfedgeDS</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Modifier__base" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Miscellany.tag">CGAL::Modifier_base</ref></computeroutput></para></simplesect>
<bold>Example</bold><linebreak/>
</para><para>A modifier class creates a new triangle in the halfedge data structure using the incremental builder.</para><para><linebreak/>
<bold>File</bold> <ref refid="Polyhedron_2polyhedron_prog_incr_builder_8cpp-example" kindref="compound">Polyhedron/polyhedron_prog_incr_builder.cpp</ref> <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Simple_cartesian.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Polyhedron_incremental_builder_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Polyhedron_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>modifier<sp/>creating<sp/>a<sp/>triangle<sp/>with<sp/>the<sp/>incremental<sp/>builder.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>HDS&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Build_triangle<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Modifier__base" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Miscellany.tag">CGAL::Modifier_base</ref>&lt;HDS&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Build_triangle()<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(<sp/>HDS&amp;<sp/>hds)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Postcondition:<sp/>hds<sp/>is<sp/>a<sp/>valid<sp/>polyhedral<sp/>surface.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCGAL_1_1Polyhedron__incremental__builder__3" kindref="compound">CGAL::Polyhedron_incremental_builder_3&lt;HDS&gt;</ref><sp/>B(<sp/>hds,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B.begin_surface(<sp/>3,<sp/>1,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>HDS::Vertex<sp/><sp/><sp/>Vertex;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Vertex::Point<sp/>Point;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B.add_vertex(<sp/>Point(<sp/>0,<sp/>0,<sp/>0));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B.add_vertex(<sp/>Point(<sp/>1,<sp/>0,<sp/>0));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B.add_vertex(<sp/>Point(<sp/>0,<sp/>1,<sp/>0));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B.begin_facet();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B.add_vertex_to_facet(<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B.add_vertex_to_facet(<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B.add_vertex_to_facet(<sp/>2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B.end_facet();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B.end_surface();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Simple__cartesian" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Simple_cartesian&lt;double&gt;</ref><sp/><sp/><sp/><sp/><sp/>Kernel;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Polyhedron__3" kindref="compound">CGAL::Polyhedron_3&lt;Kernel&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Polyhedron;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Polyhedron::HalfedgeDS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCGAL_1_1Polyhedron__incremental__builder__3_1a4d6b47abdda805ccc6142ecbe78002c7" kindref="member">HalfedgeDS</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Polyhedron<sp/>P;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Build_triangle&lt;HalfedgeDS&gt;<sp/>triangle;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>P.delegate(<sp/>triangle);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CGAL_assertion(<sp/>P.is_triangle(<sp/>P.halfedges_begin()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>    </detaileddescription>
    <location file="CGAL/Polyhedron_incremental_builder_3.h" line="62" column="1" bodyfile="CGAL/Polyhedron_incremental_builder_3.h" bodystart="62" bodyend="256"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Polyhedron__incremental__builder__3_1a9170b2b38da4c51af6112903240e4c0ca556e93184fde3f2a89aa80de54463f4c" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_incremental_builder_3</scope><name>ABSOLUTE_INDEXING</name></member>
      <member refid="classCGAL_1_1Polyhedron__incremental__builder__3_1ace001d4b34037e60f4c139c50c71799a" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_incremental_builder_3</scope><name>add_facet</name></member>
      <member refid="classCGAL_1_1Polyhedron__incremental__builder__3_1abc6f512872df9509a0393d9fcd4fa2e8" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_incremental_builder_3</scope><name>add_vertex</name></member>
      <member refid="classCGAL_1_1Polyhedron__incremental__builder__3_1a2fdeee856c6746314d1c9c4851e404c5" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_incremental_builder_3</scope><name>add_vertex_to_facet</name></member>
      <member refid="classCGAL_1_1Polyhedron__incremental__builder__3_1a36e32e762d26786afb8cbf3c4d4a9ebd" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_incremental_builder_3</scope><name>begin_facet</name></member>
      <member refid="classCGAL_1_1Polyhedron__incremental__builder__3_1a925a593ae76f78a4f41d7784bba91af6" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_incremental_builder_3</scope><name>begin_surface</name></member>
      <member refid="classCGAL_1_1Polyhedron__incremental__builder__3_1ae52dc79713a2008c7b864045222fe993" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_incremental_builder_3</scope><name>check_unconnected_vertices</name></member>
      <member refid="classCGAL_1_1Polyhedron__incremental__builder__3_1a24a3c6a73111e1171bb23b6e75f8ee73" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_incremental_builder_3</scope><name>end_facet</name></member>
      <member refid="classCGAL_1_1Polyhedron__incremental__builder__3_1a51c4d472aec12c4ad5d41e0695d91ead" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_incremental_builder_3</scope><name>end_surface</name></member>
      <member refid="classCGAL_1_1Polyhedron__incremental__builder__3_1ac59035edb88e2ad47085a6f4f6951581" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_incremental_builder_3</scope><name>error</name></member>
      <member refid="classCGAL_1_1Polyhedron__incremental__builder__3_1a606eee04fdd0e73fb9e571aba416e7a9" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_incremental_builder_3</scope><name>Facet_handle</name></member>
      <member refid="classCGAL_1_1Polyhedron__incremental__builder__3_1ab3d834ff1dcadd23b55a4d1589ace457" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_incremental_builder_3</scope><name>Halfedge_handle</name></member>
      <member refid="classCGAL_1_1Polyhedron__incremental__builder__3_1a4d6b47abdda805ccc6142ecbe78002c7" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_incremental_builder_3</scope><name>HalfedgeDS</name></member>
      <member refid="classCGAL_1_1Polyhedron__incremental__builder__3_1afba104cd587fb0f7a4ac4a43ea3e9f75" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_incremental_builder_3</scope><name>Point_3</name></member>
      <member refid="classCGAL_1_1Polyhedron__incremental__builder__3_1acb8216ef40323e777f57cd4656d98c83" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_incremental_builder_3</scope><name>Polyhedron_incremental_builder_3</name></member>
      <member refid="classCGAL_1_1Polyhedron__incremental__builder__3_1a9170b2b38da4c51af6112903240e4c0ca3947a27b56138673255b394819e100d0" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_incremental_builder_3</scope><name>RELATIVE_INDEXING</name></member>
      <member refid="classCGAL_1_1Polyhedron__incremental__builder__3_1a69fdb0a788b8294a0de9f33edea26801" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_incremental_builder_3</scope><name>remove_unconnected_vertices</name></member>
      <member refid="classCGAL_1_1Polyhedron__incremental__builder__3_1af5afb910f4ee79b8c0f37517aa338b3b" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_incremental_builder_3</scope><name>rollback</name></member>
      <member refid="classCGAL_1_1Polyhedron__incremental__builder__3_1a95d43a6f6f66bf12b17bada5d2a44ede" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_incremental_builder_3</scope><name>size_type</name></member>
      <member refid="classCGAL_1_1Polyhedron__incremental__builder__3_1a2b82ced26f21b4c297aba57792029860" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_incremental_builder_3</scope><name>test_facet</name></member>
      <member refid="classCGAL_1_1Polyhedron__incremental__builder__3_1acf2f65abeb4af0b40fe99abf55854d69" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_incremental_builder_3</scope><name>vertex</name></member>
      <member refid="classCGAL_1_1Polyhedron__incremental__builder__3_1ab2b2fc2eaf5b797c0dcc277447ddb4be" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_incremental_builder_3</scope><name>Vertex_handle</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
