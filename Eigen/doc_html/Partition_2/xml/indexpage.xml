<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>User Manual</title>
    <detaileddescription>
<para><anchor id="index_1Chapter_2D_Polygon_Partitioning"/><anchor id="index_1chappolygonpartition"/> <simplesect kind="author"><para>Susan Hert</para></simplesect>
</para><sect1 id="index_1secpartition_2_intro">
<title>Introduction</title>
<para>A <emphasis>partition</emphasis> of a polygon <formula id="31">$ P$</formula> is a set of polygons such that the interiors of the polygons do not intersect and the union of the polygons is equal to the interior of the original polygon <formula id="31">$ P$</formula>. This chapter describes functions for partitioning planar polygons into two types of subpolygons - <formula id="0">$ y$</formula>-monotone polygons and convex polygons. The partitions are produced without introducing new (Steiner) vertices.</para><para>All the partitioning functions present the same interface to the user. That is, the user provides a pair of input iterators, <computeroutput>first</computeroutput> and <computeroutput>beyond</computeroutput>, an output iterator <computeroutput>result</computeroutput>, and a traits class <computeroutput>traits</computeroutput>. The points in the range [<computeroutput>first</computeroutput>, <computeroutput>beyond</computeroutput>) are assumed to define a simple polygon whose vertices are in counterclockwise order. The computed partition polygons, whose vertices are also oriented counterclockwise, are written to the sequence starting at position <computeroutput>result</computeroutput> and the past-the-end iterator for the resulting sequence of polygons is returned. The traits classes for the functions specify the types of the input points and output polygons as well as a few other types and function objects that are required by the various algorithms.</para></sect1>
<sect1 id="index_1secpartition_2_monotone">
<title>Monotone Partitioning</title>
<para>A <emphasis> <formula id="0">$ y$</formula>-monotone polygon</emphasis> is a polygon whose vertices <formula id="32">$ v_1, \ldots, v_n$</formula> can be divided into two chains <formula id="33">$ v_1, \ldots, v_k$</formula> and <formula id="34">$ v_k, \ldots, v_n, v_1$</formula>, such that any horizontal line intersects either chain at most once. For producing a <formula id="0">$ y$</formula>-monotone partition of a given polygon, the sweep-line algorithm presented in <ref refid="citelist_1CITEREF_bkos-cgaa-97" kindref="member">[1]</ref> is implemented by the function <computeroutput><ref refid="group__PkgPolygonPartitioning2_1ga35cdd9f604522c2ce4ca97d928a41f38" kindref="member">y_monotone_partition_2()</ref></computeroutput>. This algorithm runs in <formula id="3">$ O(n \log n)$</formula> time and requires <formula id="1">$ O(n)$</formula> space. This algorithm does not guarantee a bound on the number of polygons produced with respect to the optimal number.</para><para>For checking the validity of the partitions produced by <computeroutput><ref refid="group__PkgPolygonPartitioning2_1ga35cdd9f604522c2ce4ca97d928a41f38" kindref="member">y_monotone_partition_2()</ref></computeroutput>, we provide a function <computeroutput><ref refid="group__PkgPolygonPartitioning2_1gae795b8beb8626322c448706e20a8ac9b" kindref="member">is_y_monotone_2()</ref></computeroutput>, which determines if a sequence of points in 2D defines a <formula id="0">$ y$</formula>-monotone polygon or not. For examples of the use of these functions, see the corresponding reference pages.</para></sect1>
<sect1 id="index_1secpartition_2_convex">
<title>Convex Partitioning</title>
<para>Three functions are provided for producing convex partitions of polygons. One produces a partition that is optimal in the number of pieces. The other two functions produce approximately optimal convex partitions. Both these functions produce convex decompositions by first decomposing the polygon into simpler polygons; the first uses a triangulation and the second a monotone partition. These two functions both guarantee that they will produce no more than four times the optimal number of convex pieces but they differ in their runtime complexities. Though the triangulation-based approximation algorithm often results in fewer convex pieces, this is not always the case.</para><para><anchor id="index_1fig__P2_approxvsopti"/><image type="html" name="approximate_optimal_vs_optimal.png"></image>
 <image type="latex" name="approximate_optimal_vs_optimal.png" width="15cm"></image>
  <ref refid="index_1fig__P2_approxvsopti" kindref="member">fig__P2_approxvsopti</ref> Examples of an approximate optimal convex partition (left) and an optimal convex partition (right).  <linebreak/>
</para><para>An optimal convex partition can be produced using the function <computeroutput><ref refid="group__PkgPolygonPartitioning2_1ga3ca9fb1f363f9f792bfbbeca65ad5cc5" kindref="member">optimal_convex_partition_2()</ref></computeroutput>.</para><para>This function provides an implementation of Greene&apos;s dynamic programming algorithm for optimal partitioning <ref refid="citelist_1CITEREF_g-dpcp-83" kindref="member">[2]</ref>. This algorithm requires <formula id="4">$ O(n^4)$</formula> time and <formula id="5">$ O(n^3)$</formula> space in the worst case.</para><para>The function <computeroutput><ref refid="group__PkgPolygonPartitioning2_1gab9cf8c2b097fd562da09dd23d0c74edf" kindref="member">approx_convex_partition_2()</ref></computeroutput> implements the simple approximation algorithm of Hertel and Mehlhorn <ref refid="citelist_1CITEREF_hm-ftsp-83" kindref="member">[3]</ref> that produces a convex partitioning of a polygon from a triangulation by throwing out unnecessary triangulation edges. The triangulation used in this function is one produced by the 2-dimensional constrained triangulation package of CGAL. For a given triangulation, this convex partitioning algorithm requires <formula id="1">$ O(n)$</formula> time and space to construct a decomposition into no more than four times the optimal number of convex pieces.</para><para>The sweep-line approximation algorithm of Greene <ref refid="citelist_1CITEREF_g-dpcp-83" kindref="member">[2]</ref>, which, given a monotone partition of a polygon, produces a convex partition in <formula id="3">$ O(n \log n)$</formula> time and <formula id="1">$ O(n)$</formula> space, is implemented by the function <computeroutput><ref refid="group__PkgPolygonPartitioning2_1ga68139e1ee98dffa8f72cb295881f4647" kindref="member">greene_approx_convex_partition_2()</ref></computeroutput>. The function <computeroutput><ref refid="group__PkgPolygonPartitioning2_1ga35cdd9f604522c2ce4ca97d928a41f38" kindref="member">y_monotone_partition_2()</ref></computeroutput> described in Section <ref refid="index_1secpartition_2_monotone" kindref="member">Monotone Partitioning</ref> is used to produce the monotone partition. This algorithm provides the same worst-case approximation guarantee as the algorithm of Hertel and Mehlhorn implemented with <computeroutput><ref refid="group__PkgPolygonPartitioning2_1gab9cf8c2b097fd562da09dd23d0c74edf" kindref="member">approx_convex_partition_2()</ref></computeroutput> but can sometimes produce better results (i.e., convex partitions with fewer pieces).</para><para>Examples of the uses of all of these functions are provided with the corresponding reference pages. </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
