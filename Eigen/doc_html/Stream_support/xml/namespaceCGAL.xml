<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespaceCGAL" kind="namespace" language="C++">
    <compoundname>CGAL</compoundname>
    <innerclass refid="structCGAL_1_1Boolean__tag" prot="public">CGAL::Boolean_tag</innerclass>
    <innerclass refid="structCGAL_1_1Cast__function__object" prot="public">CGAL::Cast_function_object</innerclass>
    <innerclass refid="classCGAL_1_1CC__safe__handle" prot="public">CGAL::CC_safe_handle</innerclass>
    <innerclass refid="classCGAL_1_1Color" prot="public">CGAL::Color</innerclass>
    <innerclass refid="structCGAL_1_1Compact" prot="public">CGAL::Compact</innerclass>
    <innerclass refid="classCGAL_1_1Compact__container" prot="public">CGAL::Compact_container</innerclass>
    <innerclass refid="classCGAL_1_1Compact__container__base" prot="public">CGAL::Compact_container_base</innerclass>
    <innerclass refid="structCGAL_1_1Compact__container__traits" prot="public">CGAL::Compact_container_traits</innerclass>
    <innerclass refid="classCGAL_1_1Compare__to__less" prot="public">CGAL::Compare_to_less</innerclass>
    <innerclass refid="classCGAL_1_1Concurrent__compact__container" prot="public">CGAL::Concurrent_compact_container</innerclass>
    <innerclass refid="structCGAL_1_1Concurrent__compact__container__traits" prot="public">CGAL::Concurrent_compact_container_traits</innerclass>
    <innerclass refid="classCGAL_1_1Const__oneset__iterator" prot="public">CGAL::Const_oneset_iterator</innerclass>
    <innerclass refid="structCGAL_1_1Construct__array" prot="public">CGAL::Construct_array</innerclass>
    <innerclass refid="classCGAL_1_1Counting__iterator" prot="public">CGAL::Counting_iterator</innerclass>
    <innerclass refid="classCGAL_1_1Creator__1" prot="public">CGAL::Creator_1</innerclass>
    <innerclass refid="classCGAL_1_1Creator__2" prot="public">CGAL::Creator_2</innerclass>
    <innerclass refid="classCGAL_1_1Creator__3" prot="public">CGAL::Creator_3</innerclass>
    <innerclass refid="classCGAL_1_1Creator__4" prot="public">CGAL::Creator_4</innerclass>
    <innerclass refid="classCGAL_1_1Creator__5" prot="public">CGAL::Creator_5</innerclass>
    <innerclass refid="classCGAL_1_1Creator__uniform__2" prot="public">CGAL::Creator_uniform_2</innerclass>
    <innerclass refid="classCGAL_1_1Creator__uniform__3" prot="public">CGAL::Creator_uniform_3</innerclass>
    <innerclass refid="classCGAL_1_1Creator__uniform__4" prot="public">CGAL::Creator_uniform_4</innerclass>
    <innerclass refid="classCGAL_1_1Creator__uniform__5" prot="public">CGAL::Creator_uniform_5</innerclass>
    <innerclass refid="classCGAL_1_1Creator__uniform__6" prot="public">CGAL::Creator_uniform_6</innerclass>
    <innerclass refid="classCGAL_1_1Creator__uniform__7" prot="public">CGAL::Creator_uniform_7</innerclass>
    <innerclass refid="classCGAL_1_1Creator__uniform__8" prot="public">CGAL::Creator_uniform_8</innerclass>
    <innerclass refid="classCGAL_1_1Creator__uniform__9" prot="public">CGAL::Creator_uniform_9</innerclass>
    <innerclass refid="classCGAL_1_1Creator__uniform__d" prot="public">CGAL::Creator_uniform_d</innerclass>
    <innerclass refid="structCGAL_1_1Default" prot="public">CGAL::Default</innerclass>
    <innerclass refid="structCGAL_1_1Dereference" prot="public">CGAL::Dereference</innerclass>
    <innerclass refid="classCGAL_1_1Dispatch__or__drop__output__iterator" prot="public">CGAL::Dispatch_or_drop_output_iterator</innerclass>
    <innerclass refid="classCGAL_1_1Dispatch__output__iterator" prot="public">CGAL::Dispatch_output_iterator</innerclass>
    <innerclass refid="structCGAL_1_1Emptyset__iterator" prot="public">CGAL::Emptyset_iterator</innerclass>
    <innerclass refid="structCGAL_1_1Fast" prot="public">CGAL::Fast</innerclass>
    <innerclass refid="structCGAL_1_1Filter__iterator" prot="public">CGAL::Filter_iterator</innerclass>
    <innerclass refid="classCGAL_1_1Fourtuple" prot="public">CGAL::Fourtuple</innerclass>
    <innerclass refid="classCGAL_1_1Geomview__stream" prot="public">CGAL::Geomview_stream</innerclass>
    <innerclass refid="structCGAL_1_1Get__address" prot="public">CGAL::Get_address</innerclass>
    <innerclass refid="structCGAL_1_1Identity" prot="public">CGAL::Identity</innerclass>
    <innerclass refid="classCGAL_1_1In__place__list" prot="public">CGAL::In_place_list</innerclass>
    <innerclass refid="classCGAL_1_1In__place__list__base" prot="public">CGAL::In_place_list_base</innerclass>
    <innerclass refid="classCGAL_1_1Input__rep" prot="public">CGAL::Input_rep</innerclass>
    <innerclass refid="classCGAL_1_1Insert__iterator" prot="public">CGAL::Insert_iterator</innerclass>
    <innerclass refid="classCGAL_1_1Inverse__index" prot="public">CGAL::Inverse_index</innerclass>
    <innerclass refid="classCGAL_1_1Istream__iterator" prot="public">CGAL::Istream_iterator</innerclass>
    <innerclass refid="classCGAL_1_1Iterator__range" prot="public">CGAL::Iterator_range</innerclass>
    <innerclass refid="classCGAL_1_1Join__input__iterator__1" prot="public">CGAL::Join_input_iterator_1</innerclass>
    <innerclass refid="classCGAL_1_1Join__input__iterator__2" prot="public">CGAL::Join_input_iterator_2</innerclass>
    <innerclass refid="classCGAL_1_1Join__input__iterator__3" prot="public">CGAL::Join_input_iterator_3</innerclass>
    <innerclass refid="structCGAL_1_1Location__policy" prot="public">CGAL::Location_policy</innerclass>
    <innerclass refid="classCGAL_1_1Multiset" prot="public">CGAL::Multiset</innerclass>
    <innerclass refid="classCGAL_1_1N__step__adaptor" prot="public">CGAL::N_step_adaptor</innerclass>
    <innerclass refid="structCGAL_1_1Null__functor" prot="public">CGAL::Null_functor</innerclass>
    <innerclass refid="structCGAL_1_1Null__tag" prot="public">CGAL::Null_tag</innerclass>
    <innerclass refid="classCGAL_1_1Object" prot="public">CGAL::Object</innerclass>
    <innerclass refid="classCGAL_1_1Oneset__iterator" prot="public">CGAL::Oneset_iterator</innerclass>
    <innerclass refid="classCGAL_1_1Ostream__iterator" prot="public">CGAL::Ostream_iterator</innerclass>
    <innerclass refid="classCGAL_1_1Output__rep" prot="public">CGAL::Output_rep</innerclass>
    <innerclass refid="structCGAL_1_1Parallel__tag" prot="public">CGAL::Parallel_tag</innerclass>
    <innerclass refid="classCGAL_1_1Polyhedron__3" prot="public">CGAL::Polyhedron_3</innerclass>
    <innerclass refid="classCGAL_1_1Polyhedron__incremental__builder__3" prot="public">CGAL::Polyhedron_incremental_builder_3</innerclass>
    <innerclass refid="classCGAL_1_1Polyhedron__items__3" prot="public">CGAL::Polyhedron_items_3</innerclass>
    <innerclass refid="classCGAL_1_1Polyhedron__min__items__3" prot="public">CGAL::Polyhedron_min_items_3</innerclass>
    <innerclass refid="classCGAL_1_1Polyhedron__traits__3" prot="public">CGAL::Polyhedron_traits_3</innerclass>
    <innerclass refid="classCGAL_1_1Polyhedron__traits__with__normals__3" prot="public">CGAL::Polyhedron_traits_with_normals_3</innerclass>
    <innerclass refid="structCGAL_1_1Project__facet" prot="public">CGAL::Project_facet</innerclass>
    <innerclass refid="structCGAL_1_1Project__next" prot="public">CGAL::Project_next</innerclass>
    <innerclass refid="structCGAL_1_1Project__next__opposite" prot="public">CGAL::Project_next_opposite</innerclass>
    <innerclass refid="structCGAL_1_1Project__normal" prot="public">CGAL::Project_normal</innerclass>
    <innerclass refid="structCGAL_1_1Project__opposite__prev" prot="public">CGAL::Project_opposite_prev</innerclass>
    <innerclass refid="structCGAL_1_1Project__plane" prot="public">CGAL::Project_plane</innerclass>
    <innerclass refid="structCGAL_1_1Project__point" prot="public">CGAL::Project_point</innerclass>
    <innerclass refid="structCGAL_1_1Project__prev" prot="public">CGAL::Project_prev</innerclass>
    <innerclass refid="structCGAL_1_1Project__vertex" prot="public">CGAL::Project_vertex</innerclass>
    <innerclass refid="classCGAL_1_1Quadruple" prot="public">CGAL::Quadruple</innerclass>
    <innerclass refid="classCGAL_1_1Random__access__adaptor" prot="public">CGAL::Random_access_adaptor</innerclass>
    <innerclass refid="classCGAL_1_1Random__access__value__adaptor" prot="public">CGAL::Random_access_value_adaptor</innerclass>
    <innerclass refid="structCGAL_1_1Sequential__tag" prot="public">CGAL::Sequential_tag</innerclass>
    <innerclass refid="classCGAL_1_1Sixtuple" prot="public">CGAL::Sixtuple</innerclass>
    <innerclass refid="classCGAL_1_1Spatial__lock__grid__3" prot="public">CGAL::Spatial_lock_grid_3</innerclass>
    <innerclass refid="classCGAL_1_1Surface__mesh" prot="public">CGAL::Surface_mesh</innerclass>
    <innerclass refid="classCGAL_1_1Threetuple" prot="public">CGAL::Threetuple</innerclass>
    <innerclass refid="classCGAL_1_1Triple" prot="public">CGAL::Triple</innerclass>
    <innerclass refid="classCGAL_1_1Twotuple" prot="public">CGAL::Twotuple</innerclass>
    <innerclass refid="classCGAL_1_1Uncertain" prot="public">CGAL::Uncertain</innerclass>
    <innerclass refid="structCGAL_1_1value__type__traits" prot="public">CGAL::value_type_traits</innerclass>
    <innerclass refid="structCGAL_1_1value__type__traits_3_01std_1_1back__insert__iterator_3_01Container_01_4_01_4" prot="public">CGAL::value_type_traits&lt; std::back_insert_iterator&lt; Container &gt; &gt;</innerclass>
    <innerclass refid="structCGAL_1_1value__type__traits_3_01std_1_1front__insert__iterator_3_01Container_01_4_01_4" prot="public">CGAL::value_type_traits&lt; std::front_insert_iterator&lt; Container &gt; &gt;</innerclass>
    <innerclass refid="structCGAL_1_1value__type__traits_3_01std_1_1insert__iterator_3_01Container_01_4_01_4" prot="public">CGAL::value_type_traits&lt; std::insert_iterator&lt; Container &gt; &gt;</innerclass>
    <innerclass refid="classCGAL_1_1Verbose__ostream" prot="public">CGAL::Verbose_ostream</innerclass>
    <innernamespace refid="namespaceCGAL_1_1cpp11">CGAL::cpp11</innernamespace>
    <innernamespace refid="namespaceCGAL_1_1cpp98">CGAL::cpp98</innernamespace>
    <innernamespace refid="namespaceCGAL_1_1IO">CGAL::IO</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__PkgStlExtensionAssertions_1gac5eee7bb7edcc41dd3251042c5934dee" prot="public" static="no">
        <name>Failure_behaviour</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__PkgStlExtensionUtilities_1ga96bf435aef680d59e1bcb722239222dd" prot="public" static="no">
        <type><ref refid="structCGAL_1_1Location__policy" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Location_policy</ref>&lt; <ref refid="structCGAL_1_1Compact" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Compact</ref> &gt;</type>
        <definition>typedef Location_policy&lt; Compact &gt; CGAL::Compact_location</definition>
        <argsstring></argsstring>
        <name>Compact_location</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag" line="1" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__PkgStlExtensionUtilities_1ga8f61a2b71f265bad92d78ae606afc830" prot="public" static="no">
        <type><ref refid="structCGAL_1_1Location__policy" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Location_policy</ref>&lt; <ref refid="structCGAL_1_1Fast" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Fast</ref> &gt;</type>
        <definition>typedef Location_policy&lt; Fast &gt; CGAL::Fast_location</definition>
        <argsstring></argsstring>
        <name>Fast_location</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag" line="1" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__PkgStlExtensionUtilities_1ga89d5ecf1540b2ec0a2bf5dd003e186d0" prot="public" static="no">
        <type><ref refid="structCGAL_1_1Boolean__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::Boolean_tag</ref>&lt; false &gt;</type>
        <definition>typedef CGAL::Boolean_tag&lt; false &gt; CGAL::Tag_false</definition>
        <argsstring></argsstring>
        <name>Tag_false</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag" line="1" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__PkgStlExtensionUtilities_1gab3e2296107b5d26c32c8183028a217f1" prot="public" static="no">
        <type><ref refid="structCGAL_1_1Boolean__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::Boolean_tag</ref>&lt; true &gt;</type>
        <definition>typedef CGAL::Boolean_tag&lt; true &gt; CGAL::Tag_true</definition>
        <argsstring></argsstring>
        <name>Tag_true</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag" line="1" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__PkgStlExtensionAssertions_1ga22c85e11e31ba1f9954022947822983d" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* CGAL::Failure_function)(const char *type, const char *expression, const char *file, int line, const char *explanation)</definition>
        <argsstring>)(const char *type, const char *expression, const char *file, int line, const char *explanation)</argsstring>
        <name>Failure_function</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag" line="1" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__PkgStlExtensionAssertions_1ggac5eee7bb7edcc41dd3251042c5934deeafd47edae67791f804b5f1b616f2782ff" prot="public" static="no" mutable="no">
        <type></type>
        <definition>CGAL::ABORT</definition>
        <argsstring></argsstring>
        <name>ABORT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag" line="1" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="group__PkgStlExtensionAssertions_1ggac5eee7bb7edcc41dd3251042c5934deea03e7a9436476c257881f8ce46db26f7d" prot="public" static="no" mutable="no">
        <type></type>
        <definition>CGAL::EXIT</definition>
        <argsstring></argsstring>
        <name>EXIT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag" line="1" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="group__PkgStlExtensionAssertions_1ggac5eee7bb7edcc41dd3251042c5934deeaf7034bd0320b9bca60e23c0be889d728" prot="public" static="no" mutable="no">
        <type></type>
        <definition>CGAL::EXIT_WITH_SUCCESS</definition>
        <argsstring></argsstring>
        <name>EXIT_WITH_SUCCESS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag" line="1" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="group__PkgStlExtensionAssertions_1ggac5eee7bb7edcc41dd3251042c5934deea697442e04c769afa5f8506d7dd378ed4" prot="public" static="no" mutable="no">
        <type></type>
        <definition>CGAL::CONTINUE</definition>
        <argsstring></argsstring>
        <name>CONTINUE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag" line="1" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="group__PkgStlExtensionAssertions_1ggac5eee7bb7edcc41dd3251042c5934deea47ef91f2d5d0efcdc748c65519d3532d" prot="public" static="no" mutable="no">
        <type></type>
        <definition>CGAL::THROW_EXCEPTION</definition>
        <argsstring></argsstring>
        <name>THROW_EXCEPTION</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag" line="1" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__STLAlgos_1gacb8df77d1d07b9cfff3fdd2f5d9c4fda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::copy_n</definition>
        <argsstring>(InputIterator first, Size n, OutputIterator result)</argsstring>
        <name>copy_n</name>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type>Size</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__STLAlgos_1gab7b9c20885fa91f21f014d849a07e9c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; <ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref>, <ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref> &gt;</type>
        <definition>std::pair&lt; ForwardIterator, ForwardIterator &gt; CGAL::min_max_element</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last)</argsstring>
        <name>min_max_element</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__STLAlgos_1gaf404b198e27ef4018bc5185c9e7da751" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; <ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref>, <ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref> &gt;</type>
        <definition>std::pair&lt; ForwardIterator, ForwardIterator &gt; CGAL::min_max_element</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last, CompareMin comp_min, CompareMax comp_max)</argsstring>
        <name>min_max_element</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>last</declname>
        </param>
        <param>
          <type>CompareMin</type>
          <declname>comp_min</declname>
        </param>
        <param>
          <type>CompareMax</type>
          <declname>comp_max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__STLAlgos_1ga6c5d40930db429775066babac7c35d7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBidirectionalIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">BidirectionalIterator</ref></type>
        <definition>BidirectionalIterator CGAL::predecessor</definition>
        <argsstring>(BidirectionalIterator it)</argsstring>
        <name>predecessor</name>
        <param>
          <type><ref refid="classBidirectionalIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">BidirectionalIterator</ref></type>
          <declname>it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__STLAlgos_1gaeda33e3a2c07e29ca0f6d209182ced7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
        <definition>ForwardIterator CGAL::successor</definition>
        <argsstring>(ForwardIterator it)</argsstring>
        <name>successor</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__CompactContainer_1ga041244256532c067edf94bd31141558d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1CC__safe__handle" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CC_safe_handle</ref>&lt; CC_iterator &gt;</type>
        <definition>CC_safe_handle&lt; CC_iterator &gt; CGAL::make_cc_safe_handle</definition>
        <argsstring>(CC_iterator iterator)</argsstring>
        <name>make_cc_safe_handle</name>
        <param>
          <type>CC_iterator</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__projectionobjects_1gaa343b4e41668290985efff5def93ca7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Compare__to__less" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Compare_to_less</ref>&lt; F &gt;</type>
        <definition>Compare_to_less&lt; F &gt; CGAL::compare_to_less</definition>
        <argsstring>(const F &amp;f)</argsstring>
        <name>compare_to_less</name>
        <param>
          <type>const F &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceCGAL_1a266177f3e138c748f9906f7abb76320b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Iterator__range" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Iterator_range</ref>&lt; T &gt;</type>
        <definition>Iterator_range&lt; T &gt; CGAL::make_range</definition>
        <argsstring>(const T &amp;b, const T &amp;e)</argsstring>
        <name>make_range</name>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceCGAL_1a20aeec74989e860c5f20c11a844aad53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T CGAL::range_begin</definition>
        <argsstring>(Iterator_range&lt; T &gt; &amp;x)</argsstring>
        <name>range_begin</name>
        <param>
          <type><ref refid="classCGAL_1_1Iterator__range" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Iterator_range</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceCGAL_1acd0d74e5e80884f3c33b663e1e576435" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T CGAL::range_end</definition>
        <argsstring>(Iterator_range&lt; T &gt; &amp;x)</argsstring>
        <name>range_end</name>
        <param>
          <type><ref refid="classCGAL_1_1Iterator__range" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Iterator_range</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceCGAL_1af0be841eaa3070123a308353961d2695" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T CGAL::range_begin</definition>
        <argsstring>(const Iterator_range&lt; T &gt; &amp;x)</argsstring>
        <name>range_begin</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Iterator__range" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Iterator_range</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceCGAL_1a97c1af46c1e40a2f68495e0947e681b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T CGAL::range_end</definition>
        <argsstring>(const Iterator_range&lt; T &gt; &amp;x)</argsstring>
        <name>range_end</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Iterator__range" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Iterator_range</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStlExtensionAssertions_1gaf17f67aed4fb6c658ec7cb3f96f9d838" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__PkgStlExtensionAssertions_1ga22c85e11e31ba1f9954022947822983d" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Failure_function</ref></type>
        <definition>Failure_function CGAL::set_error_handler</definition>
        <argsstring>(Failure_function handler)</argsstring>
        <name>set_error_handler</name>
        <param>
          <type><ref refid="group__PkgStlExtensionAssertions_1ga22c85e11e31ba1f9954022947822983d" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Failure_function</ref></type>
          <declname>handler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStlExtensionAssertions_1ga7bf05b83505d915fb23cb23337b34c3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__PkgStlExtensionAssertions_1ga22c85e11e31ba1f9954022947822983d" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Failure_function</ref></type>
        <definition>Failure_function CGAL::set_warning_handler</definition>
        <argsstring>(Failure_function handler)</argsstring>
        <name>set_warning_handler</name>
        <param>
          <type><ref refid="group__PkgStlExtensionAssertions_1ga22c85e11e31ba1f9954022947822983d" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Failure_function</ref></type>
          <declname>handler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStlExtensionAssertions_1ga57511207f5935f17b3264e2d03124027" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__PkgStlExtensionAssertions_1gac5eee7bb7edcc41dd3251042c5934dee" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Failure_behaviour</ref></type>
        <definition>Failure_behaviour CGAL::set_error_behaviour</definition>
        <argsstring>(Failure_behaviour eb)</argsstring>
        <name>set_error_behaviour</name>
        <param>
          <type><ref refid="group__PkgStlExtensionAssertions_1gac5eee7bb7edcc41dd3251042c5934dee" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Failure_behaviour</ref></type>
          <declname>eb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStlExtensionAssertions_1gaeb4e85bca7bfc12e7fd086bf36a39a77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__PkgStlExtensionAssertions_1gac5eee7bb7edcc41dd3251042c5934dee" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Failure_behaviour</ref></type>
        <definition>Failure_behaviour CGAL::set_warning_behaviour</definition>
        <argsstring>(Failure_behaviour eb)</argsstring>
        <name>set_warning_behaviour</name>
        <param>
          <type><ref refid="group__PkgStlExtensionAssertions_1gac5eee7bb7edcc41dd3251042c5934dee" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Failure_behaviour</ref></type>
          <declname>eb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceCGAL_1ac2b5a2bea6096d64ce02286f57b733b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::read_off</definition>
        <argsstring>(Surface_mesh&lt; K &gt; &amp;mesh, const std::string &amp;filename)</argsstring>
        <name>read_off</name>
        <param>
          <type><ref refid="classCGAL_1_1Surface__mesh" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Surface_mesh.tag">Surface_mesh</ref>&lt; K &gt; &amp;</type>
          <declname>mesh</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceCGAL_1a7f39ea66288c1dac22ea46f8bc00382b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::write_off</definition>
        <argsstring>(const Surface_mesh&lt; K &gt; &amp;mesh, const std::string &amp;filename)</argsstring>
        <name>write_off</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Surface__mesh" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Surface_mesh.tag">Surface_mesh</ref>&lt; K &gt; &amp;</type>
          <declname>mesh</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceCGAL_1aab8747ae6384a9034ab2d76c9587b8fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::read_mesh</definition>
        <argsstring>(Surface_mesh&lt; K &gt; &amp;mesh, const std::string &amp;filename)</argsstring>
        <name>read_mesh</name>
        <param>
          <type><ref refid="classCGAL_1_1Surface__mesh" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Surface_mesh.tag">Surface_mesh</ref>&lt; K &gt; &amp;</type>
          <declname>mesh</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceCGAL_1a34db73ce1c76b70e97bcef45daf63468" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::write_mesh</definition>
        <argsstring>(const Surface_mesh&lt; K &gt; &amp;mesh, const std::string &amp;filename)</argsstring>
        <name>write_mesh</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Surface__mesh" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Surface_mesh.tag">Surface_mesh</ref>&lt; K &gt; &amp;</type>
          <declname>mesh</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceCGAL_1aa0a467594c743e29538b27e4e1fd36da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::generic_print_surface_mesh</definition>
        <argsstring>(std::ostream &amp;out, const Surface_mesh&lt; P &gt; &amp;M, Writer &amp;writer)</argsstring>
        <name>generic_print_surface_mesh</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Surface__mesh" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Surface_mesh.tag">Surface_mesh</ref>&lt; P &gt; &amp;</type>
          <declname>M</declname>
        </param>
        <param>
          <type>Writer &amp;</type>
          <declname>writer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSurface__mesh_1gaf10a90e383ba440f115eeb1553e44768" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::write_off</definition>
        <argsstring>(std::ostream &amp;os, const Surface_mesh&lt; P &gt; &amp;sm)</argsstring>
        <name>write_off</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Surface__mesh" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Surface_mesh.tag">Surface_mesh</ref>&lt; P &gt; &amp;</type>
          <declname>sm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSurface__mesh_1gab985fbde15bac9d10d7b211600e04702" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::read_off</definition>
        <argsstring>(std::istream &amp;is, Surface_mesh&lt; P &gt; &amp;sm)</argsstring>
        <name>read_off</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Surface__mesh" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Surface_mesh.tag">Surface_mesh</ref>&lt; P &gt; &amp;</type>
          <declname>sm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgDrawPolyhedron_1ga3ca458ed11c9fb052476b00227d93584" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::draw</definition>
        <argsstring>(const POLY &amp;apoly)</argsstring>
        <name>draw</name>
        <param>
          <type>const POLY &amp;</type>
          <declname>apoly</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgIOstreams_1gaf0ca61609ab0738a82652842880b2674" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__PkgIOstreams_1gac0c882c273b950eb9efca32420e2bef0" kindref="member">IO::Mode</ref></type>
        <definition>IO::Mode CGAL::get_mode</definition>
        <argsstring>(std::ios &amp;s)</argsstring>
        <name>get_mode</name>
        <param>
          <type>std::ios &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>returns the printing mode of the IO stream <computeroutput>s</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1gac0c882c273b950eb9efca32420e2bef0" kindref="member">CGAL::IO::Mode</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga5218b20eafd2543d9c70a09c344df8f2" kindref="member">CGAL::set_mode()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga62462cf829e614f6f2cd2cbec9a093d2" kindref="member">CGAL::set_ascii_mode()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1gaf8eb8599079dfa427e0f34098bcc790b" kindref="member">CGAL::set_binary_mode()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga2f2176255429973ea7bf156804a53857" kindref="member">CGAL::set_pretty_mode()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga120bfedfbc3d201a73b4824716e83990" kindref="member">CGAL::is_ascii()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga1e9b270aa13ca55a76209600c2d915fd" kindref="member">CGAL::is_binary()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga450ead59d56e074d8c3c4f594d2f7d0a" kindref="member">CGAL::is_pretty()</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/io.h" line="56" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgIOstreams_1ga62462cf829e614f6f2cd2cbec9a093d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__PkgIOstreams_1gac0c882c273b950eb9efca32420e2bef0" kindref="member">IO::Mode</ref></type>
        <definition>IO::Mode CGAL::set_ascii_mode</definition>
        <argsstring>(std::ios &amp;s)</argsstring>
        <name>set_ascii_mode</name>
        <param>
          <type>std::ios &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>sets the mode of the IO stream <computeroutput>s</computeroutput> to be the <computeroutput><ref refid="group__PkgIOstreams_1ggac0c882c273b950eb9efca32420e2bef0a13a67787bf1f5275048052d9001e1bee" kindref="member">IO::ASCII</ref></computeroutput> mode. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the previous mode of <computeroutput>s</computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1gac0c882c273b950eb9efca32420e2bef0" kindref="member">CGAL::IO::Mode</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga5218b20eafd2543d9c70a09c344df8f2" kindref="member">CGAL::set_mode()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1gaf8eb8599079dfa427e0f34098bcc790b" kindref="member">CGAL::set_binary_mode()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga2f2176255429973ea7bf156804a53857" kindref="member">CGAL::set_pretty_mode()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1gaf0ca61609ab0738a82652842880b2674" kindref="member">CGAL::get_mode()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga120bfedfbc3d201a73b4824716e83990" kindref="member">CGAL::is_ascii()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga1e9b270aa13ca55a76209600c2d915fd" kindref="member">CGAL::is_binary()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga450ead59d56e074d8c3c4f594d2f7d0a" kindref="member">CGAL::is_pretty()</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/io.h" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgIOstreams_1gaf8eb8599079dfa427e0f34098bcc790b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__PkgIOstreams_1gac0c882c273b950eb9efca32420e2bef0" kindref="member">IO::Mode</ref></type>
        <definition>IO::Mode CGAL::set_binary_mode</definition>
        <argsstring>(std::ios &amp;s)</argsstring>
        <name>set_binary_mode</name>
        <param>
          <type>std::ios &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1gac0c882c273b950eb9efca32420e2bef0" kindref="member">CGAL::IO::Mode</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga5218b20eafd2543d9c70a09c344df8f2" kindref="member">CGAL::set_mode()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga62462cf829e614f6f2cd2cbec9a093d2" kindref="member">CGAL::set_ascii_mode()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga2f2176255429973ea7bf156804a53857" kindref="member">CGAL::set_pretty_mode()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1gaf0ca61609ab0738a82652842880b2674" kindref="member">CGAL::get_mode()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga120bfedfbc3d201a73b4824716e83990" kindref="member">CGAL::is_ascii()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga1e9b270aa13ca55a76209600c2d915fd" kindref="member">CGAL::is_binary()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga450ead59d56e074d8c3c4f594d2f7d0a" kindref="member">CGAL::is_pretty()</ref></computeroutput></para></simplesect>
sets the mode of the IO stream <computeroutput>s</computeroutput> to be the <computeroutput><ref refid="group__PkgIOstreams_1ggac0c882c273b950eb9efca32420e2bef0aa83308e9472ea595943a6b76af054e98" kindref="member">IO::BINARY</ref></computeroutput> mode. Returns the previous mode of <computeroutput>s</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/io.h" line="91" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgIOstreams_1ga5218b20eafd2543d9c70a09c344df8f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__PkgIOstreams_1gac0c882c273b950eb9efca32420e2bef0" kindref="member">IO::Mode</ref></type>
        <definition>IO::Mode CGAL::set_mode</definition>
        <argsstring>(std::ios &amp;s, IO::Mode m)</argsstring>
        <name>set_mode</name>
        <param>
          <type>std::ios &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="group__PkgIOstreams_1gac0c882c273b950eb9efca32420e2bef0" kindref="member">IO::Mode</ref></type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>sets the printing mode of the IO stream <computeroutput>s</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1gac0c882c273b950eb9efca32420e2bef0" kindref="member">CGAL::IO::Mode</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga62462cf829e614f6f2cd2cbec9a093d2" kindref="member">CGAL::set_ascii_mode()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1gaf8eb8599079dfa427e0f34098bcc790b" kindref="member">CGAL::set_binary_mode()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga2f2176255429973ea7bf156804a53857" kindref="member">CGAL::set_pretty_mode()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1gaf0ca61609ab0738a82652842880b2674" kindref="member">CGAL::get_mode()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga120bfedfbc3d201a73b4824716e83990" kindref="member">CGAL::is_ascii()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga1e9b270aa13ca55a76209600c2d915fd" kindref="member">CGAL::is_binary()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga450ead59d56e074d8c3c4f594d2f7d0a" kindref="member">CGAL::is_pretty()</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/io.h" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgIOstreams_1ga2f2176255429973ea7bf156804a53857" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__PkgIOstreams_1gac0c882c273b950eb9efca32420e2bef0" kindref="member">IO::Mode</ref></type>
        <definition>IO::Mode CGAL::set_pretty_mode</definition>
        <argsstring>(std::ios &amp;s)</argsstring>
        <name>set_pretty_mode</name>
        <param>
          <type>std::ios &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>sets the mode of the IO stream <computeroutput>s</computeroutput> to be the <computeroutput><ref refid="group__PkgIOstreams_1ggac0c882c273b950eb9efca32420e2bef0a5d045c18474dfd381b1c2b1dd1e612c5" kindref="member">IO::PRETTY</ref></computeroutput> mode. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the previous mode of <computeroutput>s</computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1gac0c882c273b950eb9efca32420e2bef0" kindref="member">CGAL::IO::Mode</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga5218b20eafd2543d9c70a09c344df8f2" kindref="member">CGAL::set_mode()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga62462cf829e614f6f2cd2cbec9a093d2" kindref="member">CGAL::set_ascii_mode()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1gaf8eb8599079dfa427e0f34098bcc790b" kindref="member">CGAL::set_binary_mode()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1gaf0ca61609ab0738a82652842880b2674" kindref="member">CGAL::get_mode()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga120bfedfbc3d201a73b4824716e83990" kindref="member">CGAL::is_ascii()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga1e9b270aa13ca55a76209600c2d915fd" kindref="member">CGAL::is_binary()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga450ead59d56e074d8c3c4f594d2f7d0a" kindref="member">CGAL::is_pretty()</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/io.h" line="125" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgIOstreams_1ga120bfedfbc3d201a73b4824716e83990" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::is_ascii</definition>
        <argsstring>(std::ios &amp;s)</argsstring>
        <name>is_ascii</name>
        <param>
          <type>std::ios &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>checks if the IO stream <computeroutput>s</computeroutput> is in <computeroutput><ref refid="group__PkgIOstreams_1ggac0c882c273b950eb9efca32420e2bef0a13a67787bf1f5275048052d9001e1bee" kindref="member">IO::ASCII</ref></computeroutput> mode. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1gac0c882c273b950eb9efca32420e2bef0" kindref="member">CGAL::IO::Mode</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga5218b20eafd2543d9c70a09c344df8f2" kindref="member">CGAL::set_mode()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga62462cf829e614f6f2cd2cbec9a093d2" kindref="member">CGAL::set_ascii_mode()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1gaf8eb8599079dfa427e0f34098bcc790b" kindref="member">CGAL::set_binary_mode()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga2f2176255429973ea7bf156804a53857" kindref="member">CGAL::set_pretty_mode()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1gaf0ca61609ab0738a82652842880b2674" kindref="member">CGAL::get_mode()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga1e9b270aa13ca55a76209600c2d915fd" kindref="member">CGAL::is_binary()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga450ead59d56e074d8c3c4f594d2f7d0a" kindref="member">CGAL::is_pretty()</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/io.h" line="187" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgIOstreams_1ga1e9b270aa13ca55a76209600c2d915fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::is_binary</definition>
        <argsstring>(std::ios &amp;s)</argsstring>
        <name>is_binary</name>
        <param>
          <type>std::ios &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>checks if the IO stream <computeroutput>s</computeroutput> is in <computeroutput><ref refid="group__PkgIOstreams_1ggac0c882c273b950eb9efca32420e2bef0aa83308e9472ea595943a6b76af054e98" kindref="member">IO::BINARY</ref></computeroutput> mode. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1gac0c882c273b950eb9efca32420e2bef0" kindref="member">CGAL::IO::Mode</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga5218b20eafd2543d9c70a09c344df8f2" kindref="member">CGAL::set_mode()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga62462cf829e614f6f2cd2cbec9a093d2" kindref="member">CGAL::set_ascii_mode()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1gaf8eb8599079dfa427e0f34098bcc790b" kindref="member">CGAL::set_binary_mode()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga2f2176255429973ea7bf156804a53857" kindref="member">CGAL::set_pretty_mode()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1gaf0ca61609ab0738a82652842880b2674" kindref="member">CGAL::get_mode()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga120bfedfbc3d201a73b4824716e83990" kindref="member">CGAL::is_ascii()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga450ead59d56e074d8c3c4f594d2f7d0a" kindref="member">CGAL::is_pretty()</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/io.h" line="204" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgIOstreams_1ga450ead59d56e074d8c3c4f594d2f7d0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::is_pretty</definition>
        <argsstring>(std::ios &amp;s)</argsstring>
        <name>is_pretty</name>
        <param>
          <type>std::ios &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>checks if the IO stream <computeroutput>s</computeroutput> is in <computeroutput><ref refid="group__PkgIOstreams_1ggac0c882c273b950eb9efca32420e2bef0a5d045c18474dfd381b1c2b1dd1e612c5" kindref="member">IO::PRETTY</ref></computeroutput> mode. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1gac0c882c273b950eb9efca32420e2bef0" kindref="member">CGAL::IO::Mode</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga5218b20eafd2543d9c70a09c344df8f2" kindref="member">CGAL::set_mode()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga62462cf829e614f6f2cd2cbec9a093d2" kindref="member">CGAL::set_ascii_mode()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1gaf8eb8599079dfa427e0f34098bcc790b" kindref="member">CGAL::set_binary_mode()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga2f2176255429973ea7bf156804a53857" kindref="member">CGAL::set_pretty_mode()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1gaf0ca61609ab0738a82652842880b2674" kindref="member">CGAL::get_mode()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga120bfedfbc3d201a73b4824716e83990" kindref="member">CGAL::is_ascii()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga1e9b270aa13ca55a76209600c2d915fd" kindref="member">CGAL::is_binary()</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/io.h" line="221" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgIOstreams_1ga83bfd4dfd12efab9efbb2a77e8d1f3b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Output__rep" kindref="compound">Output_rep</ref>&lt; T &gt;</type>
        <definition>Output_rep&lt;T&gt; CGAL::oformat</definition>
        <argsstring>(const T &amp;t)</argsstring>
        <name>oformat</name>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Convenience function to construct an output representation (<computeroutput><ref refid="classCGAL_1_1Output__rep" kindref="compound">Output_rep</ref></computeroutput>) for type <computeroutput>T</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Generic <ref refid="namespaceCGAL_1_1IO" kindref="compound">IO</ref> for type <computeroutput>T</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/io.h" line="230" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgIOstreams_1ga0be547927c2d0f532ee8ccae1dbab043" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Input__rep" kindref="compound">Input_rep</ref>&lt; T &gt;</type>
        <definition>Input_rep&lt;T&gt; CGAL::iformat</definition>
        <argsstring>(const T &amp;t)</argsstring>
        <name>iformat</name>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>The definition of this function is completely symmetric to <computeroutput><ref refid="group__PkgIOstreams_1ga83bfd4dfd12efab9efbb2a77e8d1f3b4" kindref="member">oformat()</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/io.h" line="237" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgIOstreams_1gaa98ef8b424ecc8d2f5da220a3dadd718" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Output__rep" kindref="compound">Output_rep</ref>&lt; T, F &gt;</type>
        <definition>Output_rep&lt;T,F&gt; CGAL::oformat</definition>
        <argsstring>(const T &amp;t, F)</argsstring>
        <name>oformat</name>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>F</type>
        </param>
        <briefdescription>
<para>Convenience function to construct an output representation (<computeroutput><ref refid="classCGAL_1_1Output__rep" kindref="compound">Output_rep</ref></computeroutput>) for type <computeroutput>T</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Generic <ref refid="namespaceCGAL_1_1IO" kindref="compound">IO</ref> for type <computeroutput>T</computeroutput> with formatting tag. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/io.h" line="247" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__IOstreamOperators_1ga525f8afc1fb75eb966517c447f1968ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream&amp; CGAL::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, Class c)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>Class</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Inserts object <computeroutput>c</computeroutput> in the stream <computeroutput>os</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>os</computeroutput>.</para><para>CGAL defines output operators for classes that are derived from the class <computeroutput>ostream</computeroutput>. This allows to write to ostreams as <computeroutput>cout</computeroutput> or <computeroutput>cerr</computeroutput>, as well as to <computeroutput>std::ostringstream</computeroutput> and <computeroutput>std::ofstream</computeroutput>. The output operator is defined for all classes in the CGAL <computeroutput>Kernel</computeroutput> and for the class <computeroutput><ref refid="classCGAL_1_1Color" kindref="compound">Color</ref></computeroutput> as well.</para><para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga5218b20eafd2543d9c70a09c344df8f2" kindref="member">CGAL::set_mode()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga62462cf829e614f6f2cd2cbec9a093d2" kindref="member">CGAL::set_ascii_mode()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1gaf8eb8599079dfa427e0f34098bcc790b" kindref="member">CGAL::set_binary_mode()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga2f2176255429973ea7bf156804a53857" kindref="member">CGAL::set_pretty_mode()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1gaf0ca61609ab0738a82652842880b2674" kindref="member">CGAL::get_mode()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga120bfedfbc3d201a73b4824716e83990" kindref="member">CGAL::is_ascii()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga1e9b270aa13ca55a76209600c2d915fd" kindref="member">CGAL::is_binary()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga450ead59d56e074d8c3c4f594d2f7d0a" kindref="member">CGAL::is_pretty()</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/io.h" line="269" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__IOstreamOperators_1gae89c813a0404eae7e0901ed8f3c92915" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>istream &amp;</type>
        <definition>istream&amp; CGAL::operator&gt;&gt;</definition>
        <argsstring>(istream &amp;is, Class c)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>Class</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>CGAL defines input operators for classes that are derived from the class <computeroutput>istream</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>This allows to read from istreams as <computeroutput>std::cin</computeroutput>, as well as from <computeroutput>std::istringstream</computeroutput> and <computeroutput>std::ifstream</computeroutput>. The input operator is defined for all classes in the CGAL <computeroutput>Kernel</computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga5218b20eafd2543d9c70a09c344df8f2" kindref="member">CGAL::set_mode()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga62462cf829e614f6f2cd2cbec9a093d2" kindref="member">CGAL::set_ascii_mode()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1gaf8eb8599079dfa427e0f34098bcc790b" kindref="member">CGAL::set_binary_mode()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga2f2176255429973ea7bf156804a53857" kindref="member">CGAL::set_pretty_mode()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1gaf0ca61609ab0738a82652842880b2674" kindref="member">CGAL::get_mode()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga120bfedfbc3d201a73b4824716e83990" kindref="member">CGAL::is_ascii()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga1e9b270aa13ca55a76209600c2d915fd" kindref="member">CGAL::is_binary()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgIOstreams_1ga450ead59d56e074d8c3c4f594d2f7d0a" kindref="member">CGAL::is_pretty()</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/io.h" line="290" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag" line="1" column="1"/>
  </compounddef>
</doxygen>
