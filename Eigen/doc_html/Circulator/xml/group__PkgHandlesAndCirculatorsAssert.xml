<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__PkgHandlesAndCirculatorsAssert" kind="group">
    <compoundname>PkgHandlesAndCirculatorsAssert</compoundname>
    <title>Assertions</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgHandlesAndCirculatorsAssert_1ga7cbd5c6db884f5a4aace399c337d31b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Assert_circulator</definition>
        <argsstring>(const C &amp;c)</argsstring>
        <name>Assert_circulator</name>
        <param>
          <type>const C &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>checks at compile time if its argument is a circulator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="29" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgHandlesAndCirculatorsAssert_1ga28a51d41a222f90c19b75bc6f5e1155f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Assert_iterator</definition>
        <argsstring>(const I &amp;i)</argsstring>
        <name>Assert_iterator</name>
        <param>
          <type>const I &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>checks at compile time if its argument is an iterator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="38" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgHandlesAndCirculatorsAssert_1ga9bfcd5e48c98a1ccc7b74f8e8f302730" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class IC</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Assert_circulator_or_iterator</definition>
        <argsstring>(const IC &amp;i)</argsstring>
        <name>Assert_circulator_or_iterator</name>
        <param>
          <type>const IC &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>checks at compile time if its argument is a circulator or iterator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="47" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgHandlesAndCirculatorsAssert_1gae03ebcb9a583408d6db5f9cc3b11ebe7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Assert_input_category</definition>
        <argsstring>(const I &amp;i)</argsstring>
        <name>Assert_input_category</name>
        <param>
          <type>const I &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgHandlesAndCirculatorsAssert_1gaa60474dae8730bf824f506cc75eb845d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Assert_output_category</definition>
        <argsstring>(const I &amp;i)</argsstring>
        <name>Assert_output_category</name>
        <param>
          <type>const I &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgHandlesAndCirculatorsAssert_1gab791ef74a8a4c15fd0b99080c1e9b632" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class IC</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Assert_forward_category</definition>
        <argsstring>(const IC &amp;ic)</argsstring>
        <name>Assert_forward_category</name>
        <param>
          <type>const IC &amp;</type>
          <declname>ic</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgHandlesAndCirculatorsAssert_1ga11d32256668de73db038afb63080da9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class IC</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Assert_bidirectional_category</definition>
        <argsstring>(const IC &amp;ic)</argsstring>
        <name>Assert_bidirectional_category</name>
        <param>
          <type>const IC &amp;</type>
          <declname>ic</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgHandlesAndCirculatorsAssert_1ga8c5ac1c87cd7c3d6a98816354eac5031" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class IC</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Assert_random_access_category</definition>
        <argsstring>(const IC &amp;ic)</argsstring>
        <name>Assert_random_access_category</name>
        <param>
          <type>const IC &amp;</type>
          <declname>ic</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="82" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Each of the following assertions, applicable to an iterator or a circulator or both, checks at compile time if its argument is of the kind stated in the assertions name, i.e. a circulator, an iterator, or a particular category of either an iterator or a circulator. </para>    </briefdescription>
    <detaileddescription>
<para>Note that neither input nor output circulators exists.</para><para><simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Circulator__tag" kindref="compound">Circulator_tag</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Circulator__traits" kindref="compound">Circulator_traits</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgHandlesAndCirculatorsFunctions_1gaa16b4ad8f12d7ba8afdaae7da609c900" kindref="member">query_circulator_or_iterator</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCirculator" kindref="compound">Circulator</ref></computeroutput> </para></simplesect>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
