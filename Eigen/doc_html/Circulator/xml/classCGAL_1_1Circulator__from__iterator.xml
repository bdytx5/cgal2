<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Circulator__from__iterator" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Circulator_from_iterator</compoundname>
    <includes local="no">CGAL/circulator.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>I</declname>
        <defname>I</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <description><para>In addition all types required for circulators are provided. </para></description>
      <memberdef kind="typedef" id="classCGAL_1_1Circulator__from__iterator_1ad509591e95d570eff191443e76d621f9" prot="public" static="no">
        <type>I</type>
        <definition>typedef I CGAL::Circulator_from_iterator&lt; I &gt;::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="234" column="1" bodyfile="CGAL/circulator.h" bodystart="234" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Circulator__from__iterator_1ae110bf2098bbdabb9edbea3e293d47aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Circulator_from_iterator&lt; I &gt;::Circulator_from_iterator</definition>
        <argsstring>()</argsstring>
        <name>Circulator_from_iterator</name>
        <briefdescription>
<para>a circulator <computeroutput>c</computeroutput> on an empty sequence. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="244" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Circulator__from__iterator_1ab35582d4386ba9204bc45bf0cb0be2d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Circulator_from_iterator&lt; I &gt;::Circulator_from_iterator</definition>
        <argsstring>(const I &amp;begin, const I &amp;end, const I &amp;cur=begin)</argsstring>
        <name>Circulator_from_iterator</name>
        <param>
          <type>const I &amp;</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const I &amp;</type>
          <declname>end</declname>
        </param>
        <param>
          <type>const I &amp;</type>
          <declname>cur</declname>
          <defval>begin</defval>
        </param>
        <briefdescription>
<para>a circulator <computeroutput>c</computeroutput> initialized to refer to the element <computeroutput>*cur</computeroutput> in a range <computeroutput>[begin, end)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The circulator <computeroutput>c</computeroutput> refers to a empty sequence if <computeroutput>begin==end</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="253" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Circulator__from__iterator_1a88c1fe51b81e96d0afb4c45e0aa4d322" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Circulator_from_iterator&lt; I &gt;::Circulator_from_iterator</definition>
        <argsstring>(const Circulator_from_iterator&lt; I, T, Size, Dist &gt; &amp;d, const I &amp;cur)</argsstring>
        <name>Circulator_from_iterator</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Circulator__from__iterator" kindref="compound">Circulator_from_iterator</ref>&lt; I, T, Size, Dist &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const I &amp;</type>
          <declname>cur</declname>
        </param>
        <briefdescription>
<para>a copy of circulator <computeroutput>d</computeroutput> referring to the element <computeroutput>*cur</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The circulator <computeroutput>c</computeroutput> refers to a empty sequence if <computeroutput>d</computeroutput> does so. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="262" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The adaptor <computeroutput><ref refid="classCGAL_1_1Circulator__from__iterator" kindref="compound">Circulator_from_iterator</ref></computeroutput> converts two iterators of type <computeroutput>I</computeroutput>, a begin and a past-the-end value, to a circulator of equal category. </para>    </briefdescription>
    <detaileddescription>
<para>The iterator must be at least of the forward iterator category. The circulator will be mutable or non-mutable according to the iterator. Iterators provide no <computeroutput>size_type</computeroutput>. This adapter assumes <computeroutput>std::size_t</computeroutput> instead.</para><para><bold>Operations</bold><linebreak/>
</para><para>The adaptor conforms to the requirements of the respective circulator category. An additional member function <computeroutput>current_iterator()</computeroutput> returns the current iterator pointing to the same position as the circulator does.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Container__from__circulator" kindref="compound">Container_from_circulator</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Circulator__from__container" kindref="compound">Circulator_from_container</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCirculator" kindref="compound">Circulator</ref></computeroutput></para></simplesect>
<bold>Example</bold><linebreak/>
</para><para>The following program composes two adaptors - from an iterator to a circulator and back to an iterator. It applies an STL sort algorithm on a STL vector containing three elements. The resulting vector will be <computeroutput>[2 5 9]</computeroutput> as it is checked by the assertions. The program is part of the CGAL distribution.</para><para><linebreak/>
<bold>File</bold> <ref refid="Circulator_2circulator_prog1_8cpp-example" kindref="compound">Circulator/circulator_prog1.cpp</ref> <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/basic.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/circulator.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;::iterator<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/><ref refid="classCGAL_1_1Circulator__from__iterator" kindref="compound">CGAL::Circulator_from_iterator&lt;I&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Circulator;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/><ref refid="classCGAL_1_1Container__from__circulator" kindref="compound">CGAL::Container_from_circulator&lt;Circulator&gt;</ref><sp/>Container;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/>Container::iterator<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>v;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back(9);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Circulator<sp/>c(<sp/>v.begin(),<sp/>v.end());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Container<sp/><sp/>container(<sp/>c);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort(<sp/>container.begin(),<sp/>container.end());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Iterator<sp/>i<sp/>=<sp/>container.begin();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>*i<sp/>==<sp/>2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i++;<sp/><sp/><sp/><sp/>assert(<sp/>*i<sp/>==<sp/>5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i++;<sp/><sp/><sp/><sp/>assert(<sp/>*i<sp/>==<sp/>9);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i++;<sp/><sp/><sp/><sp/>assert(<sp/><sp/>i<sp/>==<sp/>container.end());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>Another example usage for this adaptor is a random access circulator over the built-in C arrays. Given an array of type <computeroutput>T*</computeroutput> with a begin pointer <computeroutput>b</computeroutput> and a past-the-end pointer <computeroutput>e</computeroutput> the adaptor <computeroutput><ref refid="classCGAL_1_1Circulator__from__iterator" kindref="compound">Circulator_from_iterator</ref>&lt;T*&gt; c(b,e)</computeroutput> is a random access circulator <computeroutput>c</computeroutput> over this array. </para>    </detaileddescription>
    <location file="CGAL/circulator.h" line="224" column="1" bodyfile="CGAL/circulator.h" bodystart="224" bodyend="268"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Circulator__from__iterator_1ae110bf2098bbdabb9edbea3e293d47aa" prot="public" virt="non-virtual"><scope>CGAL::Circulator_from_iterator</scope><name>Circulator_from_iterator</name></member>
      <member refid="classCGAL_1_1Circulator__from__iterator_1ab35582d4386ba9204bc45bf0cb0be2d8" prot="public" virt="non-virtual"><scope>CGAL::Circulator_from_iterator</scope><name>Circulator_from_iterator</name></member>
      <member refid="classCGAL_1_1Circulator__from__iterator_1a88c1fe51b81e96d0afb4c45e0aa4d322" prot="public" virt="non-virtual"><scope>CGAL::Circulator_from_iterator</scope><name>Circulator_from_iterator</name></member>
      <member refid="classCGAL_1_1Circulator__from__iterator_1ad509591e95d570eff191443e76d621f9" prot="public" virt="non-virtual"><scope>CGAL::Circulator_from_iterator</scope><name>iterator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
