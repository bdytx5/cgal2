<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__PkgHandlesAndCirculatorsTags" kind="group">
    <compoundname>PkgHandlesAndCirculatorsTags</compoundname>
    <title>Compile Time Tags</title>
    <innerclass refid="structCGAL_1_1Circulator__tag" prot="public">CGAL::Circulator_tag</innerclass>
    <innerclass refid="structCGAL_1_1Iterator__tag" prot="public">CGAL::Iterator_tag</innerclass>
    <innerclass refid="structCGAL_1_1Forward__circulator__tag" prot="public">CGAL::Forward_circulator_tag</innerclass>
    <innerclass refid="structCGAL_1_1Bidirectional__circulator__tag" prot="public">CGAL::Bidirectional_circulator_tag</innerclass>
    <innerclass refid="structCGAL_1_1Random__access__circulator__tag" prot="public">CGAL::Random_access_circulator_tag</innerclass>
    <briefdescription>
<para>Iterators and circulators as well as different categories of circulators can be distinguished with the use of discriminating functions and the following circulator tags. </para>    </briefdescription>
    <detaileddescription>
<para>A couple of base classes simplify the task of writing own circulators. They declare the appropriate tags and the local types needed for circulators. To use the tags or base classes only it is sufficient to include:</para><para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgHandlesAndCirculatorsFunctions_1gaa16b4ad8f12d7ba8afdaae7da609c900" kindref="member">query_circulator_or_iterator</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Circulator__traits" kindref="compound">Circulator_traits</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgHandlesAndCirculatorsAssert_1ga7cbd5c6db884f5a4aace399c337d31b9" kindref="member">Assert_circulator</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgHandlesAndCirculatorsFunctions_1gae4f6b9dc3b933f01f2d0275a7bf8b308" kindref="member">CGAL_For_all</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgHandlesAndCirculatorsFunctions_1gaf4e8c8285d91a1d8acd582191da0f255" kindref="member">is_empty_range</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCirculator" kindref="compound">Circulator</ref></computeroutput></para></simplesect>
<bold>Example</bold><linebreak/>
</para><para>The above declarations can be used to distinguish between iterators and circulators and between different circulator categories. The assertions can be used to protect a templatized algorithm against instantiations that do not fulfill the requirements. The following example program illustrates both.</para><para><linebreak/>
<bold>File</bold> <ref refid="Circulator_2circulator_prog3_8cpp-example" kindref="compound">Circulator/circulator_prog3.cpp</ref> <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/circulator.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>foo(<sp/>C<sp/>c,<sp/>std::forward_iterator_tag)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__PkgHandlesAndCirculatorsAssert_1ga7cbd5c6db884f5a4aace399c337d31b9" kindref="member">CGAL::Assert_circulator</ref>(<sp/>c);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__PkgHandlesAndCirculatorsAssert_1gab791ef74a8a4c15fd0b99080c1e9b632" kindref="member">CGAL::Assert_forward_category</ref>(<sp/>c);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>foo(<sp/>C<sp/>c,<sp/>std::random_access_iterator_tag)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__PkgHandlesAndCirculatorsAssert_1ga7cbd5c6db884f5a4aace399c337d31b9" kindref="member">CGAL::Assert_circulator</ref>(<sp/>c);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__PkgHandlesAndCirculatorsAssert_1ga8c5ac1c87cd7c3d6a98816354eac5031" kindref="member">CGAL::Assert_random_access_category</ref>(<sp/>c);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>foo(<sp/>I<sp/>i,<sp/><ref refid="structCGAL_1_1Iterator__tag" kindref="compound">CGAL::Iterator_tag</ref>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__PkgHandlesAndCirculatorsAssert_1ga28a51d41a222f90c19b75bc6f5e1155f" kindref="member">CGAL::Assert_iterator</ref>(<sp/>i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>3;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>foo(<sp/>C<sp/>c,<sp/><ref refid="structCGAL_1_1Circulator__tag" kindref="compound">CGAL::Circulator_tag</ref>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__PkgHandlesAndCirculatorsAssert_1ga7cbd5c6db884f5a4aace399c337d31b9" kindref="member">CGAL::Assert_circulator</ref>(<sp/>c);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;C&gt;<sp/>Traits;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Traits::iterator_category<sp/>iterator_category;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>foo(<sp/>c,<sp/>iterator_category());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>IC&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>foo(<sp/>IC<sp/>ic)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Circulator__traits" kindref="compound">CGAL::Circulator_traits&lt;IC&gt;</ref><sp/>Traits;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Traits::category<sp/>category;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>foo(<sp/>ic,<sp/>category());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Forward__circulator__base" kindref="compound">CGAL::Forward_circulator_base&lt;int&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Random__access__circulator__base" kindref="compound">CGAL::Random_access_circulator_base&lt;int&gt;</ref><sp/>R;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>F<sp/>f<sp/>=<sp/>F();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>R<sp/>r<sp/>=<sp/>R();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::list&lt;int&gt;<sp/>l;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>foo(<sp/>f)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>==<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>foo(<sp/>r)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>==<sp/>2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>foo(<sp/>l.begin())<sp/>==<sp/>3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>    </detaileddescription>
  </compounddef>
</doxygen>
