<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Container__from__circulator" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Container_from_circulator</compoundname>
    <includes local="no">CGAL/circulator.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>C</declname>
        <defname>C</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classCGAL_1_1Container__from__circulator_1a96cb97c3d7279fdf7ae9dd430929b675" prot="public" static="no">
        <type>C</type>
        <definition>typedef C CGAL::Container_from_circulator&lt; C &gt;::Circulator</definition>
        <argsstring></argsstring>
        <name>Circulator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="439" column="1" bodyfile="CGAL/circulator.h" bodystart="439" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Container__from__circulator_1a89528b6126472e79c6f8c606fbfb5c1a" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Container_from_circulator&lt; C &gt;::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="444" column="1" bodyfile="CGAL/circulator.h" bodystart="444" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Container__from__circulator_1a114e806d4a02054c80cea96860ae2998" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Container_from_circulator&lt; C &gt;::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="449" column="1" bodyfile="CGAL/circulator.h" bodystart="449" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Container__from__circulator_1a1d4e690b43496bd572e444798aadef44" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Container_from_circulator&lt; C &gt;::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="454" column="1" bodyfile="CGAL/circulator.h" bodystart="454" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Container__from__circulator_1a4eb9069880d3c899abc9bbeb47cb8789" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Container_from_circulator&lt; C &gt;::reference</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="459" column="1" bodyfile="CGAL/circulator.h" bodystart="459" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Container__from__circulator_1a6fd4a95f1ea30b80b7bec7729f24023b" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Container_from_circulator&lt; C &gt;::const_reference</definition>
        <argsstring></argsstring>
        <name>const_reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="464" column="1" bodyfile="CGAL/circulator.h" bodystart="464" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Container__from__circulator_1af7036ce5502091e00f7e866903673d6f" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Container_from_circulator&lt; C &gt;::pointer</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="469" column="1" bodyfile="CGAL/circulator.h" bodystart="469" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Container__from__circulator_1a36fb1d346e7a9ddd15772aeb3dad229a" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Container_from_circulator&lt; C &gt;::const_pointer</definition>
        <argsstring></argsstring>
        <name>const_pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="474" column="1" bodyfile="CGAL/circulator.h" bodystart="474" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Container__from__circulator_1aab972a5682405049bd4b6c6deedb1a6c" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Container_from_circulator&lt; C &gt;::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="479" column="1" bodyfile="CGAL/circulator.h" bodystart="479" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Container__from__circulator_1a7ef1873e9d6e784b1af6749a1d4736fa" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Container_from_circulator&lt; C &gt;::difference_type</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="484" column="1" bodyfile="CGAL/circulator.h" bodystart="484" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Container__from__circulator_1a9e05485423c0f12bc38aa58bd3b6f32c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Container_from_circulator&lt; C &gt;::Container_from_circulator</definition>
        <argsstring>()</argsstring>
        <name>Container_from_circulator</name>
        <briefdescription>
<para>any iterator of <computeroutput>container</computeroutput> will have a singular value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="494" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Container__from__circulator_1a69e484aa38ee302fa755e8a43a312fd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Container_from_circulator&lt; C &gt;::Container_from_circulator</definition>
        <argsstring>(const C &amp;c)</argsstring>
        <name>Container_from_circulator</name>
        <param>
          <type>const C &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>any iterator of <computeroutput>container</computeroutput> will have a singular value if the circulator <computeroutput>c</computeroutput> corresponds to an empty sequence. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="500" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <description><para>The <computeroutput>iterator</computeroutput> and <computeroutput>const_iterator</computeroutput> types are of the appropriate iterator category.</para><para>In addition to the operations required for their category, they have a member function <computeroutput>current_circulator()</computeroutput> that returns a circulator pointing to the same position as the iterator does. </para></description>
      <memberdef kind="function" id="classCGAL_1_1Container__from__circulator_1a07f70f66919f73254dfc6d46fa7d3e14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Container__from__circulator_1a89528b6126472e79c6f8c606fbfb5c1a" kindref="member">iterator</ref></type>
        <definition>iterator CGAL::Container_from_circulator&lt; C &gt;::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
<para>the start iterator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="515" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Container__from__circulator_1a16fac526fe31b8a1b56cc93571d9530f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Container__from__circulator_1a114e806d4a02054c80cea96860ae2998" kindref="member">const_iterator</ref></type>
        <definition>const_iterator CGAL::Container_from_circulator&lt; C &gt;::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
<para>the start const iterator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="520" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Container__from__circulator_1a23847cc63ce80bee42d8c45a0a329fc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Container__from__circulator_1a89528b6126472e79c6f8c606fbfb5c1a" kindref="member">iterator</ref></type>
        <definition>iterator CGAL::Container_from_circulator&lt; C &gt;::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
<para>the past-the-end iterator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="525" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Container__from__circulator_1a82a60909c57a23fac241978c3492aade" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Container__from__circulator_1a114e806d4a02054c80cea96860ae2998" kindref="member">const_iterator</ref></type>
        <definition>const_iterator CGAL::Container_from_circulator&lt; C &gt;::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
<para>the past-the-end const iterator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="530" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The adaptor <computeroutput><ref refid="classCGAL_1_1Container__from__circulator" kindref="compound">Container_from_circulator</ref></computeroutput> is a class that converts any circulator type <computeroutput>C</computeroutput> to a kind of container class, i.e. a class that provides an <computeroutput>iterator</computeroutput> and a <computeroutput>const_iterator</computeroutput> type and two member functions (<computeroutput><ref refid="classCGAL_1_1Container__from__circulator_1a07f70f66919f73254dfc6d46fa7d3e14" kindref="member">begin()</ref></computeroutput> and <computeroutput><ref refid="classCGAL_1_1Container__from__circulator_1a23847cc63ce80bee42d8c45a0a329fc9" kindref="member">end()</ref></computeroutput>) that return the appropriate iterators. </para>    </briefdescription>
    <detaileddescription>
<para>By analogy to STL container classes these member functions return a const iterator in the case that the container itself is constant and a mutable iterator otherwise.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Circulator__from__iterator" kindref="compound">Circulator_from_iterator</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Circulator__from__container" kindref="compound">Circulator_from_container</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCirculator" kindref="compound">Circulator</ref></computeroutput></para></simplesect>
<bold>Example</bold><linebreak/>
</para><para>The generic <computeroutput>reverse()</computeroutput> algorithm from the STL can be used with an adaptor if at least a bidirectional circulator <computeroutput>c</computeroutput> is given.</para><para><programlisting><codeline><highlight class="normal">Circulator<sp/>c;<sp/></highlight><highlight class="comment">//<sp/>c<sp/>is<sp/>assumed<sp/>to<sp/>be<sp/>a<sp/>bidirectional<sp/>circulator.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classCGAL_1_1Container__from__circulator" kindref="compound">CGAL::Container_from_circulator&lt;Circulator&gt;</ref><sp/>container(c);</highlight></codeline>
<codeline><highlight class="normal">reverse(<sp/>container.begin(),<sp/>container.end());</highlight></codeline>
</programlisting></para><para><bold>Implementation</bold><linebreak/>
</para><para>The iterator adaptor keeps track of the number of rounds a circulator has done around the ring-like data structure (a kind of winding number). It is used to distinguish between the start position and the end position which will be denoted by the same circulator internally. This winding number is zero for the <computeroutput><ref refid="classCGAL_1_1Container__from__circulator_1a07f70f66919f73254dfc6d46fa7d3e14" kindref="member">begin()</ref></computeroutput>-iterator and one for the <computeroutput><ref refid="classCGAL_1_1Container__from__circulator_1a23847cc63ce80bee42d8c45a0a329fc9" kindref="member">end()</ref></computeroutput>-iterator. It is incremented whenever the internal circulator passes the <computeroutput><ref refid="classCGAL_1_1Container__from__circulator_1a07f70f66919f73254dfc6d46fa7d3e14" kindref="member">begin()</ref></computeroutput> position. Two iterators are equal if their internally used circulators and winding numbers are equal. This is more general than necessary since an iterator equal to <computeroutput><ref refid="classCGAL_1_1Container__from__circulator_1a23847cc63ce80bee42d8c45a0a329fc9" kindref="member">end()</ref></computeroutput>-iterator is not supposed to be incremented any more, which is here still possible in a defined manner.</para><para>The implementation is different for random access iterators. The random access iterator has to be able to compute the size of the data structure in constant time. This is for example needed if the difference of the past-the-end iterator and the begin iterator is taken, which is exactly the size of the data structure. Therefore, if the circulator is of the random-access category, the adapter chooses the minimal circulator for the internal anchor position. The minimal circulator is part of the random access circulator requirements, see Page <ref refid="classCirculator_1sectionMinCircleRequ" kindref="member">sectionMinCircleRequ</ref>. For the random access iterator the adaptor implements a total ordering relation that is currently not required for random access circulators. </para>    </detaileddescription>
    <location file="CGAL/circulator.h" line="430" column="1" bodyfile="CGAL/circulator.h" bodystart="430" bodyend="534"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Container__from__circulator_1a07f70f66919f73254dfc6d46fa7d3e14" prot="public" virt="non-virtual"><scope>CGAL::Container_from_circulator</scope><name>begin</name></member>
      <member refid="classCGAL_1_1Container__from__circulator_1a16fac526fe31b8a1b56cc93571d9530f" prot="public" virt="non-virtual"><scope>CGAL::Container_from_circulator</scope><name>begin</name></member>
      <member refid="classCGAL_1_1Container__from__circulator_1a96cb97c3d7279fdf7ae9dd430929b675" prot="public" virt="non-virtual"><scope>CGAL::Container_from_circulator</scope><name>Circulator</name></member>
      <member refid="classCGAL_1_1Container__from__circulator_1a114e806d4a02054c80cea96860ae2998" prot="public" virt="non-virtual"><scope>CGAL::Container_from_circulator</scope><name>const_iterator</name></member>
      <member refid="classCGAL_1_1Container__from__circulator_1a36fb1d346e7a9ddd15772aeb3dad229a" prot="public" virt="non-virtual"><scope>CGAL::Container_from_circulator</scope><name>const_pointer</name></member>
      <member refid="classCGAL_1_1Container__from__circulator_1a6fd4a95f1ea30b80b7bec7729f24023b" prot="public" virt="non-virtual"><scope>CGAL::Container_from_circulator</scope><name>const_reference</name></member>
      <member refid="classCGAL_1_1Container__from__circulator_1a9e05485423c0f12bc38aa58bd3b6f32c" prot="public" virt="non-virtual"><scope>CGAL::Container_from_circulator</scope><name>Container_from_circulator</name></member>
      <member refid="classCGAL_1_1Container__from__circulator_1a69e484aa38ee302fa755e8a43a312fd1" prot="public" virt="non-virtual"><scope>CGAL::Container_from_circulator</scope><name>Container_from_circulator</name></member>
      <member refid="classCGAL_1_1Container__from__circulator_1a7ef1873e9d6e784b1af6749a1d4736fa" prot="public" virt="non-virtual"><scope>CGAL::Container_from_circulator</scope><name>difference_type</name></member>
      <member refid="classCGAL_1_1Container__from__circulator_1a23847cc63ce80bee42d8c45a0a329fc9" prot="public" virt="non-virtual"><scope>CGAL::Container_from_circulator</scope><name>end</name></member>
      <member refid="classCGAL_1_1Container__from__circulator_1a82a60909c57a23fac241978c3492aade" prot="public" virt="non-virtual"><scope>CGAL::Container_from_circulator</scope><name>end</name></member>
      <member refid="classCGAL_1_1Container__from__circulator_1a89528b6126472e79c6f8c606fbfb5c1a" prot="public" virt="non-virtual"><scope>CGAL::Container_from_circulator</scope><name>iterator</name></member>
      <member refid="classCGAL_1_1Container__from__circulator_1af7036ce5502091e00f7e866903673d6f" prot="public" virt="non-virtual"><scope>CGAL::Container_from_circulator</scope><name>pointer</name></member>
      <member refid="classCGAL_1_1Container__from__circulator_1a4eb9069880d3c899abc9bbeb47cb8789" prot="public" virt="non-virtual"><scope>CGAL::Container_from_circulator</scope><name>reference</name></member>
      <member refid="classCGAL_1_1Container__from__circulator_1aab972a5682405049bd4b6c6deedb1a6c" prot="public" virt="non-virtual"><scope>CGAL::Container_from_circulator</scope><name>size_type</name></member>
      <member refid="classCGAL_1_1Container__from__circulator_1a1d4e690b43496bd572e444798aadef44" prot="public" virt="non-virtual"><scope>CGAL::Container_from_circulator</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
