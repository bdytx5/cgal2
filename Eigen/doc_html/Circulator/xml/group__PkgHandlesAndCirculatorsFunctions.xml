<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__PkgHandlesAndCirculatorsFunctions" kind="group">
    <compoundname>PkgHandlesAndCirculatorsFunctions</compoundname>
    <title>Functions</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgHandlesAndCirculatorsFunctions_1gaa7e7be37f74469fd362a65b9263f290f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>C::difference_type</type>
        <definition>C::difference_type CGAL::circulator_distance</definition>
        <argsstring>(C c, C d)</argsstring>
        <name>circulator_distance</name>
        <param>
          <type>C</type>
          <declname>c</declname>
        </param>
        <param>
          <type>C</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>The distance of a circulator <computeroutput>c</computeroutput> to a circulator <computeroutput>d</computeroutput> is the number of elements in the range <computeroutput>[c, d)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>It is defined to be zero for a circulator on an empty sequence and it returns the size of the data structure when applied to a range of the form <computeroutput>[c, c)</computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgHandlesAndCirculatorsFunctions_1ga2d7bfa21e8eb046b8ae90104aa4fcce4" kindref="member">circulator_size</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgHandlesAndCirculatorsFunctions_1ga2607becefb150be4f7d1f2b9e82b6da0" kindref="member">iterator_distance</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgHandlesAndCirculatorsFunctions_1gaf4e8c8285d91a1d8acd582191da0f255" kindref="member">is_empty_range</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCirculator" kindref="compound">Circulator</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgHandlesAndCirculatorsFunctions_1ga2d7bfa21e8eb046b8ae90104aa4fcce4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>C::size_type</type>
        <definition>C::size_type CGAL::circulator_size</definition>
        <argsstring>(C c)</argsstring>
        <name>circulator_size</name>
        <param>
          <type>C</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>The size of a circulator is the size of the data structure it refers to. </para>        </briefdescription>
        <detaileddescription>
<para>It is zero for a circulator on an empty sequence. The size can be computed in linear time for forward and bidirectional circulators, and in constant time for random access circulators using the minimal circulator. The function <computeroutput>circulator_size(c)</computeroutput> returns the circulator size. It uses the <computeroutput>c.min_circulator()</computeroutput> function if <computeroutput>c</computeroutput> is a random access circulator.</para><para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgHandlesAndCirculatorsFunctions_1gaa7e7be37f74469fd362a65b9263f290f" kindref="member">circulator_distance</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgHandlesAndCirculatorsFunctions_1ga2607becefb150be4f7d1f2b9e82b6da0" kindref="member">iterator_distance</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgHandlesAndCirculatorsFunctions_1gaf4e8c8285d91a1d8acd582191da0f255" kindref="member">is_empty_range</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCirculator" kindref="compound">Circulator</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="290" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgHandlesAndCirculatorsFunctions_1gaf4e8c8285d91a1d8acd582191da0f255" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class IC</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_empty_range</definition>
        <argsstring>(const IC &amp;i, const IC &amp;j)</argsstring>
        <name>is_empty_range</name>
        <param>
          <type>const IC &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const IC &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>is <computeroutput>true</computeroutput> if the range <computeroutput>[i, j)</computeroutput> is empty, <computeroutput>false</computeroutput> otherwise. </para>        </briefdescription>
        <detaileddescription>
<para>In order to write algorithms that work with iterator ranges as well as with circulator ranges we have to consider the difference of representing an empty range. For iterators this is the range <computeroutput>[i,i)</computeroutput>, while for circulators it would be <computeroutput>c == NULL</computeroutput>, the empty sequence test. The function <computeroutput><ref refid="group__PkgHandlesAndCirculatorsFunctions_1gaf4e8c8285d91a1d8acd582191da0f255" kindref="member">is_empty_range()</ref></computeroutput> provides the necessary generic test which accepts an iterator range or a circulator range and says whether the range is empty or not.</para><para><simplesect kind="pre"><para><computeroutput>IC</computeroutput> is either a circulator or an iterator type. The range <computeroutput>[i, j)</computeroutput> is valid.</para></simplesect>
<bold>Example</bold><linebreak/>
</para><para>The following function <computeroutput>process_all()</computeroutput> accepts a range <computeroutput>[i, j)</computeroutput> of an iterator or circulator <computeroutput>IC</computeroutput> and processes each element in this range:</para><para><programlisting><codeline><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>IC&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>process_all(<sp/>IC<sp/>i,<sp/>IC<sp/>j)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/><ref refid="group__PkgHandlesAndCirculatorsFunctions_1gaf4e8c8285d91a1d8acd582191da0f255" kindref="member">CGAL::is_empty_range</ref>(<sp/>i,<sp/>j))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>process(*i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(++i<sp/>!=<sp/>j);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgHandlesAndCirculatorsFunctions_1ga2607becefb150be4f7d1f2b9e82b6da0" kindref="member">iterator_distance</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgHandlesAndCirculatorsFunctions_1gae4f6b9dc3b933f01f2d0275a7bf8b308" kindref="member">CGAL_For_all</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Circulator__tag" kindref="compound">Circulator_tag</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Circulator__traits" kindref="compound">Circulator_traits</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgHandlesAndCirculatorsAssert_1ga9bfcd5e48c98a1ccc7b74f8e8f302730" kindref="member">Assert_circulator_or_iterator</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCirculator" kindref="compound">Circulator</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="578" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgHandlesAndCirculatorsFunctions_1ga2607becefb150be4f7d1f2b9e82b6da0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class IC</type>
          </param>
        </templateparamlist>
        <type>iterator_traits&lt; IC &gt;::difference_type</type>
        <definition>iterator_traits&lt;IC&gt;::difference_type CGAL::iterator_distance</definition>
        <argsstring>(IC ic1, IC ic2)</argsstring>
        <name>iterator_distance</name>
        <param>
          <type>IC</type>
          <declname>ic1</declname>
        </param>
        <param>
          <type>IC</type>
          <declname>ic2</declname>
        </param>
        <briefdescription>
<para>The following function returns the distance between either two iterators or two circulators. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgHandlesAndCirculatorsFunctions_1ga2d7bfa21e8eb046b8ae90104aa4fcce4" kindref="member">circulator_size</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgHandlesAndCirculatorsFunctions_1gaa7e7be37f74469fd362a65b9263f290f" kindref="member">circulator_distance</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgHandlesAndCirculatorsFunctions_1gaf4e8c8285d91a1d8acd582191da0f255" kindref="member">is_empty_range</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Circulator__tag" kindref="compound">Circulator_tag</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgHandlesAndCirculatorsAssert_1ga9bfcd5e48c98a1ccc7b74f8e8f302730" kindref="member">Assert_circulator_or_iterator</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgHandlesAndCirculatorsFunctions_1gae4f6b9dc3b933f01f2d0275a7bf8b308" kindref="member">CGAL_For_all</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCirculator" kindref="compound">Circulator</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="600" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgHandlesAndCirculatorsFunctions_1gaa16b4ad8f12d7ba8afdaae7da609c900" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>Iterator_tag</type>
        <definition>Iterator_tag CGAL::query_circulator_or_iterator</definition>
        <argsstring>(const I &amp;i)</argsstring>
        <name>query_circulator_or_iterator</name>
        <param>
          <type>const I &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>This function matches for type <computeroutput>I</computeroutput> if the iterator category of <computeroutput>I</computeroutput> belongs to an iterator. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Circulator__tag" kindref="compound">Circulator_tag</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Circulator__traits" kindref="compound">Circulator_traits</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgHandlesAndCirculatorsAssert_1ga7cbd5c6db884f5a4aace399c337d31b9" kindref="member">Assert_circulator</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCirculator" kindref="compound">Circulator</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="617" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgHandlesAndCirculatorsFunctions_1ga09373fd234b3ca546f97a750e0304f2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>Circulator_tag</type>
        <definition>Circulator_tag CGAL::query_circulator_or_iterator</definition>
        <argsstring>(const C &amp;c)</argsstring>
        <name>query_circulator_or_iterator</name>
        <param>
          <type>const C &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>This functiona matches for type <computeroutput>C</computeroutput> if the iterator category of <computeroutput>C</computeroutput> belongs to a circulator. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Circulator__tag" kindref="compound">Circulator_tag</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Circulator__traits" kindref="compound">Circulator_traits</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgHandlesAndCirculatorsAssert_1ga7cbd5c6db884f5a4aace399c337d31b9" kindref="member">Assert_circulator</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCirculator" kindref="compound">Circulator</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="631" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__PkgHandlesAndCirculatorsFunctions_1gae4f6b9dc3b933f01f2d0275a7bf8b308" prot="public" static="no">
        <name>CGAL_For_all</name>
        <param><defname>i</defname></param>
        <param><defname>j</defname></param>
        <briefdescription>
<para>In order to write algorithms that work with iterator ranges as well as with circulator ranges we have to consider the difference of representing an empty range. </para>        </briefdescription>
        <detaileddescription>
<para>For iterators this is the range <computeroutput>[i,i)</computeroutput>, while for circulators it would be <computeroutput>c == NULL</computeroutput>, the empty sequence test. The function <computeroutput><ref refid="group__PkgHandlesAndCirculatorsFunctions_1gaf4e8c8285d91a1d8acd582191da0f255" kindref="member">is_empty_range()</ref></computeroutput> provides the necessary generic test which accepts an iterator range or a circulator range and says whether the range is empty or not.</para><para>A macro <computeroutput><ref refid="group__PkgHandlesAndCirculatorsFunctions_1gae4f6b9dc3b933f01f2d0275a7bf8b308" kindref="member">CGAL_For_all( i, j)</ref></computeroutput> simplifies the writing of such simple loops as the one in the example of the function <computeroutput><ref refid="group__PkgHandlesAndCirculatorsFunctions_1gaf4e8c8285d91a1d8acd582191da0f255" kindref="member">is_empty_range()</ref></computeroutput>. <computeroutput>i</computeroutput> and <computeroutput>j</computeroutput> can be either iterators or circulators. The macro loops through the range <computeroutput>[i, j)</computeroutput>. It increments <computeroutput>i</computeroutput> until it reaches <computeroutput>j</computeroutput>. The implementation looks like:</para><para><programlisting><codeline><highlight class="normal">for<sp/>(<sp/>bool<sp/>_circ_loop_flag<sp/>=<sp/>!<sp/>::CGAL::is_empty_range(i,j);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_circ_loop_flag;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_circ_loop_flag<sp/>=<sp/>((++i)<sp/>!=<sp/>(j))</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
</programlisting></para><para>Note that the macro behaves like a <computeroutput>for</computeroutput>-loop. It can be used with a single statement or with a statement block. For bidirectional iterators or circulators, a backwards loop macro <computeroutput><ref refid="group__PkgHandlesAndCirculatorsFunctions_1gace997aff7a7768aa76d2b2e19a7ef558" kindref="member">CGAL_For_all_backwards(i, j)</ref></computeroutput> exists that decrements <computeroutput>j</computeroutput> until it reaches <computeroutput>i</computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgHandlesAndCirculatorsFunctions_1ga2607becefb150be4f7d1f2b9e82b6da0" kindref="member">CGAL::iterator_distance()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgHandlesAndCirculatorsFunctions_1gaf4e8c8285d91a1d8acd582191da0f255" kindref="member">CGAL::is_empty_range()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Circulator__tag" kindref="compound">CGAL::Circulator_tag</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Circulator__traits" kindref="compound">CGAL::Circulator_traits</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgHandlesAndCirculatorsAssert_1ga9bfcd5e48c98a1ccc7b74f8e8f302730" kindref="member">CGAL::Assert_circulator_or_iterator</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCirculator" kindref="compound">Circulator</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="676" column="9" bodyfile="CGAL/circulator.h" bodystart="676" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__PkgHandlesAndCirculatorsFunctions_1gace997aff7a7768aa76d2b2e19a7ef558" prot="public" static="no">
        <name>CGAL_For_all_backwards</name>
        <param><defname>i</defname></param>
        <param><defname>j</defname></param>
        <briefdescription>
<para>See <ref refid="group__PkgHandlesAndCirculatorsFunctions_1gae4f6b9dc3b933f01f2d0275a7bf8b308" kindref="member">CGAL_For_all</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="680" column="9" bodyfile="CGAL/circulator.h" bodystart="680" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
