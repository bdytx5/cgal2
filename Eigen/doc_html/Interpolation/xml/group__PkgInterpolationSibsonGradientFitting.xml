<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__PkgInterpolationSibsonGradientFitting" kind="group">
    <compoundname>PkgInterpolationSibsonGradientFitting</compoundname>
    <title>Sibson Gradient Fitting Functions</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgInterpolationSibsonGradientFitting_1ga9c4601224b6352ed583f247fe3fee826" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CoordinateInputIterator</type>
          </param>
          <param>
            <type>class ValueFunctor</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
          <param>
            <type>class Point</type>
          </param>
        </templateparamlist>
        <type>Traits::Vector_d</type>
        <definition>Traits::Vector_d CGAL::sibson_gradient_fitting</definition>
        <argsstring>(CoordinateInputIterator first, CoordinateInputIterator beyond, const typename std::iterator_traits&lt; CoordinateInputIterator &gt;::value_type::second_type &amp;norm, const Point &amp;p, ValueFunctor value_function, const typename ValueFunctor::result_type::first_type fn, const Traits &amp;traits)</argsstring>
        <name>sibson_gradient_fitting</name>
        <param>
          <type>CoordinateInputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>CoordinateInputIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>const typename std::iterator_traits&lt; CoordinateInputIterator &gt;::value_type::second_type &amp;</type>
          <declname>norm</declname>
        </param>
        <param>
          <type>const Point &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>ValueFunctor</type>
          <declname>value_function</declname>
        </param>
        <param>
          <type>const typename ValueFunctor::result_type::first_type</type>
          <declname>fn</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>Estimates the gradient of a function at a query point. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>CoordinateInputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></computeroutput> and must have as value type a pair associating an entity to a (non-normalized) barycentric coordinate. More precisely, <computeroutput>std::iterator_traits&lt;CoordinateInputIterator&gt;::value_type::first_type</computeroutput> can be of the following types: <itemizedlist>
<listitem>
<para>a type equivalent to <computeroutput>Traits::Point_d</computeroutput> or <computeroutput>Traits::Weighted_point_d</computeroutput>  </para></listitem>
<listitem>
<para>an iterator type providing a <computeroutput>point()</computeroutput> function returning a type equivalent to <computeroutput>Traits::Point_d</computeroutput> or <computeroutput>Traits::Weighted_point_d</computeroutput>;  </para></listitem>
</itemizedlist>
and <computeroutput>std::iterator_traits&lt;CoordinateInputIterator&gt;::value_type::second_type</computeroutput> must be equivalent to <computeroutput>Traits::FT</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ValueFunctor</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a functor where <computeroutput>ValueFunctor::argument_type</computeroutput> must be equivalent to <computeroutput>std::iterator_traits&lt;CoordinateInputIterator&gt;::value_type::first_type</computeroutput> and <computeroutput>ValueFunctor::result_type</computeroutput> is a pair of the function value type and a Boolean. The function value type must provide a multiplication and addition operation with the type <computeroutput>Traits::FT</computeroutput> as well as a constructor with argument <computeroutput>0</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Traits</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of the concept <computeroutput><ref refid="classGradientFittingTraits" kindref="compound">GradientFittingTraits</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Point</parametername>
</parameternamelist>
<parameterdescription>
<para>must be equivalent to <computeroutput>Traits::Point_d</computeroutput> or <computeroutput>Traits::Weighted_point_d</computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
An example of compatible types for <computeroutput>CoordinateInputIterator</computeroutput> and <computeroutput>ValueFunctor</computeroutput> is a forward iterator with value type <computeroutput>std::pair&lt;Vertex_handle, Traits::FT&gt;</computeroutput> and a functor with argument type <computeroutput>Vertex_handle</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
<parametername>beyond</parametername>
</parameternamelist>
<parameterdescription>
<para>is the iterator range of the neighbor coordinates for the query point <computeroutput>p</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>norm</parametername>
</parameternamelist>
<parameterdescription>
<para>is the normalization factor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>is the query point </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value_function</parametername>
</parameternamelist>
<parameterdescription>
<para>is a functor that allows to access values of the interpolated function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>is the value of the function at <computeroutput>p</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>is an instance of the gradient fitting traits class.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the gradient at the point <computeroutput>p</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/sibson_gradient_fitting.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgInterpolationSibsonGradientFitting_1ga2063ef2d118d601f4d0789ffcf2c191f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Dt</type>
          </param>
          <param>
            <type>class GradientOutputIterator</type>
          </param>
          <param>
            <type>class OutputFunctor</type>
          </param>
          <param>
            <type>class ValueFunctor</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>GradientOutputIterator</type>
        <definition>GradientOutputIterator CGAL::sibson_gradient_fitting_nn_2</definition>
        <argsstring>(const Dt &amp;dt, GradientOutputIterator out, OutputFunctor fct, ValueFunctor value_function, const Traits &amp;traits)</argsstring>
        <name>sibson_gradient_fitting_nn_2</name>
        <param>
          <type>const Dt &amp;</type>
          <declname>dt</declname>
        </param>
        <param>
          <type>GradientOutputIterator</type>
          <declname>out</declname>
        </param>
        <param>
          <type>OutputFunctor</type>
          <declname>fct</declname>
        </param>
        <param>
          <type>ValueFunctor</type>
          <declname>value_function</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>Estimates the function gradients at all vertices of the Delaunay triangulation <computeroutput>dt</computeroutput> that lie inside the convex hull, using the coordinates computed by the function <ref refid="group__PkgInterpolationNaturalNeighborCoordinates2" kindref="compound">CGAL::natural_neighbor_coordinates_2()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Dt</parametername>
</parameternamelist>
<parameterdescription>
<para>must be of type <computeroutput><ref refid="classCGAL_1_1Delaunay__triangulation__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_2.tag">Delaunay_triangulation_2</ref>&lt;Dt_Traits, Tds&gt;</computeroutput>. <computeroutput>Dt_Traits</computeroutput> must be a model of the concepts <computeroutput><ref refid="classDelaunayTriangulationTraits__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_2.tag">DelaunayTriangulationTraits_2</ref></computeroutput> and <computeroutput><ref refid="classPolygonTraits__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polygon.tag">PolygonTraits_2</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>GradientOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> with value type <computeroutput>OutputFunctor::result_type</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutputFunctor</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a functor with argument type <computeroutput>std::pair&lt;Dt::Vertex_handle, Traits::Vector_d&gt;</computeroutput>. Note that the result type of the functor is not specified and is chosen by users to fit their needs. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ValueFunctor</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a functor where:<itemizedlist>
<listitem><para><computeroutput>ValueFunctor::argument_type</computeroutput> must be either <computeroutput>Dt::Vertex_handle</computeroutput> or <computeroutput>Dt::Point</computeroutput>.</para></listitem><listitem><para><computeroutput>ValueFunctor::result_type</computeroutput> is a pair of the function value type and a Boolean. The function value type must provide a multiplication and addition operation with the type <computeroutput>Traits::FT</computeroutput> as well as a constructor with argument <computeroutput>0</computeroutput>. </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Traits</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classGradientFittingTraits" kindref="compound">GradientFittingTraits</ref></computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dt</parametername>
</parameternamelist>
<parameterdescription>
<para>is the Delaunay triangulation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>is an object of type <computeroutput>GradientOutputIterator</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fct</parametername>
</parameternamelist>
<parameterdescription>
<para>is an object of type <computeroutput>OutputFunctor</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value_function</parametername>
</parameternamelist>
<parameterdescription>
<para>is a functor of type <computeroutput>ValueFunctor</computeroutput> that gives access to the values of the function at points of the triangulation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>is an instance of the gradient fitting traits class.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An output iterator with value type <computeroutput>OutputFunctor::result_type</computeroutput>. The sequence is written starting at <computeroutput>out</computeroutput>. The function returns an iterator that is placed past-the-end of the resulting sequence. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/sibson_gradient_fitting.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgInterpolationSibsonGradientFitting_1gadd232ce2ff777c055c039aa9bcff7e90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Rt</type>
          </param>
          <param>
            <type>class GradientOutputIterator</type>
          </param>
          <param>
            <type>class OutputFunctor</type>
          </param>
          <param>
            <type>class ValueFunctor</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>GradientOutputIterator</type>
        <definition>GradientOutputIterator CGAL::sibson_gradient_fitting_rn_2</definition>
        <argsstring>(const Rt &amp;rt, GradientOutputIterator out, OutputFunctor fct, ValueFunctor value_function, const Traits &amp;traits)</argsstring>
        <name>sibson_gradient_fitting_rn_2</name>
        <param>
          <type>const Rt &amp;</type>
          <declname>rt</declname>
        </param>
        <param>
          <type>GradientOutputIterator</type>
          <declname>out</declname>
        </param>
        <param>
          <type>OutputFunctor</type>
          <declname>fct</declname>
        </param>
        <param>
          <type>ValueFunctor</type>
          <declname>value_function</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>Estimates the function gradients at all vertices of <computeroutput>rt</computeroutput> that lie inside the convex hull using the coordinates computed by the functions <ref refid="group__PkgInterpolationRegularNeighborCoordinates2" kindref="compound">CGAL::regular_neighbor_coordinates_2()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Rt</parametername>
</parameternamelist>
<parameterdescription>
<para>must be of type <computeroutput><ref refid="classCGAL_1_1Regular__triangulation__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_2.tag">Regular_triangulation_2</ref>&lt;Rt_Traits, Tds&gt;</computeroutput>. <computeroutput>Rt_Traits</computeroutput> must be a model of the concepts <computeroutput><ref refid="classRegularTriangulationTraits__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_2.tag">RegularTriangulationTraits_2</ref></computeroutput> and <computeroutput><ref refid="classPolygonTraits__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polygon.tag">PolygonTraits_2</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>GradientOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> with value type <computeroutput>OutputFunctor::result_type</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutputFunctor</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a functor with argument type <computeroutput>std::pair&lt;Rt::Vertex_handle, Traits::Vector_d&gt;</computeroutput>. Note that the result type of the functor is not specified and is chosen by users to fit their needs. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ValueFunctor</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a functor where:<itemizedlist>
<listitem><para><computeroutput>ValueFunctor::argument_type</computeroutput> must be either <computeroutput>Rt::Vertex_handle</computeroutput> or <computeroutput>Rt::Weighted_point</computeroutput>.</para></listitem><listitem><para><computeroutput>ValueFunctor::result_type</computeroutput> is a pair of the function value type and a Boolean. The function value type must provide a multiplication and addition operation with the type <computeroutput>Traits::FT</computeroutput> as well as a constructor with argument <computeroutput>0</computeroutput>. </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Traits</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classGradientFittingTraits" kindref="compound">GradientFittingTraits</ref></computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rt</parametername>
</parameternamelist>
<parameterdescription>
<para>is the regular triangulation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>is an object of type <computeroutput>GradientOutputIterator</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fct</parametername>
</parameternamelist>
<parameterdescription>
<para>is an object of type <computeroutput>OutputFunctor</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value_function</parametername>
</parameternamelist>
<parameterdescription>
<para>is a functor of type <computeroutput>ValueFunctor</computeroutput> that gives access to the values of the function at points of the triangulation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>is an instance of the gradient fitting traits class.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An output iterator with value type <computeroutput>OutputFunctor::result_type</computeroutput>. The sequence is written starting at <computeroutput>out</computeroutput>. The function returns an iterator that is placed past-the-end of the resulting sequence. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/sibson_gradient_fitting.h" line="145" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The first function implements Sibson&apos;s gradient estimation method based on natural neighbor coordinates <ref refid="citelist_1CITEREF_s-bdnni-81" kindref="member">[9]</ref>. </para>    </briefdescription>
    <detaileddescription>
<para>Further functions are provided to fit the gradient for all data points that lie inside the convex hull of the data points. One function exists for each type of neighbor coordinates (natural and regular).</para><para><bold>Output Format</bold><linebreak/>
</para><para>The output format of the functions <computeroutput><ref refid="group__PkgInterpolationSibsonGradientFitting_1ga2063ef2d118d601f4d0789ffcf2c191f" kindref="member">CGAL::sibson_gradient_fitting_nn_2()</ref></computeroutput> and <computeroutput><ref refid="group__PkgInterpolationSibsonGradientFitting_1gadd232ce2ff777c055c039aa9bcff7e90" kindref="member">CGAL::sibson_gradient_fitting_rn_2()</ref></computeroutput> can be customized using the functor parameter of type <computeroutput>OutputFunctor</computeroutput>: this functor must have argument type <computeroutput>std::pair&lt;Tr::Vertex_handle, Traits::Vector_d&gt;</computeroutput> (where <computeroutput>Tr</computeroutput> and <computeroutput>Traits</computeroutput> are the types of the triangulation and traits passed in arguments) but its result type is set as desired by the user.</para><para>See also <ref refid="group__PkgInterpolationNaturalNeighborCoordinates2" kindref="compound">natural neighbor coordinates functions</ref>, which use the same mechanism to allow flexible output.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Interpolation__gradient__fitting__traits__2" kindref="compound">CGAL::Interpolation_gradient_fitting_traits_2</ref>&lt;K&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgInterpolationNaturalNeighborCoordinates2" kindref="compound">CGAL::natural_neighbor_coordinates_2()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgInterpolationRegularNeighborCoordinates2" kindref="compound">CGAL::regular_neighbor_coordinates_2()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgInterpolationSurfaceNeighborCoordinates3" kindref="compound">3D Surface Neighbor Coordinates Functions</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgInterpolation2Interpolation" kindref="compound">Interpolation Functions</ref></computeroutput> </para></simplesect>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
