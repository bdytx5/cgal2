<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__PkgInterpolationRegularNeighborCoordinates2" kind="group">
    <compoundname>PkgInterpolationRegularNeighborCoordinates2</compoundname>
    <title>CGAL::regular_neighbor_coordinates_2()</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgInterpolationRegularNeighborCoordinates2_1ga1ab1d7be7cb0aa417e07ae9df0cab2fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Rt</type>
          </param>
          <param>
            <type>class CoordinateOutputIterator</type>
          </param>
          <param>
            <type>class OutputFunctor</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Triple" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::Triple</ref>&lt; CoordinateOutputIterator, typename Rt::Geom_traits::FT, bool &gt;</type>
        <definition>CGAL::Triple&lt;CoordinateOutputIterator, typename Rt::Geom_traits::FT, bool &gt; CGAL::regular_neighbor_coordinates_2</definition>
        <argsstring>(const Rt &amp;rt, const typename Rt::Weighted_point &amp;p, CoordinateOutputIterator out, OutputFunctor fct, typename Rt::Face_handle start=typename Rt::Face_handle())</argsstring>
        <name>regular_neighbor_coordinates_2</name>
        <param>
          <type>const Rt &amp;</type>
          <declname>rt</declname>
        </param>
        <param>
          <type>const typename Rt::Weighted_point &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>CoordinateOutputIterator</type>
          <declname>out</declname>
        </param>
        <param>
          <type>OutputFunctor</type>
          <declname>fct</declname>
        </param>
        <param>
          <type>typename Rt::Face_handle</type>
          <declname>start</declname>
          <defval>typename Rt::Face_handle()</defval>
        </param>
        <briefdescription>
<para>Computes the regular neighbor coordinates for <computeroutput>p</computeroutput> with respect to the weighted points in the two-dimensional regular triangulation <computeroutput>rt</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Rt</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a <computeroutput><ref refid="classCGAL_1_1Regular__triangulation__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_2.tag">Regular_triangulation_2</ref>&lt;Traits, Tds&gt;</computeroutput>. <computeroutput>Traits</computeroutput> must be a model of the concepts <computeroutput><ref refid="classRegularTriangulationTraits__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_2.tag">RegularTriangulationTraits_2</ref></computeroutput> and <computeroutput><ref refid="classPolygonTraits__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polygon.tag">PolygonTraits_2</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CoordinateOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> and have the value type <computeroutput>OutputFunctor::result_type</computeroutput>. The output computed by the function is placed starting at <computeroutput>out</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutputFunctor</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a functor with argument type <computeroutput>std::pair&lt;Rt::Vertex_handle, Rt::Geom_traits::FT&gt;</computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
See <ref refid="group__PkgInterpolationRegularNeighborCoordinates2" kindref="compound">above </ref> for a detailed explanation on the usage of <computeroutput>OutputFunctor</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rt</parametername>
</parameternamelist>
<parameterdescription>
<para>is the regular triangulation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>is the query point. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>is an object of type <computeroutput>CoordinateOutputIterator</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fct</parametername>
</parameternamelist>
<parameterdescription>
<para>is an object of type <computeroutput>OutputFunctor</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>is an optional argument that is used as a hint of where the locate process has to start its search.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A triple consisting of:<itemizedlist>
<listitem><para>a sequence of objects of types <computeroutput>OutputFunctor::result_type</computeroutput>, starting at <computeroutput>out</computeroutput>.</para></listitem><listitem><para>the normalization factor of the coordinates.</para></listitem><listitem><para>a Boolean value which is set to <computeroutput>true</computeroutput> if the coordinate computation was successful, and <computeroutput>false</computeroutput> otherwise.</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="warning"><para>If the weight of <computeroutput>p</computeroutput> is so small that the point <computeroutput>p</computeroutput> would not have any power cell if it were inserted in the power diagram, then the resulting triple will be <computeroutput>(out, 0, true)</computeroutput> with no additional entry in <computeroutput>out</computeroutput> (compared to its state in input). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/regular_neighbor_coordinates_2.h" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgInterpolationRegularNeighborCoordinates2_1ga5cc28acccca6ea608abfcc2525a8bf2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Rt</type>
          </param>
          <param>
            <type>class CoordinateOutputIterator</type>
          </param>
          <param>
            <type>class OutputFunctor</type>
          </param>
          <param>
            <type>class EdgeIterator</type>
          </param>
          <param>
            <type>class VertexIterator</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Triple" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::Triple</ref>&lt; CoordinateOutputIterator, typename Traits::FT, bool &gt;</type>
        <definition>CGAL::Triple&lt; CoordinateOutputIterator, typename Traits::FT, bool &gt; CGAL::regular_neighbor_coordinates_2</definition>
        <argsstring>(const Rt &amp;rt, const typename Traits::Weighted_point &amp;p, CoordinateOutputIterator out, OutputFunctor fct, EdgeIterator hole_begin, EdgeIterator hole_end, VertexIterator hidden_vertices_begin, VertexIterator hidden_vertices_end)</argsstring>
        <name>regular_neighbor_coordinates_2</name>
        <param>
          <type>const Rt &amp;</type>
          <declname>rt</declname>
        </param>
        <param>
          <type>const typename Traits::Weighted_point &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>CoordinateOutputIterator</type>
          <declname>out</declname>
        </param>
        <param>
          <type>OutputFunctor</type>
          <declname>fct</declname>
        </param>
        <param>
          <type>EdgeIterator</type>
          <declname>hole_begin</declname>
        </param>
        <param>
          <type>EdgeIterator</type>
          <declname>hole_end</declname>
        </param>
        <param>
          <type>VertexIterator</type>
          <declname>hidden_vertices_begin</declname>
        </param>
        <param>
          <type>VertexIterator</type>
          <declname>hidden_vertices_end</declname>
        </param>
        <briefdescription>
<para>Computes the regular neighbor coordinates for <computeroutput>p</computeroutput> with respect to the weighted points in the two-dimensional regular triangulation <computeroutput>rt</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The iterator range <computeroutput>[hole_begin, hole_end)</computeroutput> determines the boundary edges of the conflict zone of <computeroutput>p</computeroutput> in the triangulation <computeroutput>rt</computeroutput>. <ref refid="classCGAL_1_1Regular__triangulation__2_1ac0cfbef1539e5d87688e52b75186b5f6" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_2.tag"><computeroutput>rt.hidden_vertices_begin()</computeroutput></ref> and <ref refid="classCGAL_1_1Regular__triangulation__2_1ae6014aaf628273c5dbb384c3aa3c917d" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_2.tag"><computeroutput>rt.hidden_vertices_end()</computeroutput></ref> determines the iterator range over the hidden vertices of the conflict zone of <computeroutput>p</computeroutput> in<computeroutput>rt</computeroutput>. Those ranges can, for example, be computed using the function <ref refid="classCGAL_1_1Regular__triangulation__2_1abb1f2251936c217d1dbc79ae30b32a00" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_2.tag"><computeroutput>rt.get_boundary_of_conflicts_and_hidden_vertices(p,std::back_inserter(hole), std::back_inserter(hidden_vertices), start)</computeroutput></ref>.</para><para><bold>Requirements</bold><linebreak/>
 Same as above. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/regular_neighbor_coordinates_2.h" line="110" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgInterpolationRegularNeighborCoordinates2_1ga92a6a6277e01784518649cfb1d952af8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Rt</type>
          </param>
          <param>
            <type>class CoordinateOutputIterator</type>
          </param>
          <param>
            <type>class OutputFunctor</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Triple" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::Triple</ref>&lt; CoordinateOutputIterator, typename Rt::Geom_traits::FT, bool &gt;</type>
        <definition>CGAL::Triple&lt; CoordinateOutputIterator, typename Rt::Geom_traits::FT, bool &gt; CGAL::regular_neighbor_coordinates_2</definition>
        <argsstring>(const Rt &amp;rt, typename Rt::Vertex_handle vh, CoordinateOutputIterator out, OutputFunctor fct)</argsstring>
        <name>regular_neighbor_coordinates_2</name>
        <param>
          <type>const Rt &amp;</type>
          <declname>rt</declname>
        </param>
        <param>
          <type>typename Rt::Vertex_handle</type>
          <declname>vh</declname>
        </param>
        <param>
          <type>CoordinateOutputIterator</type>
          <declname>out</declname>
        </param>
        <param>
          <type>OutputFunctor</type>
          <declname>fct</declname>
        </param>
        <briefdescription>
<para>Computes the regular neighbor coordinates of the point <computeroutput>vh-&gt;point()</computeroutput> with respect to the vertices of <computeroutput>rt</computeroutput> excluding <computeroutput>vh-&gt;point()</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><bold>Requirements</bold><linebreak/>
 Same as above. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/regular_neighbor_coordinates_2.h" line="126" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The functions <computeroutput><ref refid="group__PkgInterpolationRegularNeighborCoordinates2_1ga1ab1d7be7cb0aa417e07ae9df0cab2fb" kindref="member">regular_neighbor_coordinates_2()</ref></computeroutput> compute natural neighbor coordinates, also called Sibson&apos;s coordinates, for weighted <computeroutput>2D</computeroutput> points provided a two-dimensional regular triangulation and a (weighted) query point inside the convex hull of the vertices of the triangulation. </para>    </briefdescription>
    <detaileddescription>
<para>We call these coordinates <emphasis>regular neighbor coordinates</emphasis>.</para><para><bold>Implementation</bold><linebreak/>
</para><para>This function computes the areas stolen from the power cells of points in the regular triangulation <computeroutput>rt</computeroutput> by the insertion of the query point <computeroutput>p</computeroutput>. The total area of the power cell of <computeroutput>p</computeroutput> is also computed and returned by the function.</para><para><simplesect kind="attention"><para>If <computeroutput>p</computeroutput> lies outside the convex hull, the coordinate values cannot be computed and the third value of the result triple is set to <computeroutput>false</computeroutput>.</para></simplesect>
<bold>Output Format</bold><linebreak/>
</para><para>The return type is identical for all overloads of <computeroutput><ref refid="group__PkgInterpolationRegularNeighborCoordinates2_1ga1ab1d7be7cb0aa417e07ae9df0cab2fb" kindref="member">CGAL::regular_neighbor_coordinates_2()</ref></computeroutput>: it is <computeroutput><ref refid="classCGAL_1_1Triple" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::Triple</ref>&lt;CoordinateOutputIterator, Rt::Geom_traits::FT, bool &gt;</computeroutput></para><para>Regular neighbor coordinates are output in the first value of the triple, using an output iterator (see the concept <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput>). Internally, these coordinates are associated to some of the vertices of the triangulation, and a natural value type for the output iterator would thus be <computeroutput>std::pair&lt;Rt::Vertex_handle, Rt::Geom_traits::FT&gt;</computeroutput>. However, to allow flexibility in the format of the output, a functor passed as argument can be used to format the output as desired: this functor must have argument type <computeroutput>std::pair&lt;Rt::Vertex_handle, Rt::Geom_traits::FT&gt;</computeroutput> and its result type and the value type of the output iterator must be identical.</para><para>For example, we can use a functor of type <ref refid="structCGAL_1_1Identity" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::Identity&lt;std::pair&lt;Rt::Vertex_handle, Rt::Geom_traits::FT&gt; &gt; </ref> and an output iterator with value type <computeroutput>std::pair&lt;Rt::Vertex_handle, Rt::Geom_traits::FT&gt;</computeroutput> or we could extract the bare point and use a value type: <computeroutput>std::pair&lt;Rt::Weighted_point, Rt::Geom_traits::FT&gt;</computeroutput>, or simply the coordinates, etc.</para><para>This functor can be omitted and will default, for backward compatibility reasons, to a functor that extracts the point from the vertex, and the output iterator must then have value type <computeroutput>std::pair&lt;Rt::Weighted_point, Rt::Geom_traits::FT&gt;</computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgInterpolationNaturalNeighborCoordinates2" kindref="compound">CGAL::natural_neighbor_coordinates_2()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgInterpolationSurfaceNeighborCoordinates3" kindref="compound">3D Surface Neighbor Coordinates Functions</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgInterpolation2Interpolation" kindref="compound">Interpolation Functions</ref></computeroutput> </para></simplesect>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
