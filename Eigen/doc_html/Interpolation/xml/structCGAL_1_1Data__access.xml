<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structCGAL_1_1Data__access" kind="struct" language="C++" prot="public">
    <compoundname>CGAL::Data_access</compoundname>
    <basecompoundref refid="structCGAL_1_1cpp98_1_1unary__function" prot="public" virt="non-virtual">CGAL::cpp98::unary_function&lt; Map::key_type, std::pair&lt; Map::mapped_type, bool &gt; &gt;</basecompoundref>
    <includes local="no">CGAL/interpolation_functions.h</includes>
    <templateparamlist>
      <param>
        <type>typename Map</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="structCGAL_1_1Data__access_1a76236b77a209de3d6ddec9fa64b786a9" prot="public" static="no">
        <type>Map::mapped_type</type>
        <definition>typedef Map::mapped_type CGAL::Data_access&lt; Map &gt;::Data_type</definition>
        <argsstring></argsstring>
        <name>Data_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/interpolation_functions.h" line="35" column="1" bodyfile="CGAL/interpolation_functions.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structCGAL_1_1Data__access_1aafdf39f2ee356305f7938f9ff3bdabee" prot="public" static="no">
        <type>Map::key_type</type>
        <definition>typedef Map::key_type CGAL::Data_access&lt; Map &gt;::Key_type</definition>
        <argsstring></argsstring>
        <name>Key_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/interpolation_functions.h" line="40" column="1" bodyfile="CGAL/interpolation_functions.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="structCGAL_1_1Data__access_1a148cb522f2beb240d4e914e7f8fd72c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Data_access&lt; Map &gt;::Data_access</definition>
        <argsstring>(const Map &amp;map)</argsstring>
        <name>Data_access</name>
        <param>
          <type>const Map &amp;</type>
          <declname>map</declname>
        </param>
        <briefdescription>
<para>Introduces a <computeroutput><ref refid="structCGAL_1_1Data__access" kindref="compound">Data_access</ref></computeroutput> to the container <computeroutput>map</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/interpolation_functions.h" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Data__access_1aa259af1f489bbd39ba7edcf3b66a158e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; <ref refid="structCGAL_1_1Data__access_1a76236b77a209de3d6ddec9fa64b786a9" kindref="member">Data_type</ref>, bool &gt;</type>
        <definition>std::pair&lt;Data_type, bool&gt; CGAL::Data_access&lt; Map &gt;::operator()</definition>
        <argsstring>(const Key_type &amp;p)</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="structCGAL_1_1Data__access_1aafdf39f2ee356305f7938f9ff3bdabee" kindref="member">Key_type</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>If there is an entry for <computeroutput>p</computeroutput> in the container <computeroutput>map</computeroutput>, then the pair of <computeroutput>map.find(p)</computeroutput> and <computeroutput>true</computeroutput> is returned. </para>        </briefdescription>
        <detaileddescription>
<para>Otherwise, the Boolean value of the pair is <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/interpolation_functions.h" line="57" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The struct <computeroutput><ref refid="structCGAL_1_1Data__access" kindref="compound">Data_access</ref></computeroutput> implements a functor that allows to retrieve data from an associative container. </para>    </briefdescription>
    <detaileddescription>
<para>The functor keeps a reference to the container. Given an instance of the container&apos;s key type, it returns a pair of the container&apos;s value type and a Boolean indicating whether the retrieval was successful.</para><para>This class can be used to provide the values and gradients of the interpolation functions.</para><para><bold>Parameters</bold><linebreak/>
</para><para>The class <computeroutput><ref refid="structCGAL_1_1Data__access" kindref="compound">Data_access</ref></computeroutput> has the container type <computeroutput>Map</computeroutput> as template parameter. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>CGAL::cpp98::unary_function&lt; class, class &gt;</label>
        <link refid="structCGAL_1_1cpp98_1_1unary__function" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag"/>
      </node>
      <node id="1">
        <label>CGAL::cpp98::unary_function&lt; Map::key_type, std::pair&lt; Map::mapped_type, bool &gt; &gt;</label>
        <link refid="structCGAL_1_1cpp98_1_1unary__function" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag"/>
        <childnode refid="2" relation="template-instance">
          <edgelabel>&lt; Map::key_type, std::pair&lt; Map::mapped_type, bool &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="0">
        <label>CGAL::Data_access&lt; Map &gt;</label>
        <link refid="structCGAL_1_1Data__access"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5">
        <label>CGAL::cpp98::unary_function&lt; class, class &gt;</label>
        <link refid="structCGAL_1_1cpp98_1_1unary__function" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag"/>
      </node>
      <node id="4">
        <label>CGAL::cpp98::unary_function&lt; Map::key_type, std::pair&lt; Map::mapped_type, bool &gt; &gt;</label>
        <link refid="structCGAL_1_1cpp98_1_1unary__function" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag"/>
        <childnode refid="5" relation="template-instance">
          <edgelabel>&lt; Map::key_type, std::pair&lt; Map::mapped_type, bool &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>CGAL::Data_access&lt; Map &gt;</label>
        <link refid="structCGAL_1_1Data__access"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="CGAL/interpolation_functions.h" line="26" column="1" bodyfile="CGAL/interpolation_functions.h" bodystart="23" bodyend="61"/>
    <listofallmembers>
      <member refid="structCGAL_1_1cpp98_1_1unary__function_1a4038df632a32943948123825121ffad9" prot="public" virt="non-virtual"><scope>CGAL::Data_access</scope><name>argument_type</name></member>
      <member refid="structCGAL_1_1Data__access_1a148cb522f2beb240d4e914e7f8fd72c5" prot="public" virt="non-virtual"><scope>CGAL::Data_access</scope><name>Data_access</name></member>
      <member refid="structCGAL_1_1Data__access_1a76236b77a209de3d6ddec9fa64b786a9" prot="public" virt="non-virtual"><scope>CGAL::Data_access</scope><name>Data_type</name></member>
      <member refid="structCGAL_1_1Data__access_1aafdf39f2ee356305f7938f9ff3bdabee" prot="public" virt="non-virtual"><scope>CGAL::Data_access</scope><name>Key_type</name></member>
      <member refid="structCGAL_1_1Data__access_1aa259af1f489bbd39ba7edcf3b66a158e" prot="public" virt="non-virtual"><scope>CGAL::Data_access</scope><name>operator()</name></member>
      <member refid="structCGAL_1_1cpp98_1_1unary__function_1acfd736be060eca5afb6c940e2e37df32" prot="public" virt="non-virtual"><scope>CGAL::Data_access</scope><name>result_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
