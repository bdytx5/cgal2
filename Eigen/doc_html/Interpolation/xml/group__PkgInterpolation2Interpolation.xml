<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__PkgInterpolation2Interpolation" kind="group">
    <compoundname>PkgInterpolation2Interpolation</compoundname>
    <title>Interpolation Functions</title>
    <innerclass refid="classCGAL_1_1Interpolation__gradient__fitting__traits__2" prot="public">CGAL::Interpolation_gradient_fitting_traits_2</innerclass>
    <innerclass refid="classCGAL_1_1Interpolation__traits__2" prot="public">CGAL::Interpolation_traits_2</innerclass>
    <innergroup refid="group__PkgInterpolationSibsonGradientFitting">Sibson Gradient Fitting Functions</innergroup>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgInterpolation2Interpolation_1ga2f8a2f88b5b91b9f3db2d5e40bfa1df7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CoordinateInputIterator</type>
          </param>
          <param>
            <type>class ValueFunctor</type>
          </param>
        </templateparamlist>
        <type>ValueFunctor::result_type::first_type</type>
        <definition>ValueFunctor::result_type::first_type CGAL::linear_interpolation</definition>
        <argsstring>(CoordinateInputIterator first, CoordinateInputIterator beyond, const typename std::iterator_traits&lt; CoordinateInputIterator &gt;::value_type::second_type &amp;norm, ValueFunctor value_function)</argsstring>
        <name>linear_interpolation</name>
        <param>
          <type>CoordinateInputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>CoordinateInputIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>const typename std::iterator_traits&lt; CoordinateInputIterator &gt;::value_type::second_type &amp;</type>
          <declname>norm</declname>
        </param>
        <param>
          <type>ValueFunctor</type>
          <declname>value_function</declname>
        </param>
        <briefdescription>
<para>The function <computeroutput><ref refid="group__PkgInterpolation2Interpolation_1ga2f8a2f88b5b91b9f3db2d5e40bfa1df7" kindref="member">linear_interpolation()</ref></computeroutput> computes the weighted sum of the function values which must be provided via a functor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>CoordinateInputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></computeroutput> and must have as value type a pair associating an entity, e.g. the <computeroutput>Vertex_handle</computeroutput> or <computeroutput>Point</computeroutput> types of a triangulation, to a (non-normalized) barycentric coordinate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ValueFunctor</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a functor where <computeroutput>ValueFunctor::argument_type</computeroutput> must be equivalent to <computeroutput>std::iterator_traits&lt;CoordinateInputIterator&gt;::value_type::first_type</computeroutput> and <computeroutput>ValueFunctor::result_type</computeroutput> is a pair of the function value type and a Boolean. The function value type must provide a multiplication and addition operation with the type <computeroutput>Traits::FT</computeroutput> as well as a constructor with argument <computeroutput>0</computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
A model of the functor <computeroutput>ValueFunctor</computeroutput> is provided by the struct <computeroutput><ref refid="structCGAL_1_1Data__access" kindref="compound">CGAL::Data_access</ref></computeroutput> instantiated with an associative container (e.g. <computeroutput>std::map</computeroutput>) and having:<itemizedlist>
<listitem><para><computeroutput>std::iterator_traits&lt;CoordinateInputIterator&gt;::value_type::first_type</computeroutput> (the entity type) as <computeroutput>key_type</computeroutput></para></listitem><listitem><para><computeroutput>std::iterator_traits&lt;CoordinateInputIterator&gt;::value_type::second_type</computeroutput> (the coordinate type) as <computeroutput>mapped_type</computeroutput>.</para></listitem></itemizedlist>
</para><para>The two template parameters must satisfy the following conditions:<itemizedlist>
<listitem><para><computeroutput>std::iterator_traits&lt;CoordinateInputIterator&gt;::value_type::first_type</computeroutput> (the entity type) is equivalent to a <computeroutput>ValueFunctor::argument_type</computeroutput>.</para></listitem><listitem><para><computeroutput>std::iterator_traits&lt;CoordinateInputIterator&gt;::value_type::second_type</computeroutput> (the coordinate type) is a field number type that is equivalent to <computeroutput>ValueFunctor::result_type::first_type</computeroutput>.</para></listitem></itemizedlist>
</para><para>For example, if <computeroutput>CoordinateInputIterator</computeroutput> is an iterator with value type <computeroutput>std::pair&lt;Vertex_handle, double&gt;</computeroutput>, then the <computeroutput>ValueFunctor</computeroutput> must have argument type <computeroutput>Vertex_handle</computeroutput> (or convertible to) and return type <computeroutput>std::pair&lt;double, bool&gt;</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
<parametername>beyond</parametername>
</parameternamelist>
<parameterdescription>
<para>is the iterator range for the coordinates. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>norm</parametername>
</parameternamelist>
<parameterdescription>
<para>is the normalization factor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value_function</parametername>
</parameternamelist>
<parameterdescription>
<para>is a functor of type <computeroutput>ValueFunctor</computeroutput> that allows to access a pair of a function value and a Boolean at a given entity. The Boolean indicates whether the function value could be retrieved correctly. This function generates the interpolated function value as the weighted sum of the values corresponding to each entry of the entity/coordinate pairs in the range <computeroutput>[first, beyond)</computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>norm</computeroutput> <formula id="0">$ \neq0$</formula>. </para></simplesect>
<simplesect kind="pre"><para><computeroutput>value_function(p.first).second == true</computeroutput> for all pairs <computeroutput>p</computeroutput> in the range <computeroutput>[first, beyond)</computeroutput>.</para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgInterpolation2Interpolation_1ga50aa68e988b099a99533f26872c639f5" kindref="member">CGAL::quadratic_interpolation()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgInterpolationNaturalNeighborCoordinates2" kindref="compound">CGAL::natural_neighbor_coordinates_2()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgInterpolationRegularNeighborCoordinates2" kindref="compound">CGAL::regular_neighbor_coordinates_2()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgInterpolationSurfaceNeighborCoordinates3" kindref="compound">3D Surface Neighbor Coordinates Functions</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/interpolation_functions.h" line="111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgInterpolation2Interpolation_1ga50aa68e988b099a99533f26872c639f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CoordinateInputIterator</type>
          </param>
          <param>
            <type>class ValueFunctor</type>
          </param>
          <param>
            <type>class GradFunctor</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
          <param>
            <type>class Point</type>
          </param>
        </templateparamlist>
        <type>ValueFunctor::result_type</type>
        <definition>ValueFunctor::result_type CGAL::quadratic_interpolation</definition>
        <argsstring>(CoordinateInputIterator first, CoordinateInputIterator beyond, const typename std::iterator_traits&lt; CoordinateInputIterator &gt;::value_type::second_type &amp;norm, const Point &amp;p, ValueFunctor value_function, GradFunctor gradient_function, const Traits &amp;traits)</argsstring>
        <name>quadratic_interpolation</name>
        <param>
          <type>CoordinateInputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>CoordinateInputIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>const typename std::iterator_traits&lt; CoordinateInputIterator &gt;::value_type::second_type &amp;</type>
          <declname>norm</declname>
        </param>
        <param>
          <type>const Point &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>ValueFunctor</type>
          <declname>value_function</declname>
        </param>
        <param>
          <type>GradFunctor</type>
          <declname>gradient_function</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>The function <computeroutput><ref refid="group__PkgInterpolation2Interpolation_1ga50aa68e988b099a99533f26872c639f5" kindref="member">quadratic_interpolation()</ref></computeroutput> generates the interpolated function value as the weighted sum of the values plus a linear term in the gradient for each entity of the entity/coordinate pairs in the range <computeroutput>[first, beyond)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>If the interpolation was successful, the pair contains the interpolated function value as first and <computeroutput>true</computeroutput> as second value. Otherwise, the second value will be <computeroutput>false</computeroutput>.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Traits</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classInterpolationTraits" kindref="compound">InterpolationTraits</ref></computeroutput>. Note that, contrary to some other interpolation methods, the number type <computeroutput>FT</computeroutput> provided by <computeroutput>Traits</computeroutput> does not need to provide the square root operation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CoordinateInputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></computeroutput> and must have as value type a pair associating an entity to a (non-normalized) barycentric coordinate. More precisely, <computeroutput>std::iterator_traits&lt;CoordinateInputIterator&gt;::value_type::first_type</computeroutput> can be of the following types: <itemizedlist>
<listitem>
<para>a type equivalent to <computeroutput>Traits::Point_d</computeroutput> or <computeroutput>Traits::Weighted_point_d</computeroutput>  </para></listitem>
<listitem>
<para>an iterator type providing a <computeroutput>point()</computeroutput> function returning a type equivalent to <computeroutput>Traits::Point_d</computeroutput> or <computeroutput>Traits::Weighted_point_d</computeroutput>;  </para></listitem>
</itemizedlist>
and <computeroutput>std::iterator_traits&lt;CoordinateInputIterator&gt;::value_type::second_type</computeroutput> must be equivalent to <computeroutput>Traits::FT</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ValueFunctor</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a functor where <computeroutput>ValueFunctor::argument_type</computeroutput> must be equivalent to <computeroutput>std::iterator_traits&lt;CoordinateInputIterator&gt;::value_type::first_type</computeroutput> and <computeroutput>ValueFunctor::result_type</computeroutput> is a pair of the function value type and a Boolean. The function value type must provide a multiplication and addition operation with the type <computeroutput>Traits::FT</computeroutput> as well as a constructor with argument <computeroutput>0</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>GradFunctor</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a functor where <computeroutput>GradFunctor::argument_type</computeroutput> must be equivalent to <computeroutput>std::iterator_traits&lt;CoordinateInputIterator&gt;::value_type::first_type</computeroutput> and <computeroutput>Functor::result_type</computeroutput> is a pair of the function&apos;s gradient type and a Boolean. The function gradient type must provide a multiplication operation with <computeroutput>Traits::Vector_d</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Point</parametername>
</parameternamelist>
<parameterdescription>
<para>must be equivalent to <computeroutput>Traits::Point_d</computeroutput> or <computeroutput>Traits::Weighted_point_d</computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
A model of the functor types <computeroutput>ValueFunctor</computeroutput> (resp. <computeroutput>GradFunctor</computeroutput>) is provided by the struct <computeroutput><ref refid="structCGAL_1_1Data__access" kindref="compound">CGAL::Data_access</ref></computeroutput>. It must be instantiated accordingly with an associative container (e.g. <computeroutput>std::map</computeroutput>) having <computeroutput>std::iterator_traits&lt;CoordinateInputIterator&gt;::value_type::first_type</computeroutput> as <computeroutput>key_type</computeroutput> and the function value type (resp. the function gradient type) as <computeroutput>mapped_type</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
<parametername>beyond</parametername>
</parameternamelist>
<parameterdescription>
<para>is the iterator range of the barycentric coordinates for the query point <computeroutput>p</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>norm</parametername>
</parameternamelist>
<parameterdescription>
<para>is the normalization factor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>is the point at which the interpolated function value is computed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value_function</parametername>
</parameternamelist>
<parameterdescription>
<para>is a functor that allows to access values of the interpolated function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gradient_function</parametername>
</parameternamelist>
<parameterdescription>
<para>is a functor that allows to access the function gradients. If the functor <computeroutput>gradient_function</computeroutput> cannot supply the gradient of a point, the function returns a pair where the Boolean is set to <computeroutput>false</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>is an instance of the traits class.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>norm</computeroutput> <formula id="0">$ \neq0$</formula>. </para></simplesect>
<simplesect kind="pre"><para><computeroutput>value_function(p.first).second == true</computeroutput> for pairs <computeroutput>p</computeroutput> in the range <computeroutput>[first, beyond)</computeroutput></para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgInterpolation2Interpolation_1ga2f8a2f88b5b91b9f3db2d5e40bfa1df7" kindref="member">CGAL::linear_interpolation()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Interpolation__traits__2" kindref="compound">CGAL::Interpolation_traits_2</ref>&lt;K&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgInterpolationNaturalNeighborCoordinates2" kindref="compound">CGAL::natural_neighbor_coordinates_2()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgInterpolationRegularNeighborCoordinates2" kindref="compound">CGAL::regular_neighbor_coordinates_2()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgInterpolationSurfaceNeighborCoordinates3" kindref="compound">3D Surface Neighbor Coordinates Functions</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/interpolation_functions.h" line="176" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgInterpolation2Interpolation_1ga2f6df3dd458c7638a526a41f1bee55b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CoordinateInputIterator</type>
          </param>
          <param>
            <type>class ValueFunctor</type>
          </param>
          <param>
            <type>class GradFunctor</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
          <param>
            <type>class Point</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; typename ValueFunctor::result_type, bool &gt;</type>
        <definition>std::pair&lt;typename ValueFunctor::result_type, bool&gt; CGAL::sibson_c1_interpolation</definition>
        <argsstring>(CoordinateInputIterator first, CoordinateInputIterator beyond, const typename std::iterator_traits&lt; CoordinateInputIterator &gt;::value_type::second_type &amp;norm, const Point &amp;p, ValueFunctor value_function, GradFunctor gradient_function, const Traits &amp;traits)</argsstring>
        <name>sibson_c1_interpolation</name>
        <param>
          <type>CoordinateInputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>CoordinateInputIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>const typename std::iterator_traits&lt; CoordinateInputIterator &gt;::value_type::second_type &amp;</type>
          <declname>norm</declname>
        </param>
        <param>
          <type>const Point &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>ValueFunctor</type>
          <declname>value_function</declname>
        </param>
        <param>
          <type>GradFunctor</type>
          <declname>gradient_function</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>The function <computeroutput><ref refid="group__PkgInterpolation2Interpolation_1ga2f6df3dd458c7638a526a41f1bee55b3" kindref="member">sibson_c1_interpolation()</ref></computeroutput> generates the interpolated function value at the point <computeroutput>p</computeroutput>, using functors for the function values and the gradients, by applying Sibson&apos;s <formula id="1">$ Z^1$</formula> interpolant. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>If the interpolation was successful, the pair contains the interpolated function value as first and <computeroutput>true</computeroutput> as second value. Otherwise, <computeroutput>false</computeroutput> is returned as second value.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Traits</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classInterpolationTraits" kindref="compound">InterpolationTraits</ref></computeroutput>. The number type <computeroutput>FT</computeroutput> provided by <computeroutput>Traits</computeroutput> must support the square root operation <computeroutput><ref refid="group__PkgAlgebraicFoundations_1gab922269072ee9ee99ba8c541418b2e11" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">sqrt()</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CoordinateInputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></computeroutput> and must have as value type a pair associating an entity to a (non-normalized) barycentric coordinate. More precisely, <computeroutput>std::iterator_traits&lt;CoordinateInputIterator&gt;::value_type::first_type</computeroutput> can be of the following types: <itemizedlist>
<listitem>
<para>a type equivalent to <computeroutput>Traits::Point_d</computeroutput> or <computeroutput>Traits::Weighted_point_d</computeroutput>  </para></listitem>
<listitem>
<para>an iterator type providing a <computeroutput>point()</computeroutput> function returning a type equivalent to <computeroutput>Traits::Point_d</computeroutput> or <computeroutput>Traits::Weighted_point_d</computeroutput>;  </para></listitem>
</itemizedlist>
and <computeroutput>std::iterator_traits&lt;CoordinateInputIterator&gt;::value_type::second_type</computeroutput> must be equivalent to <computeroutput>Traits::FT</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ValueFunctor</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a functor where <computeroutput>ValueFunctor::argument_type</computeroutput> must be equivalent to <computeroutput>std::iterator_traits&lt;CoordinateInputIterator&gt;::value_type::first_type</computeroutput> and <computeroutput>ValueFunctor::result_type</computeroutput> is a pair of the function value type and a Boolean. The function value type must provide a multiplication and addition operation with the type <computeroutput>Traits::FT</computeroutput> as well as a constructor with argument <computeroutput>0</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>GradFunctor</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a functor where <computeroutput>GradFunctor::argument_type</computeroutput> must be equivalent to <computeroutput>std::iterator_traits&lt;CoordinatetCoordinateInputIteratorIterator&gt;::value_type::first_type</computeroutput> and <computeroutput>Functor::result_type</computeroutput> is a pair of the function&apos;s gradient type and a Boolean. The function gradient type must provide a multiplication operation with <computeroutput>Traits::Vector_d</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Point</parametername>
</parameternamelist>
<parameterdescription>
<para>must be equivalent to <computeroutput>Traits::Point_d</computeroutput> or <computeroutput>Traits::Weighted_point_d</computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
A model of the functor types <computeroutput>ValueFunctor</computeroutput> (resp. <computeroutput>GradFunctor</computeroutput>) is provided by the struct <computeroutput><ref refid="structCGAL_1_1Data__access" kindref="compound">CGAL::Data_access</ref></computeroutput>. It must be instantiated accordingly with an associative container (e.g. <computeroutput>std::map</computeroutput>) having <computeroutput>std::iterator_traits&lt;CoordinateInputIterator&gt;::value_type::first_type</computeroutput> as <computeroutput>key_type</computeroutput> and the function value type (resp. the function gradient type) as <computeroutput>mapped_type</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
<parametername>beyond</parametername>
</parameternamelist>
<parameterdescription>
<para>is the iterator range of the barycentric coordinates for the query point <computeroutput>p</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>norm</parametername>
</parameternamelist>
<parameterdescription>
<para>is the normalization factor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>is the point at which the interpolated function value is computed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value_function</parametername>
</parameternamelist>
<parameterdescription>
<para>is a functor that allows to access values of the interpolated function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gradient_function</parametername>
</parameternamelist>
<parameterdescription>
<para>is a functor that allows to access the function gradients. If the functor <computeroutput>gradient_function</computeroutput> cannot supply the gradient of a point, the function returns a pair where the Boolean is set to <computeroutput>false</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>is an instance of the traits class.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>norm</computeroutput> <formula id="0">$ \neq0$</formula>. </para></simplesect>
<simplesect kind="pre"><para><computeroutput>value_function(q).second == true</computeroutput> for all points <computeroutput>q</computeroutput> of the point/coordinate pairs in the range <computeroutput>[first, beyond)</computeroutput></para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Interpolation__traits__2" kindref="compound">CGAL::Interpolation_traits_2</ref>&lt;K&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgInterpolation2Interpolation_1ga1f84e03a02a6602d45c26f600a6d225b" kindref="member">CGAL::sibson_c1_interpolation_square()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgInterpolationNaturalNeighborCoordinates2" kindref="compound">CGAL::natural_neighbor_coordinates_2()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgInterpolationRegularNeighborCoordinates2" kindref="compound">CGAL::regular_neighbor_coordinates_2()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__PkgInterpolationSurfaceNeighborCoordinates3" kindref="compound">3D Surface Neighbor Coordinates Functions</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/interpolation_functions.h" line="242" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgInterpolation2Interpolation_1ga1f84e03a02a6602d45c26f600a6d225b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CoordinateInputIterator</type>
          </param>
          <param>
            <type>class ValueFunctor</type>
          </param>
          <param>
            <type>class GradFunctor</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
          <param>
            <type>class Point</type>
          </param>
        </templateparamlist>
        <type>ValueFunctor::result_type</type>
        <definition>ValueFunctor::result_type CGAL::sibson_c1_interpolation_square</definition>
        <argsstring>(CoordinateInputIterator first, CoordinateInputIterator beyond, const typename std::iterator_traits&lt; CoordinateInputIterator &gt;::value_type::second_type &amp;norm, const Point &amp;p, ValueFunctor value_function, GradFunctor gradient_function, const Traits &amp;traits)</argsstring>
        <name>sibson_c1_interpolation_square</name>
        <param>
          <type>CoordinateInputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>CoordinateInputIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>const typename std::iterator_traits&lt; CoordinateInputIterator &gt;::value_type::second_type &amp;</type>
          <declname>norm</declname>
        </param>
        <param>
          <type>const Point &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>ValueFunctor</type>
          <declname>value_function</declname>
        </param>
        <param>
          <type>GradFunctor</type>
          <declname>gradient_function</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>Same as <computeroutput><ref refid="group__PkgInterpolation2Interpolation_1ga2f6df3dd458c7638a526a41f1bee55b3" kindref="member">sibson_c1_interpolation()</ref></computeroutput>, except that no square root operation is required for the number type <computeroutput>Traits::FT</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgInterpolation2Interpolation_1ga2f6df3dd458c7638a526a41f1bee55b3" kindref="member">CGAL::sibson_c1_interpolation()</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/interpolation_functions.h" line="259" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgInterpolation2Interpolation_1ga40856de51734ae1b1882cb46e8195c93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CoordinateInputIterator</type>
          </param>
          <param>
            <type>class ValueFunctor</type>
          </param>
          <param>
            <type>class GradFunctor</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
          <param>
            <type>class Point</type>
          </param>
        </templateparamlist>
        <type>ValueFunctor::result_type</type>
        <definition>ValueFunctor::result_type CGAL::farin_c1_interpolation</definition>
        <argsstring>(CoordinateInputIterator first, CoordinateInputIterator beyond, const typename std::iterator_traits&lt; CoordinateInputIterator &gt;::value_type::second_type &amp;norm, const Point &amp;p, ValueFunctor value_function, GradFunctor gradient_function, const Traits &amp;traits)</argsstring>
        <name>farin_c1_interpolation</name>
        <param>
          <type>CoordinateInputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>CoordinateInputIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>const typename std::iterator_traits&lt; CoordinateInputIterator &gt;::value_type::second_type &amp;</type>
          <declname>norm</declname>
        </param>
        <param>
          <type>const Point &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>ValueFunctor</type>
          <declname>value_function</declname>
        </param>
        <param>
          <type>GradFunctor</type>
          <declname>gradient_function</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>Generates the interpolated function value computed by Farin&apos;s interpolant. </para>        </briefdescription>
        <detaileddescription>
<para><bold>Requirements</bold><linebreak/>
</para><para>Same requirements as the function <computeroutput><ref refid="group__PkgInterpolation2Interpolation_1ga2f6df3dd458c7638a526a41f1bee55b3" kindref="member">sibson_c1_interpolation()</ref></computeroutput>, but the input iterator must provide random access (be a model of <computeroutput><ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></computeroutput>) and <computeroutput>Traits::FT</computeroutput> does not need to provide the square root operation.</para><para><simplesect kind="pre"><para>The range <computeroutput>[first, beyond)</computeroutput> contains either one or more than three elements. The function <computeroutput><ref refid="group__PkgInterpolation2Interpolation_1ga40856de51734ae1b1882cb46e8195c93" kindref="member">farin_c1_interpolation()</ref></computeroutput> interpolates the function values and the gradients that are provided by functors using the method described in <ref refid="citelist_1CITEREF_f-sodt-90" kindref="member">[4]</ref>.</para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgInterpolation2Interpolation_1ga2f6df3dd458c7638a526a41f1bee55b3" kindref="member">CGAL::sibson_c1_interpolation()</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/interpolation_functions.h" line="285" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
