<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__PkgInterpolation2" kind="group">
    <compoundname>PkgInterpolation2</compoundname>
    <title>2D and Surface Function Interpolation Reference</title>
    <innerclass refid="structCGAL_1_1Data__access" prot="public">CGAL::Data_access</innerclass>
    <innergroup refid="group__PkgInterpolation2Concepts">Concepts</innergroup>
    <innergroup refid="group__PkgInterpolation2Interpolation">Interpolation Functions</innergroup>
    <innergroup refid="group__PkgInterpolation2NatNeighbor">Natural Neighbor Coordinate Computation</innergroup>
    <innergroup refid="group__PkgInterpolation2SurfaceNeighbor">Surface Neighbor and Surface Neighbor Coordinate Computation</innergroup>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para> <image type="html" name="interpolation.png"></image>
   Julia Fl√∂totto This package implements different methods for scattered data interpolation: Given measures of a function on a set of discrete data points, the task is to interpolate this function on an arbitrary query point. The package further offers functions for natural neighbor interpolation. <linebreak/>
   <bold>Introduced in:</bold> CGAL 3.1<linebreak/>
 <bold>BibTeX:</bold> <ulink url="../Manual/how_to_cite_cgal.html#cgal:f-i-18b">cgal:f-i-18b</ulink><linebreak/>
 <bold>License:</bold> <ref refid="preliminaries_1licensesGPL" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">GPL</ref> <linebreak/>
 </para><para>Scattered data interpolation solves the following problem: given measures of a function on a set of discrete data points, the task is to interpolate this function on an arbitrary query point.</para><para>If the function is a linear function and given barycentric coordinates that allow to express the query point as the convex combination of some data points, the function can be exactly interpolated. If the function gradients are known, we can exactly interpolate quadratic functions given barycentric coordinates. Any further properties of these interpolation functions depend on the properties of the barycentric coordinates. They are provided in this package under the names <computeroutput><ref refid="group__PkgInterpolation2Interpolation_1ga2f8a2f88b5b91b9f3db2d5e40bfa1df7" kindref="member">linear_interpolation()</ref></computeroutput> and <computeroutput><ref refid="group__PkgInterpolation2Interpolation_1ga50aa68e988b099a99533f26872c639f5" kindref="member">quadratic_interpolation()</ref></computeroutput>.</para><para><heading level="2">Natural Neighbor Interpolation</heading>
</para><para>Natural neighbor coordinates are defined by Sibson in 1980 and are based on the Voronoi diagram of the data points. Interpolation methods based on natural neighbor coordinates are particularly interesting because they adapt easily to non-uniform and highly anisotropic data. This package contains Sibson&apos;s <formula id="62">$ C^1$</formula> continuous interpolation method which interpolates exactly spherical quadrics (of the form <formula id="79">$ \Phi(\mathbf{x})= a + \mathbf{b}^t \mathbf{x} +\gamma\ \mathbf{x}^t\mathbf{x}$</formula>) and Farin&apos;s <formula id="62">$ C^1$</formula> continuous interpolation method based on Bernstein-B<eacute/>zier techniques and interpolating exactly quadratic functions - assuming that the function gradient is known. In addition, Sibson defines a method to approximate the function gradients for data points that are in the interior of the convex hull. This method is exact for spherical quadrics.</para><para>This CGAL package provides functions to compute the natural neighbor coordinates with respect to a two-dimensional Voronoi diagram (i. e., from the Delaunay triangulation of the data points) and to a two-dimensional power diagram for weighted points (i. e., from their regular triangulation). Natural neighbor coordinates on closed and well-sampled surfaces can also be computed if the normal to the surface at the query point is known. The latter coordinates are only approximately barycentric, see <ref refid="citelist_1CITEREF_bf-lcss-02" kindref="member">[2]</ref>. Furthermore, it implements Sibson&apos;s and Farin&apos;s interpolation functions as well as Sibson&apos;s function gradient fitting method. For a more thorough introduction, see the <ref refid="index_1Chapter_2D_and_Surface_Function_Interpolation" kindref="member">User Manual </ref>.</para><para></para><para><heading level="2">Concepts</heading>
</para><para><itemizedlist>
<listitem><para><computeroutput><ref refid="classInterpolationTraits" kindref="compound">InterpolationTraits</ref></computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classGradientFittingTraits" kindref="compound">GradientFittingTraits</ref></computeroutput></para></listitem></itemizedlist>
</para><para><heading level="2">Interpolation Functions</heading>
</para><para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__PkgInterpolation2Interpolation_1ga2f8a2f88b5b91b9f3db2d5e40bfa1df7" kindref="member">CGAL::linear_interpolation()</ref></computeroutput></para></listitem><listitem><para><computeroutput><ref refid="group__PkgInterpolation2Interpolation_1ga2f6df3dd458c7638a526a41f1bee55b3" kindref="member">CGAL::sibson_c1_interpolation()</ref></computeroutput></para></listitem><listitem><para><computeroutput><ref refid="group__PkgInterpolation2Interpolation_1ga40856de51734ae1b1882cb46e8195c93" kindref="member">CGAL::farin_c1_interpolation()</ref></computeroutput></para></listitem><listitem><para><computeroutput><ref refid="group__PkgInterpolation2Interpolation_1ga50aa68e988b099a99533f26872c639f5" kindref="member">CGAL::quadratic_interpolation()</ref></computeroutput></para></listitem><listitem><para><computeroutput><ref refid="group__PkgInterpolationSibsonGradientFitting_1ga9c4601224b6352ed583f247fe3fee826" kindref="member">CGAL::sibson_gradient_fitting()</ref></computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Interpolation__traits__2" kindref="compound">CGAL::Interpolation_traits_2</ref>&lt;K&gt;</computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Interpolation__gradient__fitting__traits__2" kindref="compound">CGAL::Interpolation_gradient_fitting_traits_2</ref>&lt;K&gt;</computeroutput></para></listitem></itemizedlist>
</para><para><heading level="2">Natural neighbor coordinate computation</heading>
</para><para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__PkgInterpolationNaturalNeighborCoordinates2_1ga7bff652e1106089e701ebc64b371a966" kindref="member">CGAL::natural_neighbor_coordinates_2()</ref></computeroutput></para></listitem><listitem><para><computeroutput><ref refid="group__PkgInterpolationRegularNeighborCoordinates2_1ga1ab1d7be7cb0aa417e07ae9df0cab2fb" kindref="member">CGAL::regular_neighbor_coordinates_2()</ref></computeroutput></para></listitem></itemizedlist>
</para><para><heading level="2">Surface neighbor and surface neighbor coordinate computation</heading>
</para><para><itemizedlist>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Voronoi__intersection__2__traits__3" kindref="compound">CGAL::Voronoi_intersection_2_traits_3</ref>&lt;K&gt;</computeroutput></para></listitem><listitem><para><computeroutput><ref refid="group__PkgInterpolationSurfaceNeighborCoordinates3_1ga07c7f1c1efbbbe293fcb2835ca39ed0f" kindref="member">CGAL::surface_neighbor_coordinates_3()</ref></computeroutput></para></listitem><listitem><para><computeroutput><ref refid="group__PkgInterpolationSurfaceNeighbors3_1gaa7b22ceb4ba69de0f4485b6fef0973d1" kindref="member">CGAL::surface_neighbors_3()</ref></computeroutput> </para></listitem></itemizedlist>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
