<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>User Manual</title>
    <detaileddescription>
<para><anchor id="index_1Chapter_Halfedge_Data_Structures"/><anchor id="index_1chapterHalfedgeDS"/> <simplesect kind="author"><para>Lutz Kettner</para></simplesect>
</para><sect1 id="index_1HalfedgeDSIntroduction">
<title>Introduction</title>
<para>A halfedge data structure (abbreviated as <computeroutput><ref refid="classHalfedgeDS" kindref="compound">HalfedgeDS</ref></computeroutput>, or <computeroutput>HDS</computeroutput> for template parameters) is an edge-centered data structure capable of maintaining incidence information of vertices, edges and faces, for example for planar maps, polyhedra, or other orientable, two-dimensional surfaces embedded in arbitrary dimension. Each edge is decomposed into two halfedges with opposite orientations. One incident face and one incident vertex are stored in each halfedge. For each face and each vertex, one incident halfedge is stored. Reduced variants of the halfedge data structure can omit some of these information, for example the halfedge pointers in faces or the storage of faces at all.</para><para><image type="html" name="halfedge_small.png"></image>
 <image type="latex" name="halfedge_small.png"></image>
</para><para>The halfedge data structure is a combinatorial data structure, geometric interpretation is added by classes built on top of the halfedge data structure. These classes might be more convenient to use than the halfedge data structure directly, since the halfedge data structure is meant as an implementation layer. See for example the <computeroutput><ref refid="classCGAL_1_1Polyhedron__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polyhedron.tag">Polyhedron_3</ref></computeroutput> class in Chapter <ref refid="index_1chapterPolyhedron" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polyhedron.tag">Polyhedral Surface</ref>.</para><para>The data structure provided here is also known as the FE-structure <ref refid="citelist_1CITEREF_w-ebdss-85" kindref="member">[9]</ref>, as halfedges <ref refid="citelist_1CITEREF_m-ism-88" kindref="member">[6]</ref>, <ref refid="citelist_1CITEREF_cgal:bfh-mgedm-95" kindref="member">[2]</ref> or as the doubly connected edge list (DCEL) <ref refid="citelist_1CITEREF_bkos-cgaa-97" kindref="member">[3]</ref>, although the original reference for the DCEL <ref refid="citelist_1CITEREF_mp-fitcp-78" kindref="member">[7]</ref> describes a different data structure. The halfedge data structure can also be seen as one of the variants of the quad-edge data structure <ref refid="citelist_1CITEREF_gs-pmgsc-85" kindref="member">[4]</ref>. In general, the quad-edge data can represent non-orientable 2-manifolds, but the variant here is restricted to orientable 2-manifolds only. An overview and comparison of these different data structures together with a thorough description of the design implemented here can be found in <ref refid="citelist_1CITEREF_k-ugpdd-99" kindref="member">[5]</ref>.</para></sect1>
<sect1 id="index_1HalfedgeDSSoftware">
<title>Software Design</title>
<para><anchor id="index_1fig__figureHalfedgeDSDesign"/><image type="html" name="hds_design_col.png"></image>
 <image type="latex" name="hds_design_col.png" width="15cm"></image>
  <ref refid="index_1fig__figureHalfedgeDSDesign" kindref="member">fig__figureHalfedgeDSDesign</ref> Responsibilities of the different layers in the halfedge data-structure design.  <linebreak/>
</para><para><ref refid="index_1fig__figureHalfedgeDSDesign" kindref="member">fig__figureHalfedgeDSDesign</ref> illustrates the responsibilities of the three layers of the software design, with the <computeroutput><ref refid="classCGAL_1_1Polyhedron__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polyhedron.tag">Polyhedron_3</ref></computeroutput> as an example for the top layer. The items provide the space for the information that is actually stored, i.e., with member variables and access member functions in <computeroutput>Vertex</computeroutput>, <computeroutput>Halfedge</computeroutput>, and <computeroutput>Face</computeroutput> respectively. Halfedges are required to provide a reference to the next halfedge and to the opposite halfedge. Optionally they may provide a reference to the previous halfedge, to the incident vertex, and to the incident face. Vertices and faces may be empty. Optionally they may provide a reference to the incident halfedge. The options mentioned are supported in the halfedge data structure and the polyhedron, for example, Euler operations update the optional references if they are present. Furthermore, the item classes can be extended with arbitrary attributes and member functions, which will be promoted by inheritance to the actual classes used for the polyhedron.</para><para>Vertices, halfedges, and faces are passed as local types of the <computeroutput>Items</computeroutput> class to the halfedge data structure and polyhedron. Implementations for vertices, halfedges and faces are provided that fulfill the mandatory part of the requirements. They can be used as base classes for extensions by the user. Richer implementations are also provided to serve as defaults; for polyhedra they provide all optional incidences, a three-dimensional point in the vertex type and a plane equation in the face type.</para><para>The Halfedge data structure concept <computeroutput><ref refid="classHalfedgeDS" kindref="compound">HalfedgeDS</ref></computeroutput>, is responsible for the storage organization of the items. Currently, implementations using internally a bidirectional list or a vector are provided. The <computeroutput><ref refid="classHalfedgeDS" kindref="compound">HalfedgeDS</ref></computeroutput> defines the handles and iterators belonging to the items. These types are promoted to the declaration of the items themselves and are used there to provide the references to the incident items. This promotion of types is done with a template parameter <computeroutput>Refs</computeroutput> of the item types. The halfedge data structure provides member functions to insert and delete items, to traverse all items, and it gives access to the items.</para><para>There are two different models for the <computeroutput><ref refid="classHalfedgeDS" kindref="compound">HalfedgeDS</ref></computeroutput> concept available, <computeroutput><ref refid="classCGAL_1_1HalfedgeDS__list" kindref="compound">HalfedgeDS_list</ref></computeroutput> and <computeroutput><ref refid="classCGAL_1_1HalfedgeDS__vector" kindref="compound">HalfedgeDS_vector</ref></computeroutput>, and more might come. Therefore we have kept their interface small and factored out common functionality into separate helper classes, <computeroutput><ref refid="classCGAL_1_1HalfedgeDS__decorator" kindref="compound">HalfedgeDS_decorator</ref></computeroutput>, <computeroutput><ref refid="classCGAL_1_1HalfedgeDS__const__decorator" kindref="compound">HalfedgeDS_const_decorator</ref></computeroutput>, and <computeroutput><ref refid="classCGAL_1_1HalfedgeDS__items__decorator" kindref="compound">HalfedgeDS_items_decorator</ref></computeroutput>, which are not shown in <ref refid="index_1fig__figureHalfedgeDSDesign" kindref="member">fig__figureHalfedgeDSDesign</ref>, but would be placed at the side of the <computeroutput><ref refid="classHalfedgeDS" kindref="compound">HalfedgeDS</ref></computeroutput> since they broaden that interface but do not hide it. These helper classes contain operations that are useful to implement the operations in the next layer, for example, the polyhedron. They add, for example, the Euler operations and partial operations from which further Euler operations can be built, such as inserting an edge into the ring of edges at a vertex. Furthermore, the helper classes contain adaptive functionality. For example, if the <computeroutput><ref refid="classHalfedgeDSHalfedge_1a573e835d92f393029fd6e5b8f9023a27" kindref="member">HalfedgeDSHalfedge::prev()</ref></computeroutput> member function is not provided for halfedges, the <computeroutput><ref refid="classCGAL_1_1HalfedgeDS__items__decorator_1a0a7ded78b72adb3cd3611e4ebdb6af4c" kindref="member">HalfedgeDS_items_decorator::find_prev()</ref></computeroutput> member function of a helper class searches in the positive direction along the face for the previous halfedge. But if the <computeroutput><ref refid="classHalfedgeDSHalfedge_1a573e835d92f393029fd6e5b8f9023a27" kindref="member">HalfedgeDSHalfedge::prev()</ref></computeroutput> member function is provided, the <computeroutput><ref refid="classCGAL_1_1HalfedgeDS__items__decorator_1a0a7ded78b72adb3cd3611e4ebdb6af4c" kindref="member">HalfedgeDS_items_decorator::find_prev()</ref></computeroutput> member function simply calls it. This distinction is resolved at compile time with a technique called <emphasis>compile-time tags</emphasis>, similar to iterator tags in <ref refid="citelist_1CITEREF_cgal:sl-stl-95" kindref="member">[8]</ref>.</para><para>The <computeroutput><ref refid="classCGAL_1_1Polyhedron__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polyhedron.tag">Polyhedron_3</ref></computeroutput> as an example for the third layer adds the geometric interpretation, provides an easy-to-use interface of high-level functions, and unifies the access to the flexibility provided underneath. It renames face to facet, which is more common for three-dimensional surfaces. The interface is designed to protect the integrity of the internal representation, the handles stored in the items can no longer directly be written by the user. The polyhedron adds the convenient and efficient circulators, see <computeroutput><ref refid="classCirculator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circulator.tag">Circulator</ref></computeroutput>, for accessing the circular sequence of edges around a vertex or around a facet. To achieve this, the <computeroutput><ref refid="classCGAL_1_1Polyhedron__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polyhedron.tag">Polyhedron_3</ref></computeroutput> derives new vertices, halfedges and facets from those provided in <computeroutput>Items</computeroutput>. These new items are those actually used in the <computeroutput><ref refid="classHalfedgeDS" kindref="compound">HalfedgeDS</ref></computeroutput>, which gives us the coherent type structure in this design, especially if compared to our previous design.</para></sect1>
<sect1 id="index_1HalfedgeDSExample">
<title>Example Programs</title>
<para><anchor id="index_1sectionHdsExamples"/> </para><sect2 id="index_1HalfedgeDSTheDefaultHalfedgeDataStructure">
<title>The Default Halfedge Data Structure</title>
<para>The following example program uses the default halfedge data structure and the decorator class. The default halfedge data structure uses a list-based representation. All incidences of the items and a point type for vertices are defined. The trivial traits class provides the type used for the point. The program creates a loop, consisting of two halfedges, one vertex and two faces, and checks its validity.</para><para><image type="html" name="loop.png"></image>
 <image type="latex" name="loop.png"></image>
</para><para><linebreak/>
<bold>File</bold> <ref refid="HalfedgeDS_2hds_prog_default_8cpp-example" kindref="compound">HalfedgeDS/hds_prog_default.cpp</ref> <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/HalfedgeDS_default.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/HalfedgeDS_decorator.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Traits<sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Point_2;<sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1HalfedgeDS__default" kindref="compound">CGAL::HalfedgeDS_default&lt;Traits&gt;</ref><sp/>HDS;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1HalfedgeDS__decorator" kindref="compound">CGAL::HalfedgeDS_decorator&lt;HDS&gt;</ref><sp/>Decorator;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>HDS<sp/>hds;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Decorator<sp/>decorator(hds);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>decorator.create_loop();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CGAL_assertion(<sp/>decorator.is_valid());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para></sect2>
<sect2 id="index_1HalfedgeDSAMinimalHalfedgeDataStructure">
<title>A Minimal Halfedge Data Structure</title>
<para>The following program defines a minimal halfedge data structure using the minimal items class <computeroutput><ref refid="classCGAL_1_1HalfedgeDS__min__items" kindref="compound">HalfedgeDS_min_items</ref></computeroutput> and a list-based halfedge data structure. The result is a data structure maintaining only halfedges with next and opposite pointers. No vertices or faces are stored. The data structure represents an <emphasis>undirected graph</emphasis>.</para><para><linebreak/>
<bold>File</bold> <ref refid="HalfedgeDS_2hds_prog_graph_8cpp-example" kindref="compound">HalfedgeDS/hds_prog_graph.cpp</ref> <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/HalfedgeDS_min_items.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/HalfedgeDS_default.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/HalfedgeDS_decorator.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>no<sp/>traits<sp/>needed,<sp/>argument<sp/>can<sp/>be<sp/>arbitrary<sp/>dummy.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1HalfedgeDS__default" kindref="compound">CGAL::HalfedgeDS_default&lt;int, CGAL::HalfedgeDS_min_items&gt;</ref><sp/>HDS;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1HalfedgeDS__decorator" kindref="compound">CGAL::HalfedgeDS_decorator&lt;HDS&gt;</ref><sp/><sp/>Decorator;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>HDS<sp/>hds;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Decorator<sp/>decorator(hds);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>decorator.create_loop();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CGAL_assertion(<sp/>decorator.is_valid());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para></sect2>
<sect2 id="index_1HalfedgeDSTheDefaultwithaVectorInsteadof">
<title>The Default with a Vector Instead of a List</title>
<para>The default halfedge data structure uses a list internally and the maximal base classes. We change the list to a vector representation here. Again, a trivial traits class provides the type used for the point. Note that for the vector storage the size of the halfedge data structure should be reserved beforehand, either with the constructor as shown in the example or with the <computeroutput>reserve()</computeroutput> member function. One can later resize the data structure with further calls to the <computeroutput>reserve()</computeroutput> member function, but only if the data structure is in a consistent, i.e., <emphasis>valid</emphasis>, state.</para><para><linebreak/>
<bold>File</bold> <ref refid="HalfedgeDS_2hds_prog_vector_8cpp-example" kindref="compound">HalfedgeDS/hds_prog_vector.cpp</ref> <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/HalfedgeDS_items_2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/HalfedgeDS_vector.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/HalfedgeDS_decorator.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Traits<sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Point_2;<sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1HalfedgeDS__vector" kindref="compound">CGAL::HalfedgeDS_vector&lt; Traits, CGAL::HalfedgeDS_items_2&gt;</ref><sp/>HDS;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1HalfedgeDS__decorator" kindref="compound">CGAL::HalfedgeDS_decorator&lt;HDS&gt;</ref><sp/><sp/>Decorator;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>HDS<sp/>hds(1,2,2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Decorator<sp/>decorator(hds);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>decorator.create_loop();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CGAL_assertion(<sp/>decorator.is_valid());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para></sect2>
<sect2 id="index_1HalfedgeDSExampleAddingColortoFaces">
<title>Example Adding Color to Faces</title>
<para>This example re-uses the base class available for faces and adds a member variable <computeroutput>color</computeroutput>.</para><para><linebreak/>
<bold>File</bold> <ref refid="HalfedgeDS_2hds_prog_color_8cpp-example" kindref="compound">HalfedgeDS/hds_prog_color.cpp</ref> <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/HalfedgeDS_items_2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/HalfedgeDS_default.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/IO/Color.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>face<sp/>type<sp/>with<sp/>a<sp/>color<sp/>member<sp/>variable.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Refs&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">My_face<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1HalfedgeDS__face__base" kindref="compound">CGAL::HalfedgeDS_face_base</ref>&lt;Refs&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCGAL_1_1Color" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Stream_support.tag">CGAL::Color</ref><sp/>color;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>My_face()<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>My_face(<sp/><ref refid="classCGAL_1_1Color" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Stream_support.tag">CGAL::Color</ref><sp/>c)<sp/>:<sp/>color(c)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>items<sp/>type<sp/>using<sp/>my<sp/>face.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">My_items<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1HalfedgeDS__items__2" kindref="compound">CGAL::HalfedgeDS_items_2</ref><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Refs,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Face_wrapper<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>My_face&lt;Refs&gt;<sp/>Face;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">My_traits<sp/>{<sp/></highlight><highlight class="comment">//<sp/>arbitrary<sp/>point<sp/>type,<sp/>not<sp/>used<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>Point_2;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1HalfedgeDS__default" kindref="compound">CGAL::HalfedgeDS_default&lt;My_traits, My_items&gt;</ref><sp/>HDS;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>HDS::Face<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Face;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>HDS::Face_handle<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Face_handle;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>HDS<sp/>hds;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Face_handle<sp/>f<sp/>=<sp/>hds.faces_push_back(<sp/>Face(<sp/>CGAL::RED));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>f-&gt;color<sp/>=<sp/>CGAL::BLUE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CGAL_assertion(<sp/>f-&gt;color<sp/>==<sp/>CGAL::BLUE);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para></sect2>
<sect2 id="index_1HalfedgeDSExampleDefiningaMoreCompactHalfedge">
<title>Example Defining a More Compact Halfedge</title>
<para>The halfedge data structure as presented here is slightly less space efficient as, for example, the winged-edge data structure <ref refid="citelist_1CITEREF_b-prcv-75" kindref="member">[1]</ref>, the DCEL <ref refid="citelist_1CITEREF_mp-fitcp-78" kindref="member">[7]</ref> or variants of the quad-edge data structure <ref refid="citelist_1CITEREF_gs-pmgsc-85" kindref="member">[4]</ref>. On the other hand, it does not require any search operations during traversals. A comparison can be found in <ref refid="citelist_1CITEREF_k-ugpdd-99" kindref="member">[5]</ref>.</para><para>The following example trades traversal time for a compact storage representation using traditional C techniques (i.e., type casting and the assumption that pointers, especially those from <computeroutput>malloc</computeroutput> or <computeroutput>new</computeroutput>, point to even addresses). The idea goes as follows: The halfedge data structure allocates halfedges pairwise. Concerning the vector-based data structure this implies that the absolute value of the difference between a halfedge and its opposite halfedge is always one with respect to C pointer arithmetic. We can replace the opposite pointer by a single bit encoding the sign of this difference. We will store this bit as the least significant bit in the next halfedge handle. Furthermore, we do not implement a pointer to the previous halfedge. What remains are three pointers per halfedge.</para><para>We use the static member function <computeroutput><ref refid="classHalfedgeDS_1a962b391c741016fa5d8aa7d0168c6b56" kindref="member">HalfedgeDS::halfedge_handle()</ref></computeroutput> to convert from pointers to halfedge handles. The same solution can be applied to the list-based halfedge data structure <computeroutput><ref refid="classCGAL_1_1HalfedgeDS__list" kindref="compound">HalfedgeDS_list</ref></computeroutput>, see <computeroutput>examples/HalfedgeDS/hds_prog_compact2.cpp</computeroutput>. Here is the example for the vector-based data structure.</para><para><linebreak/>
<bold>File</bold> <ref refid="HalfedgeDS_2hds_prog_compact_8cpp-example" kindref="compound">HalfedgeDS/hds_prog_compact.cpp</ref> <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/HalfedgeDS_items_2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/HalfedgeDS_vector.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/HalfedgeDS_decorator.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>a<sp/>new<sp/>halfedge<sp/>class.<sp/>We<sp/>assume<sp/>that<sp/>the<sp/>Halfedge_handle<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>be<sp/>created<sp/>from<sp/>a<sp/>pointer<sp/>(e.g.<sp/>the<sp/>HalfedgeDS<sp/>is<sp/>based<sp/>here<sp/>on<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>In_place_list<sp/>or<sp/>a<sp/>std::vector<sp/>with<sp/>such<sp/>property)<sp/>and<sp/>that<sp/>halfedges</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>are<sp/>allocated<sp/>in<sp/>pairs.<sp/>We<sp/>encode<sp/>the<sp/>opposite<sp/>pointer<sp/>in<sp/>a<sp/>single<sp/>bit,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>is<sp/>stored<sp/>in<sp/>the<sp/>lower<sp/>bit<sp/>of<sp/>the<sp/>next-pointer.<sp/>We<sp/>use<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>static<sp/>member<sp/>function<sp/>HDS::halfedge_handle<sp/>to<sp/>translate<sp/>pointer<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>handles.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Refs&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">My_halfedge<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Refs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HDS;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>My_halfedge&lt;Refs&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base_base;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>My_halfedge&lt;Refs&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>My_halfedge&lt;Refs&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Self;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Boolean__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::Tag_false</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Supports_halfedge_prev;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Boolean__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::Tag_true</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Supports_halfedge_vertex;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Boolean__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::Tag_true</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Supports_halfedge_face;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Refs::Vertex_handle<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vertex_handle;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Refs::Vertex_const_handle<sp/><sp/><sp/>Vertex_const_handle;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Refs::Halfedge<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Halfedge;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Refs::Halfedge_handle<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Halfedge_handle;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Refs::Halfedge_const_handle<sp/>Halfedge_const_handle;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Refs::Face_handle<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Face_handle;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Refs::Face_const_handle<sp/><sp/><sp/><sp/><sp/>Face_const_handle;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::ptrdiff_t<sp/><sp/>nxt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>My_halfedge()<sp/>:<sp/>nxt(0),<sp/>f(<sp/>Face_handle())<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Halfedge_handle<sp/><ref refid="group__kernel__enums_1gad0a8110cb95f76bac65649bfe58c650b" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">opposite</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Halfedge<sp/>could<sp/>be<sp/>different<sp/>from<sp/>My_halfedge<sp/>(e.g.<sp/>pointer<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>linked<sp/>list).<sp/>Get<sp/>proper<sp/>handle<sp/>from<sp/>&apos;this&apos;<sp/>pointer<sp/>first,<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pointer<sp/>arithmetic,<sp/>then<sp/>convert<sp/>pointer<sp/>back<sp/>to<sp/>handle<sp/>again.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Halfedge_handle<sp/>h<sp/>=<sp/>HDS::halfedge_handle(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>proper<sp/>handle</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>nxt<sp/>&amp;<sp/>1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HDS::halfedge_handle(<sp/>&amp;*<sp/>h<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HDS::halfedge_handle(<sp/>&amp;*<sp/>h<sp/>-<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Halfedge_const_handle<sp/><ref refid="group__kernel__enums_1gad0a8110cb95f76bac65649bfe58c650b" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">opposite</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>same<sp/>as<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Halfedge_const_handle<sp/>h<sp/>=<sp/>HDS::halfedge_handle(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>proper<sp/>handle</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>nxt<sp/>&amp;<sp/>1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HDS::halfedge_handle(<sp/>&amp;*<sp/>h<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HDS::halfedge_handle(<sp/>&amp;*<sp/>h<sp/>-<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Halfedge_handle<sp/><ref refid="group__STLAlgos_1gad4dbc8daf3c0e2201f4972eb9eea404d" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">next</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HDS::halfedge_handle((Halfedge*)(nxt<sp/>&amp;<sp/>(~<sp/>std::ptrdiff_t(1))));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Halfedge_const_handle<sp/><ref refid="group__STLAlgos_1gad4dbc8daf3c0e2201f4972eb9eea404d" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">next</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HDS::halfedge_handle((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Halfedge*)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(nxt<sp/>&amp;<sp/>(~<sp/>std::ptrdiff_t(1))));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/>set_opposite(<sp/>Halfedge_handle<sp/>h)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CGAL_precondition((<sp/>&amp;*<sp/>h<sp/>-<sp/>1<sp/>==<sp/>&amp;*<sp/>HDS::halfedge_handle(</highlight><highlight class="keyword">this</highlight><highlight class="normal">))<sp/>||</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>&amp;*<sp/>h<sp/>+<sp/>1<sp/>==<sp/>&amp;*<sp/>HDS::halfedge_handle(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>&amp;*<sp/>h<sp/>-<sp/>1<sp/>==<sp/>&amp;*<sp/>HDS::halfedge_handle(</highlight><highlight class="keyword">this</highlight><highlight class="normal">))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nxt<sp/>|=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nxt<sp/>&amp;=<sp/>(~<sp/>std::ptrdiff_t(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/>set_next(<sp/>Halfedge_handle<sp/>h)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CGAL_precondition(<sp/>((std::ptrdiff_t)(&amp;*h)<sp/>&amp;<sp/>1)<sp/>==<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nxt<sp/>=<sp/>((std::ptrdiff_t)(&amp;*h))<sp/>|<sp/>(nxt<sp/>&amp;<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Support<sp/>for<sp/>the<sp/>Vertex_handle.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Vertex_handle<sp/><sp/><sp/><sp/>v;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>incident<sp/>vertex.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Vertex_handle<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertex()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Vertex_const_handle<sp/><sp/><sp/>vertex()</highlight><highlight class="keyword"><sp/>const<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_vertex(<sp/>Vertex_handle<sp/>w)<sp/>{<sp/>v<sp/>=<sp/>w;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Face_handle<sp/><sp/><sp/><sp/><sp/><sp/>f;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Face_handle<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>face()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Face_const_handle<sp/><sp/><sp/><sp/><sp/>face()</highlight><highlight class="keyword"><sp/>const<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_face(<sp/>Face_handle<sp/>g)<sp/><sp/><sp/><sp/><sp/>{<sp/>f<sp/>=<sp/>g;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_border()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f<sp/>==<sp/>Face_handle();<sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Replace<sp/>halfedge<sp/>in<sp/>the<sp/>default<sp/>items<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">My_items<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1HalfedgeDS__items__2" kindref="compound">CGAL::HalfedgeDS_items_2</ref><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Refs,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Halfedge_wrapper<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>My_halfedge&lt;Refs&gt;<sp/>Halfedge;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Traits<sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Point_2;<sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1HalfedgeDS__vector" kindref="compound">CGAL::HalfedgeDS_vector&lt;Traits, My_items&gt;</ref><sp/>HDS;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1HalfedgeDS__decorator" kindref="compound">CGAL::HalfedgeDS_decorator&lt;HDS&gt;</ref><sp/><sp/>Decorator;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>HDS<sp/>hds(1,2,2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Decorator<sp/>decorator(hds);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>decorator.create_loop();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CGAL_assertion(<sp/>decorator.is_valid());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para></sect2>
<sect2 id="index_1HalfedgeDSExampleUsingtheHalfedgeIterator">
<title>Example Using the Halfedge Iterator</title>
<para>Two edges are created in the default halfedge data structure. The halfedge iterator is used to count the halfedges.</para><para><linebreak/>
<bold>File</bold> <ref refid="HalfedgeDS_2hds_prog_halfedge_iterator_8cpp-example" kindref="compound">HalfedgeDS/hds_prog_halfedge_iterator.cpp</ref> <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/HalfedgeDS_default.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/HalfedgeDS_decorator.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Traits<sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Point_2;<sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1HalfedgeDS__default" kindref="compound">CGAL::HalfedgeDS_default&lt;Traits&gt;</ref><sp/>HDS;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1HalfedgeDS__decorator" kindref="compound">CGAL::HalfedgeDS_decorator&lt;HDS&gt;</ref><sp/><sp/>Decorator;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>HDS::Halfedge_iterator<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>HDS<sp/>hds;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Decorator<sp/>decorator(hds);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>decorator.create_loop();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>decorator.create_segment();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CGAL_assertion(<sp/>decorator.is_valid());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>Iterator<sp/>i<sp/>=<sp/>hds.halfedges_begin();<sp/>i<sp/>!=<sp/>hds.halfedges_end();<sp/>++i<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++n;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CGAL_assertion(<sp/>n<sp/>==<sp/>4);<sp/><sp/></highlight><highlight class="comment">//<sp/>==<sp/>2<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para></sect2>
<sect2 id="index_1HalfedgeDSExampleforanAdaptertoBuildanEdge">
<title>Example for an Adapter to Build an Edge Iterator</title>
<para>Three edges are created in the default halfedge data structure. The adapter <computeroutput><ref refid="classCGAL_1_1N__step__adaptor" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">N_step_adaptor</ref></computeroutput> is used to declare the edge iterator used in counting the edges.</para><para><linebreak/>
<bold>File</bold> <ref refid="HalfedgeDS_2hds_prog_edge_iterator_8cpp-example" kindref="compound">HalfedgeDS/hds_prog_edge_iterator.cpp</ref> <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/HalfedgeDS_default.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/HalfedgeDS_decorator.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/N_step_adaptor.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Traits<sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Point_2;<sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1HalfedgeDS__default" kindref="compound">CGAL::HalfedgeDS_default&lt;Traits&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HDS;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1HalfedgeDS__decorator" kindref="compound">CGAL::HalfedgeDS_decorator&lt;HDS&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decorator;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>HDS::Halfedge_iterator<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Halfedge_iterator;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1N__step__adaptor" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::N_step_adaptor&lt; Halfedge_iterator, 2&gt;</ref><sp/>Iterator;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>HDS<sp/>hds;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Decorator<sp/>decorator(hds);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>decorator.create_loop();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>decorator.create_segment();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CGAL_assertion(<sp/>decorator.is_valid());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>Iterator<sp/>e<sp/>=<sp/>hds.halfedges_begin();<sp/>e<sp/>!=<sp/>hds.halfedges_end();<sp/>++e)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++n;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CGAL_assertion(<sp/>n<sp/>==<sp/>2);<sp/><sp/></highlight><highlight class="comment">//<sp/>==<sp/>2<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para></sect2>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
