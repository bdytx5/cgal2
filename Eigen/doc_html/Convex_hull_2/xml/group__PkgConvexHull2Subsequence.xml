<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__PkgConvexHull2Subsequence" kind="group">
    <compoundname>PkgConvexHull2Subsequence</compoundname>
    <title>Hull Subsequence Functions</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgConvexHull2Subsequence_1gafa026d25f9fee686e7a58af0ff365f86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classBidirectionalIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">BidirectionalIterator</ref></type>
          </param>
          <param>
            <type>class <ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::ch_graham_andrew_scan</definition>
        <argsstring>(BidirectionalIterator first, BidirectionalIterator beyond, OutputIterator result, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>ch_graham_andrew_scan</name>
        <param>
          <type><ref refid="classBidirectionalIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">BidirectionalIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classBidirectionalIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">BidirectionalIterator</ref></type>
          <declname>beyond</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>result</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
<para>generates the counterclockwise sequence of extreme points from a given sequence of input points that are not left of the line defined by the first and last points in this sequence. </para>        </briefdescription>
        <detaileddescription>
<para>More precisely, it generates the counterclockwise sequence of extreme points from a given sequence of input points that are not left of the line <formula id="4">$ pq$</formula> defined by the first ( <formula id="5">$p$</formula>) and last ( <formula id="6">$q$</formula>) points in this sequence ( <formula id="7">$ p$</formula> is the value of <computeroutput>first</computeroutput> and <formula id="8">$ q$</formula> is the value of <computeroutput>beyond</computeroutput> <formula id="9">$ -1$</formula>). The resulting sequence is placed starting at <computeroutput>result</computeroutput> with <formula id="7">$ p$</formula>; point <formula id="8">$ q$</formula> is omitted. The past-the-end iterator for the sequence is returned.</para><para><simplesect kind="pre"><para>The range [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>) contains at least two different points. The points in [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>) are sorted with respect to <formula id="4">$ pq$</formula>, <emphasis>i.e.</emphasis>, the sequence of points in [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>) define a counterclockwise polygon, for which the Graham-Sklansky-procedure <ref refid="citelist_1CITEREF_s-mcrm-72" kindref="member">[11]</ref> works.</para></simplesect>
The default traits class <computeroutput>Default_traits</computeroutput> is the kernel in which the type <computeroutput>BidirectionalIterator::value_type</computeroutput> is defined.</para><para><bold>Requirements</bold><linebreak/>
</para><para><orderedlist>
<listitem>
<para><computeroutput>BidirectionalIterator::value_type</computeroutput> and <computeroutput>OutputIterator::value_type</computeroutput> are equivalent to <computeroutput>Traits::Point_2</computeroutput>. </para></listitem>
<listitem>
<para><computeroutput>Traits</computeroutput> defines the following two types from the concept <computeroutput><ref refid="classConvexHullTraits__2" kindref="compound">ConvexHullTraits_2</ref></computeroutput> and their corresponding member functions that return instances of these types: <itemizedlist>
<listitem>
<para><computeroutput>Traits::Point_2</computeroutput>, </para></listitem>
<listitem>
<para><computeroutput>Traits::Left_turn_2</computeroutput>. </para></listitem>
</itemizedlist>
</para></listitem>
</orderedlist>
</para><para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1gaeccc6dda2f9d3096c94a7ff84cc91a85" kindref="member">CGAL::ch_graham_andrew()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Subsequence_1gaf6e4baad67192f0cc3da273cda717297" kindref="member">CGAL::lower_hull_points_2()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Subsequence_1ga1abc268fbd7b3edfc61af2efff6f3e93" kindref="member">CGAL::upper_hull_points_2()</ref></computeroutput></para></simplesect>
<bold>Implementation</bold><linebreak/>
</para><para>This algorithm requires <formula id="10">$ O(n)$</formula> time in the worst case for <formula id="1">$ n$</formula> input points.</para><para><bold>Example</bold><linebreak/>
</para><para>In the example <ref refid="Convex_hull_2_2ch_graham_anderson_8cpp-example" kindref="compound">Convex_hull_2/ch_graham_anderson.cpp</ref>, <computeroutput><ref refid="group__PkgConvexHull2Subsequence_1gafa026d25f9fee686e7a58af0ff365f86" kindref="member">ch_graham_andrew_scan()</ref></computeroutput> is used to realize Anderson&apos;s variant <ref refid="citelist_1CITEREF_a-readc-78" kindref="member">[2]</ref> of the Graham Scan <ref refid="citelist_1CITEREF_g-eadch-72" kindref="member">[7]</ref>. The points are sorted counterclockwise around the leftmost point using the <computeroutput>Less_rotate_ccw_2</computeroutput> predicate, as defined in the concept <computeroutput><ref refid="classConvexHullTraits__2" kindref="compound">ConvexHullTraits_2</ref></computeroutput>. According to the definition of <computeroutput>Less_rotate_ccw_2</computeroutput>, the leftmost point is the last point in the sorted sequence and its predecessor on the convex hull is the first point in the sorted sequence. It is not hard to see that the preconditions of <computeroutput><ref refid="group__PkgConvexHull2Subsequence_1gafa026d25f9fee686e7a58af0ff365f86" kindref="member">ch_graham_andrew_scan()</ref></computeroutput> are satisfied. Anderson&apos;s variant of the Graham scan is usually inferior to Andrew&apos;s variant because of its higher arithmetic demand. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/ch_graham_andrew.h" line="127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull2Subsequence_1gae9e0919cb50981d1f31ac242a2c4ba9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          </param>
          <param>
            <type>class <ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::ch_jarvis_march</definition>
        <argsstring>(ForwardIterator first, ForwardIterator beyond, const Traits::Point_2 &amp;start_p, const Traits::Point_2 &amp;stop_p, OutputIterator result, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>ch_jarvis_march</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>const Traits::Point_2 &amp;</type>
          <declname>start_p</declname>
        </param>
        <param>
          <type>const Traits::Point_2 &amp;</type>
          <declname>stop_p</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>result</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
<para>generates the counterclockwise sequence of extreme points from a given set of input points that line between two input points. </para>        </briefdescription>
        <detaileddescription>
<para>More precisely, it generates the counterclockwise subsequence of extreme points between <computeroutput>start_p</computeroutput> and <computeroutput>stop_p</computeroutput> of the points in the range [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>), starting at position <computeroutput>result</computeroutput> with point <computeroutput>start_p</computeroutput>. The last point generated is the point preceding <computeroutput>stop_p</computeroutput> in the counterclockwise order of extreme points.</para><para>The default traits class <computeroutput>Default_traits</computeroutput> is the kernel in which the type <computeroutput>ForwardIterator::value_type</computeroutput> is defined.</para><para><bold>Requirements</bold><linebreak/>
</para><para><orderedlist>
<listitem>
<para><computeroutput>ForwardIterator::value_type</computeroutput> and <computeroutput>OutputIterator::value_type</computeroutput> are equivalent to <computeroutput>Traits::Point_2</computeroutput>. </para></listitem>
<listitem>
<para><computeroutput>Traits</computeroutput> defines the following subset of types from the concept <computeroutput><ref refid="classConvexHullTraits__2" kindref="compound">ConvexHullTraits_2</ref></computeroutput> and their corresponding member functions that return instances of these types: <itemizedlist>
<listitem>
<para><computeroutput>Traits::Point_2</computeroutput>, </para></listitem>
<listitem>
<para><computeroutput>Traits::Equal_2</computeroutput>, </para></listitem>
<listitem>
<para><computeroutput>Traits::Less_rotate_ccw_2</computeroutput>. </para></listitem>
</itemizedlist>
</para></listitem>
</orderedlist>
</para><para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1ga99d0534bf096ae28a10b6844b21e7867" kindref="member">CGAL::ch_jarvis()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Subsequence_1gaf6e4baad67192f0cc3da273cda717297" kindref="member">CGAL::lower_hull_points_2()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Subsequence_1ga1abc268fbd7b3edfc61af2efff6f3e93" kindref="member">CGAL::upper_hull_points_2()</ref></computeroutput></para></simplesect>
<bold>Implementation</bold><linebreak/>
</para><para>The function uses the Jarvis march (gift-wrapping) algorithm <ref refid="citelist_1CITEREF_j-ichfs-73" kindref="member">[8]</ref>. This algorithm requires <formula id="2">$ O(n h)$</formula> time in the worst case for <formula id="1">$ n$</formula> input points with <formula id="3">$ h$</formula> extreme points</para><para><simplesect kind="pre"><para><computeroutput>start_p</computeroutput> and <computeroutput>stop_p</computeroutput> are extreme points with respect to the points in the range [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>) and <computeroutput>stop_p</computeroutput> is an element of range [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/ch_jarvis.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull2Subsequence_1gaf6e4baad67192f0cc3da273cda717297" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          </param>
          <param>
            <type>class <ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::lower_hull_points_2</definition>
        <argsstring>(InputIterator first, InputIterator beyond, OutputIterator result, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>lower_hull_points_2</name>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>beyond</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>result</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
<para>generates the counterclockwise sequence of extreme points on the lower hull of a given set of input points. </para>        </briefdescription>
        <detaileddescription>
<para>More precisely, it generates the counterclockwise sequence of extreme points on the lower hull of the points in the range [<computeroutput>first</computeroutput>, <computeroutput>beyond</computeroutput>). The resulting sequence is placed starting at position <computeroutput>result</computeroutput>, and the past-the-end iterator for the resulting sequence is returned. The sequence starts with the leftmost point; the rightmost point is not included. If there is only one extreme point (<emphasis>i.e.</emphasis>, leftmost and rightmost point are equal) the extreme point is reported. <simplesect kind="pre"><para>The source range [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>) does not contain <computeroutput>result</computeroutput>.</para></simplesect>
The default traits class <computeroutput>Default_traits</computeroutput> is the kernel in which the value type of <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput> is defined.</para><para>The different treatment by <computeroutput><ref refid="group__PkgConvexHull2Subsequence_1ga1abc268fbd7b3edfc61af2efff6f3e93" kindref="member">upper_hull_points_2()</ref></computeroutput> of the case that all points are equal ensures that concatenation of lower and upper hull points gives the sequence of extreme points.</para><para><bold>Requirements</bold><linebreak/>
</para><para><orderedlist>
<listitem>
<para>The value type of <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput> and <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> is equivalent to <computeroutput>Traits::Point_2</computeroutput>. </para></listitem>
<listitem>
<para><computeroutput>Traits</computeroutput> contains the following subset of types from the concept <computeroutput><ref refid="classConvexHullTraits__2" kindref="compound">ConvexHullTraits_2</ref></computeroutput> and their corresponding member functions that return instances of these types: <itemizedlist>
<listitem>
<para><computeroutput>Traits::Point_2</computeroutput>, </para></listitem>
<listitem>
<para><computeroutput>Traits::Equal_2</computeroutput>, </para></listitem>
<listitem>
<para><computeroutput>Traits::Less_xy_2</computeroutput>, </para></listitem>
<listitem>
<para><computeroutput>Traits::Less_yx_2</computeroutput>, </para></listitem>
<listitem>
<para><computeroutput>Traits::Left_turn_2</computeroutput>. </para></listitem>
</itemizedlist>
</para></listitem>
</orderedlist>
</para><para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1gaeccc6dda2f9d3096c94a7ff84cc91a85" kindref="member">CGAL::ch_graham_andrew()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Subsequence_1gafa026d25f9fee686e7a58af0ff365f86" kindref="member">CGAL::ch_graham_andrew_scan()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Subsequence_1ga1abc268fbd7b3edfc61af2efff6f3e93" kindref="member">CGAL::upper_hull_points_2()</ref></computeroutput></para></simplesect>
<bold>Implementation</bold><linebreak/>
</para><para>This function uses Andrew&apos;s variant of Graham&apos;s scan algorithm <ref refid="citelist_1CITEREF_a-aeach-79" kindref="member">[3]</ref>, <ref refid="citelist_1CITEREF_m-mdscg-84" kindref="member">[9]</ref>. The algorithm has worst-case running time of <formula id="0">$ O(n \log n)$</formula> for <formula id="1">$ n$</formula> input points. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/convex_hull_2.h" line="137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull2Subsequence_1ga1abc268fbd7b3edfc61af2efff6f3e93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          </param>
          <param>
            <type>class <ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::upper_hull_points_2</definition>
        <argsstring>(InputIterator first, InputIterator beyond, OutputIterator result, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>upper_hull_points_2</name>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>beyond</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>result</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
<para>generates the counterclockwise sequence of extreme points on the upper hull of a given set of input points. </para>        </briefdescription>
        <detaileddescription>
<para>More precisely, it generates the counterclockwise sequence of extreme points on the upper hull of the points in the range [<computeroutput>first</computeroutput>, <computeroutput>beyond</computeroutput>). The resulting sequence is placed starting at position <computeroutput>result</computeroutput>, and the past-the-end iterator for the resulting sequence is returned. The sequence starts with the rightmost point, the leftmost point is not included. If there is only one extreme point (<emphasis>i.e.</emphasis>, the leftmost and rightmost point are equal), the extreme point is not reported. <simplesect kind="pre"><para>The source range [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>) does not contain <computeroutput>result</computeroutput>.</para></simplesect>
The default traits class <computeroutput>Default_traits</computeroutput> is the kernel in which the value type of <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput> is defined.</para><para>The different treatment by <computeroutput><ref refid="group__PkgConvexHull2Subsequence_1gaf6e4baad67192f0cc3da273cda717297" kindref="member">lower_hull_points_2()</ref></computeroutput> of the case that all points are equal ensures that concatenation of lower and upper hull points gives the sequence of extreme points.</para><para><bold>Requirements</bold><linebreak/>
</para><para><orderedlist>
<listitem>
<para>The value type of <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput> and <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> is equivalent to <computeroutput>Traits::Point_2</computeroutput>. </para></listitem>
<listitem>
<para><computeroutput>Traits</computeroutput> contains the following subset of types from the concept <computeroutput><ref refid="classConvexHullTraits__2" kindref="compound">ConvexHullTraits_2</ref></computeroutput> and their corresponding member functions that return instances of these types: <itemizedlist>
<listitem>
<para><computeroutput>Traits::Point_2</computeroutput>, </para></listitem>
<listitem>
<para><computeroutput>Traits::Equal_2</computeroutput>, </para></listitem>
<listitem>
<para><computeroutput>Traits::Less_xy_2</computeroutput>, </para></listitem>
<listitem>
<para><computeroutput>Traits::Less_yx_2</computeroutput>, </para></listitem>
<listitem>
<para><computeroutput>Traits::Left_turn_2</computeroutput>. </para></listitem>
</itemizedlist>
</para></listitem>
</orderedlist>
</para><para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1gaeccc6dda2f9d3096c94a7ff84cc91a85" kindref="member">CGAL::ch_graham_andrew()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Subsequence_1gafa026d25f9fee686e7a58af0ff365f86" kindref="member">CGAL::ch_graham_andrew_scan()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Subsequence_1gaf6e4baad67192f0cc3da273cda717297" kindref="member">CGAL::lower_hull_points_2()</ref></computeroutput></para></simplesect>
<bold>Implementation</bold><linebreak/>
</para><para>This function uses Andrew&apos;s variant of Graham&apos;s scan algorithm <ref refid="citelist_1CITEREF_a-aeach-79" kindref="member">[3]</ref>, <ref refid="citelist_1CITEREF_m-mdscg-84" kindref="member">[9]</ref>. The algorithm has worst-case running time of <formula id="0">$ O(n \log n)$</formula> for <formula id="1">$ n$</formula> input points. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/convex_hull_2.h" line="201" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
