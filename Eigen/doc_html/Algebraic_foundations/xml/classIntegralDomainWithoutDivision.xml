<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classIntegralDomainWithoutDivision" kind="class" language="C++" prot="public">
    <compoundname>IntegralDomainWithoutDivision</compoundname>
    <includes local="no">Concepts/IntegralDomainWithoutDivision.h</includes>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <memberdef kind="function" id="classIntegralDomainWithoutDivision_1ae4cb9ba3cf18a1635f1e29c91a45f86e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classIntegralDomainWithoutDivision" kindref="compound">IntegralDomainWithoutDivision</ref></type>
        <definition>IntegralDomainWithoutDivision IntegralDomainWithoutDivision::operator+</definition>
        <argsstring>(const IntegralDomainWithoutDivision &amp;a)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classIntegralDomainWithoutDivision" kindref="compound">IntegralDomainWithoutDivision</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>unary plus </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/IntegralDomainWithoutDivision.h" line="60" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classIntegralDomainWithoutDivision_1a3f6ae6a9fa48d907e0e60e7671cc2d4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classIntegralDomainWithoutDivision" kindref="compound">IntegralDomainWithoutDivision</ref></type>
        <definition>IntegralDomainWithoutDivision IntegralDomainWithoutDivision::operator-</definition>
        <argsstring>(const IntegralDomainWithoutDivision &amp;a)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classIntegralDomainWithoutDivision" kindref="compound">IntegralDomainWithoutDivision</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>unary minus </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/IntegralDomainWithoutDivision.h" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classIntegralDomainWithoutDivision_1ab8e7ca0c415200f346bc851867715e30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classIntegralDomainWithoutDivision" kindref="compound">IntegralDomainWithoutDivision</ref></type>
        <definition>IntegralDomainWithoutDivision IntegralDomainWithoutDivision::operator+</definition>
        <argsstring>(const IntegralDomainWithoutDivision &amp;a, const IntegralDomainWithoutDivision &amp;b)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classIntegralDomainWithoutDivision" kindref="compound">IntegralDomainWithoutDivision</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classIntegralDomainWithoutDivision" kindref="compound">IntegralDomainWithoutDivision</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/IntegralDomainWithoutDivision.h" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classIntegralDomainWithoutDivision_1a557348392cee4109ef7b21c9a25eb576" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classIntegralDomainWithoutDivision" kindref="compound">IntegralDomainWithoutDivision</ref></type>
        <definition>IntegralDomainWithoutDivision IntegralDomainWithoutDivision::operator-</definition>
        <argsstring>(const IntegralDomainWithoutDivision &amp;a, const IntegralDomainWithoutDivision &amp;b)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classIntegralDomainWithoutDivision" kindref="compound">IntegralDomainWithoutDivision</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classIntegralDomainWithoutDivision" kindref="compound">IntegralDomainWithoutDivision</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/IntegralDomainWithoutDivision.h" line="79" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classIntegralDomainWithoutDivision_1ac28ce58cc26b6ccfb65667b1b38e9605" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classIntegralDomainWithoutDivision" kindref="compound">IntegralDomainWithoutDivision</ref></type>
        <definition>IntegralDomainWithoutDivision IntegralDomainWithoutDivision::operator*</definition>
        <argsstring>(const IntegralDomainWithoutDivision &amp;a, const IntegralDomainWithoutDivision &amp;b)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classIntegralDomainWithoutDivision" kindref="compound">IntegralDomainWithoutDivision</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classIntegralDomainWithoutDivision" kindref="compound">IntegralDomainWithoutDivision</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/IntegralDomainWithoutDivision.h" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classIntegralDomainWithoutDivision_1a286c309332a7ccf0f8c767875a076af2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classIntegralDomainWithoutDivision" kindref="compound">IntegralDomainWithoutDivision</ref></type>
        <definition>IntegralDomainWithoutDivision IntegralDomainWithoutDivision::operator+=</definition>
        <argsstring>(const IntegralDomainWithoutDivision &amp;b)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classIntegralDomainWithoutDivision" kindref="compound">IntegralDomainWithoutDivision</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/IntegralDomainWithoutDivision.h" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classIntegralDomainWithoutDivision_1ade891fa308266c824b3aa9071b5f17ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classIntegralDomainWithoutDivision" kindref="compound">IntegralDomainWithoutDivision</ref></type>
        <definition>IntegralDomainWithoutDivision IntegralDomainWithoutDivision::operator-=</definition>
        <argsstring>(const IntegralDomainWithoutDivision &amp;b)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classIntegralDomainWithoutDivision" kindref="compound">IntegralDomainWithoutDivision</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/IntegralDomainWithoutDivision.h" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classIntegralDomainWithoutDivision_1a844e5abb25ff58c78e3c7cda682d26ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classIntegralDomainWithoutDivision" kindref="compound">IntegralDomainWithoutDivision</ref></type>
        <definition>IntegralDomainWithoutDivision IntegralDomainWithoutDivision::operator*=</definition>
        <argsstring>(const IntegralDomainWithoutDivision &amp;b)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="classIntegralDomainWithoutDivision" kindref="compound">IntegralDomainWithoutDivision</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/IntegralDomainWithoutDivision.h" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classIntegralDomainWithoutDivision_1a6e29e776672c831928bd2f920c446bd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>result_type</type>
        <definition>result_type IntegralDomainWithoutDivision::operator==</definition>
        <argsstring>(const IntegralDomainWithoutDivision &amp;a, const IntegralDomainWithoutDivision &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classIntegralDomainWithoutDivision" kindref="compound">IntegralDomainWithoutDivision</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classIntegralDomainWithoutDivision" kindref="compound">IntegralDomainWithoutDivision</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>The <computeroutput>result_type</computeroutput> is convertible to <computeroutput>bool</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/IntegralDomainWithoutDivision.h" line="112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classIntegralDomainWithoutDivision_1ad6321a6e2922e02f8f177530058f35f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>result_type</type>
        <definition>result_type IntegralDomainWithoutDivision::operator!=</definition>
        <argsstring>(const IntegralDomainWithoutDivision &amp;a, const IntegralDomainWithoutDivision &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classIntegralDomainWithoutDivision" kindref="compound">IntegralDomainWithoutDivision</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classIntegralDomainWithoutDivision" kindref="compound">IntegralDomainWithoutDivision</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>The <computeroutput>result_type</computeroutput> is convertible to <computeroutput>bool</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/IntegralDomainWithoutDivision.h" line="118" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This is the most basic concept for algebraic structures considered within <ref refid="namespaceCGAL" kindref="compound">CGAL</ref>. </para>    </briefdescription>
    <detaileddescription>
<para> A model <computeroutput><ref refid="classIntegralDomainWithoutDivision" kindref="compound">IntegralDomainWithoutDivision</ref></computeroutput> represents an integral domain, i.e. commutative ring with 0, 1, +, * and unity free of zero divisors.</para><para><bold>Note:</bold> A model is not required to offer the always well defined integral division.</para><para>It refines <computeroutput><ref refid="classAssignable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">Assignable</ref></computeroutput>, <computeroutput><ref refid="classCopyConstructible" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">CopyConstructible</ref></computeroutput>, <computeroutput><ref refid="classDefaultConstructible" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">DefaultConstructible</ref></computeroutput> and <computeroutput><ref refid="classFromIntConstructible" kindref="compound">FromIntConstructible</ref></computeroutput>.</para><para>It refines <computeroutput><ref refid="classEqualityComparable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">EqualityComparable</ref></computeroutput>, where equality is defined w.r.t. the ring element being represented.</para><para>The operators unary and binary plus +, unary and binary minus -, multiplication * and their compound forms +=, -=, *= are required and implement the respective ring operations.</para><para>Moreover, <computeroutput><ref refid="classCGAL_1_1Algebraic__structure__traits" kindref="compound">CGAL::Algebraic_structure_traits</ref>&lt; <ref refid="classIntegralDomainWithoutDivision" kindref="compound">IntegralDomainWithoutDivision</ref> &gt;</computeroutput> is a model of <computeroutput><ref refid="classAlgebraicStructureTraits" kindref="compound">AlgebraicStructureTraits</ref></computeroutput> providing:</para><para><itemizedlist>
<listitem><para><ref refid="classAlgebraicStructureTraits_1aa5ceaea55d77df93eb00cb537af0e5f3" kindref="member"><computeroutput>CGAL::Algebraic_structure_traits&lt; IntegralDomainWithoutDivision &gt;::Algebraic_category</computeroutput> </ref> derived from <computeroutput><ref refid="structCGAL_1_1Integral__domain__without__division__tag" kindref="compound">CGAL::Integral_domain_without_division_tag</ref></computeroutput></para></listitem><listitem><para><ref refid="classAlgebraicStructureTraits_1ad8eea5eb95c34851dbd4b454082947e3" kindref="member"><computeroutput>CGAL::Algebraic_structure_traits&lt; IntegralDomainWithoutDivision &gt;::Is_zero</computeroutput> </ref> which is a model of <computeroutput><ref refid="classAlgebraicStructureTraits___1_1IsZero" kindref="compound">AlgebraicStructureTraits_::IsZero</ref></computeroutput></para></listitem><listitem><para><ref refid="classAlgebraicStructureTraits_1a1d973bb51a77a9979f87cb1cf5d96873" kindref="member"><computeroutput>CGAL::Algebraic_structure_traits&lt; IntegralDomainWithoutDivision &gt;::Is_one</computeroutput> </ref> which is a model of <computeroutput><ref refid="classAlgebraicStructureTraits___1_1IsOne" kindref="compound">AlgebraicStructureTraits_::IsOne</ref></computeroutput></para></listitem><listitem><para><ref refid="classAlgebraicStructureTraits_1a9ab5f2a85261fe9aee3deff561e4b3e6" kindref="member"><computeroutput>CGAL::Algebraic_structure_traits&lt; IntegralDomainWithoutDivision &gt;::Square</computeroutput> </ref> which is a model of <computeroutput><ref refid="classAlgebraicStructureTraits___1_1Square" kindref="compound">AlgebraicStructureTraits_::Square</ref></computeroutput></para></listitem><listitem><para><ref refid="classAlgebraicStructureTraits_1a52a18ef960fa296ff071bf3031dec9d9" kindref="member"><computeroutput>CGAL::Algebraic_structure_traits&lt; IntegralDomainWithoutDivision &gt;::Simplify</computeroutput> </ref> which is a model of <computeroutput><ref refid="classAlgebraicStructureTraits___1_1Simplify" kindref="compound">AlgebraicStructureTraits_::Simplify</ref></computeroutput></para></listitem><listitem><para><ref refid="classAlgebraicStructureTraits_1aba5aea58a3a31be5f487a6bb1f7cf8e3" kindref="member"><computeroutput>CGAL::Algebraic_structure_traits&lt; IntegralDomainWithoutDivision &gt;::Unit_part</computeroutput> </ref> which is a model of <computeroutput><ref refid="classAlgebraicStructureTraits___1_1UnitPart" kindref="compound">AlgebraicStructureTraits_::UnitPart</ref></computeroutput></para></listitem></itemizedlist>
</para><para><xrefsect id="refines_1_refines000027"><xreftitle>Refines</xreftitle><xrefdescription><para><computeroutput><ref refid="classAssignable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">Assignable</ref></computeroutput> </para><para><computeroutput><ref refid="classCopyConstructible" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">CopyConstructible</ref></computeroutput> </para><para><computeroutput><ref refid="classDefaultConstructible" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">DefaultConstructible</ref></computeroutput> </para><para><computeroutput><ref refid="classEqualityComparable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">EqualityComparable</ref></computeroutput> </para><para><computeroutput><ref refid="classFromIntConstructible" kindref="compound">FromIntConstructible</ref></computeroutput> </para></xrefdescription></xrefsect></para><para><simplesect kind="see"><para><computeroutput><ref refid="classIntegralDomainWithoutDivision" kindref="compound">IntegralDomainWithoutDivision</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classIntegralDomain" kindref="compound">IntegralDomain</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classUniqueFactorizationDomain" kindref="compound">UniqueFactorizationDomain</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classEuclideanRing" kindref="compound">EuclideanRing</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classField" kindref="compound">Field</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classFieldWithSqrt" kindref="compound">FieldWithSqrt</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classFieldWithKthRoot" kindref="compound">FieldWithKthRoot</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classFieldWithRootOf" kindref="compound">FieldWithRootOf</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classAlgebraicStructureTraits" kindref="compound">AlgebraicStructureTraits</ref></computeroutput> </para></simplesect>
</para>    </detaileddescription>
    <location file="Concepts/IntegralDomainWithoutDivision.h" line="50" column="1" bodyfile="Concepts/IntegralDomainWithoutDivision.h" bodystart="50" bodyend="122"/>
    <listofallmembers>
      <member refid="classIntegralDomainWithoutDivision_1ad6321a6e2922e02f8f177530058f35f8" prot="public" virt="non-virtual"><scope>IntegralDomainWithoutDivision</scope><name>operator!=</name></member>
      <member refid="classIntegralDomainWithoutDivision_1ac28ce58cc26b6ccfb65667b1b38e9605" prot="public" virt="non-virtual"><scope>IntegralDomainWithoutDivision</scope><name>operator*</name></member>
      <member refid="classIntegralDomainWithoutDivision_1a844e5abb25ff58c78e3c7cda682d26ec" prot="public" virt="non-virtual"><scope>IntegralDomainWithoutDivision</scope><name>operator*=</name></member>
      <member refid="classIntegralDomainWithoutDivision_1ae4cb9ba3cf18a1635f1e29c91a45f86e" prot="public" virt="non-virtual"><scope>IntegralDomainWithoutDivision</scope><name>operator+</name></member>
      <member refid="classIntegralDomainWithoutDivision_1ab8e7ca0c415200f346bc851867715e30" prot="public" virt="non-virtual"><scope>IntegralDomainWithoutDivision</scope><name>operator+</name></member>
      <member refid="classIntegralDomainWithoutDivision_1a286c309332a7ccf0f8c767875a076af2" prot="public" virt="non-virtual"><scope>IntegralDomainWithoutDivision</scope><name>operator+=</name></member>
      <member refid="classIntegralDomainWithoutDivision_1a3f6ae6a9fa48d907e0e60e7671cc2d4f" prot="public" virt="non-virtual"><scope>IntegralDomainWithoutDivision</scope><name>operator-</name></member>
      <member refid="classIntegralDomainWithoutDivision_1a557348392cee4109ef7b21c9a25eb576" prot="public" virt="non-virtual"><scope>IntegralDomainWithoutDivision</scope><name>operator-</name></member>
      <member refid="classIntegralDomainWithoutDivision_1ade891fa308266c824b3aa9071b5f17ff" prot="public" virt="non-virtual"><scope>IntegralDomainWithoutDivision</scope><name>operator-=</name></member>
      <member refid="classIntegralDomainWithoutDivision_1a6e29e776672c831928bd2f920c446bd4" prot="public" virt="non-virtual"><scope>IntegralDomainWithoutDivision</scope><name>operator==</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
