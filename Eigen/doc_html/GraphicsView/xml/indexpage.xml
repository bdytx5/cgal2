<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>User Manual</title>
    <detaileddescription>
<para><anchor id="index_1Chapter_CGAL_and_the_Qt_Graphics_View_Framework"/><anchor id="index_1chapterQGraphicsView"/> <simplesect kind="authors"><para>Andreas Fabri and Laurent Rineau</para></simplesect>
<ulink url="http://qt-project.org/doc/qt-5/">Qt</ulink> is a Gui toolkit for cross-platform application development.</para><sect1 id="index_1GraphicsViewIntroduction">
<title>Introduction</title>
<para>This chapter describes classes that help to visualize two dimensional CGAL objects with the <ulink url="http://qt-project.org/doc/qt-5/graphicsview.html">Qt Graphics View Framework</ulink>.</para><para>This framework uses the model view paradigm. <ulink url="http://qt-project.org/doc/qt-5/qgraphicsitem.html"><computeroutput>QGraphicsItem</computeroutput></ulink>s are stored in a <ulink url="http://qt-project.org/doc/qt-5/qgraphicsscene.html"><computeroutput>QGraphicsScene</computeroutput></ulink> and are displayed in a <ulink url="http://qt-project.org/doc/qt-5/qgraphicsview.html"><computeroutput>QGraphicsView</computeroutput></ulink>. The items have a paint method which is called when an item is in the visible area of a view. The framework is also responsible for dispatching events from the view via the scene to the items. The framework is extensible in the sense that users can add classes derived from <computeroutput>QGraphicsItem</computeroutput>.</para><para>Besides visualizing <computeroutput>QGraphicsItem</computeroutput>s users want to enter geometric objects. We provide the input generators for all 2D CGAL <computeroutput><ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> objects.</para><para>The package includes also a class for providing zooming, panning, and scrolling to the graphics view.</para><para>The following sections describe the interaction between all these classes, We finally describe the internals of a <computeroutput>QGraphicsItem</computeroutput>.</para><sect2 id="index_1GraphicsViewNamingConventions">
<title>Naming Conventions</title>
<para>As Qt and CGAL have different naming conventions, and as this package brings them together we adopted the following, hybrid naming conventions.</para><para><itemizedlist>
<listitem>
<para>All header files are in the directory <computeroutput>CGAL/Qt/</computeroutput>. </para></listitem>
<listitem>
<para>Class names are concatenated capitalized words, and function names are concatenated capitalized word with the first word in lowercase. The rationale is that these classes are related to Qt, and that they sometimes are derived classes that have to override member functions adhering to this naming scheme. </para></listitem>
<listitem>
<para>All classes are in the nested namespace <computeroutput><ref refid="namespaceCGAL_1_1Qt" kindref="compound">CGAL::Qt</ref></computeroutput>. </para></listitem>
</itemizedlist>
</para></sect2>
</sect1>
<sect1 id="index_1GraphicsViewOverall">
<title>Overall Design</title>
<para>In <ref refid="index_1fig__graphicsviewuml" kindref="member">fig__graphicsviewuml</ref> you see four classes depicted in grey, that come from the Qt Graphics View Framework. The <ulink url="http://qt-project.org/doc/qt-5/qgraphicsscene.html"><computeroutput>QGraphicsScene</computeroutput></ulink> contains <ulink url="http://qt-project.org/doc/qt-5/qgraphicsitem.html"><computeroutput>QGraphicsItem</computeroutput></ulink>s, which get displayed in any number of <ulink url="http://qt-project.org/doc/qt-5/qgraphicsview.html"><computeroutput>QGraphicsView</computeroutput></ulink>s. The views are widgets, that is they take screen space in an application.</para><para>The fourth class is the <ulink url="http://qt-project.org/doc/qt-5/qobject.html"><computeroutput>QObject</computeroutput></ulink>. It plays an important role in Qt for event handling and memory management. First, it allows to add <ulink url="http://qt-project.org/doc/qt-5/signalsandslots.html">signals and slots</ulink>, and to connect them. Second, it allows to install <ulink url="http://qt-project.org/doc/qt-5/eventsandfilters.html">event filters</ulink>.</para><para><anchor id="index_1fig__graphicsviewuml"/><image type="html" name="uml-design.png"></image>
 <image type="latex" name="uml-design.png" width="15cm"></image>
  <ref refid="index_1fig__graphicsviewuml" kindref="member">fig__graphicsviewuml</ref> UML Class Diagram with the Qt classes (blue), CGAL classes for using the framework (yellow), CGAL data structures (red), and application classes (green).  <linebreak/>
</para><sect2 id="index_1GraphicsViewVisualizingCGALDatastructures">
<title>Visualizing CGAL Datastructures</title>
<para>In order to visualize for example a <computeroutput><ref refid="classCGAL_1_1Delaunay__triangulation__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_2.tag">CGAL::Delaunay_triangulation_2</ref></computeroutput>, we provide the graphics item class <computeroutput><ref refid="classCGAL_1_1Qt_1_1TriangulationGraphicsItem" kindref="compound">CGAL::Qt::TriangulationGraphicsItem</ref>&lt;T&gt;</computeroutput>. It provides a <computeroutput>paint</computeroutput> method that draws the edges and vertices of a triangulation using the drawing primitives of the <ulink url="http://qt-project.org/doc/qt-5/qpainter.html"><computeroutput>QPainter</computeroutput></ulink>. The color of vertices and edges, can be chosen by setting a user defined <ulink url="http://qt-project.org/doc/qt-5/qpen.html"><computeroutput>QPen</computeroutput></ulink>.</para><para>As this graphics item only stores a pointer to a triangulation, it must be notified about changes like the insertion of points coming from a file, a process or as input generated with the mouse. We use the signal/slot mechanism of Qt for that purpose, that is when the triangulation changes the application emits a signal that can get connected to the <computeroutput>modelChanged()</computeroutput> slot of the graphics item.</para></sect2>
<sect2 id="index_1GraphicsViewNavigation">
<title>Navigation</title>
<para>We provide a class <computeroutput><ref refid="classCGAL_1_1Qt_1_1GraphicsViewNavigation" kindref="compound">CGAL::Qt::GraphicsViewNavigation</ref></computeroutput> that can be installed as an event filter of a graphics view and its viewport. As for all Qt widgets, the <computeroutput>QGraphicsView</computeroutput> is derived from <computeroutput>QObject</computeroutput>. Events like the mouse buttons pressed or released, the mouse movemed, keys pressed, are passed to the view which first hands them over to the event filter. The <computeroutput><ref refid="classCGAL_1_1Qt_1_1GraphicsViewNavigation" kindref="compound">CGAL::Qt::GraphicsViewNavigation</ref></computeroutput> event filter allows to zoom, scroll, and recenter. Finally, the class emits a signal with the mouse coordinates. This can be used to display the current mouse position in the status bar of an application.</para></sect2>
<sect2 id="index_1GraphicsViewGenerationofInput">
<title>Generation of Input</title>
<para>Input of CGAL <computeroutput><ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> objects, polylines, etc. is generated by classes derived from <computeroutput><ref refid="classCGAL_1_1Qt_1_1GraphicsViewInput" kindref="compound">CGAL::Qt::GraphicsViewInput</ref></computeroutput>. As the navigation class, they are event handler of the graphics view, because they have to know where the mouse is, when the user clicks in order to enter a point.</para><para>Once the input generator has assembled the object, which can involve several mouse clicks, it emits a <computeroutput><ref refid="classCGAL_1_1Object" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::Object</ref></computeroutput> wrapping the input. The emitted input can be connected by the application developer to a slot. In the 2D demos of CGAL, which use the Graphics View Framework we connect it to the slot <computeroutput>MainWindow::processInput(CGAL::Object)</computeroutput>. This method unwraps from the <computeroutput><ref refid="classCGAL_1_1Object" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::Object</ref></computeroutput> and inserts it in the data structure. It then typically emits a signal <computeroutput>modelChanged()</computeroutput> which can be connected to the graphics item representing the data structure.</para><para>All input generators we provide use the left mouse button for entering points. The right click terminates a sequence of entered points. &apos;Delete&apos; and &apos;backspace&apos; remove the last entered point. &apos;Esc&apos; resets the input generator. As the &apos;Ctrl&apos; key is used by the <computeroutput><ref refid="classCGAL_1_1Qt_1_1GraphicsViewNavigation" kindref="compound">CGAL::Qt::GraphicsViewNavigation</ref></computeroutput> this modifier is not used. </para></sect2>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
