<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCombinationElement" kind="class" language="C++" prot="public">
    <compoundname>CombinationElement</compoundname>
    <includes local="no">Concepts/CombinationElement.h</includes>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCombinationElement_1a28e8bc65c9929eba23002826e22bb362" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CombinationElement::CombinationElement</definition>
        <argsstring>(const CombinationElement &amp;e2)</argsstring>
        <name>CombinationElement</name>
        <param>
          <type>const <ref refid="classCombinationElement" kindref="compound">CombinationElement</ref> &amp;</type>
          <declname>e2</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/CombinationElement.h" line="25" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classCombinationElement_1ad875709a3415bde30ae09419d1027d18" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CombinationElement::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
<para>the type of point being generated. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/CombinationElement.h" line="36" column="1" bodyfile="Concepts/CombinationElement.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <memberdef kind="function" id="classCombinationElement_1a12ff71e27b597405cd523f0ee0a19fe7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CombinationElement::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription>
<para>Incrementation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/CombinationElement.h" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCombinationElement_1a6b6a7da0d499da39ce3f48dd1879642c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CombinationElement::operator--</definition>
        <argsstring>()</argsstring>
        <name>operator--</name>
        <briefdescription>
<para>Decrementation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/CombinationElement.h" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCombinationElement_1a0be8d9712f439f94841086db3a3a0627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CombinationElement::operator&lt;</definition>
        <argsstring>(const CombinationElement &amp;e2)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classCombinationElement" kindref="compound">CombinationElement</ref> &amp;</type>
          <declname>e2</declname>
        </param>
        <briefdescription>
<para>Total order comparison. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/CombinationElement.h" line="56" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCombinationElement_1a07305e6e2d748293f23bc994c914d0c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CombinationElement::operator==</definition>
        <argsstring>(const CombinationElement &amp;e2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classCombinationElement" kindref="compound">CombinationElement</ref> &amp;</type>
          <declname>e2</declname>
        </param>
        <briefdescription>
<para>Equality test. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/CombinationElement.h" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCombinationElement_1a06e43ba6b4a4c99ef9c1f786b0a2949c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCombinationElement" kindref="compound">CombinationElement</ref></type>
        <definition>CombinationElement CombinationElement::operator+</definition>
        <argsstring>(int i)</argsstring>
        <name>operator+</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Equivalent to calling <computeroutput>++(*this)</computeroutput> <computeroutput>i</computeroutput> times if i is positive. </para>        </briefdescription>
        <detaileddescription>
<para>Equivalent to calling <computeroutput>--(*this)</computeroutput> <computeroutput>-i</computeroutput> times if i is negative. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/CombinationElement.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCombinationElement_1aab6cf8e1cdcfab988b8f6f077ad08c42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CombinationElement::operator-</definition>
        <argsstring>(const CombinationElement &amp;e2)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classCombinationElement" kindref="compound">CombinationElement</ref> &amp;</type>
          <declname>e2</declname>
        </param>
        <briefdescription>
<para>Equivalent to calling ++(*this) <computeroutput>i</computeroutput> times if i is positive. </para>        </briefdescription>
        <detaileddescription>
<para>Equivalent to calling <ndash/>(*this) <computeroutput>-i</computeroutput> times if i is negative. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/CombinationElement.h" line="74" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A <ref refid="classCombinationElement" kindref="compound">CombinationElement</ref> can be used as template parameter for the class <computeroutput>Combination_enumerator&lt;<ref refid="classCombinationElement" kindref="compound">CombinationElement</ref>&gt;</computeroutput>. </para>    </briefdescription>
    <detaileddescription>
<para> <xrefsect id="hasModels_1_hasModels000001"><xreftitle>Has Models</xreftitle><xrefdescription><para>Any integer type (<computeroutput>char</computeroutput>, <computeroutput>short</computeroutput>, <computeroutput>int</computeroutput>, <computeroutput>long</computeroutput>, etc.) </para><para>Pointers </para><para>Random access iterators</para></xrefdescription></xrefsect></para><para><simplesect kind="see"><para><computeroutput>Combination_enumerator&lt;<ref refid="classCombinationElement" kindref="compound">CombinationElement</ref>&gt;</computeroutput> </para></simplesect>
</para>    </detaileddescription>
    <location file="Concepts/CombinationElement.h" line="16" column="1" bodyfile="Concepts/CombinationElement.h" bodystart="16" bodyend="78"/>
    <listofallmembers>
      <member refid="classCombinationElement_1a28e8bc65c9929eba23002826e22bb362" prot="public" virt="non-virtual"><scope>CombinationElement</scope><name>CombinationElement</name></member>
      <member refid="classCombinationElement_1a06e43ba6b4a4c99ef9c1f786b0a2949c" prot="public" virt="non-virtual"><scope>CombinationElement</scope><name>operator+</name></member>
      <member refid="classCombinationElement_1a12ff71e27b597405cd523f0ee0a19fe7" prot="public" virt="non-virtual"><scope>CombinationElement</scope><name>operator++</name></member>
      <member refid="classCombinationElement_1aab6cf8e1cdcfab988b8f6f077ad08c42" prot="public" virt="non-virtual"><scope>CombinationElement</scope><name>operator-</name></member>
      <member refid="classCombinationElement_1a6b6a7da0d499da39ce3f48dd1879642c" prot="public" virt="non-virtual"><scope>CombinationElement</scope><name>operator--</name></member>
      <member refid="classCombinationElement_1a0be8d9712f439f94841086db3a3a0627" prot="public" virt="non-virtual"><scope>CombinationElement</scope><name>operator&lt;</name></member>
      <member refid="classCombinationElement_1a07305e6e2d748293f23bc994c914d0c3" prot="public" virt="non-virtual"><scope>CombinationElement</scope><name>operator==</name></member>
      <member refid="classCombinationElement_1ad875709a3415bde30ae09419d1027d18" prot="public" virt="non-virtual"><scope>CombinationElement</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
