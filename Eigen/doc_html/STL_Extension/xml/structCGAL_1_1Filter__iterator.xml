<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structCGAL_1_1Filter__iterator" kind="struct" language="C++" prot="public">
    <compoundname>CGAL::Filter_iterator</compoundname>
    <includes local="no">CGAL/iterator.h</includes>
    <templateparamlist>
      <param>
        <type>typename <ref refid="classIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">Iterator</ref></type>
      </param>
      <param>
        <type>typename Predicate</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="structCGAL_1_1Filter__iterator_1a5206dc5c2d11ea467988afcdee26ce41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Filter_iterator&lt; Iterator, Predicate &gt;::Filter_iterator</definition>
        <argsstring>()</argsstring>
        <name>Filter_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/iterator.h" line="357" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Filter__iterator_1afcfc6622bf4b509d601f5f2d90fea51d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Filter_iterator&lt; Iterator, Predicate &gt;::Filter_iterator</definition>
        <argsstring>(Iterator e, Predicate p, Iterator c=e)</argsstring>
        <name>Filter_iterator</name>
        <param>
          <type><ref refid="classIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">Iterator</ref></type>
          <declname>e</declname>
        </param>
        <param>
          <type>Predicate</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">Iterator</ref></type>
          <declname>c</declname>
          <defval>e</defval>
        </param>
        <briefdescription>
<para>creates an iterator which filters values according to <computeroutput>p</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Initializes by taking the first valid iterator (according to <computeroutput>p</computeroutput>), starting at <computeroutput>c</computeroutput>, and stopping at <computeroutput>e</computeroutput> if none is found. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/iterator.h" line="371" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="related">
      <memberdef kind="function" id="structCGAL_1_1Filter__iterator_1a6d36a8dd4a7b9ce9bdabc6f91d96f21e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">Iterator</ref></type>
          </param>
          <param>
            <type>class Predicate</type>
          </param>
        </templateparamlist>
        <type><ref refid="structCGAL_1_1Filter__iterator" kindref="compound">Filter_iterator</ref>&lt; <ref refid="classIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">Iterator</ref>, Predicate &gt;</type>
        <definition>Filter_iterator&lt; Iterator, Predicate &gt; filter_iterator</definition>
        <argsstring>(Iterator e, const Predicate &amp;p, Iterator c=e)</argsstring>
        <name>filter_iterator</name>
        <param>
          <type><ref refid="classIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">Iterator</ref></type>
          <declname>e</declname>
        </param>
        <param>
          <type>const Predicate &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">Iterator</ref></type>
          <declname>c</declname>
          <defval>e</defval>
        </param>
        <briefdescription>
<para>Constructs <computeroutput><ref refid="structCGAL_1_1Filter__iterator" kindref="compound">Filter_iterator</ref>&lt;<ref refid="classIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">Iterator</ref>, Predicate&gt;(e, p, c)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/iterator.h" line="323" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The iterator adaptor <computeroutput><ref refid="structCGAL_1_1Filter__iterator" kindref="compound">Filter_iterator</ref></computeroutput> acts as a filter on a given range. </para>    </briefdescription>
    <detaileddescription>
<para>Whenever the iterator is in- or decremented, it ignores all iterators for which the given <computeroutput>Predicate</computeroutput> is true. The iterator category is the same as for <computeroutput><ref refid="classIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">Iterator</ref></computeroutput>.</para><para><simplesect kind="attention"><para>Boost also provides the same functionality via the <computeroutput>boost::filter_iterator</computeroutput> class. Unfortunately, the semantics chosen for accepting or rejecting elements based on the predicate&apos;s result are opposite as the semantic chosen here. What is more, the argument of the predicate is different: the predicate used with <computeroutput>boost::filter_iterator</computeroutput> must take the value type of the iterator, as argument, and not the iterator itself.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">Iterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Predicate</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a functor <computeroutput><ref refid="classIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">Iterator</ref></computeroutput> <formula id="1">$ \rightarrow$</formula> <computeroutput>bool</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <location file="CGAL/iterator.h" line="350" column="1" bodyfile="CGAL/iterator.h" bodystart="350" bodyend="379"/>
    <listofallmembers>
      <member refid="structCGAL_1_1Filter__iterator_1a5206dc5c2d11ea467988afcdee26ce41" prot="public" virt="non-virtual"><scope>CGAL::Filter_iterator</scope><name>Filter_iterator</name></member>
      <member refid="structCGAL_1_1Filter__iterator_1afcfc6622bf4b509d601f5f2d90fea51d" prot="public" virt="non-virtual"><scope>CGAL::Filter_iterator</scope><name>Filter_iterator</name></member>
      <member refid="structCGAL_1_1Filter__iterator_1a6d36a8dd4a7b9ce9bdabc6f91d96f21e" prot="public" virt="non-virtual"><scope>CGAL::Filter_iterator</scope><name>filter_iterator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
