<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1cpp11_1_1tuple" kind="class" language="C++" prot="public">
    <compoundname>CGAL::cpp11::tuple</compoundname>
    <includes local="no">CGAL/tuple.h</includes>
    <templateparamlist>
      <param>
        <type>typename ...</type>
      </param>
    </templateparamlist>
    <briefdescription>
<para>An object of the class <computeroutput><ref refid="classCGAL_1_1cpp11_1_1tuple" kindref="compound">cpp11::tuple</ref></computeroutput> represents a heterogeneous tuple of elements of the types specified in parameters, which are in variadic number. </para>    </briefdescription>
    <detaileddescription>
<para>There is actually no class in namespace <computeroutput><ref refid="namespaceCGAL_1_1cpp11" kindref="compound">CGAL::cpp11</ref></computeroutput> with this name, but a using declaration which imports a class from another namespace. By order of priority: the one in namespace <computeroutput>std</computeroutput> is used (provided by C++0x), if not found, then the one in namespace <computeroutput>std::tr1</computeroutput> is used (provided by TR1), and finally, the fallback solution is taken from Boost.</para><para><bold>Parameters</bold><linebreak/>
</para><para>The parameters <computeroutput>...</computeroutput> are the value types.</para><para><bold>Free functions and helper classes</bold><linebreak/>
</para><para>Some free functions part of the standard interface of <computeroutput>tuple</computeroutput> are also brought in namespace <computeroutput><ref refid="namespaceCGAL_1_1cpp11" kindref="compound">CGAL::cpp11</ref></computeroutput> with using declarations, these are <computeroutput>make_tuple</computeroutput>, <computeroutput>get</computeroutput>, <computeroutput>tie</computeroutput>. Like in C++0x, the <computeroutput>get</computeroutput> function template is specialized so that it can take <computeroutput>std::pair</computeroutput> as argument. Two standard helper classes are also provided for convenience (<computeroutput>tuple_size</computeroutput> and <computeroutput>tuple_element</computeroutput>). </para>    </detaileddescription>
    <location file="CGAL/tuple.h" line="36" column="1" bodyfile="CGAL/tuple.h" bodystart="36" bodyend="40"/>
    <listofallmembers>
    </listofallmembers>
  </compounddef>
</doxygen>
