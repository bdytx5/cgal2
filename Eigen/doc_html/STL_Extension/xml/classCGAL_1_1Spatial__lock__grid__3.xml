<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Spatial__lock__grid__3" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Spatial_lock_grid_3</compoundname>
    <includes local="no">CGAL/Spatial_lock_grid_3.h</includes>
    <templateparamlist>
      <param>
        <type>typename Grid_lock_tag</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Spatial__lock__grid__3_1a2b970e93d31ccaa92bafc454a8e4bd3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Spatial_lock_grid_3&lt; Grid_lock_tag &gt;::Spatial_lock_grid_3</definition>
        <argsstring>(const Bbox_3 &amp;bbox, int num_grid_cells_per_axis)</argsstring>
        <name>Spatial_lock_grid_3</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Bbox__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Bbox_3</ref> &amp;</type>
          <declname>bbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_grid_cells_per_axis</declname>
        </param>
        <briefdescription>
<para>Constructs the lock grid of size <computeroutput>bbox</computeroutput>, with <computeroutput>num_grid_cells_per_axis</computeroutput> cells per axis. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Spatial_lock_grid_3.h" line="42" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <memberdef kind="function" id="classCGAL_1_1Spatial__lock__grid__3_1a49479d29d3e431b682dde2cc0a591112" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Spatial_lock_grid_3&lt; Grid_lock_tag &gt;::set_bbox</definition>
        <argsstring>(const CGAL::Bbox_3 &amp;bbox)</argsstring>
        <name>set_bbox</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Bbox__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Bbox_3</ref> &amp;</type>
          <declname>bbox</declname>
        </param>
        <briefdescription>
<para>Sets the bounding box of the domain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Spatial_lock_grid_3.h" line="51" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The class <computeroutput><ref refid="classCGAL_1_1Spatial__lock__grid__3" kindref="compound">Spatial_lock_grid_3</ref></computeroutput> allows to lock points with coordinates (x, y, z) in a 3D grid. </para>    </briefdescription>
    <detaileddescription>
<para>The point type is called <computeroutput>P3</computeroutput> here. <computeroutput>P3</computeroutput> must provide x(), y(), and z() functions, returning the respective point coordinates as numbers whose type is a model of the concept of <computeroutput>RealEmbeddable</computeroutput>.</para><para>It is a model of <computeroutput><ref refid="classSurjectiveLockDataStructure" kindref="compound">SurjectiveLockDataStructure</ref></computeroutput>, with <computeroutput>T</computeroutput> being <computeroutput>P3</computeroutput> and <computeroutput>S</computeroutput> being the function that maps a point to the cell of the 3D grid containing this point.</para><para>For example, it can be used by concurrent algorithms to lock simplices.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Grid_lock_tag</parametername>
</parameternamelist>
<parameterdescription>
<para>allows to choose the locking strategy used by the structure. The following tags are available:<itemizedlist>
<listitem><para><computeroutput>Tag_non_blocking</computeroutput> is non-blocking (i.e. try_lock will always return immediately) and uses atomics to perform lock operations.</para></listitem><listitem><para><computeroutput>Tag_priority_blocking</computeroutput> provides both non-blocking and partially-blocking <computeroutput>try_lock</computeroutput> versions. The partially-blocking version will block (spin) if the thread owning the lock has a lower "ID" (each thread is given an arbitrary ID) or return immediately otherwise. It uses atomics to perform lock operations.</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<xrefsect id="models_1_models000028"><xreftitle>Is Model Of</xreftitle><xrefdescription><para><computeroutput><ref refid="classSurjectiveLockDataStructure" kindref="compound">SurjectiveLockDataStructure</ref></computeroutput> </para></xrefdescription></xrefsect></para>    </detaileddescription>
    <location file="CGAL/Spatial_lock_grid_3.h" line="34" column="1" bodyfile="CGAL/Spatial_lock_grid_3.h" bodystart="33" bodyend="55"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Spatial__lock__grid__3_1a49479d29d3e431b682dde2cc0a591112" prot="public" virt="non-virtual"><scope>CGAL::Spatial_lock_grid_3</scope><name>set_bbox</name></member>
      <member refid="classCGAL_1_1Spatial__lock__grid__3_1a2b970e93d31ccaa92bafc454a8e4bd3e" prot="public" virt="non-virtual"><scope>CGAL::Spatial_lock_grid_3</scope><name>Spatial_lock_grid_3</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
