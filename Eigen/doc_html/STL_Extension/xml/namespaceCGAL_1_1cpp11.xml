<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespaceCGAL_1_1cpp11" kind="namespace" language="C++">
    <compoundname>CGAL::cpp11</compoundname>
    <innerclass refid="classCGAL_1_1cpp11_1_1array" prot="public">CGAL::cpp11::array</innerclass>
    <innerclass refid="classCGAL_1_1cpp11_1_1function" prot="public">CGAL::cpp11::function</innerclass>
    <innerclass refid="structCGAL_1_1cpp11_1_1result__of" prot="public">CGAL::cpp11::result_of</innerclass>
    <innerclass refid="classCGAL_1_1cpp11_1_1tuple" prot="public">CGAL::cpp11::tuple</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__STLAlgos_1gad4dbc8daf3c0e2201f4972eb9eea404d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">Iterator</ref></type>
        <definition>Iterator CGAL::cpp11::next</definition>
        <argsstring>(ForwardIterator it)</argsstring>
        <name>next</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>The function returns the result of <computeroutput>operator++</computeroutput> on a <computeroutput><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The exact behaviour is described in Paragraph 24.4.4 of the C++ standard draft <ulink url="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3242.pdf">N3242</ulink>.</para><para><simplesect kind="note"><para>There is actually no function in namespace <computeroutput><ref refid="namespaceCGAL_1_1cpp11" kindref="compound">CGAL::cpp11</ref></computeroutput> with this name, but a using declaration which imports a function from another namespace. By order of priority: the one in namespace <computeroutput>std</computeroutput> is used (provided by C++0x), if not found, then the one in namespace <computeroutput>boost</computeroutput> is used.</para></simplesect>
<simplesect kind="see"><para><ulink url="https://www.boost.org/doc/libs/1_46_1/libs/utility/utility.htm#functions_next_prior">boost::next</ulink> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__STLAlgos_1ga6c3790809028471b1eacccb0d714d040" kindref="member">CGAL::cpp11::prev()</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/algorithm.h" line="156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__STLAlgos_1ga6c3790809028471b1eacccb0d714d040" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classBidirectionalIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">BidirectionalIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">Iterator</ref></type>
        <definition>Iterator CGAL::cpp11::prev</definition>
        <argsstring>(BidirectionalIterator it)</argsstring>
        <name>prev</name>
        <param>
          <type><ref refid="classBidirectionalIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">BidirectionalIterator</ref></type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>The function returns the result of <computeroutput>operator--</computeroutput> on a <computeroutput><ref refid="classBidirectionalIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">BidirectionalIterator</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The exact behaviour is described in Paragraph 24.4.4 of the C++ standard draft <ulink url="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3242.pdf">N3242</ulink>.</para><para><simplesect kind="note"><para>If C++0x is available the function <computeroutput>std::prev</computeroutput> is imported into the namespace <computeroutput><ref refid="namespaceCGAL_1_1cpp11" kindref="compound">CGAL::cpp11</ref></computeroutput>, otherwise <computeroutput><ref refid="group__STLAlgos_1ga6c3790809028471b1eacccb0d714d040" kindref="member">CGAL::cpp11::prev</ref></computeroutput> is declared with the signature as given in Paragraph 24.4.4 of the ISO C++ Standard and forwarded to <computeroutput>boost::prior</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/algorithm.h" line="172" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__STLAlgos_1gadba21cc5c30a79519438dfe0f9264255" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          </param>
          <param>
            <type>class Size</type>
          </param>
          <param>
            <type>class <ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::cpp11::copy_n</definition>
        <argsstring>(InputIterator first, Size count, OutputIterator result)</argsstring>
        <name>copy_n</name>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type>Size</type>
          <declname>count</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Copies <computeroutput>n</computeroutput> items from an input iterator to an output iterator. </para>        </briefdescription>
        <detaileddescription>
<para>Its exact behaviour is defined in Paragraph 25.3.1 of the C++ standard draft <ulink url="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3242.pdf">N3242</ulink>.</para><para><simplesect kind="note"><para>This provides an implementation of the standard function <computeroutput>copy_n</computeroutput> from the C++0x standard. If <computeroutput>copy_n</computeroutput> is available in the <computeroutput>std::</computeroutput> namespace a using declaration is used, otherwise an alternative implementation from CGAL is used. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/algorithm.h" line="190" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="CGAL/algorithm.h" line="133" column="1"/>
  </compounddef>
</doxygen>
