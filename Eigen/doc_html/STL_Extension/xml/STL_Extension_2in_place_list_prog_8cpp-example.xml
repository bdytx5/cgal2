<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="STL_Extension_2in_place_list_prog_8cpp-example" kind="example">
    <compoundname>STL_Extension/in_place_list_prog.cpp</compoundname>
    <detaileddescription>
<para><programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/In_place_list.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1In__place__list__base" kindref="compound">CGAL::In_place_list_base</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">item<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>In_place_list_base&lt;item&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>item()<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>item(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>item&amp;<sp/>i)<sp/>:<sp/>In_place_list_base&lt;item&gt;(i),<sp/>key(i.key)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>item(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/>:<sp/>key(i)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>item&amp;<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>key<sp/>==<sp/>i.key;}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>item&amp;<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>i);}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>key<sp/>==<sp/>i;}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>i);}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;<sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>item&amp;<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>key<sp/>&lt;<sp/>i.key;}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1In__place__list" kindref="compound">CGAL::In_place_list&lt;item,true&gt;</ref><sp/>List;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>List<sp/>l;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>item*<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>item(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>l.push_back(*p);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>l.push_back(*</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>item(2));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>l.push_front(*</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>item(3));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>l.push_front(*</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>item(4));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>l.push_front(*</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>item(2));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>List::iterator<sp/>i<sp/>=<sp/>l.begin();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>l.insert(i,<sp/>*</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>item(5));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>l.insert(p,<sp/>*</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>item(5));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[7]<sp/>=<sp/>{2,5,4,3,5,1,2};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/>std::equal(l.begin(),<sp/>l.end(),<sp/>a);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>assert(ok);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>l.sort();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>l.unique();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>assert(l.size()<sp/>==<sp/>5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b[5]<sp/>=<sp/>{1,2,3,4,5};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/>std::equal(l.begin(),<sp/>l.end(),<sp/>b);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>assert(ok);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>    </detaileddescription>
  </compounddef>
</doxygen>
