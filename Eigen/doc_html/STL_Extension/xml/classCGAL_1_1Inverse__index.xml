<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Inverse__index" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Inverse_index</compoundname>
    <includes local="no">CGAL/iterator.h</includes>
    <templateparamlist>
      <param>
        <type>typename IC</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Inverse__index_1a0014846561705aad93690a6461314b00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Inverse_index&lt; IC &gt;::Inverse_index</definition>
        <argsstring>()</argsstring>
        <name>Inverse_index</name>
        <briefdescription>
<para>invalid index. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/iterator.h" line="466" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Inverse__index_1aa8b3b712917ccd247c4fd91ce8040523" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Inverse_index&lt; IC &gt;::Inverse_index</definition>
        <argsstring>(const IC &amp;i)</argsstring>
        <name>Inverse_index</name>
        <param>
          <type>const IC &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>empty inverse index initialized to start at <computeroutput>i</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/iterator.h" line="479" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Inverse__index_1ae4c1b0865946501810d0012825cf0073" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Inverse_index&lt; IC &gt;::Inverse_index</definition>
        <argsstring>(const IC &amp;i, const IC &amp;j)</argsstring>
        <name>Inverse_index</name>
        <param>
          <type>const IC &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const IC &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>inverse index initialized with range <computeroutput>[i,j)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/iterator.h" line="491" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <memberdef kind="function" id="classCGAL_1_1Inverse__index_1aa877cad5e5c342e8818ca9295093a1ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Inverse_index&lt; IC &gt;::operator[]</definition>
        <argsstring>(const IC &amp;k)</argsstring>
        <name>operator[]</name>
        <param>
          <type>const IC &amp;</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>returns inverse index of <computeroutput>k</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>k</computeroutput> has been stored in the inverse index. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/iterator.h" line="505" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Inverse__index_1a729deb9d4c22b545a54d2b5d9f216e61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Inverse_index&lt; IC &gt;::push_back</definition>
        <argsstring>(const IC &amp;k)</argsstring>
        <name>push_back</name>
        <param>
          <type>const IC &amp;</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>adds <computeroutput>k</computeroutput> at the end of the indices. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/iterator.h" line="517" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The class <computeroutput><ref refid="classCGAL_1_1Inverse__index" kindref="compound">Inverse_index</ref></computeroutput> constructs an inverse index for a given range <computeroutput>[i,j)</computeroutput> of two iterators or circulators of type <computeroutput>IC</computeroutput>. </para>    </briefdescription>
    <detaileddescription>
<para>The first element <computeroutput>I</computeroutput> in the range <computeroutput>[i,j)</computeroutput> has the index 0. Consecutive elements are numbered incrementally. The inverse index provides a query for a given iterator or circulator <computeroutput>k</computeroutput> to retrieve its index number. <simplesect kind="pre"><para>The iterator or circulator must be either of the random access category or the dereference operator must return stable and distinguishable addresses for the values, e.g. proxies or non-modifiable iterator with opaque values will not work.</para></simplesect>
<bold>Implementation</bold><linebreak/>
</para><para>For random access iterators or circulators, it is done in constant time by subtracting <computeroutput>i</computeroutput>. For other iterator categories, an STL <computeroutput>map</computeroutput> is used, which results in a <computeroutput>log(j-i)</computeroutput> query time. The comparisons are done using the operator <computeroutput>operator&lt;</computeroutput> on pointers.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Random__access__adaptor" kindref="compound">CGAL::Random_access_adaptor</ref>&lt;IC&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Random__access__value__adaptor" kindref="compound">CGAL::Random_access_value_adaptor</ref>&lt;IC,T&gt;</computeroutput> </para></simplesect>
</para>    </detaileddescription>
    <location file="CGAL/iterator.h" line="458" column="1" bodyfile="CGAL/iterator.h" bodystart="458" bodyend="525"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Inverse__index_1a0014846561705aad93690a6461314b00" prot="public" virt="non-virtual"><scope>CGAL::Inverse_index</scope><name>Inverse_index</name></member>
      <member refid="classCGAL_1_1Inverse__index_1aa8b3b712917ccd247c4fd91ce8040523" prot="public" virt="non-virtual"><scope>CGAL::Inverse_index</scope><name>Inverse_index</name></member>
      <member refid="classCGAL_1_1Inverse__index_1ae4c1b0865946501810d0012825cf0073" prot="public" virt="non-virtual"><scope>CGAL::Inverse_index</scope><name>Inverse_index</name></member>
      <member refid="classCGAL_1_1Inverse__index_1aa877cad5e5c342e8818ca9295093a1ed" prot="public" virt="non-virtual"><scope>CGAL::Inverse_index</scope><name>operator[]</name></member>
      <member refid="classCGAL_1_1Inverse__index_1a729deb9d4c22b545a54d2b5d9f216e61" prot="public" virt="non-virtual"><scope>CGAL::Inverse_index</scope><name>push_back</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
