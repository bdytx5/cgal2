<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Compact__container__base" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Compact_container_base</compoundname>
    <includes local="no">CGAL/Compact_container.h</includes>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <memberdef kind="function" id="classCGAL_1_1Compact__container__base_1a29d3268ecf4257fd5325f79a6b7440f1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* CGAL::Compact_container_base::for_compact_container</definition>
        <argsstring>() const</argsstring>
        <name>for_compact_container</name>
        <briefdescription>
<para>Returns the pointer necessary for <computeroutput><ref refid="structCGAL_1_1Compact__container__traits" kindref="compound">Compact_container_traits</ref>&lt;T&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Compact_container.h" line="30" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Compact__container__base_1ac8eea10a03569876771f25dd1a3e63af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *&amp;</type>
        <definition>void* &amp; CGAL::Compact_container_base::for_compact_container</definition>
        <argsstring>()</argsstring>
        <name>for_compact_container</name>
        <briefdescription>
<para>Returns a reference to the pointer necessary for <computeroutput><ref refid="structCGAL_1_1Compact__container__traits" kindref="compound">Compact_container_traits</ref>&lt;T&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Compact_container.h" line="36" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The class <computeroutput><ref refid="classCGAL_1_1Compact__container__base" kindref="compound">Compact_container_base</ref></computeroutput> can be used as a base class for your own type <computeroutput>T</computeroutput>, so that <computeroutput>T</computeroutput> can be used directly within <computeroutput><ref refid="classCGAL_1_1Compact__container" kindref="compound">Compact_container</ref>&lt;T, Allocator&gt;</computeroutput>. </para>    </briefdescription>
    <detaileddescription>
<para>This class stores a <computeroutput>void *</computeroutput> pointer only for this purpose, so it may not be the most memory efficient way to achieve this goal. The other ways are to provide in <computeroutput>T</computeroutput> the necessary member functions so that the template <computeroutput><ref refid="structCGAL_1_1Compact__container__traits" kindref="compound">Compact_container_traits</ref>&lt;T&gt;</computeroutput> works, or to specialize it for the particular type <computeroutput>T</computeroutput> that you want to use. </para>    </detaileddescription>
    <location file="CGAL/Compact_container.h" line="22" column="1" bodyfile="CGAL/Compact_container.h" bodystart="22" bodyend="42"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Compact__container__base_1a29d3268ecf4257fd5325f79a6b7440f1" prot="public" virt="non-virtual"><scope>CGAL::Compact_container_base</scope><name>for_compact_container</name></member>
      <member refid="classCGAL_1_1Compact__container__base_1ac8eea10a03569876771f25dd1a3e63af" prot="public" virt="non-virtual"><scope>CGAL::Compact_container_base</scope><name>for_compact_container</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
