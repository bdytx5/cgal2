<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Concurrent__compact__container" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Concurrent_compact_container</compoundname>
    <includes local="no">CGAL/Concurrent_compact_container.h</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
      <param>
        <type>class Allocator</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classCGAL_1_1Concurrent__compact__container_1a1cf1be1a5e91ced887ffe921078b7f59" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="143" column="1" bodyfile="CGAL/Concurrent_compact_container.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Concurrent__compact__container_1a4f789a00f55050c4cacb018eb4b52205" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::allocator_type</definition>
        <argsstring></argsstring>
        <name>allocator_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="144" column="1" bodyfile="CGAL/Concurrent_compact_container.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Concurrent__compact__container_1a123cec03053f3fe7e9092445287ca7d5" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::reference</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="145" column="1" bodyfile="CGAL/Concurrent_compact_container.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Concurrent__compact__container_1a674f4b5bbea336f18b0c3c4dd3715154" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::const_reference</definition>
        <argsstring></argsstring>
        <name>const_reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="146" column="1" bodyfile="CGAL/Concurrent_compact_container.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Concurrent__compact__container_1ae5076f255eed1bf2523715a17230bc5c" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::pointer</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="147" column="1" bodyfile="CGAL/Concurrent_compact_container.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Concurrent__compact__container_1a36c9d9e6d9d48c23aa5e10122935ef5f" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::const_pointer</definition>
        <argsstring></argsstring>
        <name>const_pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="148" column="1" bodyfile="CGAL/Concurrent_compact_container.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Concurrent__compact__container_1a2454a7cb33adb2f556b928cf3bb82d9e" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="149" column="1" bodyfile="CGAL/Concurrent_compact_container.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Concurrent__compact__container_1a25114761b690fd90ff584b2a88a0bc54" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::difference_type</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="150" column="1" bodyfile="CGAL/Concurrent_compact_container.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Concurrent__compact__container_1abf220fbb248d0b20e37c47e2f5f66f30" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="151" column="1" bodyfile="CGAL/Concurrent_compact_container.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Concurrent__compact__container_1a4d5e7ca7eada19ffdf30341aa2a552c6" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="152" column="1" bodyfile="CGAL/Concurrent_compact_container.h" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Concurrent__compact__container_1a6521b59160fddd41f25b17fe4d4e5ccd" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::reverse_iterator</definition>
        <argsstring></argsstring>
        <name>reverse_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="153" column="1" bodyfile="CGAL/Concurrent_compact_container.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Concurrent__compact__container_1a1d9855ab92b843179c87f5693a67adc9" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::const_reverse_iterator</definition>
        <argsstring></argsstring>
        <name>const_reverse_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="154" column="1" bodyfile="CGAL/Concurrent_compact_container.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Concurrent__compact__container_1a78a97dbdca9038753856f60a37f7f756" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::Concurrent_compact_container</definition>
        <argsstring>(const Allocator &amp;a=Allocator())</argsstring>
        <name>Concurrent_compact_container</name>
        <param>
          <type>const Allocator &amp;</type>
          <declname>a</declname>
          <defval>Allocator()</defval>
        </param>
        <briefdescription>
<para>introduces an empty container <computeroutput>ccc</computeroutput>, eventually specifying a particular allocator <computeroutput>a</computeroutput> as well. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="164" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Concurrent__compact__container_1ab7cca38430eb79685d437875265b408f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::Concurrent_compact_container</definition>
        <argsstring>(InputIterator first, InputIterator last, const Allocator &amp;a=Allocator())</argsstring>
        <name>Concurrent_compact_container</name>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>last</declname>
        </param>
        <param>
          <type>const Allocator &amp;</type>
          <declname>a</declname>
          <defval>Allocator()</defval>
        </param>
        <briefdescription>
<para>a container with copies from the range [<computeroutput>first,last</computeroutput>), eventually specifying a particular allocator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="171" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Concurrent__compact__container_1a8348de488f225af2de53e5616aee884f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::Concurrent_compact_container</definition>
        <argsstring>(const Concurrent_compact_container &amp;ccc2)</argsstring>
        <name>Concurrent_compact_container</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Concurrent__compact__container" kindref="compound">Concurrent_compact_container</ref> &amp;</type>
          <declname>ccc2</declname>
        </param>
        <briefdescription>
<para>copy constructor. </para>        </briefdescription>
        <detaileddescription>
<para>Each item in <computeroutput>ccc2</computeroutput> is copied. The allocator is copied. The iterator order is preserved. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="179" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Concurrent__compact__container_1ae0c9a590e35575cede3de8d81c1a3390" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Concurrent__compact__container" kindref="compound">Concurrent_compact_container</ref> &amp;</type>
        <definition>Concurrent_compact_container&amp; CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::operator=</definition>
        <argsstring>(const Concurrent_compact_container &amp;ccc2)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Concurrent__compact__container" kindref="compound">Concurrent_compact_container</ref> &amp;</type>
          <declname>ccc2</declname>
        </param>
        <briefdescription>
<para>assignment. </para>        </briefdescription>
        <detaileddescription>
<para>Each item in <computeroutput>ccc2</computeroutput> is copied. The allocator is copied. Each item in <computeroutput>ccc</computeroutput> is deleted. The iterator order is preserved. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Concurrent__compact__container_1a30f80e45ee0c46a860a3e88f984ec0e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::swap</definition>
        <argsstring>(Self &amp;ccc2)</argsstring>
        <name>swap</name>
        <param>
          <type>Self &amp;</type>
          <declname>ccc2</declname>
        </param>
        <briefdescription>
<para>swaps the contents of <computeroutput>ccc</computeroutput> and <computeroutput>ccc2</computeroutput> in constant time complexity. </para>        </briefdescription>
        <detaileddescription>
<para>No exception is thrown. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="191" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Access Member Functions</header>
      <memberdef kind="function" id="classCGAL_1_1Concurrent__compact__container_1a3f793123afe321c1fef9cb94079a1650" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::is_used</definition>
        <argsstring>(const_iterator pos) const</argsstring>
        <name>is_used</name>
        <param>
          <type><ref refid="classCGAL_1_1Concurrent__compact__container_1a4d5e7ca7eada19ffdf30341aa2a552c6" kindref="member">const_iterator</ref></type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>returns true if the element <computeroutput>pos</computeroutput> is used (i.e. valid). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="201" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Concurrent__compact__container_1a73035520b730d254516cdbcfbb9579b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Concurrent__compact__container_1abf220fbb248d0b20e37c47e2f5f66f30" kindref="member">iterator</ref></type>
        <definition>iterator CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
<para>returns a mutable iterator referring to the first element in <computeroutput>ccc</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="204" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Concurrent__compact__container_1a62d6c1604fc8ab5560ce8cd6cb2a90b6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Concurrent__compact__container_1a4d5e7ca7eada19ffdf30341aa2a552c6" kindref="member">const_iterator</ref></type>
        <definition>const_iterator CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
<para>returns a constant iterator referring to the first element in <computeroutput>ccc</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="206" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Concurrent__compact__container_1abd459b05dbb39a304e83d84e6d61bea1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Concurrent__compact__container_1abf220fbb248d0b20e37c47e2f5f66f30" kindref="member">iterator</ref></type>
        <definition>iterator CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
<para>returns a mutable iterator which is the past-end-value of <computeroutput>ccc</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="208" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Concurrent__compact__container_1ad60fa82e8078e55d0f1042b5089a9d23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Concurrent__compact__container_1a4d5e7ca7eada19ffdf30341aa2a552c6" kindref="member">const_iterator</ref></type>
        <definition>const_iterator CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
<para>returns a constant iterator which is the past-end-value of <computeroutput>ccc</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="210" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Concurrent__compact__container_1a7e1cafc4804d1215aab274a8977fdcdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Concurrent__compact__container_1a6521b59160fddd41f25b17fe4d4e5ccd" kindref="member">reverse_iterator</ref></type>
        <definition>reverse_iterator CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::rbegin</definition>
        <argsstring>()</argsstring>
        <name>rbegin</name>
        <briefdescription>
<para>returns a mutable reverse iterator referring to the reverse beginning in <computeroutput>ccc</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="213" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Concurrent__compact__container_1a480786541341f749b7fba1df372b2716" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Concurrent__compact__container_1a1d9855ab92b843179c87f5693a67adc9" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::rbegin</definition>
        <argsstring>() const</argsstring>
        <name>rbegin</name>
        <briefdescription>
<para>returns a constant reverse iterator referring to the reverse beginning in <computeroutput>ccc</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="215" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Concurrent__compact__container_1ad76bb28057b68a1960f59c82ff0c73a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Concurrent__compact__container_1a6521b59160fddd41f25b17fe4d4e5ccd" kindref="member">reverse_iterator</ref></type>
        <definition>reverse_iterator CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::rend</definition>
        <argsstring>()</argsstring>
        <name>rend</name>
        <briefdescription>
<para>returns a mutable reverse iterator which is the reverse past-end-value of <computeroutput>ccc</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="217" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Concurrent__compact__container_1aa83c7a2a466f6698d58bc938dfda630c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Concurrent__compact__container_1a1d9855ab92b843179c87f5693a67adc9" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::rend</definition>
        <argsstring>() const</argsstring>
        <name>rend</name>
        <briefdescription>
<para>returns a constant reverse iterator which is the reverse past-end-value of <computeroutput>ccc</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="219" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Concurrent__compact__container_1a6fc0444ff1f1417ce9a2e87d30e12ab2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Concurrent__compact__container_1abf220fbb248d0b20e37c47e2f5f66f30" kindref="member">iterator</ref></type>
        <definition>iterator CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::iterator_to</definition>
        <argsstring>(reference value) const</argsstring>
        <name>iterator_to</name>
        <param>
          <type><ref refid="classCGAL_1_1Concurrent__compact__container_1a123cec03053f3fe7e9092445287ca7d5" kindref="member">reference</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>returns an iterator which points to <computeroutput>value</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="222" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Concurrent__compact__container_1a7fb30cd60b383af529b035a1fae09a4d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Concurrent__compact__container_1a4d5e7ca7eada19ffdf30341aa2a552c6" kindref="member">const_iterator</ref></type>
        <definition>const_iterator CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::iterator_to</definition>
        <argsstring>(const_reference value) const</argsstring>
        <name>iterator_to</name>
        <param>
          <type><ref refid="classCGAL_1_1Concurrent__compact__container_1a674f4b5bbea336f18b0c3c4dd3715154" kindref="member">const_reference</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>returns a constant iterator which points to <computeroutput>value</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="224" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Concurrent__compact__container_1ac823477bae166ef3e9029baafdb849af" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff <computeroutput>ccc</computeroutput> is empty. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="231" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Concurrent__compact__container_1aed3fdd87322fb9a664ea5973a535c1b6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Concurrent__compact__container_1a2454a7cb33adb2f556b928cf3bb82d9e" kindref="member">size_type</ref></type>
        <definition>size_type CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
<para>returns the number of items in <computeroutput>ccc</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Note: do not call this function while others are inserting/erasing elements </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="234" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Concurrent__compact__container_1a608325ce1208d1501a60b708d196706c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Concurrent__compact__container_1a2454a7cb33adb2f556b928cf3bb82d9e" kindref="member">size_type</ref></type>
        <definition>size_type CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::max_size</definition>
        <argsstring>() const</argsstring>
        <name>max_size</name>
        <briefdescription>
<para>returns the maximum possible size of the container <computeroutput>ccc</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>This is the allocator&apos;s max_size value </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="237" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Concurrent__compact__container_1a6250b774658cc529da01dd5174fd944d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Concurrent__compact__container_1a2454a7cb33adb2f556b928cf3bb82d9e" kindref="member">size_type</ref></type>
        <definition>size_type CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::capacity</definition>
        <argsstring>() const</argsstring>
        <name>capacity</name>
        <briefdescription>
<para>returns the total number of elements that <computeroutput>ccc</computeroutput> can hold without requiring reallocation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="239" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Concurrent__compact__container_1a13334a5b8f35155454dfc1d93a8dcd63" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Allocator</type>
        <definition>Allocator CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::get_allocator</definition>
        <argsstring>() const</argsstring>
        <name>get_allocator</name>
        <briefdescription>
<para>returns the allocator </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="241" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Concurrent__compact__container_1a18db7d14c4d889439986c01fba75abf3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Concurrent__compact__container_1abf220fbb248d0b20e37c47e2f5f66f30" kindref="member">iterator</ref></type>
        <definition>static iterator CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::s_iterator_to</definition>
        <argsstring>(reference value)</argsstring>
        <name>s_iterator_to</name>
        <param>
          <type><ref refid="classCGAL_1_1Concurrent__compact__container_1a123cec03053f3fe7e9092445287ca7d5" kindref="member">reference</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>returns an iterator which points to <computeroutput>value</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="226" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Concurrent__compact__container_1ad581d377cb46a124e31319fe0f461f62" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Concurrent__compact__container_1a4d5e7ca7eada19ffdf30341aa2a552c6" kindref="member">const_iterator</ref></type>
        <definition>static const_iterator CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::s_iterator_to</definition>
        <argsstring>(const_reference value)</argsstring>
        <name>s_iterator_to</name>
        <param>
          <type><ref refid="classCGAL_1_1Concurrent__compact__container_1a674f4b5bbea336f18b0c3c4dd3715154" kindref="member">const_reference</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>returns a constant iterator which points to <computeroutput>value</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="228" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Insertion</header>
      <memberdef kind="function" id="classCGAL_1_1Concurrent__compact__container_1ab228528da464cd41561c530aca9d2d97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T1</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Concurrent__compact__container_1abf220fbb248d0b20e37c47e2f5f66f30" kindref="member">iterator</ref></type>
        <definition>iterator CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::emplace</definition>
        <argsstring>(const T1 &amp;t1)</argsstring>
        <name>emplace</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>t1</declname>
        </param>
        <briefdescription>
<para>constructs an object of type <computeroutput>T</computeroutput> with the constructor that takes <computeroutput>t1</computeroutput> as argument, inserts it in <computeroutput>ccc</computeroutput>, and returns the iterator pointing to it. </para>        </briefdescription>
        <detaileddescription>
<para>Overloads of this member function are defined that take additional arguments, up to 9. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="255" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Concurrent__compact__container_1af8316954d8c418d6d44259cec0995fcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Concurrent__compact__container_1abf220fbb248d0b20e37c47e2f5f66f30" kindref="member">iterator</ref></type>
        <definition>iterator CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::insert</definition>
        <argsstring>(const T &amp;t)</argsstring>
        <name>insert</name>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>inserts a copy of <computeroutput>t</computeroutput> in <computeroutput>ccc</computeroutput> and returns the iterator pointing to it. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="261" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Concurrent__compact__container_1a8bbc573fea589020e899b8d3bde18829" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::insert</definition>
        <argsstring>(InputIterator first, InputIterator last)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>inserts the range [<computeroutput>first, last</computeroutput>) in <computeroutput>ccc</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="265" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Concurrent__compact__container_1acd77ff80f054ab23ee285f3755a8270f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::assign</definition>
        <argsstring>(InputIterator first, InputIterator last)</argsstring>
        <name>assign</name>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>erases all the elements of <computeroutput>ccc</computeroutput>, then inserts the range [<computeroutput>first, last</computeroutput>) in <computeroutput>ccc</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="272" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Removal</header>
      <memberdef kind="function" id="classCGAL_1_1Concurrent__compact__container_1a6fa96e348c7ea5e23ccdbd5aba6b83a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::erase</definition>
        <argsstring>(iterator x)</argsstring>
        <name>erase</name>
        <param>
          <type><ref refid="classCGAL_1_1Concurrent__compact__container_1abf220fbb248d0b20e37c47e2f5f66f30" kindref="member">iterator</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>removes the item pointed by <computeroutput>pos</computeroutput> from <computeroutput>ccc</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="279" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Concurrent__compact__container_1ada5c8d837d1f8e3b42c062545cc5ec76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::erase</definition>
        <argsstring>(iterator first, iterator last)</argsstring>
        <name>erase</name>
        <param>
          <type><ref refid="classCGAL_1_1Concurrent__compact__container_1abf220fbb248d0b20e37c47e2f5f66f30" kindref="member">iterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Concurrent__compact__container_1abf220fbb248d0b20e37c47e2f5f66f30" kindref="member">iterator</ref></type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>removes the items from the range [<computeroutput>first, last</computeroutput>) from <computeroutput>ccc</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="281" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Concurrent__compact__container_1ab47e53f894552888f7c6dbef4d015576" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>all items in <computeroutput>ccc</computeroutput> are deleted, and the memory is deallocated. </para>        </briefdescription>
        <detaileddescription>
<para>After this call, <computeroutput>ccc</computeroutput> is in the same state as if just default constructed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="287" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Ownership testing</header>
      <description><para>The following functions are mostly helpful for efficient debugging, since their complexity is <formula id="4">$ O(\sqrt{\mathrm{c.capacity()}})$</formula>. </para></description>
      <memberdef kind="function" id="classCGAL_1_1Concurrent__compact__container_1a47cc837959a49dfc2e2fff0a9120f0b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::owns</definition>
        <argsstring>(const_iterator pos)</argsstring>
        <name>owns</name>
        <param>
          <type><ref refid="classCGAL_1_1Concurrent__compact__container_1a4d5e7ca7eada19ffdf30341aa2a552c6" kindref="member">const_iterator</ref></type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>returns whether <computeroutput>pos</computeroutput> is in the range <computeroutput>[ccc.begin(), ccc.end()]</computeroutput> (<computeroutput>ccc.end()</computeroutput> included). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="295" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Concurrent__compact__container_1a5b81340523d9aa8c094ef7237e2cc0ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::owns_dereferencable</definition>
        <argsstring>(const_iterator pos)</argsstring>
        <name>owns_dereferencable</name>
        <param>
          <type><ref refid="classCGAL_1_1Concurrent__compact__container_1a4d5e7ca7eada19ffdf30341aa2a552c6" kindref="member">const_iterator</ref></type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>returns whether <computeroutput>pos</computeroutput> is in the range <computeroutput>[ccc.begin(), ccc</computeroutput>.<ref refid="classCGAL_1_1Concurrent__compact__container_1abd459b05dbb39a304e83d84e6d61bea1" kindref="member">end()</ref>)<computeroutput>(</computeroutput>ccc.end()` excluded). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="297" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Merging</header>
      <memberdef kind="function" id="classCGAL_1_1Concurrent__compact__container_1a0a83c88c8221ae3834525b9e7db52145" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::merge</definition>
        <argsstring>(Concurrent_compact_container&lt; T, Allocator &gt; &amp;ccc2)</argsstring>
        <name>merge</name>
        <param>
          <type><ref refid="classCGAL_1_1Concurrent__compact__container" kindref="compound">Concurrent_compact_container</ref>&lt; T, Allocator &gt; &amp;</type>
          <declname>ccc2</declname>
        </param>
        <briefdescription>
<para>adds the items of <computeroutput>ccc2</computeroutput> to the end of <computeroutput>ccc</computeroutput> and <computeroutput>ccc2</computeroutput> becomes empty. </para>        </briefdescription>
        <detaileddescription>
<para>The time complexity is O(<computeroutput>ccc</computeroutput>.<computeroutput><ref refid="classCGAL_1_1Concurrent__compact__container_1a6250b774658cc529da01dd5174fd944d" kindref="member">capacity()</ref></computeroutput>-<computeroutput>ccc</computeroutput>.<computeroutput><ref refid="classCGAL_1_1Concurrent__compact__container_1aed3fdd87322fb9a664ea5973a535c1b6" kindref="member">size()</ref></computeroutput>). <simplesect kind="pre"><para><computeroutput>ccc2</computeroutput> must not be the same as <computeroutput>ccc</computeroutput>, and the allocators of <computeroutput>ccc</computeroutput> and <computeroutput>ccc2</computeroutput> must be compatible: <computeroutput>ccc.get_allocator() == ccc2.get_allocator()</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="308" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Comparison Operations</header>
      <memberdef kind="function" id="classCGAL_1_1Concurrent__compact__container_1a6d5354c942b4e8d32b8140df2a6b74de" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::operator==</definition>
        <argsstring>(const Concurrent_compact_container&lt; T, Allocator &gt; &amp;ccc2) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Concurrent__compact__container" kindref="compound">Concurrent_compact_container</ref>&lt; T, Allocator &gt; &amp;</type>
          <declname>ccc2</declname>
        </param>
        <briefdescription>
<para>test for equality: Two containers are equal, iff they have the same size and if their corresponding elements are equal. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="318" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Concurrent__compact__container_1a46b35b2715f9c6dfcc0d150bddb800bc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::operator!=</definition>
        <argsstring>(const Concurrent_compact_container&lt; T, Allocator &gt; &amp;ccc2) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Concurrent__compact__container" kindref="compound">Concurrent_compact_container</ref>&lt; T, Allocator &gt; &amp;</type>
          <declname>ccc2</declname>
        </param>
        <briefdescription>
<para>test for inequality: returns <computeroutput>!(ccc == ccc2)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="320" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Concurrent__compact__container_1abb80c0bf1129429a2e1d293f43e35732" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::operator&lt;</definition>
        <argsstring>(const Concurrent_compact_container&lt; T, Allocator &gt; &amp;ccc2) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Concurrent__compact__container" kindref="compound">Concurrent_compact_container</ref>&lt; T, Allocator &gt; &amp;</type>
          <declname>ccc2</declname>
        </param>
        <briefdescription>
<para>compares in lexicographical order. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="322" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Concurrent__compact__container_1a651ebbdc11dafa48ae259ee707264ae5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::operator&gt;</definition>
        <argsstring>(const Concurrent_compact_container&lt; T, Allocator &gt; &amp;ccc2) const</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Concurrent__compact__container" kindref="compound">Concurrent_compact_container</ref>&lt; T, Allocator &gt; &amp;</type>
          <declname>ccc2</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>ccc2 &lt; ccc</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="324" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Concurrent__compact__container_1a729ac56255f507e5c707ee039b0606af" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::operator&lt;=</definition>
        <argsstring>(const Concurrent_compact_container&lt; T, Allocator &gt; &amp;ccc2) const</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Concurrent__compact__container" kindref="compound">Concurrent_compact_container</ref>&lt; T, Allocator &gt; &amp;</type>
          <declname>ccc2</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>!(ccc &gt; ccc2)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="326" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Concurrent__compact__container_1a7848f2b5e950e3ee9099b20f1bbad3ea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Concurrent_compact_container&lt; T, Allocator &gt;::operator&gt;=</definition>
        <argsstring>(const Concurrent_compact_container&lt; T, Allocator &gt; &amp;ccc2) const</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Concurrent__compact__container" kindref="compound">Concurrent_compact_container</ref>&lt; T, Allocator &gt; &amp;</type>
          <declname>ccc2</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>!(ccc &lt; ccc2)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="328" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An object of the class <computeroutput><ref refid="classCGAL_1_1Concurrent__compact__container" kindref="compound">Concurrent_compact_container</ref></computeroutput> is a container of objects of type <computeroutput>T</computeroutput>, which allows to call <computeroutput>insert</computeroutput> and <computeroutput>erase</computeroutput> operations concurrently. </para>    </briefdescription>
    <detaileddescription>
<para>Other operations are not concurrency-safe. For example, one should not parse the container while others are modifying it. It matches all the standard requirements for reversible containers, except that the complexity of its iterator increment and decrement operations is not always guaranteed to be amortized constant time.</para><para>This container is not a standard <emphasis>sequence</emphasis> nor <emphasis>associative</emphasis> container, which means the elements are stored in no particular order, and it is not possible to specify a particular place in the iterator sequence where to insert new objects. However, all dereferenceable iterators are still valid after calls to <computeroutput><ref refid="classCGAL_1_1Concurrent__compact__container_1af8316954d8c418d6d44259cec0995fcc" kindref="member">insert()</ref></computeroutput> and <computeroutput><ref refid="classCGAL_1_1Concurrent__compact__container_1a6fa96e348c7ea5e23ccdbd5aba6b83a8" kindref="member">erase()</ref></computeroutput>, except those that have been erased (it behaves similarly to <computeroutput>std::list</computeroutput>).</para><para>The main feature of this container is that it is very memory efficient: its memory size is <computeroutput>N*sizeof(T)+o(N)</computeroutput>, where <computeroutput>N</computeroutput> is the maximum size that the container has had in its past history, its <computeroutput><ref refid="classCGAL_1_1Concurrent__compact__container_1a6250b774658cc529da01dd5174fd944d" kindref="member">capacity()</ref></computeroutput> (the memory of erased elements is not deallocated until destruction of the container or a call to <computeroutput><ref refid="classCGAL_1_1Concurrent__compact__container_1ab47e53f894552888f7c6dbef4d015576" kindref="member">clear()</ref></computeroutput>). This container has been developed in order to store large graph-like data structures like the triangulation and the halfedge data structures.</para><para>It supports bidirectional iterators and allows a constant time amortized <computeroutput><ref refid="classCGAL_1_1Concurrent__compact__container_1af8316954d8c418d6d44259cec0995fcc" kindref="member">insert()</ref></computeroutput> operation. You cannot specify where to insert new objects (i.e. you don&apos;t know where they will end up in the iterator sequence, although <computeroutput><ref refid="classCGAL_1_1Concurrent__compact__container_1af8316954d8c418d6d44259cec0995fcc" kindref="member">insert()</ref></computeroutput> returns an iterator pointing to the newly inserted object). You can erase any element with a constant time complexity.</para><para>Summary of the differences with <computeroutput>std::list</computeroutput>: it is more compact in memory since it doesn&apos;t store two additional pointers for the iterator needs. It doesn&apos;t deallocate elements until the destruction or <computeroutput><ref refid="classCGAL_1_1Concurrent__compact__container_1ab47e53f894552888f7c6dbef4d015576" kindref="member">clear()</ref></computeroutput> of the container. The iterator does not have constant amortized time complexity for the increment and decrement operations in all cases, only when not too many elements have not been freed (i.e. when the <computeroutput><ref refid="classCGAL_1_1Concurrent__compact__container_1aed3fdd87322fb9a664ea5973a535c1b6" kindref="member">size()</ref></computeroutput> is close to the <computeroutput><ref refid="classCGAL_1_1Concurrent__compact__container_1a6250b774658cc529da01dd5174fd944d" kindref="member">capacity()</ref></computeroutput>). Iterating from <computeroutput><ref refid="classCGAL_1_1Concurrent__compact__container_1a73035520b730d254516cdbcfbb9579b7" kindref="member">begin()</ref></computeroutput> to <computeroutput><ref refid="classCGAL_1_1Concurrent__compact__container_1abd459b05dbb39a304e83d84e6d61bea1" kindref="member">end()</ref></computeroutput> takes <computeroutput>O(capacity())</computeroutput> time, not <computeroutput><ref refid="classCGAL_1_1Concurrent__compact__container_1aed3fdd87322fb9a664ea5973a535c1b6" kindref="member">size()</ref></computeroutput>. In the case where the container has a small <computeroutput><ref refid="classCGAL_1_1Concurrent__compact__container_1aed3fdd87322fb9a664ea5973a535c1b6" kindref="member">size()</ref></computeroutput> compared to its <computeroutput><ref refid="classCGAL_1_1Concurrent__compact__container_1a6250b774658cc529da01dd5174fd944d" kindref="member">capacity()</ref></computeroutput>, we advise to "defragment the memory" by copying the container if the iterator performance is needed.</para><para>The iterators themselves can be used as <computeroutput>T</computeroutput>, they provide the necessary functions to be used by <computeroutput><ref refid="structCGAL_1_1Compact__container__traits" kindref="compound">Compact_container_traits</ref>&lt;T&gt;</computeroutput>. Moreover, they also provide a default constructor value which is not singular: it is copyable, comparable, and guaranteed to be unique under comparison (like <computeroutput>NULL</computeroutput> for pointers). This makes them suitable for use in geometric graphs like handles to vertices in triangulations.</para><para>In addition, in a way inspired from the Boost.Intrusive containers, it is possible to construct iterators from references to values in containers using the <computeroutput>iterator_to</computeroutput> and <computeroutput>s_iterator_to</computeroutput> functions.</para><para>The objects stored in the <computeroutput><ref refid="classCGAL_1_1Concurrent__compact__container" kindref="compound">Concurrent_compact_container</ref></computeroutput> can optionally store an &quot;erase counter&quot;. If it exists, i.e. if the object is a model of the <computeroutput><ref refid="classObjectWithEraseCounter" kindref="compound">ObjectWithEraseCounter</ref></computeroutput> concept, each time an object is erased from the container, the erase counter of the object will be incremented. For example, this erase counter can be exploited using the <computeroutput><ref refid="classCGAL_1_1CC__safe__handle" kindref="compound">CC_safe_handle</ref></computeroutput> helper class, so that one can know if a handle is still pointing to the same element. Note that this is meaningful only because the <computeroutput><ref refid="classCGAL_1_1Concurrent__compact__container" kindref="compound">CGAL::Concurrent_compact_container</ref></computeroutput> doesn&apos;t deallocate elements until the destruction or <ref refid="classCGAL_1_1Concurrent__compact__container_1ab47e53f894552888f7c6dbef4d015576" kindref="member">clear()</ref> of the container.</para><para><bold>Parameters</bold><linebreak/>
</para><para>The parameter <computeroutput>T</computeroutput> is required to have a copy constructor and an assignment operator. It also needs to provide access to an internal pointer via <computeroutput><ref refid="structCGAL_1_1Compact__container__traits" kindref="compound">Compact_container_traits</ref>&lt;T&gt;</computeroutput>.</para><para>The equality test and the relational order require the operators <computeroutput>==</computeroutput> and <computeroutput>&lt;</computeroutput> for <computeroutput>T</computeroutput> respectively.</para><para>The parameter <computeroutput>Allocator</computeroutput> has to match the standard allocator requirements, with value type <computeroutput>T</computeroutput>. This parameter has the default value <computeroutput><ref refid="group__PkgStlExtension_1ga859086d0e8d189c8c967229e024e5e82" kindref="member">CGAL_ALLOCATOR(T)</ref></computeroutput>. </para>    </detaileddescription>
    <location file="CGAL/Concurrent_compact_container.h" line="139" column="1" bodyfile="CGAL/Concurrent_compact_container.h" bodystart="138" bodyend="331"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Concurrent__compact__container_1a4f789a00f55050c4cacb018eb4b52205" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>allocator_type</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1acd77ff80f054ab23ee285f3755a8270f" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>assign</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1a73035520b730d254516cdbcfbb9579b7" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>begin</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1a62d6c1604fc8ab5560ce8cd6cb2a90b6" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>begin</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1a6250b774658cc529da01dd5174fd944d" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>capacity</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1ab47e53f894552888f7c6dbef4d015576" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>clear</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1a78a97dbdca9038753856f60a37f7f756" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>Concurrent_compact_container</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1ab7cca38430eb79685d437875265b408f" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>Concurrent_compact_container</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1a8348de488f225af2de53e5616aee884f" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>Concurrent_compact_container</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1a4d5e7ca7eada19ffdf30341aa2a552c6" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>const_iterator</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1a36c9d9e6d9d48c23aa5e10122935ef5f" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>const_pointer</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1a674f4b5bbea336f18b0c3c4dd3715154" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>const_reference</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1a1d9855ab92b843179c87f5693a67adc9" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>const_reverse_iterator</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1a25114761b690fd90ff584b2a88a0bc54" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>difference_type</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1ab228528da464cd41561c530aca9d2d97" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>emplace</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1ac823477bae166ef3e9029baafdb849af" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>empty</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1abd459b05dbb39a304e83d84e6d61bea1" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>end</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1ad60fa82e8078e55d0f1042b5089a9d23" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>end</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1a6fa96e348c7ea5e23ccdbd5aba6b83a8" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>erase</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1ada5c8d837d1f8e3b42c062545cc5ec76" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>erase</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1a13334a5b8f35155454dfc1d93a8dcd63" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>get_allocator</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1af8316954d8c418d6d44259cec0995fcc" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1a8bbc573fea589020e899b8d3bde18829" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1a3f793123afe321c1fef9cb94079a1650" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>is_used</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1abf220fbb248d0b20e37c47e2f5f66f30" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>iterator</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1a6fc0444ff1f1417ce9a2e87d30e12ab2" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>iterator_to</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1a7fb30cd60b383af529b035a1fae09a4d" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>iterator_to</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1a608325ce1208d1501a60b708d196706c" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>max_size</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1a0a83c88c8221ae3834525b9e7db52145" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>merge</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1a46b35b2715f9c6dfcc0d150bddb800bc" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>operator!=</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1abb80c0bf1129429a2e1d293f43e35732" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>operator&lt;</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1a729ac56255f507e5c707ee039b0606af" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>operator&lt;=</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1ae0c9a590e35575cede3de8d81c1a3390" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>operator=</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1a6d5354c942b4e8d32b8140df2a6b74de" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>operator==</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1a651ebbdc11dafa48ae259ee707264ae5" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>operator&gt;</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1a7848f2b5e950e3ee9099b20f1bbad3ea" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>operator&gt;=</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1a47cc837959a49dfc2e2fff0a9120f0b7" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>owns</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1a5b81340523d9aa8c094ef7237e2cc0ec" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>owns_dereferencable</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1ae5076f255eed1bf2523715a17230bc5c" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>pointer</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1a7e1cafc4804d1215aab274a8977fdcdc" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>rbegin</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1a480786541341f749b7fba1df372b2716" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>rbegin</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1a123cec03053f3fe7e9092445287ca7d5" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>reference</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1ad76bb28057b68a1960f59c82ff0c73a9" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>rend</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1aa83c7a2a466f6698d58bc938dfda630c" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>rend</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1a6521b59160fddd41f25b17fe4d4e5ccd" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>reverse_iterator</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1a18db7d14c4d889439986c01fba75abf3" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>s_iterator_to</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1ad581d377cb46a124e31319fe0f461f62" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>s_iterator_to</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1aed3fdd87322fb9a664ea5973a535c1b6" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>size</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1a2454a7cb33adb2f556b928cf3bb82d9e" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>size_type</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1a30f80e45ee0c46a860a3e88f984ec0e4" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>swap</name></member>
      <member refid="classCGAL_1_1Concurrent__compact__container_1a1cf1be1a5e91ced887ffe921078b7f59" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
