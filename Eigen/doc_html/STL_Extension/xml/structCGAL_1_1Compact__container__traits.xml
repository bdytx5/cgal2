<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structCGAL_1_1Compact__container__traits" kind="struct" language="C++" prot="public">
    <compoundname>CGAL::Compact_container_traits</compoundname>
    <includes local="no">CGAL/Compact_container.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <memberdef kind="function" id="structCGAL_1_1Compact__container__traits_1a9c3381b64fe5cb7581e8d347e7d9c485" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>static void* CGAL::Compact_container_traits&lt; T &gt;::pointer</definition>
        <argsstring>(const T &amp;t)</argsstring>
        <name>pointer</name>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Returns the pointer held by <computeroutput>t</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The template version defines this function as: <computeroutput>return t.for_compact_container();</computeroutput> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Compact_container.h" line="813" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Compact__container__traits_1a93a6c421e786006b6651d916be4bed8a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *&amp;</type>
        <definition>static void* &amp; CGAL::Compact_container_traits&lt; T &gt;::pointer</definition>
        <argsstring>(T &amp;t)</argsstring>
        <name>pointer</name>
        <param>
          <type>T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Returns a reference to the pointer held by <computeroutput>t</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The template version defines this function as: <computeroutput>return t.for_compact_container();</computeroutput> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Compact_container.h" line="827" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The traits class <computeroutput><ref refid="structCGAL_1_1Compact__container__traits" kindref="compound">Compact_container_traits</ref></computeroutput> provides the way to access the internal pointer required for <computeroutput>T</computeroutput> to be used in a <computeroutput><ref refid="classCGAL_1_1Compact__container" kindref="compound">Compact_container</ref>&lt;T, Allocator&gt;</computeroutput>. </para>    </briefdescription>
    <detaileddescription>
<para>Note that this pointer needs to be accessible even when the object is not constructed, which means it has to reside in the same memory place as <computeroutput>T</computeroutput>.</para><para>You can specialize this class for your own type <computeroutput>T</computeroutput> if the default template is not suitable.</para><para>You can also use <computeroutput><ref refid="classCGAL_1_1Compact__container__base" kindref="compound">Compact_container_base</ref></computeroutput> as base class for your own types <computeroutput>T</computeroutput> to make them usable with the default <computeroutput><ref refid="structCGAL_1_1Compact__container__traits" kindref="compound">Compact_container_traits</ref></computeroutput>.</para><para><bold>Parameters</bold><linebreak/>
</para><para><computeroutput>T</computeroutput> is any type providing the following member functions:</para><para><computeroutput>void * t.for_compact_container() const;</computeroutput></para><para><computeroutput>void *&amp; t.for_compact_container();</computeroutput>. </para>    </detaileddescription>
    <location file="CGAL/Compact_container.h" line="804" column="1" bodyfile="CGAL/Compact_container.h" bodystart="804" bodyend="835"/>
    <listofallmembers>
      <member refid="structCGAL_1_1Compact__container__traits_1a9c3381b64fe5cb7581e8d347e7d9c485" prot="public" virt="non-virtual"><scope>CGAL::Compact_container_traits</scope><name>pointer</name></member>
      <member refid="structCGAL_1_1Compact__container__traits_1a93a6c421e786006b6651d916be4bed8a" prot="public" virt="non-virtual"><scope>CGAL::Compact_container_traits</scope><name>pointer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
