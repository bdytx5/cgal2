<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structCGAL_1_1Default" kind="struct" language="C++" prot="public">
    <compoundname>CGAL::Default</compoundname>
    <includes local="no">CGAL/Default.h</includes>
    <innerclass refid="structCGAL_1_1Default_1_1Get" prot="public">CGAL::Default::Get</innerclass>
    <innerclass refid="structCGAL_1_1Default_1_1Lazy__get" prot="public">CGAL::Default::Lazy_get</innerclass>
    <briefdescription>
<para><computeroutput><ref refid="structCGAL_1_1Default" kindref="compound">Default</ref></computeroutput> is a tag class. </para>    </briefdescription>
    <detaileddescription>
<para>It can be used to state that one wants to use the default argument of a template parameter of a class template.</para><para>This can be useful in several cases: (a) when one needs a non-default value for another template parameter coming next (since C++ only supports defaults at the end of lists), (b) when the default is actually a complex expression, e.g. refering to previous template parameters (in this case, it shortens compiler error messages and mangled symbol names), (c) when defining the default involves circular dependencies of type instantiations (there, it breaks the cycle in a nice way).</para><para>Using the mechanism is easy: just plug <computeroutput><ref refid="structCGAL_1_1Default" kindref="compound">Default</ref></computeroutput> as template argument in the place where you would like to use the default. You should refer to the documentation of the template class you are using in order to know whether this functionality is offered.</para><para>Also beware that the type of the instantiated template class will not be the same when instantiating it using <computeroutput><ref refid="structCGAL_1_1Default" kindref="compound">Default</ref></computeroutput> instead of the type of the default argument, even though their interfaces will otherwise be the same. This may have consequences in some cases.</para><para><xrefsect id="models_1_models000003"><xreftitle>Is Model Of</xreftitle><xrefdescription><para><computeroutput><ref refid="classDefaultConstructible" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">DefaultConstructible</ref></computeroutput> </para><para><computeroutput><ref refid="classCopyConstructible" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">CopyConstructible</ref></computeroutput></para></xrefdescription></xrefsect></para><para>In order to help the template class writer, <computeroutput><ref refid="structCGAL_1_1Default" kindref="compound">Default</ref></computeroutput> provides a convenient way to extract the desired type for a template parameter which may be defaulted using <computeroutput><ref refid="structCGAL_1_1Default" kindref="compound">Default</ref></computeroutput>. It is enough to fetch the type as <computeroutput><ref refid="structCGAL_1_1Default_1_1Get" kindref="compound">Default::Get</ref>&lt;Parameter, Type&gt;::type</computeroutput>, as in the example program below.</para><para><bold>Example</bold><linebreak/>
</para><para><linebreak/>
<bold>File</bold> <ref refid="STL_Extension_2Default_8cpp-example" kindref="compound">STL_Extension/Default.cpp</ref> <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Default.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/use.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>is<sp/>a<sp/>concrete<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">A<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>use_a(A)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>B<sp/>is<sp/>the<sp/>template<sp/>class<sp/>which<sp/>has<sp/>2<sp/>template<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>default<sp/>arguments<sp/>:<sp/>A<sp/>and<sp/>int.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A1_<sp/>=<sp/>A,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A2<sp/>=<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">B</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>B()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>a1()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>it<sp/>is<sp/>also<sp/>possible<sp/>to<sp/>use<sp/>CGAL::Default</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>instead<sp/>of<sp/>A<sp/>as<sp/>the<sp/>default<sp/>argument<sp/>for<sp/>A1_<sp/>above.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>the<sp/>desired<sp/>type<sp/>for<sp/>A1<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">CGAL::Default::Get&lt;A1_, A&gt;::type</ref><sp/><sp/>A1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>A1<sp/>a1;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main<sp/>()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>B&lt;CGAL::Default,<sp/>double&gt;<sp/>b;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>use_a(b.a1);<sp/></highlight><highlight class="comment">//<sp/><sp/>It<sp/>is<sp/>really<sp/>of<sp/>type<sp/>A.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>    </detaileddescription>
    <location file="CGAL/Default.h" line="42" column="1" bodyfile="CGAL/Default.h" bodystart="42" bodyend="67"/>
    <listofallmembers>
    </listofallmembers>
  </compounddef>
</doxygen>
