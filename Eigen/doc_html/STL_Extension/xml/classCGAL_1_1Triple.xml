<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Triple" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Triple</compoundname>
    <includes local="no">CGAL/utility.h</includes>
    <templateparamlist>
      <param>
        <type>typename T1</type>
      </param>
      <param>
        <type>typename T2</type>
      </param>
      <param>
        <type>typename T3</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classCGAL_1_1Triple_1ae6c0c49fd657d03e3c8dd437c165c065" prot="public" static="no">
        <type>T1</type>
        <definition>typedef T1 CGAL::Triple&lt; T1, T2, T3 &gt;::first_type</definition>
        <argsstring></argsstring>
        <name>first_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/utility.h" line="259" column="1" bodyfile="CGAL/utility.h" bodystart="259" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triple_1a1549111bcadde1e45b97084bbf0527de" prot="public" static="no">
        <type>T2</type>
        <definition>typedef T2 CGAL::Triple&lt; T1, T2, T3 &gt;::second_type</definition>
        <argsstring></argsstring>
        <name>second_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/utility.h" line="271" column="1" bodyfile="CGAL/utility.h" bodystart="271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triple_1a035755acd9bb4fd703f532e346c24f1c" prot="public" static="no">
        <type>T3</type>
        <definition>typedef T3 CGAL::Triple&lt; T1, T2, T3 &gt;::third_type</definition>
        <argsstring></argsstring>
        <name>third_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/utility.h" line="283" column="1" bodyfile="CGAL/utility.h" bodystart="283" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Variables</header>
      <memberdef kind="variable" id="classCGAL_1_1Triple_1a01b547c42a086c84c89f2bf1f0caaa71" prot="public" static="no" mutable="no">
        <type>T1</type>
        <definition>T1 CGAL::Triple&lt; T1, T2, T3 &gt;::first</definition>
        <argsstring></argsstring>
        <name>first</name>
        <briefdescription>
<para>first element. </para>        </briefdescription>
        <detaileddescription>
<para>Please access it using <computeroutput>get&lt;0&gt;()</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/utility.h" line="295" column="1" bodyfile="CGAL/utility.h" bodystart="295" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCGAL_1_1Triple_1a6421bcd4889c6e4035ff5ac0ef330f09" prot="public" static="no" mutable="no">
        <type>T2</type>
        <definition>T2 CGAL::Triple&lt; T1, T2, T3 &gt;::second</definition>
        <argsstring></argsstring>
        <name>second</name>
        <briefdescription>
<para>second element. </para>        </briefdescription>
        <detaileddescription>
<para>Please access it using <computeroutput>get&lt;1&gt;()</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/utility.h" line="307" column="1" bodyfile="CGAL/utility.h" bodystart="307" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCGAL_1_1Triple_1a259acf3abe5295dedc2f575236646339" prot="public" static="no" mutable="no">
        <type>T3</type>
        <definition>T3 CGAL::Triple&lt; T1, T2, T3 &gt;::third</definition>
        <argsstring></argsstring>
        <name>third</name>
        <briefdescription>
<para>third element. </para>        </briefdescription>
        <detaileddescription>
<para>Please access it using <computeroutput>get&lt;2&gt;()</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/utility.h" line="319" column="1" bodyfile="CGAL/utility.h" bodystart="319" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Triple_1a5df66d6c889c53621f462ec6c529dd74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Triple&lt; T1, T2, T3 &gt;::Triple</definition>
        <argsstring>()</argsstring>
        <name>Triple</name>
        <briefdescription>
<para>introduces a triple using the default constructor of the three elements. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/utility.h" line="332" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triple_1a6a90ebf01b8ac680a820c95adb812c2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Triple&lt; T1, T2, T3 &gt;::Triple</definition>
        <argsstring>(T1 x, T2 y, T3 z)</argsstring>
        <name>Triple</name>
        <param>
          <type>T1</type>
          <declname>x</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>y</declname>
        </param>
        <param>
          <type>T3</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>constructs a triple such that <computeroutput>first</computeroutput> is constructed from <computeroutput>x</computeroutput>, <computeroutput>second</computeroutput> is constructed from <computeroutput>y</computeroutput>, and <computeroutput>third</computeroutput> is constructed from <computeroutput>z</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/utility.h" line="347" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triple_1a901d9bdb84fdd0b3c6d44a55b616ad7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class W</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>CGAL::Triple&lt; T1, T2, T3 &gt;::Triple</definition>
        <argsstring>(U u, V v, W w)</argsstring>
        <name>Triple</name>
        <param>
          <type>U</type>
          <declname>u</declname>
        </param>
        <param>
          <type>V</type>
          <declname>v</declname>
        </param>
        <param>
          <type>W</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>constructs a triple such that <computeroutput>first</computeroutput> is constructed from <computeroutput>u</computeroutput>, <computeroutput>second</computeroutput> is constructed from <computeroutput>v</computeroutput>, and <computeroutput>third</computeroutput> is constructed from <computeroutput>w</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Proper conversion operators must exist from <computeroutput>U</computeroutput> to <computeroutput>T1</computeroutput>, <computeroutput>V</computeroutput> to <computeroutput>T2</computeroutput>, and <computeroutput>W</computeroutput> to <computeroutput>T3</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/utility.h" line="362" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triple_1a64e53ea9a212376b96a3812c3806f89d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>i</declname>
            <defname>i</defname>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T CGAL::Triple&lt; T1, T2, T3 &gt;::get</definition>
        <argsstring>()</argsstring>
        <name>get</name>
        <briefdescription>
<para>Gives access to <computeroutput>first</computeroutput>, <computeroutput>second</computeroutput> or <computeroutput>third</computeroutput> whenever <computeroutput>i</computeroutput> is 0, 1 or 2, via a, potentially const, reference. </para>        </briefdescription>
        <detaileddescription>
<para>Note: <computeroutput>T</computeroutput> stands for <computeroutput>T1</computeroutput>, <computeroutput>T2</computeroutput> or <computeroutput>T3</computeroutput> depending on <computeroutput>i</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/utility.h" line="378" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classCGAL_1_1Triple_1accac538d96dfc5e3b63eb12a9cbb465d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T1</type>
          </param>
          <param>
            <type>class T2</type>
          </param>
          <param>
            <type>class T3</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Triple&lt; T1, T2, T3 &gt;::operator&lt;</definition>
        <argsstring>(Triple&lt; T1, T2, T3 &gt; x, Triple&lt; T1, T2, T3 &gt; y)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="classCGAL_1_1Triple" kindref="compound">Triple</ref>&lt; T1, T2, T3 &gt;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triple" kindref="compound">Triple</ref>&lt; T1, T2, T3 &gt;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>The comparison operator. </para>        </briefdescription>
        <detaileddescription>
<para>It uses lexicographic comparison: the return value is true if the first element of <computeroutput>x</computeroutput> is less than the first element of <computeroutput>y</computeroutput>, and false if the first element of <computeroutput>y</computeroutput> is less than the first element of <computeroutput>x</computeroutput>. If neither of these is the case, then it returns true if the second element of <computeroutput>x</computeroutput> is less than the second element of <computeroutput>y</computeroutput>, and false if the second element of <computeroutput>y</computeroutput> is less than the second element of <computeroutput>x</computeroutput>. If neither of these is the case, then it returns the result of comparing the third elements of <computeroutput>x</computeroutput> and <computeroutput>y</computeroutput>. This operator may only be used if <computeroutput>T1</computeroutput>, <computeroutput>T2</computeroutput> and <computeroutput>T3</computeroutput> define the comparison operator. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/utility.h" line="398" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triple_1aeae4a938d9890aa8c93d3f11e3f24e2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T1</type>
          </param>
          <param>
            <type>class T2</type>
          </param>
          <param>
            <type>class T3</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Triple&lt; T1, T2, T3 &gt;::operator==</definition>
        <argsstring>(Triple&lt; T1, T2, T3 &gt; x, Triple&lt; T1, T2, T3 &gt; y)</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="classCGAL_1_1Triple" kindref="compound">Triple</ref>&lt; T1, T2, T3 &gt;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triple" kindref="compound">Triple</ref>&lt; T1, T2, T3 &gt;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>The equality operator. </para>        </briefdescription>
        <detaileddescription>
<para>The return value is true if and only the first elements of <computeroutput>x</computeroutput> and <computeroutput>y</computeroutput> are equal, the second elements of <computeroutput>x</computeroutput> and <computeroutput>y</computeroutput> are equal, and the third elements of <computeroutput>x</computeroutput> and <computeroutput>y</computeroutput> are equal. This operator may only be used if <computeroutput>T1</computeroutput>, <computeroutput>T2</computeroutput> and <computeroutput>T3</computeroutput> define the equality operator. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/utility.h" line="411" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="classCGAL_1_1Triple" kindref="compound">Triple</ref> class is an extension of <computeroutput>std::pair</computeroutput>. </para>    </briefdescription>
    <detaileddescription>
<para><computeroutput><ref refid="classCGAL_1_1Triple" kindref="compound">Triple</ref></computeroutput> is a heterogeneous triple: it holds one object of type <computeroutput>T1</computeroutput>, one of type <computeroutput>T2</computeroutput>, and one of type <computeroutput>T3</computeroutput>. A <computeroutput><ref refid="classCGAL_1_1Triple" kindref="compound">Triple</ref></computeroutput> is much like a container, in that it &quot;owns&quot; its elements. It is not actually a model of container, though, because it does not support the standard methods (such as iterators) for accessing the elements of a container.</para><para><computeroutput><ref refid="classCGAL_1_1cpp11_1_1tuple" kindref="compound">CGAL::cpp11::tuple</ref></computeroutput> or <computeroutput><ref refid="classCGAL_1_1cpp11_1_1array" kindref="compound">CGAL::cpp11::array</ref></computeroutput> instead for new uses.</para><para><bold>Requirements</bold><linebreak/>
</para><para><computeroutput>T1</computeroutput>, <computeroutput>T2</computeroutput> and <computeroutput>T3</computeroutput> must be <computeroutput><ref refid="classAssignable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">Assignable</ref></computeroutput>. Additional operations have additional requirements. </para>    </detaileddescription>
    <location file="CGAL/utility.h" line="251" column="1" bodyfile="CGAL/utility.h" bodystart="251" bodyend="413"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Triple_1a01b547c42a086c84c89f2bf1f0caaa71" prot="public" virt="non-virtual"><scope>CGAL::Triple</scope><name>first</name></member>
      <member refid="classCGAL_1_1Triple_1ae6c0c49fd657d03e3c8dd437c165c065" prot="public" virt="non-virtual"><scope>CGAL::Triple</scope><name>first_type</name></member>
      <member refid="classCGAL_1_1Triple_1a64e53ea9a212376b96a3812c3806f89d" prot="public" virt="non-virtual"><scope>CGAL::Triple</scope><name>get</name></member>
      <member refid="classCGAL_1_1Triple_1accac538d96dfc5e3b63eb12a9cbb465d" prot="public" virt="non-virtual"><scope>CGAL::Triple</scope><name>operator&lt;</name></member>
      <member refid="classCGAL_1_1Triple_1aeae4a938d9890aa8c93d3f11e3f24e2e" prot="public" virt="non-virtual"><scope>CGAL::Triple</scope><name>operator==</name></member>
      <member refid="classCGAL_1_1Triple_1a6421bcd4889c6e4035ff5ac0ef330f09" prot="public" virt="non-virtual"><scope>CGAL::Triple</scope><name>second</name></member>
      <member refid="classCGAL_1_1Triple_1a1549111bcadde1e45b97084bbf0527de" prot="public" virt="non-virtual"><scope>CGAL::Triple</scope><name>second_type</name></member>
      <member refid="classCGAL_1_1Triple_1a259acf3abe5295dedc2f575236646339" prot="public" virt="non-virtual"><scope>CGAL::Triple</scope><name>third</name></member>
      <member refid="classCGAL_1_1Triple_1a035755acd9bb4fd703f532e346c24f1c" prot="public" virt="non-virtual"><scope>CGAL::Triple</scope><name>third_type</name></member>
      <member refid="classCGAL_1_1Triple_1a5df66d6c889c53621f462ec6c529dd74" prot="public" virt="non-virtual"><scope>CGAL::Triple</scope><name>Triple</name></member>
      <member refid="classCGAL_1_1Triple_1a6a90ebf01b8ac680a820c95adb812c2d" prot="public" virt="non-virtual"><scope>CGAL::Triple</scope><name>Triple</name></member>
      <member refid="classCGAL_1_1Triple_1a901d9bdb84fdd0b3c6d44a55b616ad7a" prot="public" virt="non-virtual"><scope>CGAL::Triple</scope><name>Triple</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
