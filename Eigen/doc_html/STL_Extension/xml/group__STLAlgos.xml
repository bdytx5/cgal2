<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__STLAlgos" kind="group">
    <compoundname>STLAlgos</compoundname>
    <title>Generic Algorithms</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__STLAlgos_1gacb8df77d1d07b9cfff3fdd2f5d9c4fda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          </param>
          <param>
            <type>class Size</type>
          </param>
          <param>
            <type>class <ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::copy_n</definition>
        <argsstring>(InputIterator first, Size n, OutputIterator result)</argsstring>
        <name>copy_n</name>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type>Size</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function is deprecated, <ref refid="group__STLAlgos_1gadba21cc5c30a79519438dfe0f9264255" kindref="member">CGAL::cpp11::copy_n</ref> should be used instead.</para></xrefdescription></xrefsect></para><para>Copies the first <computeroutput>n</computeroutput> items from <computeroutput>first</computeroutput> to <computeroutput>result</computeroutput>.</para><para><simplesect kind="return"><para>the value of <computeroutput>result</computeroutput> after inserting the <computeroutput>n</computeroutput> items.</para></simplesect>
<simplesect kind="note"><para>The STL release June 13, 1997, from SGI contains an equivalent function, but it is not part of the ISO standard.</para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Counting__iterator" kindref="compound">CGAL::Counting_iterator</ref>&lt;<ref refid="classIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">Iterator</ref>, Value&gt;</computeroutput></para></simplesect>
copies </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/algorithm.h" line="26" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__STLAlgos_1gab7b9c20885fa91f21f014d849a07e9c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; <ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref>, <ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref> &gt;</type>
        <definition>std::pair&lt;ForwardIterator, ForwardIterator &gt; CGAL::min_max_element</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last)</argsstring>
        <name>min_max_element</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Computes the minimal and the maximal element of a range. </para>        </briefdescription>
        <detaileddescription>
<para>It is modeled after the STL functions <computeroutput>std::min_element</computeroutput> and <computeroutput>std::max_element</computeroutput>. The advantage of <computeroutput>min_max_element</computeroutput> compared to calling both STL functions is that one only iterates once over the sequence. This is more efficient especially for large and/or complex sequences.</para><para><bold>Example</bold><linebreak/>
</para><para>The following example program computes the minimal and maximal element of the sequence <computeroutput>(3,\,6,\,5)</computeroutput>. Hence the output is <computeroutput>min = 3, max = 6</computeroutput>.</para><para><linebreak/>
<bold>File</bold> <ref refid="STL_Extension_2min_max_element_example_8cpp-example" kindref="compound">STL_Extension/min_max_element_example.cpp</ref> <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/algorithm.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::vector;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::pair;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::cout;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="group__STLAlgos_1gab7b9c20885fa91f21f014d849a07e9c7" kindref="member">CGAL::min_max_element</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vector&lt;<sp/>int<sp/>&gt;<sp/>v;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>v.push_back(3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>v.push_back(6);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>v.push_back(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;<sp/>int<sp/>&gt;::iterator<sp/>iterator;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pair&lt;<sp/>iterator,<sp/>iterator<sp/>&gt;<sp/>p<sp/>=<sp/><ref refid="group__STLAlgos_1gab7b9c20885fa91f21f014d849a07e9c7" kindref="member">min_max_element</ref>(v.begin(),<sp/>v.end());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;min<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>*p.first<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>max<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>*p.second<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><simplesect kind="return"><para>a pair of iterators where the first component refers to the minimal and the second component refers to the maximal element in the range [<computeroutput>first</computeroutput>, <computeroutput>last</computeroutput>). The ordering is defined by <computeroutput>operator&lt;</computeroutput> on the value type of <computeroutput><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/algorithm.h" line="59" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__STLAlgos_1gaf404b198e27ef4018bc5185c9e7da751" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          </param>
          <param>
            <type>class CompareMin</type>
          </param>
          <param>
            <type>class CompareMax</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; <ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref>, <ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref> &gt;</type>
        <definition>std::pair&lt; ForwardIterator, ForwardIterator &gt; CGAL::min_max_element</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last, CompareMin comp_min, CompareMax comp_max)</argsstring>
        <name>min_max_element</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>last</declname>
        </param>
        <param>
          <type>CompareMin</type>
          <declname>comp_min</declname>
        </param>
        <param>
          <type>CompareMax</type>
          <declname>comp_max</declname>
        </param>
        <briefdescription>
<para>Computes the minimal and the maximal element of a range. </para>        </briefdescription>
        <detaileddescription>
<para>It is modeled after the STL functions <computeroutput>std::min_element</computeroutput> and <computeroutput>std::max_element</computeroutput>. The advantage of <computeroutput>min_max_element</computeroutput> compared to calling both STL functions is that one only iterates once over the sequence. This is more efficient especially for large and/or complex sequences.</para><para><simplesect kind="return"><para>a pair of iterators where the first component refers to the minimal and the second component refers to the maximal element in the range [<computeroutput>first</computeroutput>, <computeroutput>last</computeroutput>).</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>CompareMin</parametername>
</parameternamelist>
<parameterdescription>
<para>is an adaptable binary function object: <computeroutput>VT</computeroutput> <formula id="0">$ \times$</formula> <computeroutput>VT</computeroutput> <formula id="1">$ \rightarrow$</formula> <computeroutput>bool</computeroutput> where <computeroutput>VT</computeroutput> is the value type of <computeroutput><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></computeroutput>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CompareMax</parametername>
</parameternamelist>
<parameterdescription>
<para>is an adaptable binary function object: <computeroutput>VT</computeroutput> <formula id="0">$ \times$</formula> <computeroutput>VT</computeroutput> <formula id="1">$ \rightarrow$</formula> <computeroutput>bool</computeroutput> where <computeroutput>VT</computeroutput> is the value type of <computeroutput><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/algorithm.h" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__STLAlgos_1ga6c5d40930db429775066babac7c35d7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classBidirectionalIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">BidirectionalIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classBidirectionalIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">BidirectionalIterator</ref></type>
        <definition>BidirectionalIterator CGAL::predecessor</definition>
        <argsstring>(BidirectionalIterator it)</argsstring>
        <name>predecessor</name>
        <param>
          <type><ref refid="classBidirectionalIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">BidirectionalIterator</ref></type>
          <declname>it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000002"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function is deprecated.</para></xrefdescription></xrefsect><computeroutput><ref refid="group__STLAlgos_1ga6c3790809028471b1eacccb0d714d040" kindref="member">CGAL::cpp11::prev</ref></computeroutput> should be used instead.</para><para>Returns the previous iterator, i.e. the result of <computeroutput>operator--</computeroutput> on a bidirectional iterator.</para><para><simplesect kind="see"><para><computeroutput><ref refid="group__STLAlgos_1gaeda33e3a2c07e29ca0f6d209182ced7c" kindref="member">CGAL::successor()</ref></computeroutput></para></simplesect>
<simplesect kind="return"><para><computeroutput>--it</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/algorithm.h" line="109" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__STLAlgos_1gaeda33e3a2c07e29ca0f6d209182ced7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
        <definition>ForwardIterator CGAL::successor</definition>
        <argsstring>(ForwardIterator it)</argsstring>
        <name>successor</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000003"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function is deprecated.</para></xrefdescription></xrefsect><computeroutput><ref refid="group__STLAlgos_1gad4dbc8daf3c0e2201f4972eb9eea404d" kindref="member">CGAL::cpp11::next</ref></computeroutput> should be used instead.</para><para>Returns the next iterator, i.e. the result of <computeroutput>operator++</computeroutput> on a forward iterator.</para><para><simplesect kind="see"><para><computeroutput><ref refid="group__STLAlgos_1ga6c5d40930db429775066babac7c35d7f" kindref="member">CGAL::predecessor()</ref></computeroutput></para></simplesect>
<simplesect kind="return"><para><computeroutput>++it</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/algorithm.h" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__STLAlgos_1gad4dbc8daf3c0e2201f4972eb9eea404d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">Iterator</ref></type>
        <definition>Iterator CGAL::cpp11::next</definition>
        <argsstring>(ForwardIterator it)</argsstring>
        <name>next</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>The function returns the result of <computeroutput>operator++</computeroutput> on a <computeroutput><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The exact behaviour is described in Paragraph 24.4.4 of the C++ standard draft <ulink url="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3242.pdf">N3242</ulink>.</para><para><simplesect kind="note"><para>There is actually no function in namespace <computeroutput><ref refid="namespaceCGAL_1_1cpp11" kindref="compound">CGAL::cpp11</ref></computeroutput> with this name, but a using declaration which imports a function from another namespace. By order of priority: the one in namespace <computeroutput>std</computeroutput> is used (provided by C++0x), if not found, then the one in namespace <computeroutput>boost</computeroutput> is used.</para></simplesect>
<simplesect kind="see"><para><ulink url="https://www.boost.org/doc/libs/1_46_1/libs/utility/utility.htm#functions_next_prior">boost::next</ulink> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__STLAlgos_1ga6c3790809028471b1eacccb0d714d040" kindref="member">CGAL::cpp11::prev()</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/algorithm.h" line="156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__STLAlgos_1ga6c3790809028471b1eacccb0d714d040" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classBidirectionalIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">BidirectionalIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">Iterator</ref></type>
        <definition>Iterator CGAL::cpp11::prev</definition>
        <argsstring>(BidirectionalIterator it)</argsstring>
        <name>prev</name>
        <param>
          <type><ref refid="classBidirectionalIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">BidirectionalIterator</ref></type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>The function returns the result of <computeroutput>operator--</computeroutput> on a <computeroutput><ref refid="classBidirectionalIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">BidirectionalIterator</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The exact behaviour is described in Paragraph 24.4.4 of the C++ standard draft <ulink url="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3242.pdf">N3242</ulink>.</para><para><simplesect kind="note"><para>If C++0x is available the function <computeroutput>std::prev</computeroutput> is imported into the namespace <computeroutput><ref refid="namespaceCGAL_1_1cpp11" kindref="compound">CGAL::cpp11</ref></computeroutput>, otherwise <computeroutput><ref refid="group__STLAlgos_1ga6c3790809028471b1eacccb0d714d040" kindref="member">CGAL::cpp11::prev</ref></computeroutput> is declared with the signature as given in Paragraph 24.4.4 of the ISO C++ Standard and forwarded to <computeroutput>boost::prior</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/algorithm.h" line="172" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__STLAlgos_1gadba21cc5c30a79519438dfe0f9264255" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          </param>
          <param>
            <type>class Size</type>
          </param>
          <param>
            <type>class <ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::cpp11::copy_n</definition>
        <argsstring>(InputIterator first, Size count, OutputIterator result)</argsstring>
        <name>copy_n</name>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type>Size</type>
          <declname>count</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Copies <computeroutput>n</computeroutput> items from an input iterator to an output iterator. </para>        </briefdescription>
        <detaileddescription>
<para>Its exact behaviour is defined in Paragraph 25.3.1 of the C++ standard draft <ulink url="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3242.pdf">N3242</ulink>.</para><para><simplesect kind="note"><para>This provides an implementation of the standard function <computeroutput>copy_n</computeroutput> from the C++0x standard. If <computeroutput>copy_n</computeroutput> is available in the <computeroutput>std::</computeroutput> namespace a using declaration is used, otherwise an alternative implementation from CGAL is used. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/algorithm.h" line="190" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__STLAlgos_1ga03da480625f380d4d06ea64de211add4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></type>
          </param>
          <param>
            <type>class RandomGenerator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::cpp98::random_shuffle</definition>
        <argsstring>(RandomAccessIterator begin, RandomAccessIterator end, RandomGenerator &amp;random)</argsstring>
        <name>random_shuffle</name>
        <param>
          <type><ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></type>
          <declname>begin</declname>
        </param>
        <param>
          <type><ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></type>
          <declname>end</declname>
        </param>
        <param>
          <type>RandomGenerator &amp;</type>
          <declname>random</declname>
        </param>
        <briefdescription>
<para>Replacement for <ulink url="http://en.cppreference.com/w/cpp/algorithm/random_shuffle"><computeroutput>std::random_shuffle()</computeroutput></ulink> which was deprecated in C++14, and removed by C++17. </para>        </briefdescription>
        <detaileddescription>
<para>In the STL it was replaced by <computeroutput>std::shuffle()</computeroutput>.</para><para><simplesect kind="note"><para>The implementation in CGAL produces the same order on all platforms. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/algorithm.h" line="208" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__STLAlgos_1gae51e106684360ea3c9ce4eaa2ba68218" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::cpp98::random_shuffle</definition>
        <argsstring>(RandomAccessIterator begin, RandomAccessIterator end)</argsstring>
        <name>random_shuffle</name>
        <param>
          <type><ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></type>
          <declname>begin</declname>
        </param>
        <param>
          <type><ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Replacement for <ulink url="http://en.cppreference.com/w/cpp/algorithm/random_shuffle"><computeroutput>std::random_shuffle()</computeroutput></ulink> which was deprecated in C++14, and removed by C++17. </para>        </briefdescription>
        <detaileddescription>
<para>In the STL it was replaced by <computeroutput>std::shuffle()</computeroutput>.</para><para><simplesect kind="note"><para>The implementation in CGAL produces the same order on all platforms. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/algorithm.h" line="221" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
