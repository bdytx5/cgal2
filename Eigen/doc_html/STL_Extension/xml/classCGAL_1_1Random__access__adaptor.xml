<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Random__access__adaptor" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Random_access_adaptor</compoundname>
    <includes local="no">CGAL/iterator.h</includes>
    <templateparamlist>
      <param>
        <type>typename IC</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classCGAL_1_1Random__access__adaptor_1a3ae3fe6daa8f5c1e1abc394ae2cc48ec" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Random_access_adaptor&lt; IC &gt;::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <briefdescription>
<para>size type of the STL <computeroutput>std::vector</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/iterator.h" line="802" column="1" bodyfile="CGAL/iterator.h" bodystart="802" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Random__access__adaptor_1a195f8ea801942b4728b5bd7261b6b706" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Random_access_adaptor&lt; IC &gt;::Random_access_adaptor</definition>
        <argsstring>()</argsstring>
        <name>Random_access_adaptor</name>
        <briefdescription>
<para>invalid index. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/iterator.h" line="810" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Random__access__adaptor_1a66c03db560ea6471b0e4d1a8c60e2bbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Random_access_adaptor&lt; IC &gt;::Random_access_adaptor</definition>
        <argsstring>(const IC &amp;i)</argsstring>
        <name>Random_access_adaptor</name>
        <param>
          <type>const IC &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>empty random access index initialized to start at <computeroutput>i</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/iterator.h" line="823" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Random__access__adaptor_1a669aa1ac1dc50dbed60ce22ec9b0c8d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Random_access_adaptor&lt; IC &gt;::Random_access_adaptor</definition>
        <argsstring>(const IC &amp;i, const IC &amp;j)</argsstring>
        <name>Random_access_adaptor</name>
        <param>
          <type>const IC &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const IC &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>random access index initialized to the range <computeroutput>[i,j)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/iterator.h" line="835" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Random__access__adaptor_1a54be1535e626b158eb9e5ed9b1330d75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Random_access_adaptor&lt; IC &gt;::reserve</definition>
        <argsstring>(size_type r)</argsstring>
        <name>reserve</name>
        <param>
          <type><ref refid="classCGAL_1_1Random__access__adaptor_1a3ae3fe6daa8f5c1e1abc394ae2cc48ec" kindref="member">size_type</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>reserve <computeroutput>r</computeroutput> entries, if a <computeroutput>std::vector</computeroutput> is used internally. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/iterator.h" line="849" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <memberdef kind="function" id="classCGAL_1_1Random__access__adaptor_1ab7241d754a42ce568136ba4ecbf1ee49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>IC</type>
        <definition>IC CGAL::Random_access_adaptor&lt; IC &gt;::operator[]</definition>
        <argsstring>(size_type n)</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="classCGAL_1_1Random__access__adaptor_1a3ae3fe6daa8f5c1e1abc394ae2cc48ec" kindref="member">size_type</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>returns iterator or circulator to the <computeroutput>n</computeroutput>-th item. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>n &lt;</computeroutput> number of items in the data-structure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/iterator.h" line="862" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Random__access__adaptor_1aa76a06830b0c3d7d910ee785e91504d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Random_access_adaptor&lt; IC &gt;::push_back</definition>
        <argsstring>(const IC &amp;k)</argsstring>
        <name>push_back</name>
        <param>
          <type>const IC &amp;</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>adds <computeroutput>k</computeroutput> at the end of the indices. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/iterator.h" line="874" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The class <computeroutput><ref refid="classCGAL_1_1Random__access__adaptor" kindref="compound">Random_access_adaptor</ref></computeroutput> provides a random access for data structures. </para>    </briefdescription>
    <detaileddescription>
<para>Either the data structure supports random access iterators or circulators where this class maps function calls to the iterator or circulator, or a STL <computeroutput>std::vector</computeroutput> is used to provide the random access. The iterator or circulator of the data structure are of type <computeroutput>IC</computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Inverse__index" kindref="compound">CGAL::Inverse_index</ref>&lt;IC&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Random__access__value__adaptor" kindref="compound">CGAL::Random_access_value_adaptor</ref>&lt;IC,T&gt;</computeroutput> </para></simplesect>
</para>    </detaileddescription>
    <location file="CGAL/iterator.h" line="793" column="1" bodyfile="CGAL/iterator.h" bodystart="793" bodyend="882"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Random__access__adaptor_1ab7241d754a42ce568136ba4ecbf1ee49" prot="public" virt="non-virtual"><scope>CGAL::Random_access_adaptor</scope><name>operator[]</name></member>
      <member refid="classCGAL_1_1Random__access__adaptor_1aa76a06830b0c3d7d910ee785e91504d2" prot="public" virt="non-virtual"><scope>CGAL::Random_access_adaptor</scope><name>push_back</name></member>
      <member refid="classCGAL_1_1Random__access__adaptor_1a195f8ea801942b4728b5bd7261b6b706" prot="public" virt="non-virtual"><scope>CGAL::Random_access_adaptor</scope><name>Random_access_adaptor</name></member>
      <member refid="classCGAL_1_1Random__access__adaptor_1a66c03db560ea6471b0e4d1a8c60e2bbc" prot="public" virt="non-virtual"><scope>CGAL::Random_access_adaptor</scope><name>Random_access_adaptor</name></member>
      <member refid="classCGAL_1_1Random__access__adaptor_1a669aa1ac1dc50dbed60ce22ec9b0c8d6" prot="public" virt="non-virtual"><scope>CGAL::Random_access_adaptor</scope><name>Random_access_adaptor</name></member>
      <member refid="classCGAL_1_1Random__access__adaptor_1a54be1535e626b158eb9e5ed9b1330d75" prot="public" virt="non-virtual"><scope>CGAL::Random_access_adaptor</scope><name>reserve</name></member>
      <member refid="classCGAL_1_1Random__access__adaptor_1a3ae3fe6daa8f5c1e1abc394ae2cc48ec" prot="public" virt="non-virtual"><scope>CGAL::Random_access_adaptor</scope><name>size_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
