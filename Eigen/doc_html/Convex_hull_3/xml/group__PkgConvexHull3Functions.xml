<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__PkgConvexHull3Functions" kind="group">
    <compoundname>PkgConvexHull3Functions</compoundname>
    <title>Convex Hull Functions</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgConvexHull3Functions_1gade99e8e830ff439ae242b7ab04de06c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PlaneIterator</type>
          </param>
          <param>
            <type>class PolygonMesh</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::halfspace_intersection_3</definition>
        <argsstring>(PlaneIterator begin, PlaneIterator end, PolygonMesh &amp;pm, boost::optional&lt; Kernel_traits&lt; std::iterator_traits&lt; PlaneIterator &gt;::value_type &gt;::Kernel::Point_3 &gt; &gt; origin=boost::none)</argsstring>
        <name>halfspace_intersection_3</name>
        <param>
          <type>PlaneIterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>PlaneIterator</type>
          <declname>end</declname>
        </param>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pm</declname>
        </param>
        <param>
          <type>boost::optional&lt; Kernel_traits&lt; std::iterator_traits&lt; PlaneIterator &gt;::value_type &gt;::<ref refid="classKernel_1_1Point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel::Point_3</ref> &gt;</type>
        </param>
        <param>
          <type>origin</type>
          <defval>boost::none</defval>
        </param>
        <briefdescription>
<para>computes robustly the intersection of the halfspaces defined by the planes contained in the range [<computeroutput>begin</computeroutput>, <computeroutput>end</computeroutput>) without constructing the dual points. </para>        </briefdescription>
        <detaileddescription>
<para>The result is stored in the polyhedron <computeroutput>pm</computeroutput>. If <computeroutput>origin</computeroutput> is given then it must be a point strictly inside the polyhedron. If an interior point is not given then it is computed using a linear program and thus is slower.</para><para>This version does not construct the dual points explicitely but uses a special traits class for the function <computeroutput><ref refid="group__PkgConvexHull3Functions_1gadc8318947c2133e56b2e56171b2ecd7d" kindref="member">CGAL::convex_hull_3()</ref></computeroutput> to handle predicates on dual points without constructing them.</para><para><simplesect kind="attention"><para>Halfspaces are considered as lower halfspaces that is to say if the plane&apos;s equation is <formula id="0">$ a\, x +b\, y +c\, z + d = 0 $</formula> then the corresponding halfspace is defined by <formula id="1">$ a\, x +b\, y +c\, z + d \le 0 $</formula> . </para></simplesect>
<simplesect kind="attention"><para></para></simplesect>
<simplesect kind="pre"><para>The point type of <computeroutput>origin</computeroutput> and the point type of the vertices of <computeroutput>PolygonMesh</computeroutput> must come from the same CGAL Kernel.</para></simplesect>
<simplesect kind="pre"><para>if provided, <computeroutput>origin</computeroutput> is inside the intersection of halfspaces defined by the range <computeroutput>[begin, end)</computeroutput>. </para></simplesect>
<simplesect kind="pre"><para>The computed intersection must be a bounded convex polyhedron.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PlaneIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be an input iterator where the value type is a model of the concept <computeroutput><ref refid="classKernel_1_1Plane__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel::Plane_3</ref></computeroutput> and this plane type must come from the same kernel as the point type.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull3Functions_1ga7517c4cbbef41338397eda273af75eb1" kindref="member">halfspace_intersection_with_constructions_3()</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_3/dual/halfspace_intersection_3.h" line="27" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull3Functions_1ga7517c4cbbef41338397eda273af75eb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PlaneIterator</type>
          </param>
          <param>
            <type>class PolygonMesh</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::halfspace_intersection_with_constructions_3</definition>
        <argsstring>(PlaneIterator pbegin, PlaneIterator pend, PolygonMesh &amp;pm, boost::optional&lt; Kernel_traits&lt; std::iterator_traits&lt; PlaneIterator &gt;::value_type &gt;::Kernel::Point_3 &gt; &gt; origin=boost::none, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>halfspace_intersection_with_constructions_3</name>
        <param>
          <type>PlaneIterator</type>
          <declname>pbegin</declname>
        </param>
        <param>
          <type>PlaneIterator</type>
          <declname>pend</declname>
        </param>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pm</declname>
        </param>
        <param>
          <type>boost::optional&lt; Kernel_traits&lt; std::iterator_traits&lt; PlaneIterator &gt;::value_type &gt;::<ref refid="classKernel_1_1Point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel::Point_3</ref> &gt;</type>
        </param>
        <param>
          <type>origin</type>
          <defval>boost::none</defval>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
<para>computes the intersection of the halfspaces defined by the planes contained in the range [<computeroutput>begin</computeroutput>, <computeroutput>end</computeroutput>). </para>        </briefdescription>
        <detaileddescription>
<para>The result is stored in the polyhedron <computeroutput>pm</computeroutput>. If <computeroutput>origin</computeroutput> is given then it must be a point strictly inside the polyhedron. If an interior point is not given then it is computed using a linear program and thus is slower. This version constructs explicitly the dual points using the convex hull algorithm parametrized with the given traits class.</para><para><simplesect kind="attention"><para>Halfspaces are considered as lower halfspaces that is to say if the plane&apos;s equation is <formula id="0">$ a\, x +b\, y +c\, z + d = 0 $</formula> then the corresponding halfspace is defined by <formula id="1">$ a\, x +b\, y +c\, z + d \le 0 $</formula> .</para></simplesect>
<simplesect kind="pre"><para>The value type of <computeroutput>PlaneIterator</computeroutput> and the point type of <computeroutput>origin</computeroutput> must come from the same CGAL <ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref>. </para></simplesect>
<simplesect kind="pre"><para>if provided, <computeroutput>origin</computeroutput> is inside the intersection of halfspaces defined by the range <computeroutput>[begin, end)</computeroutput>. </para></simplesect>
<simplesect kind="pre"><para>The computed intersection must be a bounded convex polyhedron.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PlaneIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be an input iterator where the value type is a model of the concept <computeroutput><ref refid="classKernel_1_1Plane__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel::Plane_3</ref></computeroutput> and this plane type must come from the same kernel as the point type. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Traits</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of the concept <computeroutput><ref refid="classConvexHullTraits__3" kindref="compound">ConvexHullTraits_3</ref></computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull3Functions_1gade99e8e830ff439ae242b7ab04de06c8" kindref="member">halfspace_intersection_3()</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_3/dual/halfspace_intersection_with_constructions_3.h" line="25" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull3Functions_1gadc8318947c2133e56b2e56171b2ecd7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          </param>
          <param>
            <type>class PolygonMesh</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::convex_hull_3</definition>
        <argsstring>(InputIterator first, InputIterator last, PolygonMesh &amp;pm, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>convex_hull_3</name>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>last</declname>
        </param>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pm</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
<para>computes the convex hull of the set of points in the range [<computeroutput>first</computeroutput>, <computeroutput>last</computeroutput>). </para>        </briefdescription>
        <detaileddescription>
<para>The polyhedron <computeroutput>pm</computeroutput> is cleared, then the convex hull is stored in <computeroutput>pm</computeroutput>. Note that the convex hull will be triangulated, that is <computeroutput>pm</computeroutput> will contain only triangular facets. if the convex hull is a point or a segment, endpoints will be added in <computeroutput>pm</computeroutput> as isolated vertices.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>must be an input iterator with a value type equivalent to <computeroutput>Traits::Point_3</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Traits</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of the concept <computeroutput><ref refid="classConvexHullTraits__3" kindref="compound">ConvexHullTraits_3</ref></computeroutput>. For the purposes of checking the postcondition that the convex hull is valid, <computeroutput>Traits</computeroutput> must also be a model of the concept <computeroutput><ref refid="classIsStronglyConvexTraits__3" kindref="compound">IsStronglyConvexTraits_3</ref></computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
If the kernel <computeroutput>R</computeroutput> of the points determined by the value type of <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput> is a kernel with exact predicates but inexact constructions (in practice we check <computeroutput>R::Has_filtered_predicates_tag</computeroutput> is <computeroutput>Tag_true</computeroutput> and <computeroutput>R::FT</computeroutput> is a floating point type), then the default traits class of <computeroutput><ref refid="group__PkgConvexHull3Functions_1gadc8318947c2133e56b2e56171b2ecd7d" kindref="member">convex_hull_3()</ref></computeroutput> is <computeroutput><ref refid="classCGAL_1_1Convex__hull__traits__3" kindref="compound">Convex_hull_traits_3</ref>&lt;R&gt;</computeroutput>, and <computeroutput>R</computeroutput> otherwise.</para><para><simplesect kind="attention"><para>The user must include the header file of the <computeroutput>Polygon_mesh</computeroutput> type.</para></simplesect>
<bold>Implementation</bold><linebreak/>
</para><para>The algorithm implemented by these functions is the quickhull algorithm of Barnard <emphasis>et al.</emphasis> <ref refid="citelist_1CITEREF_bdh-qach-96" kindref="member">[1]</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/convex_hull_3.h" line="35" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull3Functions_1ga189d9e14a897cace42f0952b0a698455" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::convex_hull_3</definition>
        <argsstring>(InputIterator first, InputIterator last, Object &amp;ch_object, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>convex_hull_3</name>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>last</declname>
        </param>
        <param>
          <type>Object &amp;</type>
          <declname>ch_object</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
<para>computes the convex hull of the set of points in the range [<computeroutput>first</computeroutput>, <computeroutput>last</computeroutput>). </para>        </briefdescription>
        <detaileddescription>
<para>The result, which may be a point, a segment, a triangle, or a polyhedron, is stored in <computeroutput>ch_object</computeroutput>. In the case the result is a polyhedron, the convex hull will be triangulated, that is the polyhedron will contain only triangular facets.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>must be an input iterator with a value type equivalent to <computeroutput>Traits::Point_3</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Traits</parametername>
</parameternamelist>
<parameterdescription>
<para>must be model of the concept <computeroutput><ref refid="classConvexHullTraits__3" kindref="compound">ConvexHullTraits_3</ref></computeroutput>. For the purposes of checking the postcondition that the convex hull is valid, <computeroutput>Traits</computeroutput> must also be a model of the concept <computeroutput><ref refid="classIsStronglyConvexTraits__3" kindref="compound">IsStronglyConvexTraits_3</ref></computeroutput>. Furthermore, <computeroutput>Traits</computeroutput> must define a type <computeroutput>Polygon_mesh</computeroutput> that is a model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
If the kernel <computeroutput>R</computeroutput> of the points determined by the value type of <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput> is a kernel with exact predicates but inexact constructions (in practice we check <computeroutput>R::Has_filtered_predicates_tag</computeroutput> is <computeroutput>Tag_true</computeroutput> and <computeroutput>R::FT</computeroutput> is a floating point type), then the default traits class of <computeroutput><ref refid="group__PkgConvexHull3Functions_1gadc8318947c2133e56b2e56171b2ecd7d" kindref="member">convex_hull_3()</ref></computeroutput> is <computeroutput><ref refid="classCGAL_1_1Convex__hull__traits__3" kindref="compound">Convex_hull_traits_3</ref>&lt;R&gt;</computeroutput>, and <computeroutput>R</computeroutput> otherwise.</para><para><simplesect kind="attention"><para>The user must include the header file of the <computeroutput>Polygon_mesh</computeroutput> type. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/convex_hull_3.h" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull3Functions_1ga3d3caeb206adf06814821c0a066f6a72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputRange</type>
          </param>
          <param>
            <type>class <ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::extreme_points_3</definition>
        <argsstring>(InputRange range, OutputIterator out, const Traits &amp;traits)</argsstring>
        <name>extreme_points_3</name>
        <param>
          <type>InputRange</type>
          <declname>range</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>out</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>copies in <computeroutput>out</computeroutput> the points on the convex hull of the points in <computeroutput>range</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>InputRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of <computeroutput>Traits::Point_3</computeroutput>, model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput>. Its iterator type is <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>must be an output iterator where points of type <computeroutput>Traits::Point_3</computeroutput> can be put. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Traits</parametername>
</parameternamelist>
<parameterdescription>
<para>must be model of the concept <computeroutput><ref refid="classConvexHullTraits__3" kindref="compound">ConvexHullTraits_3</ref></computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
If the kernel <computeroutput>R</computeroutput> of the points from <computeroutput>InputRange</computeroutput> is a kernel with exact predicates but inexact constructions (in practice we check <computeroutput>R::Has_filtered_predicates_tag</computeroutput> is <computeroutput>Tag_true</computeroutput> and <computeroutput>R::FT</computeroutput> is a floating point type), then the default traits class used is <computeroutput><ref refid="classCGAL_1_1Convex__hull__traits__3" kindref="compound">Convex_hull_traits_3</ref>&lt;R&gt;</computeroutput>, and <computeroutput>R</computeroutput> otherwise.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>the range of input points. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>an output iterator where the extreme points will be put. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>an instance of <computeroutput>Traits</computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Extreme__points__traits__adapter__3" kindref="compound">CGAL::Extreme_points_traits_adapter_3</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/convex_hull_3.h" line="90" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull3Functions_1ga2750f7f197588ed643679835c748c671" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Triangulation</type>
          </param>
          <param>
            <type>class PolygonMesh</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::convex_hull_3_to_face_graph</definition>
        <argsstring>(const Triangulation &amp;T, PolygonMesh &amp;pm)</argsstring>
        <name>convex_hull_3_to_face_graph</name>
        <param>
          <type>const Triangulation &amp;</type>
          <declname>T</declname>
        </param>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pm</declname>
        </param>
        <briefdescription>
<para>fills a polyhedron with the convex hull of a set of 3D points contained in a 3D triangulation of CGAL. </para>        </briefdescription>
        <detaileddescription>
<para>The polyhedron <computeroutput>pm</computeroutput> is cleared and the convex hull of the set of 3D points is stored in <computeroutput>pm</computeroutput>.</para><para><simplesect kind="pre"><para><computeroutput>T.dimension()</computeroutput>==3.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Triangulation</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a CGAL 3D triangulation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of the concept <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull3Functions_1gadc8318947c2133e56b2e56171b2ecd7d" kindref="member">convex_hull_3()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgTriangulation3_1gaf59573ae46967c944a7a7b0b5790e4e6" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_3.tag">link_to_face_graph()</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/convex_hull_3_to_face_graph.h" line="20" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull3Functions_1gaa87070e950e63e3a7395a2fb14c7ea7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Triangulation</type>
          </param>
          <param>
            <type>class Polyhedron</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::convex_hull_3_to_polyhedron_3</definition>
        <argsstring>(const Triangulation &amp;T, Polyhedron &amp;P)</argsstring>
        <name>convex_hull_3_to_polyhedron_3</name>
        <param>
          <type>const Triangulation &amp;</type>
          <declname>T</declname>
        </param>
        <param>
          <type>Polyhedron &amp;</type>
          <declname>P</declname>
        </param>
        <briefdescription>
<para>fills a polyhedron with the convex hull of a set of 3D points contained in a 3D triangulation of CGAL. </para>        </briefdescription>
        <detaileddescription>
<para>The polyhedron <computeroutput>P</computeroutput> is cleared and the convex hull of the set of 3D points is stored in <computeroutput>P</computeroutput>.</para><para><xrefsect id="deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription><para>since CGAL 4.10. Use <computeroutput><ref refid="group__PkgConvexHull3Functions_1ga2750f7f197588ed643679835c748c671" kindref="member">convex_hull_3_to_face_graph()</ref></computeroutput> instead.</para></xrefdescription></xrefsect></para><para><simplesect kind="attention"><para>This function does not compute the plane equations of the faces of <computeroutput>P</computeroutput>.</para></simplesect>
<simplesect kind="attention"><para>This function works only for <computeroutput><ref refid="classCGAL_1_1Polyhedron__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polyhedron.tag">CGAL::Polyhedron_3</ref>&lt;Traits&gt;</computeroutput>, and users who want to generate a <computeroutput><ref refid="classCGAL_1_1Surface__mesh" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Surface_mesh.tag">Surface_mesh</ref></computeroutput> or any other model of a <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput> may use <computeroutput><ref refid="group__PkgConvexHull3Functions_1ga2750f7f197588ed643679835c748c671" kindref="member">convex_hull_3_to_face_graph()</ref></computeroutput> instead.</para></simplesect>
<simplesect kind="pre"><para><computeroutput>T.dimension()</computeroutput>==3.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Triangulation</parametername>
</parameternamelist>
<parameterdescription>
<para>is a CGAL 3D triangulation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Polyhedron</parametername>
</parameternamelist>
<parameterdescription>
<para>is an instantiation of <computeroutput><ref refid="classCGAL_1_1Polyhedron__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polyhedron.tag">CGAL::Polyhedron_3</ref>&lt;Traits&gt;</computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull3Functions_1gadc8318947c2133e56b2e56171b2ecd7d" kindref="member">convex_hull_3()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgTriangulation3_1gaf59573ae46967c944a7a7b0b5790e4e6" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_3.tag">link_to_face_graph()</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/convex_hull_3_to_polyhedron_3.h" line="27" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull3Functions_1gab8d15e7467c1c81f85df8e34efa6cda0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PointPropertyMap</type>
          </param>
          <param>
            <type>class Base_traits</type>
          </param>
        </templateparamlist>
        <type>Extreme_points_traits_adapter_3&lt; PointPropertyMap, Base_traits &gt;</type>
        <definition>Extreme_points_traits_adapter_3&lt;PointPropertyMap, Base_traits&gt; CGAL::make_extreme_points_traits_adapter</definition>
        <argsstring>(const PointPropertyMap &amp;pmap, Base_traits traits)</argsstring>
        <name>make_extreme_points_traits_adapter</name>
        <param>
          <type>const PointPropertyMap &amp;</type>
          <declname>pmap</declname>
        </param>
        <param>
          <type>Base_traits</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput><ref refid="classCGAL_1_1Extreme__points__traits__adapter__3" kindref="compound">Extreme_points_traits_adapter_3</ref>&lt;PointPropertyMap, Base_traits&gt;(pmap, traits)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Extreme_points_traits_adapter_3.h" line="53" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The function <computeroutput><ref refid="group__PkgConvexHull3Functions_1gadc8318947c2133e56b2e56171b2ecd7d" kindref="member">convex_hull_3()</ref></computeroutput> computes the convex hull of a given set of three-dimensional points. </para>    </briefdescription>
    <detaileddescription>
<para>Two versions of this function are available. The first can be used when it is known that the result will be a polyhedron and the second when a degenerate hull may also be possible. </para>    </detaileddescription>
  </compounddef>
</doxygen>
