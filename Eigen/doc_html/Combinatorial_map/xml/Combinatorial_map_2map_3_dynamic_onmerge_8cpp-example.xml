<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="Combinatorial_map_2map_3_dynamic_onmerge_8cpp-example" kind="example">
    <compoundname>Combinatorial_map/map_3_dynamic_onmerge.cpp</compoundname>
    <detaileddescription>
<para><programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Combinatorial_map.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Cell_attribute.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>My<sp/>item<sp/>class:<sp/>no<sp/>functor<sp/>is<sp/>associated<sp/>with<sp/>Face_attribute.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Myitem</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CMap&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Dart_wrapper</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Cell__attribute" kindref="compound">CGAL::Cell_attribute&lt;CMap, double&gt;</ref><sp/>Face_attribute;<sp/></highlight><highlight class="comment">//<sp/>A<sp/>weight</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1cpp11_1_1tuple" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::cpp11::tuple&lt;void,void,Face_attribute&gt;</ref><sp/>Attributes;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Definition<sp/>of<sp/>my<sp/>combinatorial<sp/>map.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Combinatorial__map" kindref="compound">CGAL::Combinatorial_map&lt;3,Myitem&gt;</ref><sp/>CMap_3;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CMap_3::Dart_handle<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dart_handle;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CMap_3::Attribute_type&lt;2&gt;::type<sp/><sp/><sp/>Face_attribute;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Functor<sp/>called<sp/>when<sp/>two<sp/>faces<sp/>are<sp/>merged.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Merge_functor</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>operator()<sp/>automatically<sp/>called<sp/>before<sp/>a<sp/>merge.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(Face_attribute&amp;<sp/>ca1,<sp/>Face_attribute&amp;<sp/>ca2)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ca1.info()=ca1.info()+ca2.info();<sp/></highlight><highlight class="comment">//<sp/>Update<sp/>can<sp/>be<sp/>done<sp/>incrementally.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;After<sp/>on<sp/>merge<sp/>faces:<sp/>info<sp/>of<sp/>face1=&quot;</highlight><highlight class="normal">&lt;&lt;ca1.info()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;,<sp/>info<sp/>of<sp/>face2=&quot;</highlight><highlight class="normal">&lt;&lt;ca2.info()&lt;&lt;std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Functor<sp/>called<sp/>when<sp/>one<sp/>face<sp/>is<sp/>split<sp/>in<sp/>two.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Split_functor</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Split_functor(CMap_3&amp;<sp/>amap)<sp/>:<sp/>mmap(amap)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>operator()<sp/>automatically<sp/>called<sp/>after<sp/>a<sp/>split.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(Face_attribute&amp;<sp/>ca1,<sp/>Face_attribute&amp;<sp/>ca2)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>need<sp/>to<sp/>reinitalize<sp/>the<sp/>weight<sp/>of<sp/>the<sp/>two<sp/>faces</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CMap_3::size_type<sp/>nb1=mmap.darts_of_cell&lt;2&gt;(ca1.dart()).size();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CMap_3::size_type<sp/>nb2=mmap.darts_of_cell&lt;2&gt;(ca2.dart()).size();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>mmap.info&lt;2&gt;(ca1.dart())*=(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(nb1)/(nb1+nb2));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>mmap.info&lt;2&gt;(ca2.dart())*=(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(nb2)/(nb1+nb2));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;After<sp/>on<sp/>split<sp/>faces:<sp/>info<sp/>of<sp/>face1=&quot;</highlight><highlight class="normal">&lt;&lt;ca1.info()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;,<sp/>info<sp/>of<sp/>face2=&quot;</highlight><highlight class="normal">&lt;&lt;ca2.info()&lt;&lt;std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>CMap_3&amp;<sp/>mmap;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Function<sp/>allowing<sp/>to<sp/>display<sp/>all<sp/>the<sp/>2-attributes,<sp/>and<sp/>the<sp/>characteristics</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>a<sp/>given<sp/>combinatorial<sp/>map.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>display_map_and_2attributes(CMap_3&amp;<sp/>cm)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(CMap_3::Attribute_range&lt;2&gt;::type::iterator</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it=cm.attributes&lt;2&gt;().begin(),<sp/>itend=cm.attributes&lt;2&gt;().end();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it!=itend;<sp/>++it)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{<sp/>std::cout&lt;&lt;cm.info_of_attribute&lt;2&gt;(it)&lt;&lt;</highlight><highlight class="stringliteral">&quot;;<sp/>&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout&lt;&lt;std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cm.display_characteristics(std::cout);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;,<sp/>valid=&quot;</highlight><highlight class="normal">&lt;&lt;cm.is_valid()&lt;&lt;std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>CMap_3<sp/>cm;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>0)<sp/>Create<sp/>2<sp/>hexahedra.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Dart_handle<sp/>dh1<sp/>=<sp/>cm.make_combinatorial_hexahedron();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Dart_handle<sp/>dh2<sp/>=<sp/>cm.make_combinatorial_hexahedron();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>1)<sp/>Create<sp/>and<sp/>initialize<sp/>2-attributes.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(CMap_3::One_dart_per_cell_range&lt;2&gt;::iterator</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it=cm.one_dart_per_cell&lt;2&gt;().begin(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itend=cm.one_dart_per_cell&lt;2&gt;().end();<sp/>it!=itend;<sp/>++it)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{<sp/>cm.set_attribute&lt;2&gt;(it,<sp/>cm.create_attribute&lt;2&gt;(1));<sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>2)<sp/>Set<sp/>the<sp/>onsplit<sp/>and<sp/>onmerge<sp/>functors.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cm.onsplit_functor&lt;2&gt;()=Split_functor(cm);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cm.onmerge_functor&lt;2&gt;()=Merge_functor();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>3)<sp/>3-Sew<sp/>the<sp/>two<sp/>hexahedra<sp/>along<sp/>one<sp/>face.<sp/>This<sp/>calls<sp/>1<sp/>onmerge.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cm.sew&lt;3&gt;(dh1,<sp/>dh2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>4)<sp/>Display<sp/>all<sp/>the<sp/>values<sp/>of<sp/>2-attributes.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>display_map_and_2attributes(cm);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>5)<sp/>Insert<sp/>a<sp/>vertex<sp/>in<sp/>the<sp/>face<sp/>between<sp/>the<sp/>two<sp/>hexahedra.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>This<sp/>calls<sp/>3<sp/>onsplit.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Dart_handle<sp/>resdart=cm.insert_cell_0_in_cell_2(dh2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>6)<sp/>Display<sp/>all<sp/>the<sp/>values<sp/>of<sp/>2-attributes.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>display_map_and_2attributes(cm);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>7)<sp/>&quot;Remove&quot;<sp/>the<sp/>dynamic<sp/>onmerge<sp/>functor.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cm.onmerge_functor&lt;2&gt;()=boost::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(Face_attribute&amp;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Face_attribute&amp;)&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>8)<sp/>Remove<sp/>one<sp/>edge:<sp/>this<sp/>merges<sp/>two<sp/>faces,<sp/>however<sp/>no<sp/>dynamic</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>functor<sp/>is<sp/>called<sp/>(because<sp/>it<sp/>was<sp/>removed).</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cm.remove_cell&lt;1&gt;(resdart);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>9)<sp/>Display<sp/>all<sp/>the<sp/>values<sp/>of<sp/>2-attributes.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>display_map_and_2attributes(cm);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_SUCCESS;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>    </detaileddescription>
  </compounddef>
</doxygen>
