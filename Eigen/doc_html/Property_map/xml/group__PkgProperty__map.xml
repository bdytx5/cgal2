<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__PkgProperty__map" kind="group">
    <compoundname>PkgProperty_map</compoundname>
    <title>CGAL and Boost Property Maps Reference</title>
    <innerclass refid="structCGAL_1_1Dereference__property__map" prot="public">CGAL::Dereference_property_map</innerclass>
    <innerclass refid="structCGAL_1_1Identity__property__map" prot="public">CGAL::Identity_property_map</innerclass>
    <innerclass refid="structCGAL_1_1First__of__pair__property__map" prot="public">CGAL::First_of_pair_property_map</innerclass>
    <innerclass refid="structCGAL_1_1Second__of__pair__property__map" prot="public">CGAL::Second_of_pair_property_map</innerclass>
    <innerclass refid="structCGAL_1_1Nth__of__tuple__property__map" prot="public">CGAL::Nth_of_tuple_property_map</innerclass>
    <innerclass refid="structCGAL_1_1Property__map__to__unary__function" prot="public">CGAL::Property_map_to_unary_function</innerclass>
    <innerclass refid="structCGAL_1_1Pointer__property__map" prot="public">CGAL::Pointer_property_map</innerclass>
    <innerclass refid="structCGAL_1_1Constant__property__map" prot="public">CGAL::Constant_property_map</innerclass>
    <innerclass refid="structCGAL_1_1Boolean__property__map" prot="public">CGAL::Boolean_property_map</innerclass>
    <innerclass refid="structCGAL_1_1Cartesian__converter__property__map" prot="public">CGAL::Cartesian_converter_property_map</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgProperty__map_1ga44ae71cce5987f3970443868a129752a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>Pointer_property_map&lt; T &gt;::type</type>
        <definition>Pointer_property_map&lt;T&gt;::type CGAL::make_property_map</definition>
        <argsstring>(T *pointer)</argsstring>
        <name>make_property_map</name>
        <param>
          <type>T *</type>
          <declname>pointer</declname>
        </param>
        <briefdescription>
<para>Starting from boost 1.55, the use of raw pointers as property maps has been deprecated. </para>        </briefdescription>
        <detaileddescription>
<para>This function is a shortcut to the recommanded replacement: <computeroutput>boost::make_iterator_property_map(&lt;pointer&gt;, boost::typed_identity_property_map&lt;std::size_t&gt;())</computeroutput> Note that the property map is a mutable <computeroutput><ref refid="classLvaluePropertyMap" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">LvaluePropertyMap</ref></computeroutput> with <computeroutput>std::size_t</computeroutput> as key. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/property_map.h" line="416" column="1" bodyfile="CGAL/property_map.h" bodystart="416" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgProperty__map_1ga1a366d0e1f25b9c5769e9fa688b9e16a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>Pointer_property_map&lt; T &gt;::type</type>
        <definition>Pointer_property_map&lt;T&gt;::type CGAL::make_property_map</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;v)</argsstring>
        <name>make_property_map</name>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>equivalent to <computeroutput>make_property_map(&amp;v[0])</computeroutput> Note that <computeroutput>v</computeroutput> must not be modified while using the property map created </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/property_map.h" line="427" column="1" bodyfile="CGAL/property_map.h" bodystart="427" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgProperty__map_1ga91d0a73c53924a3351ff393a7213036d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>Pointer_property_map&lt; T &gt;::const_type</type>
        <definition>Pointer_property_map&lt;T&gt;::const_type CGAL::make_property_map</definition>
        <argsstring>(const T *pointer)</argsstring>
        <name>make_property_map</name>
        <param>
          <type>const T *</type>
          <declname>pointer</declname>
        </param>
        <briefdescription>
<para>Non-mutable version. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/property_map.h" line="440" column="1" bodyfile="CGAL/property_map.h" bodystart="440" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgProperty__map_1ga2fe06f0f7da56429f344f824aaa6a1f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>Pointer_property_map&lt; T &gt;::const_type</type>
        <definition>Pointer_property_map&lt;T&gt;::const_type CGAL::make_property_map</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;v)</argsstring>
        <name>make_property_map</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>equivalent to <computeroutput>make_property_map(&amp;v[0])</computeroutput> Note that <computeroutput>v</computeroutput> must not be modified while using the property map created </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/property_map.h" line="451" column="1" bodyfile="CGAL/property_map.h" bodystart="451" bodyend="454"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgProperty__map_1ga43fe2f5f178cc4074fda355a1bfaa148" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Set</type>
          </param>
        </templateparamlist>
        <type>Boolean_property_map&lt; Set &gt;</type>
        <definition>Boolean_property_map&lt;Set&gt; CGAL::make_boolean_property_map</definition>
        <argsstring>(Set &amp;set_)</argsstring>
        <name>make_boolean_property_map</name>
        <param>
          <type>Set &amp;</type>
          <declname>set_</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput><ref refid="structCGAL_1_1Boolean__property__map" kindref="compound">Boolean_property_map</ref>&lt;Set&gt;(set_)</computeroutput> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/property_map.h" line="524" column="1" bodyfile="CGAL/property_map.h" bodystart="524" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgProperty__map_1ga50e643e61c68920ef47b26dbf7c8b05a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GeomObject</type>
          </param>
          <param>
            <type>class Vpm</type>
          </param>
        </templateparamlist>
        <type>Cartesian_converter_property_map&lt; GeomObject, Vpm &gt;</type>
        <definition>Cartesian_converter_property_map&lt;GeomObject, Vpm&gt; CGAL::make_cartesian_converter_property_map</definition>
        <argsstring>(Vpm vpm)</argsstring>
        <name>make_cartesian_converter_property_map</name>
        <param>
          <type>Vpm</type>
          <declname>vpm</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput><ref refid="structCGAL_1_1Cartesian__converter__property__map" kindref="compound">Cartesian_converter_property_map</ref>&lt;GeomObject, Vpm&gt;(vpm)</computeroutput> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/property_map.h" line="568" column="1" bodyfile="CGAL/property_map.h" bodystart="568" bodyend="571"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para> <image type="html" name="property_map.png"></image>
   Andreas Fabri and Laurent Saboret This package provides a framework for interfacing CGAL data structures with algorithms expecting Boost Property Maps. <linebreak/>
   <bold>Introduced in:</bold> CGAL 3.5<linebreak/>
 <bold>BibTeX:</bold> <ulink url="../Manual/how_to_cite_cgal.html#cgal:fs-cbpm-18b">cgal:fs-cbpm-18b</ulink><linebreak/>
 <bold>License:</bold> <ref refid="preliminaries_1licensesGPL" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">LGPL</ref> <linebreak/>
  </para>    </detaileddescription>
  </compounddef>
</doxygen>
