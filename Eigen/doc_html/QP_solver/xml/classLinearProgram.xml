<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classLinearProgram" kind="class" language="C++" prot="public">
    <compoundname>LinearProgram</compoundname>
    <includes local="no">Concepts/LinearProgram.h</includes>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classLinearProgram_1accbb47af63ef804799e2170948e0d4d6" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type LinearProgram::A_iterator</definition>
        <argsstring></argsstring>
        <name>A_iterator</name>
        <briefdescription>
<para>A random access iterator type to go columnwise over the constraint matrix <formula id="6">$ A$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>The value type is a random access iterator type for an individual column that goes over the entries in that column. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/LinearProgram.h" line="74" column="1" bodyfile="Concepts/LinearProgram.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classLinearProgram_1a8365e61478379e2f131553575c48922c" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type LinearProgram::B_iterator</definition>
        <argsstring></argsstring>
        <name>B_iterator</name>
        <briefdescription>
<para>A random access iterator type to go over the entries of the right-hand side <formula id="8">$ \qpb$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/LinearProgram.h" line="80" column="1" bodyfile="Concepts/LinearProgram.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classLinearProgram_1a618eb6b27d640c7377e5fd3650732aa1" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type LinearProgram::R_iterator</definition>
        <argsstring></argsstring>
        <name>R_iterator</name>
        <briefdescription>
<para>A random access iterator type to go over the relations <formula id="10">$ \qprel$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>The value type of <computeroutput>R_iterator</computeroutput> is <computeroutput><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Comparison_result</ref></computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/LinearProgram.h" line="87" column="1" bodyfile="Concepts/LinearProgram.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classLinearProgram_1a42210d81ad17b999e0f28af0d930adb0" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type LinearProgram::FL_iterator</definition>
        <argsstring></argsstring>
        <name>FL_iterator</name>
        <briefdescription>
<para>A random access iterator type to go over the existence (finiteness) of the lower bounds <formula id="90">$ l_j, j=0,\ldots,n-1$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>The value type of <computeroutput>FL_iterator</computeroutput> is <computeroutput>bool</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/LinearProgram.h" line="94" column="1" bodyfile="Concepts/LinearProgram.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classLinearProgram_1ab48e8ad2cc4b62572410d7b270ce2787" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type LinearProgram::L_iterator</definition>
        <argsstring></argsstring>
        <name>L_iterator</name>
        <briefdescription>
<para>A random acess iterator type to go over the entries of the lower bound vector <formula id="12">$ \qpl$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/LinearProgram.h" line="100" column="1" bodyfile="Concepts/LinearProgram.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classLinearProgram_1a9e3dbd3d7486ef304d5db8b98b7e3158" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type LinearProgram::UL_iterator</definition>
        <argsstring></argsstring>
        <name>UL_iterator</name>
        <briefdescription>
<para>A random access iterator type to go over the existence (finiteness) of the upper bounds <formula id="91">$ u_j, j=0,\ldots,n-1$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>The value type of <computeroutput>UL_iterator</computeroutput> is <computeroutput>bool</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/LinearProgram.h" line="107" column="1" bodyfile="Concepts/LinearProgram.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classLinearProgram_1ad54e0bd07a96d7e59839008606367fa5" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type LinearProgram::U_iterator</definition>
        <argsstring></argsstring>
        <name>U_iterator</name>
        <briefdescription>
<para>A random acess iterator type to go over the entries of the upper bound vector <formula id="16">$ \qpu$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/LinearProgram.h" line="113" column="1" bodyfile="Concepts/LinearProgram.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classLinearProgram_1af0383ac6acf37f6cc4a6e35b7cbb898d" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type LinearProgram::C_iterator</definition>
        <argsstring></argsstring>
        <name>C_iterator</name>
        <briefdescription>
<para>A random access iterator type to go over the entries of the linear objective function vector <formula id="92">$ c$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/LinearProgram.h" line="119" column="1" bodyfile="Concepts/LinearProgram.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <memberdef kind="function" id="classLinearProgram_1a67b243da76df9966d32c017a5820cfae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int LinearProgram::get_n</definition>
        <argsstring>() const</argsstring>
        <name>get_n</name>
        <briefdescription>
<para>returns the number <formula id="4">$ n$</formula> of variables (number of columns of <formula id="6">$ A$</formula>) in <computeroutput>lp</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/LinearProgram.h" line="130" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classLinearProgram_1aeebc1303109e63be55683345d152480b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int LinearProgram::get_m</definition>
        <argsstring>() const</argsstring>
        <name>get_m</name>
        <briefdescription>
<para>returns the number <formula id="9">$ m$</formula> of constraints (number of rows of <formula id="6">$ A$</formula>) in <computeroutput>lp</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/LinearProgram.h" line="136" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classLinearProgram_1abade0bc23b15ba755fc0da325cab124c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classLinearProgram_1accbb47af63ef804799e2170948e0d4d6" kindref="member">A_iterator</ref></type>
        <definition>A_iterator LinearProgram::get_a</definition>
        <argsstring>() const</argsstring>
        <name>get_a</name>
        <briefdescription>
<para>returns an iterator over the columns of <formula id="6">$ A$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>The corresponding past-the-end iterator is <computeroutput><ref refid="classLinearProgram_1abade0bc23b15ba755fc0da325cab124c" kindref="member">get_a()</ref>+get_n()</computeroutput>. For <formula id="93">$ j=0,\ldots,n-1$</formula>, <computeroutput>*(<ref refid="classLinearProgram_1abade0bc23b15ba755fc0da325cab124c" kindref="member">get_a()</ref>+j)</computeroutput> is a random access iterator for column <formula id="15">$ j$</formula>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/LinearProgram.h" line="144" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classLinearProgram_1a618d079b86b26b8c1418cec757635c4a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classLinearProgram_1a8365e61478379e2f131553575c48922c" kindref="member">B_iterator</ref></type>
        <definition>B_iterator LinearProgram::get_b</definition>
        <argsstring>() const</argsstring>
        <name>get_b</name>
        <briefdescription>
<para>returns an iterator over the entries of <formula id="8">$ \qpb$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>The corresponding past-the-end iterator is <computeroutput><ref refid="classLinearProgram_1a618d079b86b26b8c1418cec757635c4a" kindref="member">get_b()</ref>+get_m()</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/LinearProgram.h" line="151" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classLinearProgram_1a35de8bb667081ae1d843c7ef8e6f7f7f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classLinearProgram_1a618eb6b27d640c7377e5fd3650732aa1" kindref="member">R_iterator</ref></type>
        <definition>R_iterator LinearProgram::get_r</definition>
        <argsstring>() const</argsstring>
        <name>get_r</name>
        <briefdescription>
<para>returns an iterator over the entries of <formula id="10">$ \qprel$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>The corresponding past-the-end iterator is <computeroutput><ref refid="classLinearProgram_1a35de8bb667081ae1d843c7ef8e6f7f7f" kindref="member">get_r()</ref>+get_m()</computeroutput>. The value <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab925c6b1ff8cd0bdea7f31fe18d3c38b" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::SMALLER</ref></computeroutput> stands for <formula id="53">$ \leq$</formula>, <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469a5f224784e56ca565837a5d6d268fe078" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::EQUAL</ref></computeroutput> stands for <formula id="94">$ =$</formula>, and <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab25bdbfd193e9ea35187a4f46e7d6fcd" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::LARGER</ref></computeroutput> stands for <formula id="54">$ \geq$</formula>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/LinearProgram.h" line="161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classLinearProgram_1acfb62b6c3dabcd94787b4a5dcaea98c8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classLinearProgram_1a42210d81ad17b999e0f28af0d930adb0" kindref="member">FL_iterator</ref></type>
        <definition>FL_iterator LinearProgram::get_fl</definition>
        <argsstring>() const</argsstring>
        <name>get_fl</name>
        <briefdescription>
<para>returns an iterator over the existence of the lower bounds <formula id="90">$ l_j, j=0,\ldots,n-1$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>The corresponding past-the-end iterator is <computeroutput><ref refid="classLinearProgram_1acfb62b6c3dabcd94787b4a5dcaea98c8" kindref="member">get_fl()</ref>+get_n()</computeroutput>. If <computeroutput>*(<ref refid="classLinearProgram_1acfb62b6c3dabcd94787b4a5dcaea98c8" kindref="member">get_fl()</ref>+j)</computeroutput> has value <formula id="95">$ true$</formula>, the variable <formula id="96">$ x_j$</formula> has a lower bound given by <computeroutput>*(<ref refid="classLinearProgram_1a613210d4257076eb1db9d3737327ced7" kindref="member">get_l()</ref>+j)</computeroutput>, otherwise it has no lower bound. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/LinearProgram.h" line="170" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classLinearProgram_1a613210d4257076eb1db9d3737327ced7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classLinearProgram_1ab48e8ad2cc4b62572410d7b270ce2787" kindref="member">L_iterator</ref></type>
        <definition>L_iterator LinearProgram::get_l</definition>
        <argsstring>() const</argsstring>
        <name>get_l</name>
        <briefdescription>
<para>returns an iterator over the entries of <formula id="12">$ \qpl$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>The corresponding past-the-end iterator is <computeroutput><ref refid="classLinearProgram_1a613210d4257076eb1db9d3737327ced7" kindref="member">get_l()</ref>+get_n()</computeroutput>. If <computeroutput>*(<ref refid="classLinearProgram_1acfb62b6c3dabcd94787b4a5dcaea98c8" kindref="member">get_fl()</ref>+j)</computeroutput> has value <formula id="97">$ false$</formula>, the value <computeroutput>*(<ref refid="classLinearProgram_1a613210d4257076eb1db9d3737327ced7" kindref="member">get_l()</ref>+j)</computeroutput> is not accessed. <simplesect kind="pre"><para>if both <computeroutput>*(<ref refid="classLinearProgram_1acfb62b6c3dabcd94787b4a5dcaea98c8" kindref="member">get_fl()</ref>+j)</computeroutput> and <computeroutput>*(<ref refid="classLinearProgram_1a1e7d195ce55269b5f279e608b10942db" kindref="member">get_fu()</ref>+j)</computeroutput> have value <formula id="95">$ true$</formula>, then <computeroutput>*(<ref refid="classLinearProgram_1a613210d4257076eb1db9d3737327ced7" kindref="member">get_l()</ref>+j) &lt;= *(<ref refid="classLinearProgram_1a91725045a68c60d49dfafc7acc48d5e8" kindref="member">get_u()</ref>+j)</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/LinearProgram.h" line="179" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classLinearProgram_1a1e7d195ce55269b5f279e608b10942db" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>FU_iterator</type>
        <definition>FU_iterator LinearProgram::get_fu</definition>
        <argsstring>() const</argsstring>
        <name>get_fu</name>
        <briefdescription>
<para>returns an iterator over the existence of the upper bounds <formula id="91">$ u_j, j=0,\ldots,n-1$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>The corresponding past-the-end iterator is <computeroutput><ref refid="classLinearProgram_1a1e7d195ce55269b5f279e608b10942db" kindref="member">get_fu()</ref>+get_n()</computeroutput>. If <computeroutput>*(<ref refid="classLinearProgram_1a1e7d195ce55269b5f279e608b10942db" kindref="member">get_fu()</ref>+j)</computeroutput> has value <formula id="95">$ true$</formula>, the variable <formula id="96">$ x_j$</formula> has an upper bound given by <computeroutput>*(<ref refid="classLinearProgram_1a91725045a68c60d49dfafc7acc48d5e8" kindref="member">get_u()</ref>+j)</computeroutput>, otherwise it has no upper bound. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/LinearProgram.h" line="188" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classLinearProgram_1a91725045a68c60d49dfafc7acc48d5e8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classLinearProgram_1ab48e8ad2cc4b62572410d7b270ce2787" kindref="member">L_iterator</ref></type>
        <definition>L_iterator LinearProgram::get_u</definition>
        <argsstring>() const</argsstring>
        <name>get_u</name>
        <briefdescription>
<para>returns an iterator over the entries of <formula id="16">$ \qpu$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>The corresponding past-the-end iterator is <computeroutput><ref refid="classLinearProgram_1a91725045a68c60d49dfafc7acc48d5e8" kindref="member">get_u()</ref>+get_n()</computeroutput>. If <computeroutput>*(<ref refid="classLinearProgram_1a1e7d195ce55269b5f279e608b10942db" kindref="member">get_fu()</ref>+j)</computeroutput> has value <formula id="97">$ false$</formula>, the value <computeroutput>*(<ref refid="classLinearProgram_1a91725045a68c60d49dfafc7acc48d5e8" kindref="member">get_u()</ref>+j)</computeroutput> is not accessed. <simplesect kind="pre"><para>if both <computeroutput>*(<ref refid="classLinearProgram_1acfb62b6c3dabcd94787b4a5dcaea98c8" kindref="member">get_fl()</ref>+j)</computeroutput> and <computeroutput>*(<ref refid="classLinearProgram_1a1e7d195ce55269b5f279e608b10942db" kindref="member">get_fu()</ref>+j)</computeroutput> have value <formula id="95">$ true$</formula>, then <computeroutput>*(<ref refid="classLinearProgram_1a613210d4257076eb1db9d3737327ced7" kindref="member">get_l()</ref>+j) &lt;= *(<ref refid="classLinearProgram_1a91725045a68c60d49dfafc7acc48d5e8" kindref="member">get_u()</ref>+j)</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/LinearProgram.h" line="197" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classLinearProgram_1a319c17a3540f43ed6feaae58c7020527" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classLinearProgram_1af0383ac6acf37f6cc4a6e35b7cbb898d" kindref="member">C_iterator</ref></type>
        <definition>C_iterator LinearProgram::get_c</definition>
        <argsstring>() const</argsstring>
        <name>get_c</name>
        <briefdescription>
<para>returns an iterator over the entries of <formula id="18">$ \qpc$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>The corresponding past-the-end iterator is <computeroutput><ref refid="classLinearProgram_1a319c17a3540f43ed6feaae58c7020527" kindref="member">get_c()</ref>+get_n()</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/LinearProgram.h" line="204" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classLinearProgram_1a1ad1770a07a86c918a7b3415462a355a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::iterator_traits&lt; <ref refid="classLinearProgram_1af0383ac6acf37f6cc4a6e35b7cbb898d" kindref="member">C_iterator</ref> &gt;::value_type</type>
        <definition>std::iterator_traits&lt;C_iterator&gt;::value_type LinearProgram::get_c0</definition>
        <argsstring>() const</argsstring>
        <name>get_c0</name>
        <briefdescription>
<para>returns the constant term <formula id="19">$ c_0$</formula> of the objective function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/LinearProgram.h" line="209" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A model of <computeroutput><ref refid="classLinearProgram" kindref="compound">LinearProgram</ref></computeroutput> describes a linear program of the form. </para>    </briefdescription>
    <detaileddescription>
<para> <formula id="2">$ \newcommand{\qprel}{\gtreqless} \newcommand{\qpx}{\mathbf{x}} \newcommand{\qpl}{\mathbf{l}} \newcommand{\qpu}{\mathbf{u}} \newcommand{\qpc}{\mathbf{c}} \newcommand{\qpb}{\mathbf{b}} \newcommand{\qpy}{\mathbf{y}} \newcommand{\qpw}{\mathbf{w}} \newcommand{\qplambda}{\mathbf{\lambda}} $</formula></para><para><formula id="3">\begin{eqnarray*} \mbox{(QP)}&amp; \mbox{minimize} &amp; \qpc^{T}\qpx+c_0 \\ &amp;\mbox{subject to} &amp; A\qpx\qprel \qpb, \\ &amp; &amp; \qpl \leq \qpx \leq \qpu \end{eqnarray*}</formula></para><para>in <formula id="4">$ n$</formula> real variables <formula id="5">$ \qpx=(x_0,\ldots,x_{n-1})$</formula>. Here, <itemizedlist>
<listitem>
<para><formula id="6">$ A$</formula> is an <formula id="7">$ m\times n$</formula> matrix (the constraint matrix), </para></listitem>
<listitem>
<para><formula id="8">$ \qpb$</formula> is an <formula id="9">$ m$</formula>-dimensional vector (the right-hand side), </para></listitem>
<listitem>
<para><formula id="10">$ \qprel$</formula> is an <formula id="9">$ m$</formula>-dimensional vector of relations from <formula id="11">$ \{\leq, =, \geq\}$</formula>,</para><para></para></listitem>
<listitem>
<para><formula id="12">$ \qpl$</formula> is an <formula id="4">$ n$</formula>-dimensional vector of lower bounds for <formula id="13">$ \qpx$</formula>, where <formula id="14">$ l_j\in\mathbb{R}\cup\{-\infty\}$</formula> for all <formula id="15">$ j$</formula> </para></listitem>
<listitem>
<para><formula id="16">$ \qpu$</formula> is an <formula id="4">$ n$</formula>-dimensional vector of upper bounds for <formula id="13">$ \qpx$</formula>, where <formula id="17">$ u_j\in\mathbb{R}\cup\{\infty\}$</formula> for all <formula id="15">$ j$</formula></para><para></para></listitem>
<listitem>
<para><formula id="18">$ \qpc$</formula> is an <formula id="4">$ n$</formula>-dimensional vector (the linear objective function), and </para></listitem>
<listitem>
<para><formula id="19">$ c_0$</formula> is a constant.</para><para></para></listitem>
</itemizedlist>
</para><para>The description is given by appropriate <emphasis>random-access</emphasis> iterators over the program data, see below. The program therefore comes in <emphasis>dense</emphasis> representation which includes zero entries.</para><para><xrefsect id="hasModels_1_hasModels000001"><xreftitle>Has Models</xreftitle><xrefdescription><para><computeroutput><ref refid="classCGAL_1_1Quadratic__program" kindref="compound">CGAL::Quadratic_program</ref>&lt;NT&gt;</computeroutput> </para><para><computeroutput><ref refid="classCGAL_1_1Quadratic__program__from__mps" kindref="compound">CGAL::Quadratic_program_from_mps</ref>&lt;NT&gt;</computeroutput> </para><para><computeroutput><ref refid="classCGAL_1_1Linear__program__from__iterators" kindref="compound">CGAL::Linear_program_from_iterators</ref>&lt;A_it, B_it, R_it, FL_it, L_it, FU_it, U_it, D_it, C_it&gt;</computeroutput></para></xrefdescription></xrefsect></para><para>and the other concepts <simplesect kind="see"><para><computeroutput><ref refid="classQuadraticProgram" kindref="compound">QuadraticProgram</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classNonnegativeQuadraticProgram" kindref="compound">NonnegativeQuadraticProgram</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classNonnegativeLinearProgram" kindref="compound">NonnegativeLinearProgram</ref></computeroutput> </para></simplesect>
</para>    </detaileddescription>
    <location file="Concepts/LinearProgram.h" line="62" column="1" bodyfile="Concepts/LinearProgram.h" bodystart="62" bodyend="213"/>
    <listofallmembers>
      <member refid="classLinearProgram_1accbb47af63ef804799e2170948e0d4d6" prot="public" virt="non-virtual"><scope>LinearProgram</scope><name>A_iterator</name></member>
      <member refid="classLinearProgram_1a8365e61478379e2f131553575c48922c" prot="public" virt="non-virtual"><scope>LinearProgram</scope><name>B_iterator</name></member>
      <member refid="classLinearProgram_1af0383ac6acf37f6cc4a6e35b7cbb898d" prot="public" virt="non-virtual"><scope>LinearProgram</scope><name>C_iterator</name></member>
      <member refid="classLinearProgram_1a42210d81ad17b999e0f28af0d930adb0" prot="public" virt="non-virtual"><scope>LinearProgram</scope><name>FL_iterator</name></member>
      <member refid="classLinearProgram_1abade0bc23b15ba755fc0da325cab124c" prot="public" virt="non-virtual"><scope>LinearProgram</scope><name>get_a</name></member>
      <member refid="classLinearProgram_1a618d079b86b26b8c1418cec757635c4a" prot="public" virt="non-virtual"><scope>LinearProgram</scope><name>get_b</name></member>
      <member refid="classLinearProgram_1a319c17a3540f43ed6feaae58c7020527" prot="public" virt="non-virtual"><scope>LinearProgram</scope><name>get_c</name></member>
      <member refid="classLinearProgram_1a1ad1770a07a86c918a7b3415462a355a" prot="public" virt="non-virtual"><scope>LinearProgram</scope><name>get_c0</name></member>
      <member refid="classLinearProgram_1acfb62b6c3dabcd94787b4a5dcaea98c8" prot="public" virt="non-virtual"><scope>LinearProgram</scope><name>get_fl</name></member>
      <member refid="classLinearProgram_1a1e7d195ce55269b5f279e608b10942db" prot="public" virt="non-virtual"><scope>LinearProgram</scope><name>get_fu</name></member>
      <member refid="classLinearProgram_1a613210d4257076eb1db9d3737327ced7" prot="public" virt="non-virtual"><scope>LinearProgram</scope><name>get_l</name></member>
      <member refid="classLinearProgram_1aeebc1303109e63be55683345d152480b" prot="public" virt="non-virtual"><scope>LinearProgram</scope><name>get_m</name></member>
      <member refid="classLinearProgram_1a67b243da76df9966d32c017a5820cfae" prot="public" virt="non-virtual"><scope>LinearProgram</scope><name>get_n</name></member>
      <member refid="classLinearProgram_1a35de8bb667081ae1d843c7ef8e6f7f7f" prot="public" virt="non-virtual"><scope>LinearProgram</scope><name>get_r</name></member>
      <member refid="classLinearProgram_1a91725045a68c60d49dfafc7acc48d5e8" prot="public" virt="non-virtual"><scope>LinearProgram</scope><name>get_u</name></member>
      <member refid="classLinearProgram_1ab48e8ad2cc4b62572410d7b270ce2787" prot="public" virt="non-virtual"><scope>LinearProgram</scope><name>L_iterator</name></member>
      <member refid="classLinearProgram_1a618eb6b27d640c7377e5fd3650732aa1" prot="public" virt="non-virtual"><scope>LinearProgram</scope><name>R_iterator</name></member>
      <member refid="classLinearProgram_1ad54e0bd07a96d7e59839008606367fa5" prot="public" virt="non-virtual"><scope>LinearProgram</scope><name>U_iterator</name></member>
      <member refid="classLinearProgram_1a9e3dbd3d7486ef304d5db8b98b7e3158" prot="public" virt="non-virtual"><scope>LinearProgram</scope><name>UL_iterator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
