<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classNonnegativeQuadraticProgram" kind="class" language="C++" prot="public">
    <compoundname>NonnegativeQuadraticProgram</compoundname>
    <includes local="no">Concepts/NonnegativeQuadraticProgram.h</includes>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classNonnegativeQuadraticProgram_1a4863015965b2d534fbef61da1e892f50" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type NonnegativeQuadraticProgram::A_iterator</definition>
        <argsstring></argsstring>
        <name>A_iterator</name>
        <briefdescription>
<para>A random access iterator type to go columnwise over the constraint matrix <formula id="6">$ A$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>The value type is a random access iterator type for an individual column that goes over the entries in that column. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/NonnegativeQuadraticProgram.h" line="74" column="1" bodyfile="Concepts/NonnegativeQuadraticProgram.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classNonnegativeQuadraticProgram_1aadb9d59b60e1ae4010c3b64c5ab226fe" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type NonnegativeQuadraticProgram::B_iterator</definition>
        <argsstring></argsstring>
        <name>B_iterator</name>
        <briefdescription>
<para>A random access iterator type to go over the entries of the right-hand side <formula id="8">$ \qpb$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/NonnegativeQuadraticProgram.h" line="80" column="1" bodyfile="Concepts/NonnegativeQuadraticProgram.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classNonnegativeQuadraticProgram_1afb3dc8007dbbd2e7459e01ddc940632d" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type NonnegativeQuadraticProgram::R_iterator</definition>
        <argsstring></argsstring>
        <name>R_iterator</name>
        <briefdescription>
<para>A random access iterator type to go over the relations <formula id="10">$ \qprel$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>The value type of <computeroutput>R_iterator</computeroutput> is <computeroutput><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Comparison_result</ref></computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/NonnegativeQuadraticProgram.h" line="87" column="1" bodyfile="Concepts/NonnegativeQuadraticProgram.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classNonnegativeQuadraticProgram_1a04b81c3a721c97bb75c078f130c0c03d" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type NonnegativeQuadraticProgram::D_iterator</definition>
        <argsstring></argsstring>
        <name>D_iterator</name>
        <briefdescription>
<para>A random access iterator type to go rowwise over the matrix <formula id="121">$ 2D$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>The value type is a random access iterator type for an individual row that goes over the entries in that row, up to (and including) the entry on the main diagonal. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/NonnegativeQuadraticProgram.h" line="96" column="1" bodyfile="Concepts/NonnegativeQuadraticProgram.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classNonnegativeQuadraticProgram_1a48885da26bd3c77d41e258867609d86e" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type NonnegativeQuadraticProgram::C_iterator</definition>
        <argsstring></argsstring>
        <name>C_iterator</name>
        <briefdescription>
<para>A random access iterator type to go over the entries of the linear objective function vector <formula id="92">$ c$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/NonnegativeQuadraticProgram.h" line="102" column="1" bodyfile="Concepts/NonnegativeQuadraticProgram.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <memberdef kind="function" id="classNonnegativeQuadraticProgram_1a6f2105eb5558697b1e33c65435ab5374" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int NonnegativeQuadraticProgram::get_n</definition>
        <argsstring>() const</argsstring>
        <name>get_n</name>
        <briefdescription>
<para>returns the number <formula id="4">$ n$</formula> of variables (number of columns of <formula id="6">$ A$</formula>) in <computeroutput>qp</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/NonnegativeQuadraticProgram.h" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classNonnegativeQuadraticProgram_1acc47319e753faa3c8fa4b9e74259c2bc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int NonnegativeQuadraticProgram::get_m</definition>
        <argsstring>() const</argsstring>
        <name>get_m</name>
        <briefdescription>
<para>returns the number <formula id="9">$ m$</formula> of constraints (number of rows of <formula id="6">$ A$</formula>) in <computeroutput>qp</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/NonnegativeQuadraticProgram.h" line="119" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classNonnegativeQuadraticProgram_1a69e3965d261581b3b8995ca75c688cb8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classNonnegativeQuadraticProgram_1a4863015965b2d534fbef61da1e892f50" kindref="member">A_iterator</ref></type>
        <definition>A_iterator NonnegativeQuadraticProgram::get_a</definition>
        <argsstring>() const</argsstring>
        <name>get_a</name>
        <briefdescription>
<para>returns an iterator over the columns of <formula id="6">$ A$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>The corresponding past-the-end iterator is <computeroutput><ref refid="classNonnegativeQuadraticProgram_1a69e3965d261581b3b8995ca75c688cb8" kindref="member">get_a()</ref>+get_n()</computeroutput>. For <formula id="93">$ j=0,\ldots,n-1$</formula>, <computeroutput>*(<ref refid="classNonnegativeQuadraticProgram_1a69e3965d261581b3b8995ca75c688cb8" kindref="member">get_a()</ref>+j)</computeroutput> is a random access iterator for column <formula id="15">$ j$</formula>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/NonnegativeQuadraticProgram.h" line="127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classNonnegativeQuadraticProgram_1aa96678f034075541258fb3d190d0b3b2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classNonnegativeQuadraticProgram_1aadb9d59b60e1ae4010c3b64c5ab226fe" kindref="member">B_iterator</ref></type>
        <definition>B_iterator NonnegativeQuadraticProgram::get_b</definition>
        <argsstring>() const</argsstring>
        <name>get_b</name>
        <briefdescription>
<para>returns an iterator over the entries of <formula id="8">$ \qpb$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>The corresponding past-the-end iterator is <computeroutput><ref refid="classNonnegativeQuadraticProgram_1aa96678f034075541258fb3d190d0b3b2" kindref="member">get_b()</ref>+get_m()</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/NonnegativeQuadraticProgram.h" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classNonnegativeQuadraticProgram_1a9e04b3b84de159bd4d7268a48aa5c1a7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classNonnegativeQuadraticProgram_1afb3dc8007dbbd2e7459e01ddc940632d" kindref="member">R_iterator</ref></type>
        <definition>R_iterator NonnegativeQuadraticProgram::get_r</definition>
        <argsstring>() const</argsstring>
        <name>get_r</name>
        <briefdescription>
<para>returns an iterator over the entries of <formula id="10">$ \qprel$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>The corresponding past-the-end iterator is <computeroutput><ref refid="classNonnegativeQuadraticProgram_1a9e04b3b84de159bd4d7268a48aa5c1a7" kindref="member">get_r()</ref>+get_m()</computeroutput>. The value <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab925c6b1ff8cd0bdea7f31fe18d3c38b" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::SMALLER</ref></computeroutput> stands for <formula id="53">$ \leq$</formula>, <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469a5f224784e56ca565837a5d6d268fe078" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::EQUAL</ref></computeroutput> stands for <formula id="94">$ =$</formula>, and <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab25bdbfd193e9ea35187a4f46e7d6fcd" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::LARGER</ref></computeroutput> stands for <formula id="54">$ \geq$</formula>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/NonnegativeQuadraticProgram.h" line="144" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classNonnegativeQuadraticProgram_1ab1234c621a63b518488cee06e49d6f96" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classNonnegativeQuadraticProgram_1a04b81c3a721c97bb75c078f130c0c03d" kindref="member">D_iterator</ref></type>
        <definition>D_iterator NonnegativeQuadraticProgram::get_d</definition>
        <argsstring>() const</argsstring>
        <name>get_d</name>
        <briefdescription>
<para>returns an iterator over the rows of <formula id="121">$ 2D$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>The corresponding past-the-end iterator is <computeroutput><ref refid="classNonnegativeQuadraticProgram_1ab1234c621a63b518488cee06e49d6f96" kindref="member">get_d()</ref>+get_n()</computeroutput>. For <formula id="123">$ i=0,\ldots,n-1$</formula>, <computeroutput>*(<ref refid="classNonnegativeQuadraticProgram_1ab1234c621a63b518488cee06e49d6f96" kindref="member">get_d()</ref>+i)</computeroutput> is a random access iterator for the entries in row <formula id="30">$ i$</formula> <emphasis>below or on the diagonal</emphasis>. The valid range of this iterator is guaranteed to have length <formula id="124">$ i+1$</formula> but not more. Values to the right of the diagonal are deduced from the symmetry requirement on <formula id="24">$ D$</formula>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/NonnegativeQuadraticProgram.h" line="155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classNonnegativeQuadraticProgram_1a73905c02cfa5dd85467a700ee36f1cdc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classNonnegativeQuadraticProgram_1a48885da26bd3c77d41e258867609d86e" kindref="member">C_iterator</ref></type>
        <definition>C_iterator NonnegativeQuadraticProgram::get_c</definition>
        <argsstring>() const</argsstring>
        <name>get_c</name>
        <briefdescription>
<para>returns an iterator over the entries of <formula id="18">$ \qpc$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>The corresponding past-the-end iterator is <computeroutput><ref refid="classNonnegativeQuadraticProgram_1a73905c02cfa5dd85467a700ee36f1cdc" kindref="member">get_c()</ref>+get_n()</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/NonnegativeQuadraticProgram.h" line="162" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classNonnegativeQuadraticProgram_1ae9d5320d2baf881959e5696382967511" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::iterator_traits&lt; <ref refid="classNonnegativeQuadraticProgram_1a48885da26bd3c77d41e258867609d86e" kindref="member">C_iterator</ref> &gt;::value_type</type>
        <definition>std::iterator_traits&lt;C_iterator&gt;::value_type NonnegativeQuadraticProgram::get_c0</definition>
        <argsstring>() const</argsstring>
        <name>get_c0</name>
        <briefdescription>
<para>returns the constant term <formula id="19">$ c_0$</formula> of the objective function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/NonnegativeQuadraticProgram.h" line="167" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A model of <computeroutput><ref refid="classNonnegativeQuadraticProgram" kindref="compound">NonnegativeQuadraticProgram</ref></computeroutput> describes a convex quadratic program of the form. </para>    </briefdescription>
    <detaileddescription>
<para> <formula id="2">$ \newcommand{\qprel}{\gtreqless} \newcommand{\qpx}{\mathbf{x}} \newcommand{\qpl}{\mathbf{l}} \newcommand{\qpu}{\mathbf{u}} \newcommand{\qpc}{\mathbf{c}} \newcommand{\qpb}{\mathbf{b}} \newcommand{\qpy}{\mathbf{y}} \newcommand{\qpw}{\mathbf{w}} \newcommand{\qplambda}{\mathbf{\lambda}} $</formula> <formula id="23">\begin{eqnarray*} \mbox{(QP)}&amp; \mbox{minimize} &amp; \qpx^{T}D\qpx+\qpc^{T}\qpx+c_0 \\ &amp;\mbox{subject to} &amp; A\qpx\qprel \qpb, \\ &amp; &amp; \qpx \geq 0 \end{eqnarray*}</formula></para><para>in <formula id="4">$ n$</formula> real variables <formula id="5">$ \qpx=(x_0,\ldots,x_{n-1})$</formula>. Here, <itemizedlist>
<listitem>
<para><formula id="6">$ A$</formula> is an <formula id="7">$ m\times n$</formula> matrix (the constraint matrix), </para></listitem>
<listitem>
<para><formula id="8">$ \qpb$</formula> is an <formula id="9">$ m$</formula>-dimensional vector (the right-hand side), </para></listitem>
<listitem>
<para><formula id="10">$ \qprel$</formula> is an <formula id="9">$ m$</formula>-dimensional vector of relations from <formula id="11">$ \{\leq, =, \geq\}$</formula>,</para><para></para></listitem>
<listitem>
<para><formula id="24">$ D$</formula> is a symmetric positive-semidefinite <formula id="25">$ n\times n$</formula> matrix (the quadratic objective function),</para><para></para></listitem>
<listitem>
<para><formula id="18">$ \qpc$</formula> is an <formula id="4">$ n$</formula>-dimensional vector (the linear objective function), and </para></listitem>
<listitem>
<para><formula id="19">$ c_0$</formula> is a constant.</para><para></para></listitem>
</itemizedlist>
</para><para>The description is given by appropriate <emphasis>random-access</emphasis> iterators over the program data, see below. The program therefore comes in <emphasis>dense</emphasis> representation which includes zero entries.</para><para><xrefsect id="hasModels_1_hasModels000004"><xreftitle>Has Models</xreftitle><xrefdescription><para><computeroutput><ref refid="classCGAL_1_1Quadratic__program" kindref="compound">CGAL::Quadratic_program</ref>&lt;NT&gt;</computeroutput> </para><para><computeroutput><ref refid="classCGAL_1_1Quadratic__program__from__mps" kindref="compound">CGAL::Quadratic_program_from_mps</ref>&lt;NT&gt;</computeroutput> </para><para><computeroutput><ref refid="classCGAL_1_1Nonnegative__quadratic__program__from__iterators" kindref="compound">CGAL::Nonnegative_quadratic_program_from_iterators</ref>&lt;A_it, B_it, R_it, FL_it, L_it, FU_it, U_it, D_it, C_it&gt;</computeroutput></para></xrefdescription></xrefsect></para><para>The value types of all iterator types (nested iterator types, respectively, for <computeroutput>A_iterator</computeroutput> and <computeroutput>D_iterator</computeroutput>) must be convertible to some common <computeroutput><ref refid="classIntegralDomain" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">IntegralDomain</ref></computeroutput> <computeroutput>ET</computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classQuadraticProgram" kindref="compound">QuadraticProgram</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classLinearProgram" kindref="compound">LinearProgram</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classNonnegativeLinearProgram" kindref="compound">NonnegativeLinearProgram</ref></computeroutput> </para></simplesect>
</para>    </detaileddescription>
    <location file="Concepts/NonnegativeQuadraticProgram.h" line="62" column="1" bodyfile="Concepts/NonnegativeQuadraticProgram.h" bodystart="62" bodyend="171"/>
    <listofallmembers>
      <member refid="classNonnegativeQuadraticProgram_1a4863015965b2d534fbef61da1e892f50" prot="public" virt="non-virtual"><scope>NonnegativeQuadraticProgram</scope><name>A_iterator</name></member>
      <member refid="classNonnegativeQuadraticProgram_1aadb9d59b60e1ae4010c3b64c5ab226fe" prot="public" virt="non-virtual"><scope>NonnegativeQuadraticProgram</scope><name>B_iterator</name></member>
      <member refid="classNonnegativeQuadraticProgram_1a48885da26bd3c77d41e258867609d86e" prot="public" virt="non-virtual"><scope>NonnegativeQuadraticProgram</scope><name>C_iterator</name></member>
      <member refid="classNonnegativeQuadraticProgram_1a04b81c3a721c97bb75c078f130c0c03d" prot="public" virt="non-virtual"><scope>NonnegativeQuadraticProgram</scope><name>D_iterator</name></member>
      <member refid="classNonnegativeQuadraticProgram_1a69e3965d261581b3b8995ca75c688cb8" prot="public" virt="non-virtual"><scope>NonnegativeQuadraticProgram</scope><name>get_a</name></member>
      <member refid="classNonnegativeQuadraticProgram_1aa96678f034075541258fb3d190d0b3b2" prot="public" virt="non-virtual"><scope>NonnegativeQuadraticProgram</scope><name>get_b</name></member>
      <member refid="classNonnegativeQuadraticProgram_1a73905c02cfa5dd85467a700ee36f1cdc" prot="public" virt="non-virtual"><scope>NonnegativeQuadraticProgram</scope><name>get_c</name></member>
      <member refid="classNonnegativeQuadraticProgram_1ae9d5320d2baf881959e5696382967511" prot="public" virt="non-virtual"><scope>NonnegativeQuadraticProgram</scope><name>get_c0</name></member>
      <member refid="classNonnegativeQuadraticProgram_1ab1234c621a63b518488cee06e49d6f96" prot="public" virt="non-virtual"><scope>NonnegativeQuadraticProgram</scope><name>get_d</name></member>
      <member refid="classNonnegativeQuadraticProgram_1acc47319e753faa3c8fa4b9e74259c2bc" prot="public" virt="non-virtual"><scope>NonnegativeQuadraticProgram</scope><name>get_m</name></member>
      <member refid="classNonnegativeQuadraticProgram_1a6f2105eb5558697b1e33c65435ab5374" prot="public" virt="non-virtual"><scope>NonnegativeQuadraticProgram</scope><name>get_n</name></member>
      <member refid="classNonnegativeQuadraticProgram_1a9e04b3b84de159bd4d7268a48aa5c1a7" prot="public" virt="non-virtual"><scope>NonnegativeQuadraticProgram</scope><name>get_r</name></member>
      <member refid="classNonnegativeQuadraticProgram_1afb3dc8007dbbd2e7459e01ddc940632d" prot="public" virt="non-virtual"><scope>NonnegativeQuadraticProgram</scope><name>R_iterator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
