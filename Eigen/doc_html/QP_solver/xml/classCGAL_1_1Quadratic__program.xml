<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Quadratic__program" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Quadratic_program</compoundname>
    <includes local="no">CGAL/QP_models.h</includes>
    <templateparamlist>
      <param>
        <type>typename <ref refid="classCGAL_1_1Quadratic__program_1add07c20b18ee5a62d9ff62308c746d2e" kindref="member">NT</ref></type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classCGAL_1_1Quadratic__program_1add07c20b18ee5a62d9ff62308c746d2e" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Quadratic_program&lt; NT &gt;::NT</definition>
        <argsstring></argsstring>
        <name>NT</name>
        <briefdescription>
<para>The number type of the program entries. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/QP_models.h" line="887" column="1" bodyfile="CGAL/QP_models.h" bodystart="887" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Quadratic__program_1a77408452fb3d9f250a03833c9b456ebb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Quadratic_program&lt; NT &gt;::Quadratic_program</definition>
        <argsstring>(CGAL::Comparison_result default_r=CGAL::EQUAL, bool default_fl=true, const NT &amp;default_l=0, bool default_fu=false, const NT &amp;default_u=0)</argsstring>
        <name>Quadratic_program</name>
        <param>
          <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Comparison_result</ref></type>
          <declname>default_r</declname>
          <defval><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469a5f224784e56ca565837a5d6d268fe078" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::EQUAL</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>default_fl</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Quadratic__program_1add07c20b18ee5a62d9ff62308c746d2e" kindref="member">NT</ref> &amp;</type>
          <declname>default_l</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>default_fu</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Quadratic__program_1add07c20b18ee5a62d9ff62308c746d2e" kindref="member">NT</ref> &amp;</type>
          <declname>default_u</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>constructs a quadratic program with no variables and no constraints, ready for data to be added. </para>        </briefdescription>
        <detaileddescription>
<para>Unless relations are explicitly set, they will be of type <computeroutput>default_r</computeroutput>. Unless bounds are explicitly set, they will be as specified by <computeroutput>default_fl</computeroutput> (finite lower bound?), <computeroutput>default_l</computeroutput> (lower bound value if lower bound is finite), <computeroutput>default_fu</computeroutput> (finite upper bound?), and <computeroutput>default_l</computeroutput> (upper bound value if upper bound is finite). If all parameters take their default values, we thus get equality constraints and bounds <formula id="41">$ x\geq0$</formula> by default. Numerical entries that are not explicitly set will default to <formula id="42">$ 0$</formula>.<simplesect kind="pre"><para>if <computeroutput>default_fl == default_fu == true</computeroutput>, then <computeroutput>default_l &lt;= default_u</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/QP_models.h" line="906" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <memberdef kind="function" id="classCGAL_1_1Quadratic__program_1ae002c3ab8ba216fbabff7c7876ffdfc5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Quadratic_program&lt; NT &gt;::is_linear</definition>
        <argsstring>() const</argsstring>
        <name>is_linear</name>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if and only if <computeroutput>qp</computeroutput> is a linear program. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/QP_models.h" line="922" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Quadratic__program_1ac4a46c543b15ef4447f52a4299999343" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Quadratic_program&lt; NT &gt;::is_nonnegative</definition>
        <argsstring>() const</argsstring>
        <name>is_nonnegative</name>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if and only if <computeroutput>qp</computeroutput> is a nonnegative program. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/QP_models.h" line="928" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Quadratic__program_1a32c7376751bea8eceeeb2276ebc93225" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Quadratic_program&lt; NT &gt;::set_a</definition>
        <argsstring>(int j, int i, const NT &amp;val)</argsstring>
        <name>set_a</name>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Quadratic__program_1add07c20b18ee5a62d9ff62308c746d2e" kindref="member">NT</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>sets the entry <formula id="31">$ A_{ij}$</formula> in column <formula id="15">$ j$</formula> and row <formula id="30">$ i$</formula> of the constraint matrix <formula id="6">$ A$</formula> of <computeroutput>qp</computeroutput> to <computeroutput>val</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>An existing entry is overwritten. <computeroutput>qp</computeroutput> is enlarged if necessary to accomodate this entry. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/QP_models.h" line="936" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Quadratic__program_1af353c2d1c8bc5b59d210234cbca0fc90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Quadratic_program&lt; NT &gt;::set_b</definition>
        <argsstring>(int i, const NT &amp;val)</argsstring>
        <name>set_b</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Quadratic__program_1add07c20b18ee5a62d9ff62308c746d2e" kindref="member">NT</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>sets the entry <formula id="32">$ b_i$</formula> of <computeroutput>qp</computeroutput> to <computeroutput>val</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>An existing entry is overwritten. <computeroutput>qp</computeroutput> is enlarged if necessary to accomodate this entry. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/QP_models.h" line="943" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Quadratic__program_1a6d4fda1e84da0c7be7efb38e00ac4d9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Quadratic_program&lt; NT &gt;::set_r</definition>
        <argsstring>(int i, CGAL::Comparison_result rel)</argsstring>
        <name>set_r</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Comparison_result</ref></type>
          <declname>rel</declname>
        </param>
        <briefdescription>
<para>sets the entry <formula id="33">$ \qprel_i$</formula> of <computeroutput>qp</computeroutput> to <computeroutput>rel</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab925c6b1ff8cd0bdea7f31fe18d3c38b" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::SMALLER</ref></computeroutput> means that the <formula id="30">$ i$</formula>-th constraint is of type &quot;\f$ \leq\f$&quot;, <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469a5f224784e56ca565837a5d6d268fe078" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::EQUAL</ref></computeroutput> means &quot;\f$ =\f$&quot;, and <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab25bdbfd193e9ea35187a4f46e7d6fcd" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::LARGER</ref></computeroutput> encodes &quot;\f$ \geq\f$&quot;. An existing entry is overwritten. <computeroutput>qp</computeroutput> is enlarged if necessary to accomodate this entry. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/QP_models.h" line="951" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Quadratic__program_1ae077e1b1ab71dab97eca36d61326b07d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Quadratic_program&lt; NT &gt;::set_l</definition>
        <argsstring>(int j, bool is_finite, const NT &amp;val=NT(0))</argsstring>
        <name>set_l</name>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_finite</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Quadratic__program_1add07c20b18ee5a62d9ff62308c746d2e" kindref="member">NT</ref> &amp;</type>
          <declname>val</declname>
          <defval><ref refid="classCGAL_1_1Quadratic__program_1add07c20b18ee5a62d9ff62308c746d2e" kindref="member">NT</ref>(0)</defval>
        </param>
        <briefdescription>
<para>if <computeroutput>is_finite</computeroutput>, this sets the entry <formula id="34">$ l_j$</formula> of <computeroutput>qp</computeroutput> to <computeroutput>val</computeroutput>, otherwise it sets <formula id="34">$ l_j$</formula> to <formula id="35">$ -\infty$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>An existing entry is overwritten. <computeroutput>qp</computeroutput> is enlarged if necessary to accomodate this entry. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/QP_models.h" line="958" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Quadratic__program_1a38e172360a3b114a96b966f4bc6e0d54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Quadratic_program&lt; NT &gt;::set_u</definition>
        <argsstring>(int j, bool is_finite, const NT &amp;val=NT(0))</argsstring>
        <name>set_u</name>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_finite</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Quadratic__program_1add07c20b18ee5a62d9ff62308c746d2e" kindref="member">NT</ref> &amp;</type>
          <declname>val</declname>
          <defval><ref refid="classCGAL_1_1Quadratic__program_1add07c20b18ee5a62d9ff62308c746d2e" kindref="member">NT</ref>(0)</defval>
        </param>
        <briefdescription>
<para>if <computeroutput>is_finite</computeroutput>, this sets the entry <formula id="36">$ u_j$</formula> of <computeroutput>qp</computeroutput> to <computeroutput>val</computeroutput>, otherwise it sets <formula id="36">$ u_j$</formula> to <formula id="37">$ \infty$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>An existing entry is overwritten. <computeroutput>qp</computeroutput> is enlarged if necessary to accomodate this entry. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/QP_models.h" line="965" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Quadratic__program_1a2549aa457fbf0f8ab7033dbb0849cf16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Quadratic_program&lt; NT &gt;::set_c</definition>
        <argsstring>(int j, const NT &amp;val)</argsstring>
        <name>set_c</name>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Quadratic__program_1add07c20b18ee5a62d9ff62308c746d2e" kindref="member">NT</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>sets the entry <formula id="38">$ c_j$</formula> of <computeroutput>qp</computeroutput> to <computeroutput>val</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>An existing entry is overwritten. <computeroutput>qp</computeroutput> is enlarged if necessary to accomodate this entry. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/QP_models.h" line="972" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Quadratic__program_1a0f2df0dac6946dab50e401ecbc01be53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Quadratic_program&lt; NT &gt;::set_c0</definition>
        <argsstring>(const NT &amp;val)</argsstring>
        <name>set_c0</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Quadratic__program_1add07c20b18ee5a62d9ff62308c746d2e" kindref="member">NT</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>sets the entry <formula id="19">$ c_0$</formula> of <computeroutput>qp</computeroutput> to <computeroutput>val</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>An existing entry is overwritten. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/QP_models.h" line="978" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Quadratic__program_1a2b598d11d1d6daff9d20e43dc586257d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Quadratic_program&lt; NT &gt;::set_d</definition>
        <argsstring>(int i, int j, const NT &amp;val)</argsstring>
        <name>set_d</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Quadratic__program_1add07c20b18ee5a62d9ff62308c746d2e" kindref="member">NT</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>sets the entries <formula id="39">$ 2D_{ij}$</formula> and <formula id="40">$ 2D_{ji}$</formula> of <computeroutput>qp</computeroutput> to <computeroutput>val</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Existing entries are overwritten. <computeroutput>qp</computeroutput> is enlarged if necessary to accomodate these entries. <simplesect kind="pre"><para><computeroutput>j &lt;= i</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/QP_models.h" line="986" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><formula id="2">$ \newcommand{\qprel}{\gtreqless} \newcommand{\qpx}{\mathbf{x}} \newcommand{\qpl}{\mathbf{l}} \newcommand{\qpu}{\mathbf{u}} \newcommand{\qpc}{\mathbf{c}} \newcommand{\qpb}{\mathbf{b}} \newcommand{\qpy}{\mathbf{y}} \newcommand{\qpw}{\mathbf{w}} \newcommand{\qplambda}{\mathbf{\lambda}} $</formula> </para>    </briefdescription>
    <detaileddescription>
<para>An object of class <computeroutput><ref refid="classCGAL_1_1Quadratic__program" kindref="compound">Quadratic_program</ref></computeroutput> describes a convex quadratic program of the form <formula id="26">\begin{eqnarray*} \mbox{(QP)}&amp; \mbox{minimize} &amp; \qpx^{T}D\qpx+\qpc^{T}\qpx+c_0 \\ &amp;\mbox{subject to} &amp; A\qpx\qprel \qpb, \\ &amp; &amp; \qpl \leq \qpx \leq \qpu \end{eqnarray*}</formula> in <formula id="4">$ n$</formula> real variables <formula id="5">$ \qpx=(x_0,\ldots,x_{n-1})$</formula>.</para><para>Here, <itemizedlist>
<listitem>
<para><formula id="6">$ A$</formula> is an <formula id="7">$ m\times n$</formula> matrix (the constraint matrix), </para></listitem>
<listitem>
<para><formula id="8">$ \qpb$</formula> is an <formula id="9">$ m$</formula>-dimensional vector (the right-hand side), </para></listitem>
<listitem>
<para><formula id="10">$ \qprel$</formula> is an <formula id="9">$ m$</formula>-dimensional vector of relations from <formula id="11">$ \{\leq, =, \geq\}$</formula>,</para><para></para></listitem>
<listitem>
<para><formula id="12">$ \qpl$</formula> is an <formula id="4">$ n$</formula>-dimensional vector of lower bounds for <formula id="13">$ \qpx$</formula>, where <formula id="14">$ l_j\in\mathbb{R}\cup\{-\infty\}$</formula> for all <formula id="15">$ j$</formula> </para></listitem>
<listitem>
<para><formula id="16">$ \qpu$</formula> is an <formula id="4">$ n$</formula>-dimensional vector of upper bounds for <formula id="13">$ \qpx$</formula>, where <formula id="17">$ u_j\in\mathbb{R}\cup\{\infty\}$</formula> for all <formula id="15">$ j$</formula></para><para></para></listitem>
<listitem>
<para><formula id="24">$ D$</formula> is a symmetric positive-semidefinite <formula id="25">$ n\times n$</formula> matrix (the quadratic objective function),</para><para></para></listitem>
<listitem>
<para><formula id="18">$ \qpc$</formula> is an <formula id="4">$ n$</formula>-dimensional vector (the linear objective function), and </para></listitem>
<listitem>
<para><formula id="19">$ c_0$</formula> is a constant.</para><para></para></listitem>
</itemizedlist>
</para><para>If <formula id="27">$ D=0$</formula>, the program is a linear program; if the variable bounds are <formula id="28">$ x\geq 0$</formula>, we have a nonnegative program.</para><para>This class allows you to build your program entry by entry, using the set-methods below.</para><para>If you only need to wrap existing (random-access) iterators over your own data, then you may use any of the four models <computeroutput><ref refid="classCGAL_1_1Quadratic__program__from__iterators" kindref="compound">Quadratic_program_from_iterators</ref>&lt;A_it, B_it, R_it, FL_it, L_it, FU_it, U_it, D_it, C_it&gt;</computeroutput>, <computeroutput><ref refid="classCGAL_1_1Linear__program__from__iterators" kindref="compound">Linear_program_from_iterators</ref>&lt;A_it, B_it, R_it, FL_it, L_it, FU_it, U_it, C_it&gt;</computeroutput>, <computeroutput><ref refid="classCGAL_1_1Nonnegative__quadratic__program__from__iterators" kindref="compound">Nonnegative_quadratic_program_from_iterators</ref>&lt;A_it, B_it, R_it, D_it, C_it&gt;</computeroutput>, and <computeroutput><ref refid="classCGAL_1_1Nonnegative__linear__program__from__iterators" kindref="compound">Nonnegative_linear_program_from_iterators</ref>&lt;A_it, B_it, R_it, C_it&gt;</computeroutput>.</para><para>If you want to read a quadratic program in <computeroutput><ref refid="classMPSFormat" kindref="compound">MPSFormat</ref></computeroutput> from a stream, please use the model <computeroutput><ref refid="classCGAL_1_1Quadratic__program__from__mps" kindref="compound">Quadratic_program_from_mps</ref>&lt;NT&gt;</computeroutput>.</para><para><xrefsect id="models_1_models000006"><xreftitle>Is Model Of</xreftitle><xrefdescription><para><computeroutput><ref refid="classQuadraticProgram" kindref="compound">QuadraticProgram</ref></computeroutput> </para><para><computeroutput><ref refid="classLinearProgram" kindref="compound">LinearProgram</ref></computeroutput> </para><para><computeroutput><ref refid="classNonnegativeQuadraticProgram" kindref="compound">NonnegativeQuadraticProgram</ref></computeroutput> </para><para><computeroutput><ref refid="classNonnegativeLinearProgram" kindref="compound">NonnegativeLinearProgram</ref></computeroutput></para></xrefdescription></xrefsect></para><para><heading level="2">Example </heading>
</para><para><ref refid="QP_solver_2first_qp_8cpp-example" kindref="compound">QP_solver/first_qp.cpp</ref></para><para><ref refid="QP_solver_2first_lp_8cpp-example" kindref="compound">QP_solver/first_lp.cpp</ref></para><para><ref refid="QP_solver_2first_nonnegative_qp_8cpp-example" kindref="compound">QP_solver/first_nonnegative_qp.cpp</ref></para><para><ref refid="QP_solver_2first_nonnegative_lp_8cpp-example" kindref="compound">QP_solver/first_nonnegative_lp.cpp</ref></para><para><ref refid="QP_solver_2invert_matrix_8cpp-example" kindref="compound">QP_solver/invert_matrix.cpp</ref></para><para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Quadratic__program__from__iterators" kindref="compound">Quadratic_program_from_iterators</ref>&lt;A_it, B_it, R_it, FL_it, L_it, FU_it, U_it, D_it, C_it&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Linear__program__from__iterators" kindref="compound">Linear_program_from_iterators</ref>&lt;A_it, B_it, R_it, FL_it, L_it, FU_it, U_it, C_it&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Nonnegative__quadratic__program__from__iterators" kindref="compound">Nonnegative_quadratic_program_from_iterators</ref>&lt;A_it, B_it, R_it, D_it, C_it&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Nonnegative__linear__program__from__iterators" kindref="compound">Nonnegative_linear_program_from_iterators</ref>&lt;A_it, B_it, R_it, C_it&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Quadratic__program__from__mps" kindref="compound">Quadratic_program_from_mps</ref>&lt;<ref refid="classCGAL_1_1Quadratic__program_1add07c20b18ee5a62d9ff62308c746d2e" kindref="member">NT</ref>&gt;</computeroutput> </para></simplesect>
</para>    </detaileddescription>
    <location file="CGAL/QP_models.h" line="878" column="1" bodyfile="CGAL/QP_models.h" bodystart="878" bodyend="990"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Quadratic__program_1ae002c3ab8ba216fbabff7c7876ffdfc5" prot="public" virt="non-virtual"><scope>CGAL::Quadratic_program</scope><name>is_linear</name></member>
      <member refid="classCGAL_1_1Quadratic__program_1ac4a46c543b15ef4447f52a4299999343" prot="public" virt="non-virtual"><scope>CGAL::Quadratic_program</scope><name>is_nonnegative</name></member>
      <member refid="classCGAL_1_1Quadratic__program_1add07c20b18ee5a62d9ff62308c746d2e" prot="public" virt="non-virtual"><scope>CGAL::Quadratic_program</scope><name>NT</name></member>
      <member refid="classCGAL_1_1Quadratic__program_1a77408452fb3d9f250a03833c9b456ebb" prot="public" virt="non-virtual"><scope>CGAL::Quadratic_program</scope><name>Quadratic_program</name></member>
      <member refid="classCGAL_1_1Quadratic__program_1a32c7376751bea8eceeeb2276ebc93225" prot="public" virt="non-virtual"><scope>CGAL::Quadratic_program</scope><name>set_a</name></member>
      <member refid="classCGAL_1_1Quadratic__program_1af353c2d1c8bc5b59d210234cbca0fc90" prot="public" virt="non-virtual"><scope>CGAL::Quadratic_program</scope><name>set_b</name></member>
      <member refid="classCGAL_1_1Quadratic__program_1a2549aa457fbf0f8ab7033dbb0849cf16" prot="public" virt="non-virtual"><scope>CGAL::Quadratic_program</scope><name>set_c</name></member>
      <member refid="classCGAL_1_1Quadratic__program_1a0f2df0dac6946dab50e401ecbc01be53" prot="public" virt="non-virtual"><scope>CGAL::Quadratic_program</scope><name>set_c0</name></member>
      <member refid="classCGAL_1_1Quadratic__program_1a2b598d11d1d6daff9d20e43dc586257d" prot="public" virt="non-virtual"><scope>CGAL::Quadratic_program</scope><name>set_d</name></member>
      <member refid="classCGAL_1_1Quadratic__program_1ae077e1b1ab71dab97eca36d61326b07d" prot="public" virt="non-virtual"><scope>CGAL::Quadratic_program</scope><name>set_l</name></member>
      <member refid="classCGAL_1_1Quadratic__program_1a6d4fda1e84da0c7be7efb38e00ac4d9e" prot="public" virt="non-virtual"><scope>CGAL::Quadratic_program</scope><name>set_r</name></member>
      <member refid="classCGAL_1_1Quadratic__program_1a38e172360a3b114a96b966f4bc6e0d54" prot="public" virt="non-virtual"><scope>CGAL::Quadratic_program</scope><name>set_u</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
