<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Quadratic__program__options" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Quadratic_program_options</compoundname>
    <includes local="no">CGAL/QP_options.h</includes>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Quadratic__program__options_1a629b1b31449f8e94571fdca07bf2efc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Quadratic_program_options::Quadratic_program_options</definition>
        <argsstring>()</argsstring>
        <name>Quadratic_program_options</name>
        <briefdescription>
<para>constructs an instance of <computeroutput><ref refid="classCGAL_1_1Quadratic__program__options" kindref="compound">Quadratic_program_options</ref></computeroutput> where all available options are at their defaults. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/QP_options.h" line="41" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Verbosity</header>
      <memberdef kind="function" id="classCGAL_1_1Quadratic__program__options_1a0a0ecc2ed94545489855edf860e2aa66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Quadratic_program_options::set_verbosity</definition>
        <argsstring>(int verbosity)</argsstring>
        <name>set_verbosity</name>
        <param>
          <type>int</type>
          <declname>verbosity</declname>
        </param>
        <briefdescription>
<para>sets the verbosity of the solver to the value <computeroutput>verbosity</computeroutput> when <computeroutput>options</computeroutput> is passed to any of the four solution functions. </para>        </briefdescription>
        <detaileddescription>
<para>The provided value must be a number between <formula id="42">$ 0$</formula> and <formula id="43">$ 5$</formula>. Verbosity <formula id="42">$ 0$</formula> is the default and results in the solver running silently. Verbosity <formula id="44">$ 1$</formula> prints a short summary of every iteration. Higher verbosity values print more information about the solution process, but these are mainly for debugging purposes and have no effect if you compile with <computeroutput>CGAL_QP_NO_ASSERTIONS</computeroutput> or <computeroutput>NDEBUG</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/QP_options.h" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Quadratic__program__options_1a92831532e86a01bdd065fb190396b6d8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CGAL::Quadratic_program_options::get_verbosity</definition>
        <argsstring>() const</argsstring>
        <name>get_verbosity</name>
        <briefdescription>
<para>returns the verbosity level of <computeroutput>options</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/QP_options.h" line="63" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Pricing strategy</header>
      <memberdef kind="function" id="classCGAL_1_1Quadratic__program__options_1a61bf72e4bd2fb752b4ca7547b1b18fcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Quadratic_program_options::set_pricing_strategy</definition>
        <argsstring>(Quadratic_program_pricing_strategy pricing_strategy)</argsstring>
        <name>set_pricing_strategy</name>
        <param>
          <type><ref refid="group__PkgQPSolverFunctions_1ga5e4c5717fab328c4e94c3d58e1bd4517" kindref="member">Quadratic_program_pricing_strategy</ref></type>
          <declname>pricing_strategy</declname>
        </param>
        <briefdescription>
<para>sets the pricing strategy of the solver to the value <computeroutput>pricing_strategy</computeroutput> when <computeroutput>options</computeroutput> is passed to any of the four solution functions. </para>        </briefdescription>
        <detaileddescription>
<para>The pricing strategy controls how the solver proceeds from any intermediate solution. For the available strategies and their behavior, see the documentation of the class <computeroutput>Quadratic_program_pricing_strategy</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/QP_options.h" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Quadratic__program__options_1a1ffe17b1b3ee424faa103f4656d329d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__PkgQPSolverFunctions_1ga5e4c5717fab328c4e94c3d58e1bd4517" kindref="member">Quadratic_program_pricing_strategy</ref></type>
        <definition>Quadratic_program_pricing_strategy CGAL::Quadratic_program_options::get_pricing_strategy</definition>
        <argsstring>() const</argsstring>
        <name>get_pricing_strategy</name>
        <briefdescription>
<para>returns the pricing strategy of <computeroutput>options</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/QP_options.h" line="83" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Validation mode</header>
      <memberdef kind="function" id="classCGAL_1_1Quadratic__program__options_1aa5c09dc521f691e81ce97975386f2ec2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Quadratic_program_options::set_auto_validation</definition>
        <argsstring>(bool validate)</argsstring>
        <name>set_auto_validation</name>
        <param>
          <type>bool</type>
          <declname>validate</declname>
        </param>
        <briefdescription>
<para>sets the automatic validation mode of the solver to the value <computeroutput>validate</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The default is <computeroutput>false</computeroutput>. By providing value <computeroutput>true</computeroutput> you can tell the solver to automatically check whether the program has correctly been solved, see the Validity section of the class <computeroutput><ref refid="classCGAL_1_1Quadratic__program__solution" kindref="compound">Quadratic_program_solution</ref></computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/QP_options.h" line="97" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Quadratic__program__options_1aebe2a18f11c67a8103bb032ba272e926" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Quadratic_program_options::get_auto_validation</definition>
        <argsstring>() const</argsstring>
        <name>get_auto_validation</name>
        <briefdescription>
<para>returns the validation mode of <computeroutput>options</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/QP_options.h" line="102" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This is a class used for passing options to the linear and quadratic programming solvers. </para>    </briefdescription>
    <detaileddescription>
<para>Currently, we support only options referring to <orderedlist>
<listitem>
<para>the verbosity, </para></listitem>
<listitem>
<para>the pricing strategy (see <computeroutput>Quadratic_program_pricing_strategy</computeroutput>), </para></listitem>
<listitem>
<para>the validation mode (see the Validity section of <computeroutput><ref refid="classCGAL_1_1Quadratic__program__solution" kindref="compound">Quadratic_program_solution</ref></computeroutput>) </para></listitem>
</orderedlist>
The idea is that this list grows in the future.</para><para><heading level="2">Operations </heading>
</para><para>Here we just have set/get pairs for any option type.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Quadratic__program__solution" kindref="compound">Quadratic_program_solution</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgQPSolverFunctions_1gac769fb5f56983e35bec295b26501df7f" kindref="member">solve_quadratic_program</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgQPSolverFunctions_1ga1fefbd0436aca0e281f88e8e6cd8eb74" kindref="member">solve_linear_program</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgQPSolverFunctions_1ga3322921afa601ff6691a70658c8cecc7" kindref="member">solve_nonnegative_quadratic_program</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgQPSolverFunctions_1gafb60a136bc34bebcf9387266d3e36742" kindref="member">solve_nonnegative_linear_program</ref></computeroutput> </para></simplesect>
</para>    </detaileddescription>
    <location file="CGAL/QP_options.h" line="31" column="1" bodyfile="CGAL/QP_options.h" bodystart="31" bodyend="106"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Quadratic__program__options_1aebe2a18f11c67a8103bb032ba272e926" prot="public" virt="non-virtual"><scope>CGAL::Quadratic_program_options</scope><name>get_auto_validation</name></member>
      <member refid="classCGAL_1_1Quadratic__program__options_1a1ffe17b1b3ee424faa103f4656d329d1" prot="public" virt="non-virtual"><scope>CGAL::Quadratic_program_options</scope><name>get_pricing_strategy</name></member>
      <member refid="classCGAL_1_1Quadratic__program__options_1a92831532e86a01bdd065fb190396b6d8" prot="public" virt="non-virtual"><scope>CGAL::Quadratic_program_options</scope><name>get_verbosity</name></member>
      <member refid="classCGAL_1_1Quadratic__program__options_1a629b1b31449f8e94571fdca07bf2efc3" prot="public" virt="non-virtual"><scope>CGAL::Quadratic_program_options</scope><name>Quadratic_program_options</name></member>
      <member refid="classCGAL_1_1Quadratic__program__options_1aa5c09dc521f691e81ce97975386f2ec2" prot="public" virt="non-virtual"><scope>CGAL::Quadratic_program_options</scope><name>set_auto_validation</name></member>
      <member refid="classCGAL_1_1Quadratic__program__options_1a61bf72e4bd2fb752b4ca7547b1b18fcf" prot="public" virt="non-virtual"><scope>CGAL::Quadratic_program_options</scope><name>set_pricing_strategy</name></member>
      <member refid="classCGAL_1_1Quadratic__program__options_1a0a0ecc2ed94545489855edf860e2aa66" prot="public" virt="non-virtual"><scope>CGAL::Quadratic_program_options</scope><name>set_verbosity</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
