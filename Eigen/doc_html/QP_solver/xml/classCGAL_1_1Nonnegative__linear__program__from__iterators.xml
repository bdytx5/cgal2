<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Nonnegative__linear__program__from__iterators" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Nonnegative_linear_program_from_iterators</compoundname>
    <includes local="no">CGAL/QP_models.h</includes>
    <templateparamlist>
      <param>
        <type>typename A_it</type>
      </param>
      <param>
        <type>typename B_it</type>
      </param>
      <param>
        <type>typename R_it</type>
      </param>
      <param>
        <type>typename C_it</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Nonnegative__linear__program__from__iterators_1aeeb81b5d4d0ba60ecb2c6f20f63977e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Nonnegative_linear_program_from_iterators&lt; A_it, B_it, R_it, C_it &gt;::Nonnegative_linear_program_from_iterators</definition>
        <argsstring>(int n, int m, const A_it &amp;a, const B_it &amp;b, const R_it &amp;r, const C_it &amp;c, const std::iterator_traits&lt; C_it &gt;value_type &amp;c0=0)</argsstring>
        <name>Nonnegative_linear_program_from_iterators</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const A_it &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const B_it &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const R_it &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const C_it &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const std::iterator_traits&lt; C_it &gt;value_type &amp;</type>
          <declname>c0</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>constructs <computeroutput>lp</computeroutput> from given random-access iterators and the constant <computeroutput>c0</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The passed iterators are merely stored, no copying of the program data takes place. How these iterators are supposed to encode the nonnegative linear program is described in <computeroutput><ref refid="classNonnegativeLinearProgram" kindref="compound">NonnegativeLinearProgram</ref></computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/QP_models.h" line="360" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An object of class <computeroutput><ref refid="classCGAL_1_1Nonnegative__linear__program__from__iterators" kindref="compound">Nonnegative_linear_program_from_iterators</ref></computeroutput> describes a linear program of the form. </para>    </briefdescription>
    <detaileddescription>
<para><formula id="2">$ \newcommand{\qprel}{\gtreqless} \newcommand{\qpx}{\mathbf{x}} \newcommand{\qpl}{\mathbf{l}} \newcommand{\qpu}{\mathbf{u}} \newcommand{\qpc}{\mathbf{c}} \newcommand{\qpb}{\mathbf{b}} \newcommand{\qpy}{\mathbf{y}} \newcommand{\qpw}{\mathbf{w}} \newcommand{\qplambda}{\mathbf{\lambda}} $</formula></para><para><formula id="22">\begin{eqnarray*} \mbox{(QP)}&amp; \mbox{minimize} &amp;\qpc^{T}\qpx+c_0 \\ &amp;\mbox{subject to} &amp; A\qpx\qprel \qpb, \\ &amp; &amp; \qpx \geq 0 \end{eqnarray*}</formula> in <formula id="4">$ n$</formula> real variables <formula id="5">$ \qpx=(x_0,\ldots,x_{n-1})$</formula>.</para><para>Here, <itemizedlist>
<listitem>
<para><formula id="6">$ A$</formula> is an <formula id="7">$ m\times n$</formula> matrix (the constraint matrix), </para></listitem>
<listitem>
<para><formula id="8">$ \qpb$</formula> is an <formula id="9">$ m$</formula>-dimensional vector (the right-hand side), </para></listitem>
<listitem>
<para><formula id="10">$ \qprel$</formula> is an <formula id="9">$ m$</formula>-dimensional vector of relations from <formula id="11">$ \{\leq, =, \geq\}$</formula>,</para><para></para></listitem>
<listitem>
<para><formula id="18">$ \qpc$</formula> is an <formula id="4">$ n$</formula>-dimensional vector (the linear objective function), and </para></listitem>
<listitem>
<para><formula id="19">$ c_0$</formula> is a constant.</para><para></para></listitem>
</itemizedlist>
</para><para>This class is simply a wrapper for existing iterators, and it does not copy the program data.</para><para>It frequently happens that all values in one of the vectors from above are the same, for example if the system <formula id="20">$ Ax\qprel b$</formula> is actually a system of equations <formula id="21">$ Ax=b$</formula>. To get an iterator over such a vector, it is not necessary to store multiple copies of the value in some container; an instance of the class <computeroutput><ref refid="classCGAL_1_1Const__oneset__iterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Const_oneset_iterator</ref>&lt;T&gt;</computeroutput>, constructed from the value in question, does the job more efficiently.</para><para><xrefsect id="models_1_models000002"><xreftitle>Is Model Of</xreftitle><xrefdescription><para><computeroutput><ref refid="classQuadraticProgram" kindref="compound">QuadraticProgram</ref></computeroutput> </para><para><computeroutput><ref refid="classLinearProgram" kindref="compound">LinearProgram</ref></computeroutput> </para><para><computeroutput><ref refid="classNonnegativeQuadraticProgram" kindref="compound">NonnegativeQuadraticProgram</ref></computeroutput> </para><para><computeroutput><ref refid="classNonnegativeLinearProgram" kindref="compound">NonnegativeLinearProgram</ref></computeroutput></para></xrefdescription></xrefsect></para><para><heading level="2">Example </heading>
</para><para><ref refid="QP_solver_2first_nonnegative_lp_from_iterators_8cpp-example" kindref="compound">QP_solver/first_nonnegative_lp_from_iterators.cpp</ref></para><para><computeroutput>QP_solver/solve_convex_hull_containment_lp.h</computeroutput></para><para><ref refid="QP_solver_2convex_hull_containment_8cpp-example" kindref="compound">QP_solver/convex_hull_containment.cpp</ref></para><para><simplesect kind="see"><para><computeroutput><ref refid="classNonnegativeLinearProgram" kindref="compound">NonnegativeLinearProgram</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Quadratic__program" kindref="compound">Quadratic_program</ref>&lt;NT&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Quadratic__program__from__mps" kindref="compound">Quadratic_program_from_mps</ref>&lt;NT&gt;</computeroutput> </para></simplesect>
</para>    </detaileddescription>
    <location file="CGAL/QP_models.h" line="348" column="1" bodyfile="CGAL/QP_models.h" bodystart="348" bodyend="370"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Nonnegative__linear__program__from__iterators_1aeeb81b5d4d0ba60ecb2c6f20f63977e2" prot="public" virt="non-virtual"><scope>CGAL::Nonnegative_linear_program_from_iterators</scope><name>Nonnegative_linear_program_from_iterators</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
