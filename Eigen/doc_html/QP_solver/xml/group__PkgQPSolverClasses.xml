<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__PkgQPSolverClasses" kind="group">
    <compoundname>PkgQPSolverClasses</compoundname>
    <title>Classes</title>
    <innerclass refid="classCGAL_1_1Linear__program__from__iterators" prot="public">CGAL::Linear_program_from_iterators</innerclass>
    <innerclass refid="classCGAL_1_1Nonnegative__linear__program__from__iterators" prot="public">CGAL::Nonnegative_linear_program_from_iterators</innerclass>
    <innerclass refid="classCGAL_1_1Nonnegative__quadratic__program__from__iterators" prot="public">CGAL::Nonnegative_quadratic_program_from_iterators</innerclass>
    <innerclass refid="classCGAL_1_1Quadratic__program__from__iterators" prot="public">CGAL::Quadratic_program_from_iterators</innerclass>
    <innerclass refid="classCGAL_1_1Quadratic__program__from__mps" prot="public">CGAL::Quadratic_program_from_mps</innerclass>
    <innerclass refid="classCGAL_1_1Quadratic__program" prot="public">CGAL::Quadratic_program</innerclass>
    <innerclass refid="classCGAL_1_1Quadratic__program__solution" prot="public">CGAL::Quadratic_program_solution</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__PkgQPSolverClasses_1gad1152456fa1f4b03083fea7a83772d63" prot="public" static="no">
        <name>Quadratic_program_status</name>
        <enumvalue id="group__PkgQPSolverClasses_1ggad1152456fa1f4b03083fea7a83772d63a3fce6b9e71ad48e4ab279b465477b76f" prot="public">
          <name>QP_OPTIMAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PkgQPSolverClasses_1ggad1152456fa1f4b03083fea7a83772d63af9badd8cb702468ba406acdcf3b8b95a" prot="public">
          <name>QP_INFEASIBLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PkgQPSolverClasses_1ggad1152456fa1f4b03083fea7a83772d63a914a95af7b2565092343b4f08dbee8d7" prot="public">
          <name>QP_UNBOUNDED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>This is an enumeration type containing the values <computeroutput>QP_OPTIMAL</computeroutput>, <computeroutput>QP_INFEASIBLE</computeroutput>, and <computeroutput>QP_UNBOUNDED</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>It indicates the status of a linear or quadratic program solution as represented by an object of type <computeroutput><ref refid="classCGAL_1_1Quadratic__program__solution" kindref="compound">Quadratic_program_solution</ref>&lt;ET&gt;</computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Quadratic__program__solution" kindref="compound">Quadratic_program_solution</ref>&lt;ET&gt;</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/QP_solution.h" line="601" column="1" bodyfile="CGAL/QP_solution.h" bodystart="601" bodyend="605"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This module provides high and low level classes that allow to construct and represent linear and quadratic programs and their solution. </para>    </briefdescription>
    <detaileddescription>
<para>There is a class that represents the solution of a linear or quadratic program. An instance of this class is returned by any of the solution functions below.</para><para><itemizedlist>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Quadratic__program__solution" kindref="compound">CGAL::Quadratic_program_solution</ref></computeroutput></para></listitem></itemizedlist>
</para><para>We offer a number of predefined models for the above program concepts. The following two are simultaneously models for all four concepts and are probably the most convenient models; they allow you to construct linear or quadratic programs entry by entry, or from streams in <ref refid="classMPSFormat" kindref="compound">MPSFormat</ref>. At any time, you can query these programs for linearity and nonnegativity and thus select the appropriate solution function.</para><para><itemizedlist>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Quadratic__program" kindref="compound">CGAL::Quadratic_program</ref></computeroutput> (for linear and quadratic programs that own their data and are built entry-wise)</para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Quadratic__program__from__mps" kindref="compound">CGAL::Quadratic_program_from_mps</ref></computeroutput> (for linear and quadratic programs read from an input stream in <ref refid="classMPSFormat" kindref="compound">MPSFormat</ref>; the constructed program can also be manipulate entry-wise)</para></listitem></itemizedlist>
</para><para>Then there are specific models for any of the four program concepts above; these are useful if you want to maintain the program data yourself, since they simply wrap random access iterators over the program data and involve no further copying of data.</para><para><itemizedlist>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Quadratic__program__from__iterators" kindref="compound">CGAL::Quadratic_program_from_iterators</ref></computeroutput> (for quadratic programs that wrap given iterators, without copying data)</para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Linear__program__from__iterators" kindref="compound">CGAL::Linear_program_from_iterators</ref></computeroutput> (for linear programs wrapping given iterators)</para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Nonnegative__quadratic__program__from__iterators" kindref="compound">CGAL::Nonnegative_quadratic_program_from_iterators</ref></computeroutput> (for nonnegative quadratic programs, wrapping given iterators)</para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Nonnegative__linear__program__from__iterators" kindref="compound">CGAL::Nonnegative_linear_program_from_iterators</ref></computeroutput> (for nonnegative linear programs, wrapping given iterators) </para></listitem></itemizedlist>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
