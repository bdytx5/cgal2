<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>User Manual</title>
    <detaileddescription>
<para><anchor id="index_1Chapter_2D_Voronoi_Diagram_Adaptor"/><anchor id="index_1chaptervda"/></para><para><simplesect kind="author"><para>Menelaos Karavelas</para></simplesect>
This chapter describes an adaptor that adapts two-dimensional triangulated Delaunay graphs to the corresponding Voronoi diagrams. We start with a few definitions and a description of the issues that this adaptor addresses in Section <ref refid="index_1secvda2intro" kindref="member">Introduction</ref>. The software design of the Voronoi diagram adaptor package is described in Section <ref refid="index_1secvda2design" kindref="member">Software Design</ref>. In Section <ref refid="index_1secvda2traits" kindref="member">The Adaptation Traits</ref> we discuss the traits required for performing the adaptation, and finally in Section <ref refid="index_1secvda2examples" kindref="member">Examples</ref> we present a few examples using this adaptor.</para><sect1 id="index_1secvda2intro">
<title>Introduction</title>
<para>A Voronoi diagram is typically defined for a set of objects, also called sites in the sequel, that lie in some space <formula id="2">$ \Sigma$</formula> and a distance function that measures the distance of a point <formula id="0">$ x$</formula> in <formula id="2">$ \Sigma$</formula> from an object in the object set. In this package we are interested in planar Voronoi diagrams, so in the sequel the space <formula id="2">$ \Sigma$</formula> will be the space <formula id="3">$ \mathbb{R}^2$</formula>. Let <formula id="4">$ \mathcal{S}=\{S_1,S_2,\ldots,S_n\}$</formula> be our set of sites and let <formula id="5">$ \delta(x,S_i)$</formula> denote the distance of a point <formula id="6">$ x\in\mathbb{R}^2$</formula> from the site <formula id="7">$ S_i$</formula>. Given two sites <formula id="7">$ S_i$</formula> and <formula id="8">$ S_j$</formula>, the set <formula id="9">$ V_{ij}$</formula> of points that are closer to <formula id="7">$ S_i$</formula> than to <formula id="8">$ S_j$</formula> with respect to the distance function <formula id="10">$ \delta(x,\cdot)$</formula> is simply the set: <formula id="11">\[ V_{ij} = \{x\in\mathbb{R}^2:\, \delta(x,S_i)&lt;\delta(x,S_j)\}. \]</formula> We can then define the set <formula id="12">$ V_i$</formula> of points on the plane that are closer to <formula id="7">$ S_i$</formula> than to any other object in <formula id="13">$ \mathcal{S}$</formula> as: <formula id="14">\[ V_i = \bigcap_{i\neq j} V_{ij}. \]</formula> The set <formula id="12">$ V_i$</formula> is said to be the <emphasis>Voronoi cell</emphasis> or <emphasis>Voronoi face</emphasis> of the site <formula id="7">$ S_i$</formula>. The locus of points on the plane that are equidistant from exactly two sites <formula id="7">$ S_i$</formula> and <formula id="8">$ S_j$</formula> is called a <emphasis>Voronoi bisector</emphasis>. A point that is equidistant to three or more objects in <formula id="13">$ \mathcal{S}$</formula> is called a <emphasis>Voronoi vertex</emphasis>. A simply connected subset of a Voronoi bisector is called a <emphasis>Voronoi edge</emphasis>. The collection of Voronoi faces, edges and vertices is called the <emphasis>Voronoi diagram</emphasis> of the set <formula id="13">$ \mathcal{S}$</formula> with respect to the distance function <formula id="10">$ \delta(x,\cdot)$</formula>, and it turns out that it is a subdivision of the plane, i.e., it is a planar graph.</para><para>We typically think of faces as 2-dimensional objects, edges as 1-dimensional objects and vertices as 0-dimensional objects. However, this may not be the case for several combinations of sites and distance functions (for example points in <formula id="3">$ \mathbb{R}^2$</formula> under the <formula id="15">$ L_1$</formula> or the <formula id="16">$ L_\infty$</formula> distance can produce 2-dimensional Voronoi edges). We call a Voronoi diagram <emphasis>nice</emphasis> if no such artifacts exist, i.e., if all vertices edges and faces are 0-, 1- and 2-dimensional, respectively.</para><para>Even nice Voronoi diagrams can end up being not so nice. The cell of a site can in general consist of several disconnected components. Such a case can happen, for example, when we consider weighted points <formula id="17">$ Q_i=(p_i,\lambda_i)$</formula>, where <formula id="18">$ p_i\in\mathbb{R}^2$</formula>, <formula id="19">$ \lambda_i\in\mathbb{R}$</formula>, and the distance function is the Euclidean distance multiplied by the weight of each site, i.e., <formula id="20">$ \delta_M(x,Q_i)=\lambda_i\,\|x-p_i\|$</formula>, where <formula id="21">$ \|\cdot\|$</formula> denotes the Euclidean norm. In this package we are going to restrict ourselves to nice Voronoi diagrams that have the property that the Voronoi cell of each site is a simply connected region of the plane. We are going to call such Voronoi diagrams <emphasis>simple Voronoi diagrams</emphasis>. Examples of simple Voronoi diagrams include the usual Euclidean Voronoi diagram of points, the Euclidean Voronoi diagram of a set of disks on the plane (i.e., the Apollonius diagram), the Euclidean Voronoi diagram of a set of disjoint convex objects on the plane, or the power or (Laguerre) diagram for a set of circles on the plane. In fact every instance of an <emphasis>abstract Voronoi diagram</emphasis> in the sense of Klein <ref refid="citelist_1CITEREF_k-cavd-89" kindref="member">[1]</ref> is a simple Voronoi diagram in our setting. In the sequel when we refer to Voronoi diagrams we will refer to simple Voronoi diagrams.</para><para>In many cases we are not really interested in computing the Voronoi diagram itself, but rather its dual graph, called the <emphasis>Delaunay graph</emphasis>. In general the Delaunay graph is a planar graph, each face of which consists of at least three edges. Under the non-degeneracy assumption that no point on the plane is equidistant, under the distance function, to more than three sites, the Delaunay graph is a planar graph with triangular faces. In certain cases this graph can actually be embedded with straight line segments in which case we talk about a triangulation. This is the case, for example, for the Euclidean Voronoi diagram of points, or the power diagram of a set of circles. The dual graphs are, respectively, the Delaunay triangulation and the regular triangulation of the corresponding site sets. Graphs of non-constant non-uniform face complexity can be undesirable in many applications, so typically we end up triangulating the non-triangular faces of the Delaunay graph. Intuitively this amounts to imposing an implicit or explicit perturbation scheme during the construction of the Delaunay graph, that perturbs the input sites in such a way so as not to have degenerate configurations.</para><para>Choosing between computing the Voronoi diagram or the (triangulated) Delaunay graph is a major decision while implementing an algorithm. It heavily affects the design and choice of the different data structures involved. Although in theory the two approaches are entirely equivalent, it is not so straightforward to go from one representation to the other. The objective of this package is to provide a generic way of going from triangulated Delaunay graphs to planar subdivisions represented through a DCEL data structure. The goal is to provide an adaptor that gives the look and feel of a DCEL data structure, although internally it keeps a graph data structure representing triangular graphs.</para><para>The adaptation might seem straightforward at a first glance, and more or less this is case; after all one graph is the dual of the other. The situation becomes complicated whenever we want to treat artifacts of the representation used. Suppose for example that we have a set of sites that contains subsets of sites in degenerate positions. The computed triangulated Delaunay graph has triangular faces that may be the result of an implicit or explicit perturbation scheme. The dual of such a triangulated Delaunay graph is a Voronoi diagram that has all its vertices of degree 3, and for that purpose we are going to call it a <emphasis>degree-3 Voronoi diagram</emphasis> in order to distinguish it from the true Voronoi diagram of the input sites. A degree-3 Voronoi diagram can have degenerate features, namely Voronoi edges of zero length, and/or Voronoi faces of zero area. Although we can potentially treat such artifacts, they are nonetheless artifacts of the algorithm we used and do not correspond to the true geometry of the Voronoi diagram.</para><para>The manner that we treat such issues in this package in a generic way is by defining an <emphasis>adaptation policy</emphasis>. The adaptation policy is responsible for determining which features in the degree-3 Voronoi diagram are to be rejected and which not. The policy to be used can vary depending on the application or the intended usage of the resulting Voronoi diagram. What we care about is that firstly the policy itself is consistent and, secondly, that the adaptation is also done in a consistent manner. The latter is the responsibility of the adaptor provided by this package, whereas the former is the responsibility of the implementor of a policy.</para><para>In this package we currently provide two types of adaptation policies. The first one is the simplest: we reject no feature of the degree-3 Voronoi diagram; we call such a policy an <emphasis>identity policy</emphasis> since the Voronoi diagram produced is identical to the degree-3 Voronoi diagram. The second type of policy eliminates the degenerate features from the degree-3 Voronoi diagram yielding the true geometry of the Voronoi diagram of the input sites; we call such policies <emphasis>degeneracy removal policies</emphasis>.</para><para>Delaunay graphs can be mutable or non-mutable. By mutable we mean that sites can be inserted or removed at any time, in an entirely on-line fashion. By non-mutable we mean that once the Delaunay graph has been created, no changes, with respect to the set of sites defining it, are allowed. If the Delaunay graph is a non-mutable one, then the Voronoi diagram adaptor is a non-mutable adaptor as well.</para><para>If the Delaunay graph is mutable then the question of whether the Voronoi diagram adaptor is also mutable is slightly more complex to answer. As long as the adaptation policy used does not maintain a state, the Voronoi diagram adaptor is a mutable one; this is the case, for example, with our identity policy or the degeneracy removal policies. If, however, the adaptor maintains a state, then whether it is mutable or non-mutable really depends on whether its state can be updated after every change in the Delaunay graph. Such policies are our caching degeneracy removal policies: some of them result in mutable adaptors others result in non-mutable ones. In Section <ref refid="index_1secvda2ap" kindref="member">The Adaptation Policy</ref> we discuss the issue in more detail.</para></sect1>
<sect1 id="index_1secvda2design">
<title>Software Design</title>
<para>The <computeroutput><ref refid="classCGAL_1_1Voronoi__diagram__2" kindref="compound">Voronoi_diagram_2</ref>&lt;DG,AT,AP&gt;</computeroutput> class is parameterized by three template parameters. The first one must be a model of the <computeroutput><ref refid="classDelaunayGraph__2" kindref="compound">DelaunayGraph_2</ref></computeroutput> concept. It corresponds to the API required by an object representing a Delaunay graph. All classes of CGAL that represent Delaunay diagrams are models of this concept, namely, Delaunay triangulations, regular triangulations, Apollonius graphs and segment Delaunay graphs. The second template parameter must be a model of the <computeroutput><ref refid="classAdaptationTraits__2" kindref="compound">AdaptationTraits_2</ref></computeroutput> concept. We discuss this concept in detail in Section <ref refid="index_1secvda2traits" kindref="member">The Adaptation Traits</ref>. The third template parameter must be model of the <computeroutput><ref refid="classAdaptationPolicy__2" kindref="compound">AdaptationPolicy_2</ref></computeroutput> concept, which we discuss in detail in Section <ref refid="index_1secvda2ap" kindref="member">The Adaptation Policy</ref>.</para><para>The <computeroutput><ref refid="classCGAL_1_1Voronoi__diagram__2" kindref="compound">Voronoi_diagram_2</ref>&lt;DG,AT,AP&gt;</computeroutput> class has been intentionally designed to provide an API similar to the arrangements class in CGAL: Voronoi diagrams are special cases of arrangements after all. The API of the two classes, however, could not be identical. The reason is that arrangements in CGAL do not yet support more than one unbounded faces, or equivalently, cannot handle unbounded curves. On the contrary, a Voronoi diagram defined over at least two generating sites, has at least two unbounded faces.</para><para>On a more technical level, the <computeroutput><ref refid="classCGAL_1_1Voronoi__diagram__2" kindref="compound">Voronoi_diagram_2</ref>&lt;DG,AT,AP&gt;</computeroutput> class imitates the representation of the Voronoi diagram (seen as a planar subdivision) by a DCEL (Doubly Connected Edge List) data structure. We have vertices (the Voronoi vertices), halfedges (oriented versions of the Voronoi edges) and faces (the Voronoi cells). In particular, we can basically perform every operation we can perform in a standard DCEL data structure: <itemizedlist>
<listitem>
<para>go from a halfedge to its next and previous in the face; </para></listitem>
<listitem>
<para>go from one face to an adjacent one through a halfedge and its twin (opposite) halfedge; </para></listitem>
<listitem>
<para>walk around the boundary of a face; </para></listitem>
<listitem>
<para>enumerate/traverse the halfedges incident to a vertex </para></listitem>
<listitem>
<para>from a halfedge, access the adjacent face; </para></listitem>
<listitem>
<para>from a face, access an adjacent halfedges; </para></listitem>
<listitem>
<para>from a halfedges, access its source and target vertices; </para></listitem>
<listitem>
<para>from a vertex, access an incident halfedge. </para></listitem>
</itemizedlist>
In addition to the above possibilities for traversal, we can also traverse the following features through iterators: <itemizedlist>
<listitem>
<para>the vertices of the Voronoi diagram; </para></listitem>
<listitem>
<para>the edges or halfedges of the Voronoi diagram; </para></listitem>
<listitem>
<para>the faces of the Voronoi diagram; </para></listitem>
<listitem>
<para>the bounded faces of the Voronoi diagram; </para></listitem>
<listitem>
<para>the bounded halfedges of the Voronoi diagram; </para></listitem>
<listitem>
<para>the unbounded faces of the Voronoi diagram; </para></listitem>
<listitem>
<para>the unbounded halfedges of the Voronoi diagram; </para></listitem>
<listitem>
<para>the sites defining the Voronoi diagram. </para></listitem>
</itemizedlist>
</para><para>Finally, depending on the adaptation traits passed to the Voronoi diagram adaptor, we can perform point location queries, namely given a point <formula id="22">$ p$</formula> we can determine the feature of the Voronoi diagram (vertex, edge, face) on which <formula id="22">$ p$</formula> lies.</para></sect1>
<sect1 id="index_1secvda2traits">
<title>The Adaptation Traits</title>
<para>The <computeroutput><ref refid="classAdaptationTraits__2" kindref="compound">AdaptationTraits_2</ref></computeroutput> concept defines the types and functors required by the adaptor in order to access geometric information in the Delaunay graph that is needed by the <computeroutput><ref refid="classCGAL_1_1Voronoi__diagram__2" kindref="compound">Voronoi_diagram_2</ref>&lt;DG,AT,AP&gt;</computeroutput> class. In particular, it provides functors for accessing sites in the Delaunay graph and constructing Voronoi vertices from their dual faces in the Delaunay graph. Finally, it defines a tag that indicates whether nearest site queries are to be supported by the Voronoi diagram adaptor. If such queries are to be supported, a functor is required.</para><para>Given a query point, the nearest site functor should return information related to how many and which sites of the Voronoi diagram are at equal and minimal distance from the query point. In particular, if the query point is closest to a single site, the vertex handle of the Delaunay graph corresponding to this site is returned. If the query point is closest to exactly two site, the edge of the Delaunay graph that is dual to the Voronoi edges on which the query point lies is returned. If three (or more) sites are closest to the query point, then the query point coincides with a vertex in the Voronoi diagram, and the face handle of the face in the Delaunay graph that is dual to the Voronoi vertex is returned. This way of abstracting the point location mechanism allows for multiple different point location strategies, which are passed to the Voronoi diagram adaptor through different models of the <computeroutput><ref refid="classAdaptationTraits__2" kindref="compound">AdaptationTraits_2</ref></computeroutput> concept. The point location and nearest sites queries of the <computeroutput><ref refid="classCGAL_1_1Voronoi__diagram__2" kindref="compound">Voronoi_diagram_2</ref>&lt;DG,AT,AP&gt;</computeroutput> class use internally this nearest site query functor.</para><para>In this package we provide four adaptation traits classes, all of which support nearest site queries: <itemizedlist>
<listitem>
<para>The <computeroutput><ref refid="structCGAL_1_1Apollonius__graph__adaptation__traits__2" kindref="compound">Apollonius_graph_adaptation_traits_2</ref>&lt;AG2&gt;</computeroutput> class: it provides the adaptation traits for Apollonius graphs. </para></listitem>
<listitem>
<para>The <computeroutput><ref refid="structCGAL_1_1Delaunay__triangulation__adaptation__traits__2" kindref="compound">Delaunay_triangulation_adaptation_traits_2</ref>&lt;DT2&gt;</computeroutput> class: it provides the adaptation traits for Delaunay triangulations. </para></listitem>
<listitem>
<para>The <computeroutput><ref refid="structCGAL_1_1Regular__triangulation__adaptation__traits__2" kindref="compound">Regular_triangulation_adaptation_traits_2</ref>&lt;RT2&gt;</computeroutput> class: it provides the adaptation traits for regular triangulations. </para></listitem>
<listitem>
<para>The <computeroutput><ref refid="structCGAL_1_1Segment__Delaunay__graph__adaptation__traits__2" kindref="compound">Segment_Delaunay_graph_adaptation_traits_2</ref>&lt;SDG2&gt;</computeroutput> class: it provides the adaptation traits for segment Delaunay graphs. </para></listitem>
</itemizedlist>
</para></sect1>
<sect1 id="index_1secvda2ap">
<title>The Adaptation Policy</title>
<para>As mentioned above, when we perform the adaptation of a triangulated Delaunay graph to a Voronoi diagram, a question that arises is whether we want to eliminate certain features of the Delaunay graph when we construct its Voronoi diagram representation (such features could be the Voronoi edges of zero length or, for the Voronoi diagram of a set of segments forming a polygon, all edges outside the polygon). The manner that we treat such issues in this package in a generic way is by defining an adaptation policy. The adaptation policy is responsible for determining which features in the degree-3 Voronoi diagram are to be rejected and which not. The policy to be used can vary depending on the application or the intended usage of the resulting Voronoi diagram.</para><para>The concept <computeroutput><ref refid="classAdaptationPolicy__2" kindref="compound">AdaptationPolicy_2</ref></computeroutput> defines the requirements on the predicate functors that determine whether a feature of the triangulated Delaunay graph should be rejected or not. More specifically it defines an <computeroutput>Edge_rejector</computeroutput> and a <computeroutput>Face_rejector</computeroutput> functor that answer the question: &quot;Should this
edge (face) of the Voronoi diagram be rejected?&quot;. In addition to the edge and face rejectors the adaptation policy defines a tag, the <computeroutput>Has_inserter</computeroutput> tag. This tag is either set to <ref refid="group__PkgStlExtensionUtilities_1gab3e2296107b5d26c32c8183028a217f1" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag"><computeroutput>CGAL::Tag_true</computeroutput></ref> or to <ref refid="group__PkgStlExtensionUtilities_1ga89d5ecf1540b2ec0a2bf5dd003e186d0" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag"><computeroutput>CGAL::Tag_false</computeroutput></ref>. Semantically it determines if the adaptor is allowed to insert sites in an on-line fashion (on-line removals are not yet supported). In the former case, i.e., when on-line site insertions are allowed, an additional functor is required, the <computeroutput>Site_inserter</computeroutput> functor. This functor takes a reference to a Delaunay graph and a site, and inserts the site in the Delaunay graph. Upon successful insertion, a handle to the vertex representing the site in the Delaunay graph is returned.</para><para>We have implemented two types of policies that provide two different ways for answering the question of which features of the Voronoi diagram to keep and which to discard. The first one is called the <emphasis>identity policy</emphasis> and corresponds to the <computeroutput><ref refid="structCGAL_1_1Identity__policy__2" kindref="compound">Identity_policy_2</ref>&lt;DG,VT&gt;</computeroutput> class. This policy is in some sense the simplest possible one, since it does not reject any feature of the Delaunay graph. The Voronoi diagram provided by the adaptor is the true dual (from the graph-theoretical point of view) of the triangulated Delaunay graph adapted. This policy assumes that the Delaunay graph adapted allows for on-line insertions, and the <computeroutput>Has_inserter</computeroutput> tag is set to <computeroutput>Tag_true</computeroutput>. A default site inserter functor is also provided.</para><para>The second type of policy we provide is called <emphasis>degeneracy removal policy</emphasis>. If the set of sites defining the triangulated Delaunay graph contains subsets of sites in degenerate configurations, the graph-theoretical dual of the triangulated Delaunay graph has edges and potentially faces that are geometrically degenerate. By that we mean that the dual of the triangulated Delaunay graph can have Voronoi edges of zero length or Voronoi faces/cells of zero area. Such features may not be desirable and ideally we would like to eliminate them. The degeneracy removal policies eliminate exactly these features and provide a Voronoi diagram where all edges have non-zero length and all cells have non-zero area. More specifically, in these policies the <computeroutput>Edge_rejector</computeroutput> and <computeroutput>Face_rejector</computeroutput> functors reject the edges and vertices of the Delaunay graph that correspond to dual edges and faces that have zero length and area, respectively. In this package we provide four degeneracy removal policies, namely: <itemizedlist>
<listitem>
<para>The <computeroutput><ref refid="structCGAL_1_1Apollonius__graph__degeneracy__removal__policy__2" kindref="compound">Apollonius_graph_degeneracy_removal_policy_2</ref>&lt;AG2&gt;</computeroutput> class: it provides an adaptation policy for removing degeneracies when adapting an Apollonius graph to an Apollonius diagram. </para></listitem>
<listitem>
<para>The <computeroutput><ref refid="structCGAL_1_1Delaunay__triangulation__degeneracy__removal__policy__2" kindref="compound">Delaunay_triangulation_degeneracy_removal_policy_2</ref>&lt;DT2&gt;</computeroutput> class: it provides an adaptation policy for removing degeneracies when adapting a Delaunay triangulation to a point Voronoi diagram. </para></listitem>
<listitem>
<para>The <computeroutput><ref refid="structCGAL_1_1Regular__triangulation__degeneracy__removal__policy__2" kindref="compound">Regular_triangulation_degeneracy_removal_policy_2</ref>&lt;RT2&gt;</computeroutput> class: it provides an adaptation policy for removing degeneracies when adapting a regular triangulation to a power diagram</para><para></para></listitem>
<listitem>
<para>The <computeroutput><ref refid="structCGAL_1_1Segment__Delaunay__graph__degeneracy__removal__policy__2" kindref="compound">Segment_Delaunay_graph_degeneracy_removal_policy_2</ref>&lt;SDG2&gt;</computeroutput> class: it provides an adaptation policy for removing degeneracies when adapting a segment Delaunay graph to a segment Voronoi diagram. </para></listitem>
</itemizedlist>
</para><para>A variation of the degeneracy removal policies are the <emphasis>caching degeneracy removal policies</emphasis>. In these policies we cache the results of the edge and face rejectors. In particular, every time we want to determine, for example, if an edge of the Delaunay graph has, as dual edge in the Voronoi diagram, an edge of zero length, we check if the result has already been computed. If yes, we simply return the outcome. If not, we perform the necessary geometric tests, compute the answer, cache it and return it. Such a policy really pays off when we have a lot of degenerate data in our input set of sites. Verifying whether a Voronoi edge is degenerate or not implies computing the outcome of a predicate in a possibly degenerate or near degenerate configuration, which is typically very costly (compared to computing the same predicate in a generic configuration). To avoid this cost every single time we want to check if a Voronoi edge is degenerate or not, we compute the result of the geometric predicate the first time the adaptor asks for it, and simply lookup the answer in the future. In this package we provide four caching degeneracy removal policies, one per degeneracy removal policy mentioned above. Intentionally, we have not indicated the value of the <computeroutput>Has_inserter</computeroutput> tag for the degeneracy removal and caching degeneracy removal policies. The issue is discussed in detail in the sequel.</para><para>We raised the question above, as to whether the adaptor is a mutable or non-mutable one, in the sense of whether we can add/remove sites in an on-line fashion. The answer to this question depends on: (1) whether the Delaunay graph adapted allows for on-line insertions/removals and (2) whether the adaptation policies maintains a state and whether this state is easily maintainable when we want to allow for on-line modifications.</para><para>The way we indicate if we allow on-line insertions of sites is via the <computeroutput>Has_inserter</computeroutput> tag (as mentioned, on-line removals are currently not supported). The <computeroutput>Has_inserter</computeroutput> tag has two possible values, namely, <computeroutput>Tag_true</computeroutput> and <computeroutput>Tag_false</computeroutput>. The value <computeroutput>Tag_true</computeroutput> indicates that the Delaunay graph allows for on-line insertions, whereas the value <computeroutput>Tag_false</computeroutput> indicates the opposite. Note that these values <emphasis>do not</emphasis> indicate if the Delaunay graph supports on-line insertions, but rather whether the Voronoi diagram adaptor should be able to perform on-line insertions or not. This delicate point will be become clearer below.</para><para>Let us consider the various scenarios. If the Delaunay graph is non-mutable, the Voronoi diagram adaptor cannot perform on-line insertions of sites. In this case not only degeneracy removal policies, but rather every single adaptation policy for adapting the Delaunay graph in question should have the <computeroutput>Has_inserter</computeroutput> tag set to <computeroutput>Tag_false</computeroutput>.</para><para>If the Delaunay graph is mutable, i.e., on-line site insertions as are allowed, we can choose between two types of adaptation policies, those that allow these on-line insertions and those that do not. In the former case the <computeroutput>Has_inserter</computeroutput> tag should be set to <computeroutput>Tag_true</computeroutput>, whereas in the latter to <computeroutput>Tag_false</computeroutput>. In other words, even if the Delaunay graph is mutable, we can choose (by properly determining the value of the <computeroutput>Has_inserter</computeroutput> tag) if the adaptor should be mutable as well. At a first glance it may seem excessive to restrict existing functionality. There are situations, however, where such a choice is necessary.</para><para>Consider a caching degeneracy removal policy. If we do not allow for on-line insertions then the cached quantities are always valid since the Voronoi diagram never changes. If we allow for on-line insertions the Voronoi diagram can change, which implies that the results of the edge and faces degeneracy testers that we have cached are no longer valid or relevant. In these cases, we need to somehow update these cached results, and ideally we would like to do this in an efficient manner. The inherent dilemma in the above discussion is whether the Voronoi diagram adaptor should be able to perform on-line insertions of sites. The answer to this question in this framework is given by the <computeroutput>Has_inserter</computeroutput> tag. If the tag is set to <computeroutput>Tag_false</computeroutput> the adaptor cannot insert sites on-line, whereas if the tag is set to <computeroutput>Tag_true</computeroutput> the adaptor can add sites on-line. In other words, the <computeroutput>Has_inserter</computeroutput> tag determines how the Voronoi diagram adaptor should behave, and this is enough from the adaptor&apos;s point of view.</para><para>From the point of a view of a policy writer the dilemma is still there: &quot;Should the policy allow for on-line insertions or not?&quot; The answer really depends on what are the consequences of such a choice. For a policy that has no state, such as our degeneracy removal policies, it is natural to set the <computeroutput>Has_inserter</computeroutput> tag to <computeroutput>Tag_true</computeroutput>. For our caching degeneracy removal policies, our choice was made on the grounds of whether we can update the cached results efficiently when insertions are performed. For CGAL&apos;s Apollonius graphs, Delaunay triangulation and regular triangulations it is possible to ask what are the edges and faces of the Delaunay graph that are to be destroyed when a query site is inserted. This is done via the <computeroutput>get_conflicts</computeroutput> method provided by these classes. Using the outcome of the <computeroutput>get_conflicts</computeroutput> method the site inserter can first update the cached results (i.e., indicate which are invalidated) and then perform the actual insertion. Such a method does not yet exist for segment Delaunay graphs. We have thus chosen to support on-line insertions for all non-caching degeneracy removal policies. The caching degeneracy removal policy for segment Delaunay graphs does not support on-line insertions, whereas the remaining three caching degeneracy removal policies support on-line insertions.</para><sect2 id="index_1subsecvda2efficiency">
<title>Efficiency Considerations</title>
<para>One last item that merits some discussion are the different choices from the point of view of time- and space-efficiency.</para><para>As far as the Voronoi diagram adaptor is concerned, only a copy of the adaptation traits and a copy of the adaptation policy are stored in it. The various adaptation traits classes we provide are empty classes (i.e., they do not store anything). The major time and space efficiency issues arise from the various implementations of the adaptation policies. Clearly, the identity policy has no dominant effect on neither the time or space efficiency. The costs when choosing this policy are due to the underlying Delaunay graph.</para><para>The non-caching degeneracy removal policies create a significant time overhead since every time we want to access a feature of the Voronoi diagram, we need to perform geometric tests in order to see if this feature or one of its neighboring ones has been rejected. Such a policy is acceptable if we know we are away from degeneracies or for small input sizes. In the case of the segment Delaunay graph, it is also the only policy we provide that at the same time removes degeneracies and allows for on-line insertion of sites. Caching policies seem to be the best choice for moderate to large input sizes (1000 sites and more). They do not suffer from the problem of dealing with degenerate configurations, but since they cache the results, they increase the space requirements by linear additive factor. To conclude, if the user is interested in getting a Voronoi diagram without degenerate features and knows all sites in advance, the best course of action is to insert all sites at construction time and use a caching degeneracy removal policy. This strategy avoids the updates of the cached results after each individual insertion, due to the features of the Voronoi diagram destroyed because of the site inserted.</para></sect2>
</sect1>
<sect1 id="index_1secvda2examples">
<title>Examples</title>
<para>In this section we present an example that shows how to perform point location queries.</para><para><linebreak/>
<bold>File</bold> <ref refid="Voronoi_diagram_2_2vd_2_point_location_8cpp-example" kindref="compound">Voronoi_diagram_2/vd_2_point_location.cpp</ref> <programlisting><codeline><highlight class="comment">//<sp/>standard<sp/>includes</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>includes<sp/>for<sp/>defining<sp/>the<sp/>Voronoi<sp/>diagram<sp/>adaptor</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_inexact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Delaunay_triangulation_2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Voronoi_diagram_2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Delaunay_triangulation_adaptation_traits_2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Delaunay_triangulation_adaptation_policies_2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>typedefs<sp/>for<sp/>defining<sp/>the<sp/>adaptor</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Exact_predicates_inexact_constructions_kernel</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Delaunay__triangulation__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_2.tag">CGAL::Delaunay_triangulation_2&lt;K&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Delaunay__triangulation__adaptation__traits__2" kindref="compound">CGAL::Delaunay_triangulation_adaptation_traits_2&lt;DT&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AT;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Delaunay__triangulation__caching__degeneracy__removal__policy__2" kindref="compound">CGAL::Delaunay_triangulation_caching_degeneracy_removal_policy_2&lt;DT&gt;</ref><sp/>AP;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Voronoi__diagram__2" kindref="compound">CGAL::Voronoi_diagram_2&lt;DT,AT,AP&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VD;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>typedef<sp/>for<sp/>the<sp/>result<sp/>type<sp/>of<sp/>the<sp/>point<sp/>location</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>AT::Site_2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Site_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>AT::Point_2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VD::Locate_result<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Locate_result;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VD::Vertex_handle<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vertex_handle;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VD::Face_handle<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Face_handle;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VD::Halfedge_handle<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Halfedge_handle;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VD::Ccb_halfedge_circulator<sp/><sp/><sp/>Ccb_halfedge_circulator;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print_endpoint(Halfedge_handle<sp/>e,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_src)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>is_src<sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>e-&gt;has_source()<sp/>)<sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>e-&gt;source()-&gt;point()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;point<sp/>at<sp/>infinity&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>e-&gt;has_target()<sp/>)<sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>e-&gt;target()-&gt;point()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;point<sp/>at<sp/>infinity&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::ifstream<sp/>ifs(</highlight><highlight class="stringliteral">&quot;data/data1.dt.cin&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>assert(<sp/>ifs<sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>VD<sp/>vd;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Site_2<sp/>t;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>ifs<sp/>&gt;&gt;<sp/>t<sp/>)<sp/>{<sp/>vd.insert(t);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ifs.close();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>assert(<sp/>vd.is_valid()<sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::ifstream<sp/>ifq(</highlight><highlight class="stringliteral">&quot;data/queries1.dt.cin&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>assert(<sp/>ifq<sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Point_2<sp/>p;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>ifq<sp/>&gt;&gt;<sp/>p<sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Query<sp/>point<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>p.x()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>p.y()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>lies<sp/>on<sp/>a<sp/>Voronoi<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::flush;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Locate_result<sp/>lr<sp/>=<sp/>vd.locate(p);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>Vertex_handle*<sp/>v<sp/>=<sp/>boost::get&lt;Vertex_handle&gt;(&amp;lr)<sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;vertex.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>Voronoi<sp/>vertex<sp/>is:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(*v)-&gt;point()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>Halfedge_handle*<sp/>e<sp/>=<sp/>boost::get&lt;Halfedge_handle&gt;(&amp;lr)<sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;edge.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>source<sp/>and<sp/>target<sp/>vertices<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;of<sp/>the<sp/>Voronoi<sp/>edge<sp/>are:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>print_endpoint(*e,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>print_endpoint(*e,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>Face_handle*<sp/>f<sp/>=<sp/>boost::get&lt;Face_handle&gt;(&amp;lr)<sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;face.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>vertices<sp/>of<sp/>the<sp/>Voronoi<sp/>face<sp/>are&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(in<sp/>counterclockwise<sp/>order):&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Ccb_halfedge_circulator<sp/>ec_start<sp/>=<sp/>(*f)-&gt;ccb();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Ccb_halfedge_circulator<sp/>ec<sp/>=<sp/>ec_start;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print_endpoint(ec,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>++ec<sp/>!=<sp/>ec_start<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ifq.close();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
