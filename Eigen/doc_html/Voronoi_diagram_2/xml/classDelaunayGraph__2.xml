<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classDelaunayGraph__2" kind="class" language="C++" prot="public">
    <compoundname>DelaunayGraph_2</compoundname>
    <includes local="no">Concepts/DelaunayGraph_2.h</includes>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classDelaunayGraph__2_1ac67253369a829ab90fea5914082bf0e7" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type DelaunayGraph_2::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <briefdescription>
<para>A type for sizes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="44" column="1" bodyfile="Concepts/DelaunayGraph_2.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classDelaunayGraph__2_1a1a25e5eed3d797c2569ef661d00a19d2" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type DelaunayGraph_2::Geom_traits</definition>
        <argsstring></argsstring>
        <name>Geom_traits</name>
        <briefdescription>
<para>A type for the geometric traits associated with the Delaunay graph. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="50" column="1" bodyfile="Concepts/DelaunayGraph_2.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classDelaunayGraph__2_1a2dce4ed97b5a03fc3672bed22b3e0b38" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type DelaunayGraph_2::Triangulation_data_structure</definition>
        <argsstring></argsstring>
        <name>Triangulation_data_structure</name>
        <briefdescription>
<para>A type for the underlying triangulation data structure. </para>        </briefdescription>
        <detaileddescription>
<para>It must be a model of the concept <computeroutput>TriangulationDataStructure_2.</computeroutput> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="57" column="1" bodyfile="Concepts/DelaunayGraph_2.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classDelaunayGraph__2_1a72b870f34a0e513c62b96c21da76bbea" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type DelaunayGraph_2::Vertex</definition>
        <argsstring></argsstring>
        <name>Vertex</name>
        <briefdescription>
<para>A type for the vertices of the Delaunay graph. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="62" column="1" bodyfile="Concepts/DelaunayGraph_2.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classDelaunayGraph__2_1af0cccae8a709d7779048de9c4c001d79" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type DelaunayGraph_2::Face</definition>
        <argsstring></argsstring>
        <name>Face</name>
        <briefdescription>
<para>A type for the faces of the Delaunay graph. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="67" column="1" bodyfile="Concepts/DelaunayGraph_2.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classDelaunayGraph__2_1a4d376f8a57547f6ce750371fdac5beec" prot="public" static="no">
        <type>std::pair&lt; <ref refid="classDelaunayGraph__2_1a27c7951cfa33bf04908ceae0a12ee47e" kindref="member">Face_handle</ref>, int &gt;</type>
        <definition>typedef std::pair&lt;Face_handle,int&gt; DelaunayGraph_2::Edge</definition>
        <argsstring></argsstring>
        <name>Edge</name>
        <briefdescription>
<para>The type of the edges of the Delaunay graph. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="73" column="1" bodyfile="Concepts/DelaunayGraph_2.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classDelaunayGraph__2_1aa04684a7eeba987a838775d81adfa9ca" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type DelaunayGraph_2::Vertex_handle</definition>
        <argsstring></argsstring>
        <name>Vertex_handle</name>
        <briefdescription>
<para><ref refid="classHandle" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circulator.tag">Handle</ref> to the vertices of the Delaunay graph. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="78" column="1" bodyfile="Concepts/DelaunayGraph_2.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classDelaunayGraph__2_1a27c7951cfa33bf04908ceae0a12ee47e" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type DelaunayGraph_2::Face_handle</definition>
        <argsstring></argsstring>
        <name>Face_handle</name>
        <briefdescription>
<para><ref refid="classHandle" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circulator.tag">Handle</ref> to the faces of the Delaunay graph. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="83" column="1" bodyfile="Concepts/DelaunayGraph_2.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <description><para>The following iterators and circulators must be defined.</para><para>All iterators and circulators must be assignable and convertible to their corresponding handles. </para></description>
      <memberdef kind="typedef" id="classDelaunayGraph__2_1a392afc04716bc72ef6c63a4e9503daf2" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type DelaunayGraph_2::All_edges_iterator</definition>
        <argsstring></argsstring>
        <name>All_edges_iterator</name>
        <briefdescription>
<para>A type for an iterator over all edges of the Delaunay graph. </para>        </briefdescription>
        <detaileddescription>
<para>Its value type must be <computeroutput>Edge</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="97" column="1" bodyfile="Concepts/DelaunayGraph_2.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classDelaunayGraph__2_1a3c5c49913de35b936e53ce9758ce2c10" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type DelaunayGraph_2::Finite_edges_iterator</definition>
        <argsstring></argsstring>
        <name>Finite_edges_iterator</name>
        <briefdescription>
<para>A type for an iterator over the finite edges of the Delaunay graph. </para>        </briefdescription>
        <detaileddescription>
<para>Its value type must be <computeroutput>Edge</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="103" column="1" bodyfile="Concepts/DelaunayGraph_2.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classDelaunayGraph__2_1af3ca989e9a8f170221a59374086b00be" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type DelaunayGraph_2::All_faces_iterator</definition>
        <argsstring></argsstring>
        <name>All_faces_iterator</name>
        <briefdescription>
<para>A type for an iterator over all faces of the Delaunay graph. </para>        </briefdescription>
        <detaileddescription>
<para>Its value type must be <computeroutput>Face</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="109" column="1" bodyfile="Concepts/DelaunayGraph_2.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classDelaunayGraph__2_1a99ef8c5acd65d99c9fea255797e64431" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type DelaunayGraph_2::Finite_faces_iterator</definition>
        <argsstring></argsstring>
        <name>Finite_faces_iterator</name>
        <briefdescription>
<para>A type for an iterator over the finite faces of the Delaunay graph. </para>        </briefdescription>
        <detaileddescription>
<para>Its value type must be <computeroutput>Face</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="115" column="1" bodyfile="Concepts/DelaunayGraph_2.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classDelaunayGraph__2_1a3249adf4dfae40053e3e94e22678bba0" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type DelaunayGraph_2::All_vertices_iterator</definition>
        <argsstring></argsstring>
        <name>All_vertices_iterator</name>
        <briefdescription>
<para>A type for an iterator over all vertices of the Delaunay graph. </para>        </briefdescription>
        <detaileddescription>
<para>Its value type must be <computeroutput>Vertex</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="121" column="1" bodyfile="Concepts/DelaunayGraph_2.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classDelaunayGraph__2_1a6a5a812bf657fc40924e1f420acb0787" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type DelaunayGraph_2::Finite_vertices_iterator</definition>
        <argsstring></argsstring>
        <name>Finite_vertices_iterator</name>
        <briefdescription>
<para>A type for an iterator over the finite vertices of the Delaunay graph. </para>        </briefdescription>
        <detaileddescription>
<para>Its value type must be <computeroutput>Vertex</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="128" column="1" bodyfile="Concepts/DelaunayGraph_2.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classDelaunayGraph__2_1a1653a1b8fb804b82c699c4650fe1b587" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type DelaunayGraph_2::Face_circulator</definition>
        <argsstring></argsstring>
        <name>Face_circulator</name>
        <briefdescription>
<para>A type for a circulator over the adjacent faces of a vertex of the Delaunay graph. </para>        </briefdescription>
        <detaileddescription>
<para>Its value type must be <computeroutput>Face</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="135" column="1" bodyfile="Concepts/DelaunayGraph_2.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classDelaunayGraph__2_1ad11902c12686bc53e334ba09d9ad740f" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type DelaunayGraph_2::Vertex_circulator</definition>
        <argsstring></argsstring>
        <name>Vertex_circulator</name>
        <briefdescription>
<para>A type for a circulator over the adjacent vertices of a vertex of the Delaunay graph. </para>        </briefdescription>
        <detaileddescription>
<para>Its value type must be <computeroutput>Vertex</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="142" column="1" bodyfile="Concepts/DelaunayGraph_2.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classDelaunayGraph__2_1a81f9201a658144b02004d66eab1eb2f2" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type DelaunayGraph_2::Edge_circulator</definition>
        <argsstring></argsstring>
        <name>Edge_circulator</name>
        <briefdescription>
<para>A type for a circulator over the adjacent edges of a vertex of the Delaunay graph. </para>        </briefdescription>
        <detaileddescription>
<para>Its value type must be <computeroutput>Edge</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="149" column="1" bodyfile="Concepts/DelaunayGraph_2.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <description><para>In addition to the default and copy constructors, as well as the assignment operator, the following constructors are required. </para></description>
      <memberdef kind="function" id="classDelaunayGraph__2_1a9c0629a6dd595f81a0e326f70826ae3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DelaunayGraph_2::DelaunayGraph_2</definition>
        <argsstring>(Geom_traits gt)</argsstring>
        <name>DelaunayGraph_2</name>
        <param>
          <type><ref refid="classDelaunayGraph__2_1a1a25e5eed3d797c2569ef661d00a19d2" kindref="member">Geom_traits</ref></type>
          <declname>gt</declname>
        </param>
        <briefdescription>
<para>Constructor that takes an instance of the geometric traits. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classDelaunayGraph__2_1a4a0543f2bd800920eaeb0dcb3266759b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class It</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>DelaunayGraph_2::DelaunayGraph_2</definition>
        <argsstring>(It first, It beyond)</argsstring>
        <name>DelaunayGraph_2</name>
        <param>
          <type>It</type>
          <declname>first</declname>
        </param>
        <param>
          <type>It</type>
          <declname>beyond</declname>
        </param>
        <briefdescription>
<para>Constructor that takes an iterator range. </para>        </briefdescription>
        <detaileddescription>
<para>The value type of the iterator must be the type of the sites of the Delaunay graph. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="167" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classDelaunayGraph__2_1a8129a51f60e247f1e1e9ffb324151f7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class It</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>DelaunayGraph_2::DelaunayGraph_2</definition>
        <argsstring>(It first, It beyond, Geom_traits gt)</argsstring>
        <name>DelaunayGraph_2</name>
        <param>
          <type>It</type>
          <declname>first</declname>
        </param>
        <param>
          <type>It</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type><ref refid="classDelaunayGraph__2_1a1a25e5eed3d797c2569ef661d00a19d2" kindref="member">Geom_traits</ref></type>
          <declname>gt</declname>
        </param>
        <briefdescription>
<para>Constructor that takes an iterator range and an instance of the geometric traits. </para>        </briefdescription>
        <detaileddescription>
<para>The value type of the iterator must be the type of the sites of the Delaunay graph. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="174" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Access methods</header>
      <memberdef kind="function" id="classDelaunayGraph__2_1a4650c5c9a91ff14557b2947787f3f3a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classDelaunayGraph__2_1a2dce4ed97b5a03fc3672bed22b3e0b38" kindref="member">Triangulation_data_structure</ref></type>
        <definition>Triangulation_data_structure DelaunayGraph_2::tds</definition>
        <argsstring>()</argsstring>
        <name>tds</name>
        <briefdescription>
<para>Returns a reference to the underlying triangulation data structure. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classDelaunayGraph__2_1aae86a3fadc02a1233a487207113b7355" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classDelaunayGraph__2_1a1a25e5eed3d797c2569ef661d00a19d2" kindref="member">Geom_traits</ref></type>
        <definition>Geom_traits DelaunayGraph_2::geom_traits</definition>
        <argsstring>()</argsstring>
        <name>geom_traits</name>
        <briefdescription>
<para>Returns a reference to the geometric traits object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="190" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classDelaunayGraph__2_1abfebb82f37a82e51ae60cb3cf416d09a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classDelaunayGraph__2_1aa04684a7eeba987a838775d81adfa9ca" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle DelaunayGraph_2::infinite_vertex</definition>
        <argsstring>()</argsstring>
        <name>infinite_vertex</name>
        <briefdescription>
<para>Returns a handle to the infinite vertex. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="195" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classDelaunayGraph__2_1a6cc836a9fd97295ad654ef12620aaaa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classDelaunayGraph__2_1aa04684a7eeba987a838775d81adfa9ca" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle DelaunayGraph_2::finite_vertex</definition>
        <argsstring>()</argsstring>
        <name>finite_vertex</name>
        <briefdescription>
<para>Returns a handle to a finite vertex, provided there exists one. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="200" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classDelaunayGraph__2_1a14cc7ce64de1285610323da921f5f03d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classDelaunayGraph__2_1a27c7951cfa33bf04908ceae0a12ee47e" kindref="member">Face_handle</ref></type>
        <definition>Face_handle DelaunayGraph_2::infinite_face</definition>
        <argsstring>()</argsstring>
        <name>infinite_face</name>
        <briefdescription>
<para>Returns a handle to a face incident to the infinite vertex. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="205" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classDelaunayGraph__2_1a8c564a5a534b09d2aa62e6b1939e6012" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int DelaunayGraph_2::dimension</definition>
        <argsstring>()</argsstring>
        <name>dimension</name>
        <briefdescription>
<para>Returns the dimension of the Delaunay graph. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="210" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classDelaunayGraph__2_1a8784f8b23e7e686069263c3756a4de90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classDelaunayGraph__2_1ac67253369a829ab90fea5914082bf0e7" kindref="member">size_type</ref></type>
        <definition>size_type DelaunayGraph_2::number_of_vertices</definition>
        <argsstring>()</argsstring>
        <name>number_of_vertices</name>
        <briefdescription>
<para>Returns the number of finite vertices. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="215" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classDelaunayGraph__2_1a001f2d367c070b9103de9a6b30fec480" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classDelaunayGraph__2_1ac67253369a829ab90fea5914082bf0e7" kindref="member">size_type</ref></type>
        <definition>size_type DelaunayGraph_2::number_of_faces</definition>
        <argsstring>()</argsstring>
        <name>number_of_faces</name>
        <briefdescription>
<para>Returns the number of faces (both finite and infinite). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="220" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Finite Face, Edge and Vertex Iterators</header>
      <description><para>The following iterators must allow, respectively, to visit finite faces, finite edges and finite vertices of the Delaunay graph.</para><para>These iterators must be non-mutable, bidirectional and their value types are respectively <computeroutput>Face</computeroutput>, <computeroutput>Edge</computeroutput> and <computeroutput>Vertex</computeroutput>. </para></description>
      <memberdef kind="function" id="classDelaunayGraph__2_1a0dfeb67f7be2da85862ece3dc46e3759" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classDelaunayGraph__2_1a6a5a812bf657fc40924e1f420acb0787" kindref="member">Finite_vertices_iterator</ref></type>
        <definition>Finite_vertices_iterator DelaunayGraph_2::finite_vertices_begin</definition>
        <argsstring>()</argsstring>
        <name>finite_vertices_begin</name>
        <briefdescription>
<para>Starts at an arbitrary finite vertex. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="234" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classDelaunayGraph__2_1a71ade85192f0191d54f1c0b0a267d9fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classDelaunayGraph__2_1a6a5a812bf657fc40924e1f420acb0787" kindref="member">Finite_vertices_iterator</ref></type>
        <definition>Finite_vertices_iterator DelaunayGraph_2::finite_vertices_end</definition>
        <argsstring>()</argsstring>
        <name>finite_vertices_end</name>
        <briefdescription>
<para>Past-the-end iterator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="239" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classDelaunayGraph__2_1ac0ddf4c3dcb51a24d50e1c0f5f2157e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classDelaunayGraph__2_1a3c5c49913de35b936e53ce9758ce2c10" kindref="member">Finite_edges_iterator</ref></type>
        <definition>Finite_edges_iterator DelaunayGraph_2::finite_edges_begin</definition>
        <argsstring>()</argsstring>
        <name>finite_edges_begin</name>
        <briefdescription>
<para>Starts at an arbitrary finite edge. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="244" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classDelaunayGraph__2_1ac1eb795cbdb77a121cd364452e096284" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classDelaunayGraph__2_1a3c5c49913de35b936e53ce9758ce2c10" kindref="member">Finite_edges_iterator</ref></type>
        <definition>Finite_edges_iterator DelaunayGraph_2::finite_edges_end</definition>
        <argsstring>()</argsstring>
        <name>finite_edges_end</name>
        <briefdescription>
<para>Past-the-end iterator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="249" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classDelaunayGraph__2_1a8754286ab8e11524086676e7fb3e786f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classDelaunayGraph__2_1a99ef8c5acd65d99c9fea255797e64431" kindref="member">Finite_faces_iterator</ref></type>
        <definition>Finite_faces_iterator DelaunayGraph_2::finite_faces_begin</definition>
        <argsstring>()</argsstring>
        <name>finite_faces_begin</name>
        <briefdescription>
<para>Starts at an arbitrary finite face. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="254" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classDelaunayGraph__2_1ab80b6e2e95842c8c1cf71931887dc8ed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classDelaunayGraph__2_1a99ef8c5acd65d99c9fea255797e64431" kindref="member">Finite_faces_iterator</ref></type>
        <definition>Finite_faces_iterator DelaunayGraph_2::finite_faces_end</definition>
        <argsstring>() const</argsstring>
        <name>finite_faces_end</name>
        <briefdescription>
<para>Past-the-end iterator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="259" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>All Face, Edge and Vertex Iterators</header>
      <description><para>The following iterators must allow, respectively, to visit all (both finite and infinite) faces, edges and vertices of the Delaunay graph.</para><para>These iterators are non-mutable, bidirectional and their value types are respectively <computeroutput>Face</computeroutput>, <computeroutput>Edge</computeroutput> and <computeroutput>Vertex</computeroutput>. </para></description>
      <memberdef kind="function" id="classDelaunayGraph__2_1abde432f2e1fde4a907e6bad6a544675d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classDelaunayGraph__2_1a3249adf4dfae40053e3e94e22678bba0" kindref="member">All_vertices_iterator</ref></type>
        <definition>All_vertices_iterator DelaunayGraph_2::all_vertices_begin</definition>
        <argsstring>()</argsstring>
        <name>all_vertices_begin</name>
        <briefdescription>
<para>Starts at an arbitrary vertex. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="274" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classDelaunayGraph__2_1a0961532d6d526b92b0bdbb429e4b5888" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classDelaunayGraph__2_1a3249adf4dfae40053e3e94e22678bba0" kindref="member">All_vertices_iterator</ref></type>
        <definition>All_vertices_iterator DelaunayGraph_2::all_vertices_end</definition>
        <argsstring>()</argsstring>
        <name>all_vertices_end</name>
        <briefdescription>
<para>Past-the-end iterator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="279" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classDelaunayGraph__2_1a5d64923ea61191297dd33c019c8013e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classDelaunayGraph__2_1a392afc04716bc72ef6c63a4e9503daf2" kindref="member">All_edges_iterator</ref></type>
        <definition>All_edges_iterator DelaunayGraph_2::all_edges_begin</definition>
        <argsstring>()</argsstring>
        <name>all_edges_begin</name>
        <briefdescription>
<para>Starts at an arbitrary edge. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="284" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classDelaunayGraph__2_1a116c105bd8235978dfa690a411fb21bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classDelaunayGraph__2_1a392afc04716bc72ef6c63a4e9503daf2" kindref="member">All_edges_iterator</ref></type>
        <definition>All_edges_iterator DelaunayGraph_2::all_edges_end</definition>
        <argsstring>()</argsstring>
        <name>all_edges_end</name>
        <briefdescription>
<para>Past-the-end iterator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="289" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classDelaunayGraph__2_1ab0338618bc3a6850862c44a39039218c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classDelaunayGraph__2_1af3ca989e9a8f170221a59374086b00be" kindref="member">All_faces_iterator</ref></type>
        <definition>All_faces_iterator DelaunayGraph_2::all_faces_begin</definition>
        <argsstring>()</argsstring>
        <name>all_faces_begin</name>
        <briefdescription>
<para>Starts at an arbitrary face. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="294" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classDelaunayGraph__2_1a4ad31d30173e6a73f70b89183c8fa66e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classDelaunayGraph__2_1af3ca989e9a8f170221a59374086b00be" kindref="member">All_faces_iterator</ref></type>
        <definition>All_faces_iterator DelaunayGraph_2::all_faces_end</definition>
        <argsstring>()</argsstring>
        <name>all_faces_end</name>
        <briefdescription>
<para>Past-the-end iterator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="299" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Face, Edge and Vertex Circulators</header>
      <description><para>A model of the <computeroutput><ref refid="classDelaunayGraph__2" kindref="compound">DelaunayGraph_2</ref></computeroutput> concept must also provide circulators that allow to visit, respectively, all faces or edges incident to a given vertex or all vertices adjacent to a given vertex.</para><para>These circulators are non-mutable and bidirectional. The operator <computeroutput>operator++</computeroutput> must move the circulator counterclockwise around the vertex while the <computeroutput>operator-</computeroutput> must move the circulator clockwise. </para></description>
      <memberdef kind="function" id="classDelaunayGraph__2_1a9460e197a58cada681e2edcedaaa9fa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classDelaunayGraph__2_1a1653a1b8fb804b82c699c4650fe1b587" kindref="member">Face_circulator</ref></type>
        <definition>Face_circulator DelaunayGraph_2::incident_faces</definition>
        <argsstring>(Vertex_handle v)</argsstring>
        <name>incident_faces</name>
        <param>
          <type><ref refid="classDelaunayGraph__2_1aa04684a7eeba987a838775d81adfa9ca" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Starts at an arbitrary face incident to <computeroutput>v</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="316" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classDelaunayGraph__2_1a6dc7746abbd7e247973b91734b7ce754" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classDelaunayGraph__2_1a1653a1b8fb804b82c699c4650fe1b587" kindref="member">Face_circulator</ref></type>
        <definition>Face_circulator DelaunayGraph_2::incident_faces</definition>
        <argsstring>(Vertex_handle v, Face_handle f)</argsstring>
        <name>incident_faces</name>
        <param>
          <type><ref refid="classDelaunayGraph__2_1aa04684a7eeba987a838775d81adfa9ca" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classDelaunayGraph__2_1a27c7951cfa33bf04908ceae0a12ee47e" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Starts at face <computeroutput>f</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>Face <computeroutput>f</computeroutput> must be incident to vertex <computeroutput>v</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="322" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classDelaunayGraph__2_1af3acce7930513faab7142d8da9a92e0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classDelaunayGraph__2_1a81f9201a658144b02004d66eab1eb2f2" kindref="member">Edge_circulator</ref></type>
        <definition>Edge_circulator DelaunayGraph_2::incident_edges</definition>
        <argsstring>(Vertex_handle v)</argsstring>
        <name>incident_edges</name>
        <param>
          <type><ref refid="classDelaunayGraph__2_1aa04684a7eeba987a838775d81adfa9ca" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Starts at an arbitrary edge incident to <computeroutput>v</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="327" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classDelaunayGraph__2_1a5bbb5598e34b2a09ab9e640755f9b4a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classDelaunayGraph__2_1a81f9201a658144b02004d66eab1eb2f2" kindref="member">Edge_circulator</ref></type>
        <definition>Edge_circulator DelaunayGraph_2::incident_edges</definition>
        <argsstring>(Vertex_handle v, Face_handle f)</argsstring>
        <name>incident_edges</name>
        <param>
          <type><ref refid="classDelaunayGraph__2_1aa04684a7eeba987a838775d81adfa9ca" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classDelaunayGraph__2_1a27c7951cfa33bf04908ceae0a12ee47e" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Starts at the first edge of <computeroutput>f</computeroutput> incident to <computeroutput>v</computeroutput>, in counterclockwise order around <computeroutput>v</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>Face <computeroutput>f</computeroutput> must be incident to vertex <computeroutput>v</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="334" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classDelaunayGraph__2_1a61a238f8bab1d62d10c32bc675c7349a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classDelaunayGraph__2_1ad11902c12686bc53e334ba09d9ad740f" kindref="member">Vertex_circulator</ref></type>
        <definition>Vertex_circulator DelaunayGraph_2::incident_vertices</definition>
        <argsstring>(Vertex_handle v)</argsstring>
        <name>incident_vertices</name>
        <param>
          <type><ref refid="classDelaunayGraph__2_1aa04684a7eeba987a838775d81adfa9ca" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Starts at an arbitrary vertex incident to <computeroutput>v</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="339" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classDelaunayGraph__2_1a8661ec43acfdf613dbe902c98468aa59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classDelaunayGraph__2_1ad11902c12686bc53e334ba09d9ad740f" kindref="member">Vertex_circulator</ref></type>
        <definition>Vertex_circulator DelaunayGraph_2::incident_vertices</definition>
        <argsstring>(Vertex_handle v, Face_handle f)</argsstring>
        <name>incident_vertices</name>
        <param>
          <type><ref refid="classDelaunayGraph__2_1aa04684a7eeba987a838775d81adfa9ca" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classDelaunayGraph__2_1a27c7951cfa33bf04908ceae0a12ee47e" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Starts at the first vertex of <computeroutput>f</computeroutput> adjacent to <computeroutput>v</computeroutput> in counterclockwise order around <computeroutput>v</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>Face <computeroutput>f</computeroutput> must be incident to vertex <computeroutput>v</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="346" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Predicates</header>
      <description><para>A model of the <computeroutput><ref refid="classDelaunayGraph__2" kindref="compound">DelaunayGraph_2</ref></computeroutput> concept must provide methods to test the finite or infinite character of any feature. </para></description>
      <memberdef kind="function" id="classDelaunayGraph__2_1ad72c80c8976b82b454e3a287a706829e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool DelaunayGraph_2::is_infinite</definition>
        <argsstring>(Vertex_handle v)</argsstring>
        <name>is_infinite</name>
        <param>
          <type><ref refid="classDelaunayGraph__2_1aa04684a7eeba987a838775d81adfa9ca" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para><computeroutput>true</computeroutput>, iff <computeroutput>v</computeroutput> is the <computeroutput>infinite_vertex</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="358" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classDelaunayGraph__2_1a588e40344f6562a036c5203f9a0b307e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool DelaunayGraph_2::is_infinite</definition>
        <argsstring>(Face_handle f)</argsstring>
        <name>is_infinite</name>
        <param>
          <type><ref refid="classDelaunayGraph__2_1a27c7951cfa33bf04908ceae0a12ee47e" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para><computeroutput>true</computeroutput>, iff face <computeroutput>f</computeroutput> is infinite. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="363" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classDelaunayGraph__2_1a0213f736dd4404cc00770dc6d15320d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool DelaunayGraph_2::is_infinite</definition>
        <argsstring>(Face_handle f, int i)</argsstring>
        <name>is_infinite</name>
        <param>
          <type><ref refid="classDelaunayGraph__2_1a27c7951cfa33bf04908ceae0a12ee47e" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para><computeroutput>true</computeroutput>, iff edge <computeroutput>(f,i)</computeroutput> is infinite. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="368" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classDelaunayGraph__2_1a00164533aa8d57a9d9ce4257a4333752" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool DelaunayGraph_2::is_infinite</definition>
        <argsstring>(Edge e)</argsstring>
        <name>is_infinite</name>
        <param>
          <type><ref refid="classDelaunayGraph__2_1a4d376f8a57547f6ce750371fdac5beec" kindref="member">Edge</ref></type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para><computeroutput>true</computeroutput>, iff edge <computeroutput>e</computeroutput> is infinite. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="373" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classDelaunayGraph__2_1a92b4db0ff95478f54927b7efe50a760d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool DelaunayGraph_2::is_infinite</definition>
        <argsstring>(Edge_circulator ec)</argsstring>
        <name>is_infinite</name>
        <param>
          <type><ref refid="classDelaunayGraph__2_1a81f9201a658144b02004d66eab1eb2f2" kindref="member">Edge_circulator</ref></type>
          <declname>ec</declname>
        </param>
        <briefdescription>
<para><computeroutput>true</computeroutput>, iff edge <computeroutput>*ec</computeroutput> is infinite. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="378" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Validity check</header>
      <memberdef kind="function" id="classDelaunayGraph__2_1a8e63e7a8379a1d0dad83d3a0edfdf2fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool DelaunayGraph_2::is_valid</definition>
        <argsstring>(bool verbose=false)</argsstring>
        <name>is_valid</name>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Checks the validity of the Delaunay graph. </para>        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>verbose</computeroutput> is <computeroutput>true</computeroutput> a short message is sent to <computeroutput>std::cerr</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="389" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Miscellaneous</header>
      <memberdef kind="function" id="classDelaunayGraph__2_1a6168b1acbcf7bc25eceadb83018641fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DelaunayGraph_2::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Clears all contents of the Delaunay graph. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="399" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classDelaunayGraph__2_1a00ef1ffb589e17eebf53db53e788c8cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DelaunayGraph_2::swap</definition>
        <argsstring>(DelaunayGraph_2 other)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classDelaunayGraph__2" kindref="compound">DelaunayGraph_2</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>The Delaunay graphs <computeroutput>other</computeroutput> and <computeroutput>dg</computeroutput> are swapped. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>dg</computeroutput>.<computeroutput>swap(other)</computeroutput> should be preferred to <computeroutput>dg</computeroutput><computeroutput>= other</computeroutput> or to <computeroutput>dg</computeroutput><computeroutput>(other)</computeroutput> if <computeroutput>other</computeroutput> is deleted afterwards. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayGraph_2.h" line="407" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The concept <computeroutput><ref refid="classDelaunayGraph__2" kindref="compound">DelaunayGraph_2</ref></computeroutput> defines the requirements for the first template parameter of the <computeroutput>Voronoi_diagram_2&lt;DG,AT,AP&gt;</computeroutput> class. The <computeroutput><ref refid="classDelaunayGraph__2" kindref="compound">DelaunayGraph_2</ref></computeroutput> concept essentially defines the requirements that a class representing a Delaunay graph must obey so that the Voronoi diagram adaptor can adapt it. </para>    </briefdescription>
    <detaileddescription>
<para> <xrefsect id="refines_1_refines000004"><xreftitle>Refines</xreftitle><xrefdescription><para><computeroutput><ref refid="classDefaultConstructible" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">DefaultConstructible</ref>,</computeroutput> </para><para><computeroutput><ref refid="classCopyConstructible" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">CopyConstructible</ref>,</computeroutput> </para><para><computeroutput><ref refid="classAssignable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">Assignable</ref></computeroutput> </para></xrefdescription></xrefsect></para><para><bold>Traversal of the Delaunay graph</bold><linebreak/>
</para><para>A model of the <computeroutput><ref refid="classDelaunayGraph__2" kindref="compound">DelaunayGraph_2</ref></computeroutput> concept must provide several iterators and circulators that allow to traverse it (completely or partially). All iterators and circulators must be convertible to the corresponding handles.</para><para><xrefsect id="hasModels_1_hasModels000003"><xreftitle>Has Models</xreftitle><xrefdescription><para><computeroutput><ref refid="classCGAL_1_1Delaunay__triangulation__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_2.tag">CGAL::Delaunay_triangulation_2</ref>&lt;Traits,Tds&gt;</computeroutput> </para><para><computeroutput><ref refid="classCGAL_1_1Regular__triangulation__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_2.tag">CGAL::Regular_triangulation_2</ref>&lt;Traits,Tds&gt;</computeroutput> </para><para><computeroutput><ref refid="classCGAL_1_1Triangulation__hierarchy__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_2.tag">CGAL::Triangulation_hierarchy_2</ref>&lt;Tr&gt;</computeroutput> provided that <computeroutput>Tr</computeroutput> is a model of <computeroutput><ref refid="classDelaunayGraph__2" kindref="compound">DelaunayGraph_2</ref></computeroutput> </para><para><computeroutput><ref refid="classCGAL_1_1Segment__Delaunay__graph__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Segment_Delaunay_graph_2.tag">CGAL::Segment_Delaunay_graph_2</ref>&lt;Gt,DS&gt;</computeroutput> </para><para><computeroutput><ref refid="classCGAL_1_1Segment__Delaunay__graph__hierarchy__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Segment_Delaunay_graph_2.tag">CGAL::Segment_Delaunay_graph_hierarchy_2</ref>&lt;Gt,STag,DS&gt;</computeroutput> </para><para><computeroutput><ref refid="classCGAL_1_1Apollonius__graph__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Apollonius_graph_2.tag">CGAL::Apollonius_graph_2</ref>&lt;Gt,Agds&gt;</computeroutput> </para><para><computeroutput><ref refid="classCGAL_1_1Apollonius__graph__hierarchy__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Apollonius_graph_2.tag">CGAL::Apollonius_graph_hierarchy_2</ref>&lt;Gt,Agds&gt;</computeroutput> </para></xrefdescription></xrefsect></para><para><simplesect kind="see"><para><computeroutput><ref refid="classAdaptationTraits__2" kindref="compound">AdaptationTraits_2</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classAdaptationPolicy__2" kindref="compound">AdaptationPolicy_2</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Voronoi__diagram__2" kindref="compound">CGAL::Voronoi_diagram_2</ref>&lt;DG,AT,AP&gt;</computeroutput> </para></simplesect>
</para>    </detaileddescription>
    <location file="Concepts/DelaunayGraph_2.h" line="35" column="1" bodyfile="Concepts/DelaunayGraph_2.h" bodystart="35" bodyend="411"/>
    <listofallmembers>
      <member refid="classDelaunayGraph__2_1a5d64923ea61191297dd33c019c8013e7" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>all_edges_begin</name></member>
      <member refid="classDelaunayGraph__2_1a116c105bd8235978dfa690a411fb21bb" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>all_edges_end</name></member>
      <member refid="classDelaunayGraph__2_1a392afc04716bc72ef6c63a4e9503daf2" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>All_edges_iterator</name></member>
      <member refid="classDelaunayGraph__2_1ab0338618bc3a6850862c44a39039218c" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>all_faces_begin</name></member>
      <member refid="classDelaunayGraph__2_1a4ad31d30173e6a73f70b89183c8fa66e" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>all_faces_end</name></member>
      <member refid="classDelaunayGraph__2_1af3ca989e9a8f170221a59374086b00be" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>All_faces_iterator</name></member>
      <member refid="classDelaunayGraph__2_1abde432f2e1fde4a907e6bad6a544675d" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>all_vertices_begin</name></member>
      <member refid="classDelaunayGraph__2_1a0961532d6d526b92b0bdbb429e4b5888" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>all_vertices_end</name></member>
      <member refid="classDelaunayGraph__2_1a3249adf4dfae40053e3e94e22678bba0" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>All_vertices_iterator</name></member>
      <member refid="classDelaunayGraph__2_1a6168b1acbcf7bc25eceadb83018641fa" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>clear</name></member>
      <member refid="classDelaunayGraph__2_1a9c0629a6dd595f81a0e326f70826ae3d" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>DelaunayGraph_2</name></member>
      <member refid="classDelaunayGraph__2_1a4a0543f2bd800920eaeb0dcb3266759b" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>DelaunayGraph_2</name></member>
      <member refid="classDelaunayGraph__2_1a8129a51f60e247f1e1e9ffb324151f7c" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>DelaunayGraph_2</name></member>
      <member refid="classDelaunayGraph__2_1a8c564a5a534b09d2aa62e6b1939e6012" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>dimension</name></member>
      <member refid="classDelaunayGraph__2_1a4d376f8a57547f6ce750371fdac5beec" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>Edge</name></member>
      <member refid="classDelaunayGraph__2_1a81f9201a658144b02004d66eab1eb2f2" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>Edge_circulator</name></member>
      <member refid="classDelaunayGraph__2_1af0cccae8a709d7779048de9c4c001d79" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>Face</name></member>
      <member refid="classDelaunayGraph__2_1a1653a1b8fb804b82c699c4650fe1b587" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>Face_circulator</name></member>
      <member refid="classDelaunayGraph__2_1a27c7951cfa33bf04908ceae0a12ee47e" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>Face_handle</name></member>
      <member refid="classDelaunayGraph__2_1ac0ddf4c3dcb51a24d50e1c0f5f2157e0" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>finite_edges_begin</name></member>
      <member refid="classDelaunayGraph__2_1ac1eb795cbdb77a121cd364452e096284" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>finite_edges_end</name></member>
      <member refid="classDelaunayGraph__2_1a3c5c49913de35b936e53ce9758ce2c10" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>Finite_edges_iterator</name></member>
      <member refid="classDelaunayGraph__2_1a8754286ab8e11524086676e7fb3e786f" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>finite_faces_begin</name></member>
      <member refid="classDelaunayGraph__2_1ab80b6e2e95842c8c1cf71931887dc8ed" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>finite_faces_end</name></member>
      <member refid="classDelaunayGraph__2_1a99ef8c5acd65d99c9fea255797e64431" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>Finite_faces_iterator</name></member>
      <member refid="classDelaunayGraph__2_1a6cc836a9fd97295ad654ef12620aaaa5" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>finite_vertex</name></member>
      <member refid="classDelaunayGraph__2_1a0dfeb67f7be2da85862ece3dc46e3759" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>finite_vertices_begin</name></member>
      <member refid="classDelaunayGraph__2_1a71ade85192f0191d54f1c0b0a267d9fc" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>finite_vertices_end</name></member>
      <member refid="classDelaunayGraph__2_1a6a5a812bf657fc40924e1f420acb0787" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>Finite_vertices_iterator</name></member>
      <member refid="classDelaunayGraph__2_1a1a25e5eed3d797c2569ef661d00a19d2" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>Geom_traits</name></member>
      <member refid="classDelaunayGraph__2_1aae86a3fadc02a1233a487207113b7355" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>geom_traits</name></member>
      <member refid="classDelaunayGraph__2_1af3acce7930513faab7142d8da9a92e0f" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>incident_edges</name></member>
      <member refid="classDelaunayGraph__2_1a5bbb5598e34b2a09ab9e640755f9b4a0" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>incident_edges</name></member>
      <member refid="classDelaunayGraph__2_1a9460e197a58cada681e2edcedaaa9fa0" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>incident_faces</name></member>
      <member refid="classDelaunayGraph__2_1a6dc7746abbd7e247973b91734b7ce754" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>incident_faces</name></member>
      <member refid="classDelaunayGraph__2_1a61a238f8bab1d62d10c32bc675c7349a" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>incident_vertices</name></member>
      <member refid="classDelaunayGraph__2_1a8661ec43acfdf613dbe902c98468aa59" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>incident_vertices</name></member>
      <member refid="classDelaunayGraph__2_1a14cc7ce64de1285610323da921f5f03d" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>infinite_face</name></member>
      <member refid="classDelaunayGraph__2_1abfebb82f37a82e51ae60cb3cf416d09a" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>infinite_vertex</name></member>
      <member refid="classDelaunayGraph__2_1ad72c80c8976b82b454e3a287a706829e" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>is_infinite</name></member>
      <member refid="classDelaunayGraph__2_1a588e40344f6562a036c5203f9a0b307e" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>is_infinite</name></member>
      <member refid="classDelaunayGraph__2_1a0213f736dd4404cc00770dc6d15320d7" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>is_infinite</name></member>
      <member refid="classDelaunayGraph__2_1a00164533aa8d57a9d9ce4257a4333752" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>is_infinite</name></member>
      <member refid="classDelaunayGraph__2_1a92b4db0ff95478f54927b7efe50a760d" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>is_infinite</name></member>
      <member refid="classDelaunayGraph__2_1a8e63e7a8379a1d0dad83d3a0edfdf2fd" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>is_valid</name></member>
      <member refid="classDelaunayGraph__2_1a001f2d367c070b9103de9a6b30fec480" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>number_of_faces</name></member>
      <member refid="classDelaunayGraph__2_1a8784f8b23e7e686069263c3756a4de90" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>number_of_vertices</name></member>
      <member refid="classDelaunayGraph__2_1ac67253369a829ab90fea5914082bf0e7" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>size_type</name></member>
      <member refid="classDelaunayGraph__2_1a00ef1ffb589e17eebf53db53e788c8cf" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>swap</name></member>
      <member refid="classDelaunayGraph__2_1a4650c5c9a91ff14557b2947787f3f3a3" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>tds</name></member>
      <member refid="classDelaunayGraph__2_1a2dce4ed97b5a03fc3672bed22b3e0b38" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>Triangulation_data_structure</name></member>
      <member refid="classDelaunayGraph__2_1a72b870f34a0e513c62b96c21da76bbea" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>Vertex</name></member>
      <member refid="classDelaunayGraph__2_1ad11902c12686bc53e334ba09d9ad740f" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>Vertex_circulator</name></member>
      <member refid="classDelaunayGraph__2_1aa04684a7eeba987a838775d81adfa9ca" prot="public" virt="non-virtual"><scope>DelaunayGraph_2</scope><name>Vertex_handle</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
