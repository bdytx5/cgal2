<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classAdaptationPolicy__2" kind="class" language="C++" prot="public">
    <compoundname>AdaptationPolicy_2</compoundname>
    <includes local="no">Concepts/AdaptationPolicy_2.h</includes>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classAdaptationPolicy__2_1ac378291bdfc4c254cca7f1be97ef8431" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type AdaptationPolicy_2::Site_2</definition>
        <argsstring></argsstring>
        <name>Site_2</name>
        <briefdescription>
<para>A type for the sites of the Voronoi diagram. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AdaptationPolicy_2.h" line="41" column="1" bodyfile="Concepts/AdaptationPolicy_2.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classAdaptationPolicy__2_1a2b929a1c0f490b092d3e20ff5bf75cda" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type AdaptationPolicy_2::Delaunay_graph</definition>
        <argsstring></argsstring>
        <name>Delaunay_graph</name>
        <briefdescription>
<para>A type for the triangulated Delaunay graph. </para>        </briefdescription>
        <detaileddescription>
<para>The type <computeroutput>Delaunay_graph</computeroutput> must be a model of the <computeroutput><ref refid="classDelaunayGraph__2" kindref="compound">DelaunayGraph_2</ref></computeroutput> concept. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AdaptationPolicy_2.h" line="48" column="1" bodyfile="Concepts/AdaptationPolicy_2.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classAdaptationPolicy__2_1a20496738541e18753efe9ad8980f05bf" prot="public" static="no">
        <type>Delaunay_graph::Vertex_handle</type>
        <definition>typedef Delaunay_graph::Vertex_handle AdaptationPolicy_2::Delaunay_vertex_handle</definition>
        <argsstring></argsstring>
        <name>Delaunay_vertex_handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AdaptationPolicy_2.h" line="53" column="1" bodyfile="Concepts/AdaptationPolicy_2.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classAdaptationPolicy__2_1a61260b7f1e7c3acdce6f758ac81fa67f" prot="public" static="no">
        <type>Delaunay_graph::Face_handle</type>
        <definition>typedef Delaunay_graph::Face_handle AdaptationPolicy_2::Delaunay_face_handle</definition>
        <argsstring></argsstring>
        <name>Delaunay_face_handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AdaptationPolicy_2.h" line="58" column="1" bodyfile="Concepts/AdaptationPolicy_2.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classAdaptationPolicy__2_1ac9a5247ebb6e30a3c276deb4d6416c7c" prot="public" static="no">
        <type>Delaunay_graph::Edge</type>
        <definition>typedef Delaunay_graph::Edge AdaptationPolicy_2::Delaunay_edge</definition>
        <argsstring></argsstring>
        <name>Delaunay_edge</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AdaptationPolicy_2.h" line="63" column="1" bodyfile="Concepts/AdaptationPolicy_2.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classAdaptationPolicy__2_1a2dd5aa4a263ee12cbb23b0845254dc84" prot="public" static="no">
        <type>Delaunay_graph::All_edges_iterator</type>
        <definition>typedef Delaunay_graph::All_edges_iterator AdaptationPolicy_2::All_Delaunay_edges_iterator</definition>
        <argsstring></argsstring>
        <name>All_Delaunay_edges_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AdaptationPolicy_2.h" line="69" column="1" bodyfile="Concepts/AdaptationPolicy_2.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classAdaptationPolicy__2_1a12573b0947944d8c5c3fe9d69e3e155b" prot="public" static="no">
        <type>Delaunay_graph::Finite_edges_iterator</type>
        <definition>typedef Delaunay_graph::Finite_edges_iterator AdaptationPolicy_2::Finite_Delaunay_edges_iterator</definition>
        <argsstring></argsstring>
        <name>Finite_Delaunay_edges_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AdaptationPolicy_2.h" line="75" column="1" bodyfile="Concepts/AdaptationPolicy_2.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classAdaptationPolicy__2_1a015bdc909fb978dbb4877996c48fee43" prot="public" static="no">
        <type>Delaunay_graph::Edge_circulator</type>
        <definition>typedef Delaunay_graph::Edge_circulator AdaptationPolicy_2::Delaunay_edge_circulator</definition>
        <argsstring></argsstring>
        <name>Delaunay_edge_circulator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AdaptationPolicy_2.h" line="80" column="1" bodyfile="Concepts/AdaptationPolicy_2.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classAdaptationPolicy__2_1a6b6df8727dac34136d0a5e0900cd5db2" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type AdaptationPolicy_2::Edge_rejector</definition>
        <argsstring></argsstring>
        <name>Edge_rejector</name>
        <briefdescription>
<para>A type for the predicate functor that is responsible for rejecting an edge of the Delaunay graph (or equivalently rejecting its dual edge in the Voronoi diagram). </para>        </briefdescription>
        <detaileddescription>
<para>It must be model of the concepts <computeroutput><ref refid="classDefaultConstructible" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">DefaultConstructible</ref></computeroutput>, <computeroutput><ref refid="classCopyConstructible" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">CopyConstructible</ref></computeroutput>, <computeroutput><ref refid="classAssignable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">Assignable</ref></computeroutput>, and <computeroutput><ref refid="classAdaptableFunctor" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">AdaptableFunctor</ref></computeroutput> (with two arguments). It must provide the following operators:</para><para><computeroutput>bool operator()(Delaunay_graph dg, Delaunay_edge e)</computeroutput></para><para><computeroutput>bool operator()(Delaunay_graph dg, Delaunay_face_handle f, int i)</computeroutput></para><para><computeroutput>bool operator()(Delaunay_graph dg, Delaunay_edge_circulator ec)</computeroutput></para><para><computeroutput>bool operator()(Delaunay_graph dg,</computeroutput></para><para><computeroutput>All_Delaunay_edges_iterator eit)</computeroutput></para><para><computeroutput>bool operator()(Delaunay_graph dg,</computeroutput></para><para><computeroutput>Finite_Delaunay_edges_iterator eit)</computeroutput></para><para>The functor returns <computeroutput>true</computeroutput> iff the edge is rejected. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AdaptationPolicy_2.h" line="106" column="1" bodyfile="Concepts/AdaptationPolicy_2.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classAdaptationPolicy__2_1a706ea136ec8db52609495ddd4d00647c" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type AdaptationPolicy_2::Face_rejector</definition>
        <argsstring></argsstring>
        <name>Face_rejector</name>
        <briefdescription>
<para>A type for the predicate functor that is responsible for rejecting a vertex of the Delaunay graph (or equivalently its dual face in the Voronoi diagram - hence the name of the functor). </para>        </briefdescription>
        <detaileddescription>
<para>It must be model of the concepts <computeroutput><ref refid="classDefaultConstructible" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">DefaultConstructible</ref></computeroutput>, <computeroutput><ref refid="classCopyConstructible" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">CopyConstructible</ref></computeroutput>, <computeroutput><ref refid="classAssignable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">Assignable</ref></computeroutput>, <computeroutput><ref refid="classAdaptableFunctor" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">AdaptableFunctor</ref></computeroutput> (with two arguments). It must provide the following operator:</para><para><center><computeroutput>bool operator()(Delaunay graph dg, Delaunay_vertex_handle v)</computeroutput></center></para><para>The functor returns <computeroutput>true</computeroutput> iff the face is rejected. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AdaptationPolicy_2.h" line="120" column="1" bodyfile="Concepts/AdaptationPolicy_2.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classAdaptationPolicy__2_1ae6c2b544e455d93b5797bb3562ec13f3" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type AdaptationPolicy_2::Has_inserter</definition>
        <argsstring></argsstring>
        <name>Has_inserter</name>
        <briefdescription>
<para>A tag for determining if the adaptation policy class provides a functor for inserting sites in the Delaunay graph. </para>        </briefdescription>
        <detaileddescription>
<para>This tag is equal to either <computeroutput><ref refid="group__PkgStlExtensionUtilities_1gab3e2296107b5d26c32c8183028a217f1" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::Tag_true</ref></computeroutput> (a site inserter functor is available) or <computeroutput><ref refid="group__PkgStlExtensionUtilities_1ga89d5ecf1540b2ec0a2bf5dd003e186d0" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::Tag_false</ref></computeroutput> (a site inserter functor is not available). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AdaptationPolicy_2.h" line="129" column="1" bodyfile="Concepts/AdaptationPolicy_2.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classAdaptationPolicy__2_1aa1bba1ddd83a19611ebb34ac4e50246b" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type AdaptationPolicy_2::Site_inserter</definition>
        <argsstring></argsstring>
        <name>Site_inserter</name>
        <briefdescription>
<para>A type for a functor that inserts sites in the Delaunay graph. </para>        </briefdescription>
        <detaileddescription>
<para>It must be model of the concepts <computeroutput><ref refid="classDefaultConstructible" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">DefaultConstructible</ref></computeroutput>, <computeroutput><ref refid="classCopyConstructible" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">CopyConstructible</ref></computeroutput>, <computeroutput><ref refid="classAssignable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">Assignable</ref></computeroutput>, <computeroutput><ref refid="classAdaptableFunctor" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">AdaptableFunctor</ref></computeroutput> (with two arguments). It must provide the following operator</para><para><center><computeroutput>Delaunay_vertex_handle operator()(Delaunay_graph&amp; dg, Site_2 t)</computeroutput></center></para><para>The vertex handle returned either points to the vertex of the Delaunay graph corresponding to the site just inserted or is the default constructed vertex handle. The latter case can happen if the site inserted is <emphasis>hidden</emphasis>, i.e., it has an empty Voronoi cell.</para><para>This type is required only if the <computeroutput>Has_inserter</computeroutput> tag is equal to <computeroutput><ref refid="group__PkgStlExtensionUtilities_1gab3e2296107b5d26c32c8183028a217f1" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::Tag_true</ref></computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AdaptationPolicy_2.h" line="148" column="1" bodyfile="Concepts/AdaptationPolicy_2.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Access to objects</header>
      <memberdef kind="function" id="classAdaptationPolicy__2_1a74b9e9fd8d99c3c73aad13b3aefad852" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classAdaptationPolicy__2_1a6b6df8727dac34136d0a5e0900cd5db2" kindref="member">Edge_rejector</ref></type>
        <definition>Edge_rejector AdaptationPolicy_2::edge_rejector_object</definition>
        <argsstring>()</argsstring>
        <name>edge_rejector_object</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AdaptationPolicy_2.h" line="158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classAdaptationPolicy__2_1a72ff7e27155f382180ae820228c9aaa6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classAdaptationPolicy__2_1a706ea136ec8db52609495ddd4d00647c" kindref="member">Face_rejector</ref></type>
        <definition>Face_rejector AdaptationPolicy_2::face_rejector_object</definition>
        <argsstring>()</argsstring>
        <name>face_rejector_object</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AdaptationPolicy_2.h" line="163" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classAdaptationPolicy__2_1a804d68e983b9014c91ec86bc88a098af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classAdaptationPolicy__2_1aa1bba1ddd83a19611ebb34ac4e50246b" kindref="member">Site_inserter</ref></type>
        <definition>Site_inserter AdaptationPolicy_2::site_inserter_object</definition>
        <argsstring>()</argsstring>
        <name>site_inserter_object</name>
        <briefdescription>
<para>This method is required only if <computeroutput>Has_inserter</computeroutput> is equal to <computeroutput><ref refid="group__PkgStlExtensionUtilities_1gab3e2296107b5d26c32c8183028a217f1" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::Tag_true</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AdaptationPolicy_2.h" line="169" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Miscellaneous</header>
      <description><para>The following methods are important when the adaptation policy maintains a state.</para><para>This can happen if we have a caching adaptation policy, i.e., when we cache the results of the edge and face rejectors. </para></description>
      <memberdef kind="function" id="classAdaptationPolicy__2_1a6fe0832d3c99e882ea277ffde144aee5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AdaptationPolicy_2::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Clears the state of the adaptation policy. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AdaptationPolicy_2.h" line="183" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classAdaptationPolicy__2_1ade6afb84e14e834e672c0be7db86d169" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AdaptationPolicy_2::swap</definition>
        <argsstring>(AdaptationPolicy_2 other)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classAdaptationPolicy__2" kindref="compound">AdaptationPolicy_2</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>The adaptation policies <computeroutput>ap</computeroutput> and <computeroutput>other</computeroutput> are swapped. </para>        </briefdescription>
        <detaileddescription>
<para>This method should be preferred to <computeroutput>ap=other</computeroutput> or <computeroutput>ap(other)</computeroutput> if <computeroutput>other</computeroutput> is deleted afterwards. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AdaptationPolicy_2.h" line="191" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classAdaptationPolicy__2_1a1f57118d73b16b11232b8729d77ae39d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool AdaptationPolicy_2::is_valid</definition>
        <argsstring>()</argsstring>
        <name>is_valid</name>
        <briefdescription>
<para>Tests the validity of the adaptation policy. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AdaptationPolicy_2.h" line="196" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classAdaptationPolicy__2_1a9b43d5e1459532c42d889e0b6dd84421" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool AdaptationPolicy_2::is_valid</definition>
        <argsstring>(Delaunay_graph dg)</argsstring>
        <name>is_valid</name>
        <param>
          <type><ref refid="classAdaptationPolicy__2_1a2b929a1c0f490b092d3e20ff5bf75cda" kindref="member">Delaunay_graph</ref></type>
          <declname>dg</declname>
        </param>
        <briefdescription>
<para>Tests the validity of the adaptation policy using extra information from the Delaunay graph <computeroutput>dg</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AdaptationPolicy_2.h" line="203" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The concept <computeroutput><ref refid="classAdaptationPolicy__2" kindref="compound">AdaptationPolicy_2</ref></computeroutput> defines the requirements on the predicate functors that determine whether a feature of the triangulated Delaunay graph should be rejected or not. It also provides a functor for inserting sites in the Delaunay graph. The last functor is optional and a tag determines whether it is provided or not. Note that while the first two functors do not modify the Delaunay graph they take as an argument, the last ones does. </para>    </briefdescription>
    <detaileddescription>
<para> <xrefsect id="refines_1_refines000002"><xreftitle>Refines</xreftitle><xrefdescription><para><computeroutput><ref refid="classDefaultConstructible" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">DefaultConstructible</ref>,</computeroutput> </para><para><computeroutput><ref refid="classCopyConstructible" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">CopyConstructible</ref>,</computeroutput> </para><para><computeroutput><ref refid="classAssignable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">Assignable</ref></computeroutput> </para></xrefdescription></xrefsect></para><para><xrefsect id="hasModels_1_hasModels000001"><xreftitle>Has Models</xreftitle><xrefdescription><para><computeroutput><ref refid="structCGAL_1_1Identity__policy__2" kindref="compound">CGAL::Identity_policy_2</ref>&lt;DG,AT&gt;</computeroutput> </para><para><computeroutput><ref refid="structCGAL_1_1Apollonius__graph__degeneracy__removal__policy__2" kindref="compound">CGAL::Apollonius_graph_degeneracy_removal_policy_2</ref>&lt;AG2&gt;</computeroutput> </para><para><computeroutput><ref refid="structCGAL_1_1Apollonius__graph__caching__degeneracy__removal__policy__2" kindref="compound">CGAL::Apollonius_graph_caching_degeneracy_removal_policy_2</ref>&lt;AG2&gt;</computeroutput> </para><para><computeroutput><ref refid="structCGAL_1_1Delaunay__triangulation__degeneracy__removal__policy__2" kindref="compound">CGAL::Delaunay_triangulation_degeneracy_removal_policy_2</ref>&lt;DT2&gt;</computeroutput> </para><para><computeroutput><ref refid="structCGAL_1_1Delaunay__triangulation__caching__degeneracy__removal__policy__2" kindref="compound">CGAL::Delaunay_triangulation_caching_degeneracy_removal_policy_2</ref>&lt;DT2&gt;</computeroutput> </para><para><computeroutput><ref refid="structCGAL_1_1Regular__triangulation__degeneracy__removal__policy__2" kindref="compound">CGAL::Regular_triangulation_degeneracy_removal_policy_2</ref>&lt;RT2&gt;</computeroutput> </para><para><computeroutput><ref refid="structCGAL_1_1Regular__triangulation__caching__degeneracy__removal__policy__2" kindref="compound">CGAL::Regular_triangulation_caching_degeneracy_removal_policy_2</ref>&lt;RT2&gt;</computeroutput> </para><para><computeroutput><ref refid="structCGAL_1_1Segment__Delaunay__graph__degeneracy__removal__policy__2" kindref="compound">CGAL::Segment_Delaunay_graph_degeneracy_removal_policy_2</ref>&lt;SDG2&gt;</computeroutput> </para><para><computeroutput><ref refid="structCGAL_1_1Segment__Delaunay__graph__caching__degeneracy__removal__policy__2" kindref="compound">CGAL::Segment_Delaunay_graph_caching_degeneracy_removal_policy_2</ref>&lt;SDG2&gt;</computeroutput></para></xrefdescription></xrefsect></para><para><simplesect kind="see"><para><computeroutput><ref refid="classDelaunayGraph__2" kindref="compound">DelaunayGraph_2</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classAdaptationTraits__2" kindref="compound">AdaptationTraits_2</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Voronoi__diagram__2" kindref="compound">CGAL::Voronoi_diagram_2</ref>&lt;DG,AT,AP&gt;</computeroutput> </para></simplesect>
</para>    </detaileddescription>
    <location file="Concepts/AdaptationPolicy_2.h" line="32" column="1" bodyfile="Concepts/AdaptationPolicy_2.h" bodystart="32" bodyend="207"/>
    <listofallmembers>
      <member refid="classAdaptationPolicy__2_1a2dd5aa4a263ee12cbb23b0845254dc84" prot="public" virt="non-virtual"><scope>AdaptationPolicy_2</scope><name>All_Delaunay_edges_iterator</name></member>
      <member refid="classAdaptationPolicy__2_1a6fe0832d3c99e882ea277ffde144aee5" prot="public" virt="non-virtual"><scope>AdaptationPolicy_2</scope><name>clear</name></member>
      <member refid="classAdaptationPolicy__2_1ac9a5247ebb6e30a3c276deb4d6416c7c" prot="public" virt="non-virtual"><scope>AdaptationPolicy_2</scope><name>Delaunay_edge</name></member>
      <member refid="classAdaptationPolicy__2_1a015bdc909fb978dbb4877996c48fee43" prot="public" virt="non-virtual"><scope>AdaptationPolicy_2</scope><name>Delaunay_edge_circulator</name></member>
      <member refid="classAdaptationPolicy__2_1a61260b7f1e7c3acdce6f758ac81fa67f" prot="public" virt="non-virtual"><scope>AdaptationPolicy_2</scope><name>Delaunay_face_handle</name></member>
      <member refid="classAdaptationPolicy__2_1a2b929a1c0f490b092d3e20ff5bf75cda" prot="public" virt="non-virtual"><scope>AdaptationPolicy_2</scope><name>Delaunay_graph</name></member>
      <member refid="classAdaptationPolicy__2_1a20496738541e18753efe9ad8980f05bf" prot="public" virt="non-virtual"><scope>AdaptationPolicy_2</scope><name>Delaunay_vertex_handle</name></member>
      <member refid="classAdaptationPolicy__2_1a6b6df8727dac34136d0a5e0900cd5db2" prot="public" virt="non-virtual"><scope>AdaptationPolicy_2</scope><name>Edge_rejector</name></member>
      <member refid="classAdaptationPolicy__2_1a74b9e9fd8d99c3c73aad13b3aefad852" prot="public" virt="non-virtual"><scope>AdaptationPolicy_2</scope><name>edge_rejector_object</name></member>
      <member refid="classAdaptationPolicy__2_1a706ea136ec8db52609495ddd4d00647c" prot="public" virt="non-virtual"><scope>AdaptationPolicy_2</scope><name>Face_rejector</name></member>
      <member refid="classAdaptationPolicy__2_1a72ff7e27155f382180ae820228c9aaa6" prot="public" virt="non-virtual"><scope>AdaptationPolicy_2</scope><name>face_rejector_object</name></member>
      <member refid="classAdaptationPolicy__2_1a12573b0947944d8c5c3fe9d69e3e155b" prot="public" virt="non-virtual"><scope>AdaptationPolicy_2</scope><name>Finite_Delaunay_edges_iterator</name></member>
      <member refid="classAdaptationPolicy__2_1ae6c2b544e455d93b5797bb3562ec13f3" prot="public" virt="non-virtual"><scope>AdaptationPolicy_2</scope><name>Has_inserter</name></member>
      <member refid="classAdaptationPolicy__2_1a1f57118d73b16b11232b8729d77ae39d" prot="public" virt="non-virtual"><scope>AdaptationPolicy_2</scope><name>is_valid</name></member>
      <member refid="classAdaptationPolicy__2_1a9b43d5e1459532c42d889e0b6dd84421" prot="public" virt="non-virtual"><scope>AdaptationPolicy_2</scope><name>is_valid</name></member>
      <member refid="classAdaptationPolicy__2_1ac378291bdfc4c254cca7f1be97ef8431" prot="public" virt="non-virtual"><scope>AdaptationPolicy_2</scope><name>Site_2</name></member>
      <member refid="classAdaptationPolicy__2_1aa1bba1ddd83a19611ebb34ac4e50246b" prot="public" virt="non-virtual"><scope>AdaptationPolicy_2</scope><name>Site_inserter</name></member>
      <member refid="classAdaptationPolicy__2_1a804d68e983b9014c91ec86bc88a098af" prot="public" virt="non-virtual"><scope>AdaptationPolicy_2</scope><name>site_inserter_object</name></member>
      <member refid="classAdaptationPolicy__2_1ade6afb84e14e834e672c0be7db86d169" prot="public" virt="non-virtual"><scope>AdaptationPolicy_2</scope><name>swap</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
