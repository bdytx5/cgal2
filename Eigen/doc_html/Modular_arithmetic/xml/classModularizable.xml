<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classModularizable" kind="class" language="C++" prot="public">
    <compoundname>Modularizable</compoundname>
    <includes local="no">Concepts/Modularizable.h</includes>
    <briefdescription>
<para>An algebraic structure is called <computeroutput><ref refid="classModularizable" kindref="compound">Modularizable</ref></computeroutput>, if there is a suitable mapping into an algebraic structure which is based on the type <computeroutput><ref refid="classCGAL_1_1Residue" kindref="compound">CGAL::Residue</ref></computeroutput>. For scalar types, e.g. Integers, this mapping is just the canonical homomorphism into the type <computeroutput><ref refid="classCGAL_1_1Residue" kindref="compound">CGAL::Residue</ref></computeroutput> with respect to the current prime. For compound types, e.g. Polynomials, the mapping is applied to the coefficients of the compound type. </para>    </briefdescription>
    <detaileddescription>
<para> The mapping is provided via <computeroutput><ref refid="classCGAL_1_1Modular__traits" kindref="compound">CGAL::Modular_traits</ref>&lt;<ref refid="classModularizable" kindref="compound">Modularizable</ref>&gt;</computeroutput>, being a model of <computeroutput><ref refid="classModularTraits" kindref="compound">ModularTraits</ref></computeroutput>.</para><para>Note that types representing rationals, or types which do have some notion of denominator, are not <computeroutput><ref refid="classModularizable" kindref="compound">Modularizable</ref></computeroutput>. This is due to the fact that the denominator may be zero modulo the prime, which can not be represented.</para><para><xrefsect id="hasModels_1_hasModels000001"><xreftitle>Has Models</xreftitle><xrefdescription><para><computeroutput>int</computeroutput> </para><para><computeroutput>long</computeroutput> </para><para><computeroutput><ref refid="classCORE_1_1BigInt" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">CORE::BigInt</ref></computeroutput> </para><para><computeroutput><ref refid="classCGAL_1_1Gmpz" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">CGAL::Gmpz</ref></computeroutput> </para><para><computeroutput><ref refid="classleda__integer" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">leda_integer</ref></computeroutput> </para><para><computeroutput><ref refid="classmpz__class" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">mpz_class</ref></computeroutput> </para><para><computeroutput><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">CGAL::Sqrt_extension</ref>&lt;NT,ROOT&gt;</computeroutput> </para><para><computeroutput><ref refid="classCGAL_1_1Polynomial" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polynomial.tag">CGAL::Polynomial</ref>&lt;Coeff&gt;</computeroutput> </para></xrefdescription></xrefsect></para><para>The following types are <computeroutput><ref refid="classModularizable" kindref="compound">Modularizable</ref></computeroutput> iff their template arguments are.</para><para><xrefsect id="hasModels_1_hasModels000002"><xreftitle>Has Models</xreftitle><xrefdescription><para><computeroutput><ref refid="classCGAL_1_1Lazy__exact__nt" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">CGAL::Lazy_exact_nt</ref>&lt;NT&gt;</computeroutput> </para></xrefdescription></xrefsect></para><para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Residue" kindref="compound">CGAL::Residue</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Modular__traits" kindref="compound">CGAL::Modular_traits</ref>&lt;T&gt;</computeroutput> </para></simplesect>
</para>    </detaileddescription>
    <location file="Concepts/Modularizable.h" line="39" column="1" bodyfile="Concepts/Modularizable.h" bodystart="39" bodyend="44"/>
    <listofallmembers>
    </listofallmembers>
  </compounddef>
</doxygen>
