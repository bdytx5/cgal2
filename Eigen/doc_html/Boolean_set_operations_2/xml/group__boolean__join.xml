<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__boolean__join" kind="group">
    <compoundname>boolean_join</compoundname>
    <title>Union Functions</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__boolean__join_1gafca2f0759f989fe95d1c56b0428a0f16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></type>
          </param>
          <param>
            <type>class Container</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::join</definition>
        <argsstring>(const Polygon_2&lt; Kernel, Container &gt; &amp;p1, const Polygon_2&lt; Kernel, Container &gt; &amp;p2, General_polygon_with_holes_2&lt; Polygon_2&lt; Kernel, Container &gt; &gt; &amp;res)</argsstring>
        <name>join</name>
        <param>
          <type>const Polygon_2&lt; <ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref>, Container &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const Polygon_2&lt; <ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref>, Container &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>General_polygon_with_holes_2&lt; Polygon_2&lt; <ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref>, Container &gt; &gt; &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>writes the union of the polygons <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> into the polygon with holes <computeroutput>res</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if the two given polygons overlap. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="516" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__join_1ga1df2eef5f7926f6442569e3dd3b05a4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></type>
          </param>
          <param>
            <type>class Container</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::join</definition>
        <argsstring>(const Polygon_2&lt; Kernel, Container &gt; &amp;p1, const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;p2, General_polygon_with_holes_2&lt; Polygon_2&lt; Kernel, Container &gt; &gt; &amp;res)</argsstring>
        <name>join</name>
        <param>
          <type>const Polygon_2&lt; <ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref>, Container &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const Polygon_with_holes_2&lt; <ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref>, Container &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>General_polygon_with_holes_2&lt; Polygon_2&lt; <ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref>, Container &gt; &gt; &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>writes the union of the polygons <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> into the polygon with holes <computeroutput>res</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if the two given polygons overlap. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="526" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__join_1ga3c14658a45d7879aa9a0a2084c808d9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></type>
          </param>
          <param>
            <type>class Container</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::join</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;p2, const Polygon_2&lt; Kernel, Container &gt; &amp;p1, General_polygon_with_holes_2&lt; Polygon_2&lt; Kernel, Container &gt; &gt; &amp;res)</argsstring>
        <name>join</name>
        <param>
          <type>const Polygon_with_holes_2&lt; <ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref>, Container &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const Polygon_2&lt; <ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref>, Container &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>General_polygon_with_holes_2&lt; Polygon_2&lt; <ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref>, Container &gt; &gt; &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>writes the union of the polygons <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> into the polygon with holes <computeroutput>res</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if the two given polygons overlap. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="536" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__join_1ga3eff8f310586a602661a185053c69b14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></type>
          </param>
          <param>
            <type>class Container</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::join</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;p2, const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;p1, General_polygon_with_holes_2&lt; Polygon_2&lt; Kernel, Container &gt; &gt; &amp;res)</argsstring>
        <name>join</name>
        <param>
          <type>const Polygon_with_holes_2&lt; <ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref>, Container &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const Polygon_with_holes_2&lt; <ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref>, Container &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>General_polygon_with_holes_2&lt; Polygon_2&lt; <ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref>, Container &gt; &gt; &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>writes the union of the polygons <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> into the polygon with holes <computeroutput>res</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if the two given polygons overlap. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="546" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__join_1ga5f19df4bae6e381a2bcf29c8caec0a1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::join</definition>
        <argsstring>(const General_polygon_2&lt; Traits &gt; &amp;p1, const General_polygon_2&lt; Traits &gt; &amp;p2, General_polygon_with_holes_2&lt; General_polygon_2&lt; Traits &gt; &gt; &amp;res)</argsstring>
        <name>join</name>
        <param>
          <type>const General_polygon_2&lt; Traits &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const General_polygon_2&lt; Traits &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>General_polygon_with_holes_2&lt; General_polygon_2&lt; Traits &gt; &gt; &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>writes the union of the general polygons <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> into the polygon with holes <computeroutput>res</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if the two given polygons overlap. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="556" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__join_1gab86e56edb1af1a5ff1e0d2a7b87f16b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::join</definition>
        <argsstring>(const General_polygon_2&lt; Traits &gt; &amp;p1, const General_polygon_with_holes_2&lt; General_polygon_2&lt; Traits &gt; &gt; &amp;p2, General_polygon_with_holes_2&lt; General_polygon_2&lt; Traits &gt; &gt; &amp;res)</argsstring>
        <name>join</name>
        <param>
          <type>const General_polygon_2&lt; Traits &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const General_polygon_with_holes_2&lt; General_polygon_2&lt; Traits &gt; &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>General_polygon_with_holes_2&lt; General_polygon_2&lt; Traits &gt; &gt; &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>writes the union of the polygons <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> into the polygon with holes <computeroutput>res</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if the two given polygons overlap. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="566" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__join_1gaa1f10f0f76107975905e347c1b2c99ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::join</definition>
        <argsstring>(const General_polygon_with_holes_2&lt; General_polygon_2&lt; Traits &gt; &gt; &amp;p2, const General_polygon_2&lt; Traits &gt; &amp;p1, General_polygon_with_holes_2&lt; General_polygon_2&lt; Traits &gt; &gt; &amp;res)</argsstring>
        <name>join</name>
        <param>
          <type>const General_polygon_with_holes_2&lt; General_polygon_2&lt; Traits &gt; &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const General_polygon_2&lt; Traits &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>General_polygon_with_holes_2&lt; General_polygon_2&lt; Traits &gt; &gt; &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>writes the union of the general polygons <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> into the polygon with holes <computeroutput>res</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if the two given polygons overlap. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="576" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__join_1ga298a74e0f020a5f61166f10202aae6e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Polygon</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::join</definition>
        <argsstring>(const General_polygon_with_holes_2&lt; Polygon &gt; &amp;p1, const General_polygon_with_holes_2&lt; Polygon &gt; &amp;p2, Traits::Polygon_with_holes_2 &amp;res)</argsstring>
        <name>join</name>
        <param>
          <type>const General_polygon_with_holes_2&lt; Polygon &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const General_polygon_with_holes_2&lt; Polygon &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>Traits::Polygon_with_holes_2 &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>writes the union of the general polygons <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> into the polygon with holes <computeroutput>res</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if the two given polygons overlap. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="586" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__join_1gad52000fb393e22aefbe29eb2842af527" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          </param>
          <param>
            <type>class <ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::join</definition>
        <argsstring>(InputIterator begin, InputIterator end, OutputIterator oi)</argsstring>
        <name>join</name>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>begin</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>oi</declname>
        </param>
        <briefdescription>
<para>computes the union of the general polygons (or general polygons with holes) in the given range. </para>        </briefdescription>
        <detaileddescription>
<para>(The value type of the input iterator is used to distinguish between the two.) The result, represented by a set of general polygon with holes, is written into the output iterator <computeroutput>oi</computeroutput>. The output iterator is returned. The value type of the <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> is <computeroutput>Traits::Polygon_with_holes_2</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="601" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__join_1ga7a554f42a12babcd36da05fb70123d35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIterator1</type>
          </param>
          <param>
            <type>class InputIterator2</type>
          </param>
          <param>
            <type>class <ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::join</definition>
        <argsstring>(InputIterator1 pgn_begin1, InputIterator1 pgn_end1, InputIterator2 pgn_begin2, InputIterator2 pgn_end2, OutputIterator oi)</argsstring>
        <name>join</name>
        <param>
          <type>InputIterator1</type>
          <declname>pgn_begin1</declname>
        </param>
        <param>
          <type>InputIterator1</type>
          <declname>pgn_end1</declname>
        </param>
        <param>
          <type>InputIterator2</type>
          <declname>pgn_begin2</declname>
        </param>
        <param>
          <type>InputIterator2</type>
          <declname>pgn_end2</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>oi</declname>
        </param>
        <briefdescription>
<para>computes the union of the general polygons and general polygons with holes in the given two ranges. </para>        </briefdescription>
        <detaileddescription>
<para>The result, represented by a set of general polygon with holes, is written into the output iterator <computeroutput>oi</computeroutput>. The output iterator is returned. The value type of the <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> is <computeroutput>Traits::Polygon_with_holes_2</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="614" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="group__boolean__join_1ref_bso_union"/> Each one of these functions computes the union of two given polygons <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput>. If the two given polygons overlap, it returns <computeroutput>true</computeroutput>, and places the resulting polygon in <computeroutput>p</computeroutput>. Otherwise, it returns <computeroutput>false</computeroutput>.</para><para>The signature of the function is <programlisting><codeline><highlight class="normal">bool<sp/>join(const<sp/>Type1<sp/>&amp;<sp/>p1,<sp/>const<sp/>Type2<sp/>&amp;<sp/>p2,<sp/>General_polygon_with_holes_2<sp/>&amp;<sp/>res);</highlight></codeline>
</programlisting></para><para><bold>Parameters</bold><linebreak/>
</para><para>The types of the paramters of the <computeroutput><ref refid="group__boolean__join_1gafca2f0759f989fe95d1c56b0428a0f16" kindref="member">join()</ref></computeroutput> function are any of the following combinations.</para><para> <table rows="9" cols="2"><row>
<entry thead="yes"><para>Type1</para></entry><entry thead="yes"><para>Type2 </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Polygon__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polygon.tag">Polygon_2</ref></para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Polygon__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polygon.tag">Polygon_2</ref> </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Polygon__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polygon.tag">Polygon_2</ref></para></entry><entry thead="no"><para>polygon_with_holes_2 </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Polygon__with__holes__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polygon.tag">Polygon_with_holes_2</ref></para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Polygon__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polygon.tag">Polygon_2</ref> </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Polygon__with__holes__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polygon.tag">Polygon_with_holes_2</ref></para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Polygon__with__holes__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polygon.tag">Polygon_with_holes_2</ref> </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></para></entry><entry thead="no"><para><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref> </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></para></entry><entry thead="no"><para><ref refid="classCGAL_1_1General__polygon__with__holes__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polygon.tag">General_polygon_with_holes_2</ref> </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1General__polygon__with__holes__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polygon.tag">General_polygon_with_holes_2</ref></para></entry><entry thead="no"><para><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref> </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1General__polygon__with__holes__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polygon.tag">General_polygon_with_holes_2</ref></para></entry><entry thead="no"><para><ref refid="classCGAL_1_1General__polygon__with__holes__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polygon.tag">General_polygon_with_holes_2</ref> </para></entry></row>
</table>
</para><para><simplesect kind="see"><para><ref refid="group__boolean__do__intersect" kindref="compound"><computeroutput>CGAL::do_intersect()</computeroutput> </ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__boolean__intersection" kindref="compound"><computeroutput>CGAL::intersection()</computeroutput> </ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__boolean__difference" kindref="compound"><computeroutput>CGAL::difference()</computeroutput> </ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__boolean__symmetric__difference" kindref="compound"><computeroutput>CGAL::symmetric_difference()</computeroutput> </ref> </para></simplesect>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
