<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Polyhedral__mesh__domain__with__features__3" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Polyhedral_mesh_domain_with_features_3</compoundname>
    <basecompoundref refid="classCGAL_1_1Mesh__domain__with__polyline__features__3" prot="public" virt="non-virtual">CGAL::Mesh_domain_with_polyline_features_3&lt; CGAL::Polyhedral_mesh_domain_3&lt; CGAL::Mesh_polyhedron_3&lt; IGT &gt;::type, IGT &gt; &gt;</basecompoundref>
    <includes local="no">CGAL/Polyhedral_mesh_domain_with_features_3.h</includes>
    <templateparamlist>
      <param>
        <type>typename IGT</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classCGAL_1_1Polyhedral__mesh__domain__with__features__3_1a5d8e66b530afb7f12e9dd7457e5be3c7" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Polyhedral_mesh_domain_with_features_3&lt; IGT &gt;::FT</definition>
        <argsstring></argsstring>
        <name>FT</name>
        <briefdescription>
<para>Numerical type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_mesh_domain_with_features_3.h" line="42" column="1" bodyfile="CGAL/Polyhedral_mesh_domain_with_features_3.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Polyhedral__mesh__domain__with__features__3_1a254f513ba195a38fad4919774d768ba0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Polyhedron</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>CGAL::Polyhedral_mesh_domain_with_features_3&lt; IGT &gt;::Polyhedral_mesh_domain_with_features_3</definition>
        <argsstring>(const Polyhedron &amp;bounding_polyhedron)</argsstring>
        <name>Polyhedral_mesh_domain_with_features_3</name>
        <param>
          <type>const Polyhedron &amp;</type>
          <declname>bounding_polyhedron</declname>
        </param>
        <briefdescription>
<para>Constructs a <computeroutput><ref refid="classCGAL_1_1Polyhedral__mesh__domain__with__features__3" kindref="compound">Polyhedral_mesh_domain_with_features_3</ref></computeroutput> from a polyhedral surface of type <computeroutput>Polyhedron</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The only requirement on type <computeroutput>Polyhedron</computeroutput> is that <computeroutput><ref refid="structCGAL_1_1Mesh__polyhedron__3" kindref="compound">CGAL::Mesh_polyhedron_3</ref>&lt;IGT&gt;::type</computeroutput> should be constructible from <computeroutput>Polyhedron</computeroutput>. No feature detection is done at this level. Note that a copy of <computeroutput>bounding_polyhedron</computeroutput> will be done. The polyhedron <computeroutput>bounding_polyhedron</computeroutput> has to be closed and free of intersections. Its interior of <computeroutput>bounding_polyhedron</computeroutput> will be meshed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_mesh_domain_with_features_3.h" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedral__mesh__domain__with__features__3_1aff81e84bce031803eca2097924ee1a04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Polyhedron</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>CGAL::Polyhedral_mesh_domain_with_features_3&lt; IGT &gt;::Polyhedral_mesh_domain_with_features_3</definition>
        <argsstring>(const Polyhedron &amp;polyhedron, const Polyhedron &amp;bounding_polyhedron)</argsstring>
        <name>Polyhedral_mesh_domain_with_features_3</name>
        <param>
          <type>const Polyhedron &amp;</type>
          <declname>polyhedron</declname>
        </param>
        <param>
          <type>const Polyhedron &amp;</type>
          <declname>bounding_polyhedron</declname>
        </param>
        <briefdescription>
<para>Constructs a <computeroutput><ref refid="classCGAL_1_1Polyhedral__mesh__domain__with__features__3" kindref="compound">Polyhedral_mesh_domain_with_features_3</ref></computeroutput> from a polyhedral surface, and a bounding polyhedral surface. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput><ref refid="structCGAL_1_1Mesh__polyhedron__3" kindref="compound">CGAL::Mesh_polyhedron_3</ref>&lt;IGT&gt;::type</computeroutput> should be constructible from <computeroutput>Polyhedron</computeroutput>. The first polyhedron should be entirely included inside <computeroutput>bounding_polyhedron</computeroutput>, which has to be closed and free of intersections. Using this constructor allows to mesh a polyhedral surface which is not closed, or has holes. The inside of <computeroutput>bounding_polyhedron</computeroutput> will be meshed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_mesh_domain_with_features_3.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedral__mesh__domain__with__features__3_1acc241e033a1b04b4d4f795df5c0de308" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Polyhedral_mesh_domain_with_features_3&lt; IGT &gt;::Polyhedral_mesh_domain_with_features_3</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>Polyhedral_mesh_domain_with_features_3</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000007"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Constructs a <computeroutput><ref refid="classCGAL_1_1Polyhedral__mesh__domain__with__features__3" kindref="compound">Polyhedral_mesh_domain_with_features_3</ref></computeroutput> from an off file.</para></xrefdescription></xrefsect>No feature detection is done at this level. Users must read the file into a <computeroutput><ref refid="classCGAL_1_1Polyhedron__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polyhedron.tag">Polyhedron_3</ref></computeroutput> and call the constructor above. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_mesh_domain_with_features_3.h" line="78" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <memberdef kind="function" id="classCGAL_1_1Polyhedral__mesh__domain__with__features__3_1a20d13f7d3885fd96dd5939e1320cce64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Polyhedral_mesh_domain_with_features_3&lt; IGT &gt;::detect_features</definition>
        <argsstring>(FT angle_bound=60)</argsstring>
        <name>detect_features</name>
        <param>
          <type><ref refid="classCGAL_1_1Polyhedral__mesh__domain__with__features__3_1a5d8e66b530afb7f12e9dd7457e5be3c7" kindref="member">FT</ref></type>
          <declname>angle_bound</declname>
          <defval>60</defval>
        </param>
        <briefdescription>
<para>Detects sharp features and boundaries of the internal bounding polyhedron (and the potential internal polyhedron) and inserts them as features of the domain. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>angle_bound</computeroutput> gives the maximum angle (in degrees) between the two normal vectors of adjacent triangles. For an edge of the polyhedron, if the angle between the two normal vectors of its incident facets is bigger than the given bound, then the edge is considered as a feature edge. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_mesh_domain_with_features_3.h" line="93" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedral__mesh__domain__with__features__3_1a1c6024f100d9a6cd64f4bdeffeb210e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Polyhedral_mesh_domain_with_features_3&lt; IGT &gt;::detect_borders</definition>
        <argsstring>()</argsstring>
        <name>detect_borders</name>
        <briefdescription>
<para>Detects border edges of the bounding polyhedron and inserts them as features of the domain. </para>        </briefdescription>
        <detaileddescription>
<para>This function should be called alone only, and not before or after <computeroutput><ref refid="classCGAL_1_1Polyhedral__mesh__domain__with__features__3_1a20d13f7d3885fd96dd5939e1320cce64" kindref="member">detect_features()</ref></computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_mesh_domain_with_features_3.h" line="100" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The class <computeroutput><ref refid="classCGAL_1_1Polyhedral__mesh__domain__with__features__3" kindref="compound">Polyhedral_mesh_domain_with_features_3</ref></computeroutput> implements a domain whose boundary is a simplicial polyhedral surface. </para>    </briefdescription>
    <detaileddescription>
<para>This surface must be free of intersection. It can either be closed, included inside another polyhedral surface which is closed and free of intersection, or open. In the latter case, the meshing process will only take care of the quality of the 1D (features and boundaries) and 2D (surfaces) components of the mesh.</para><para>It is a model of the concept <computeroutput><ref refid="classMeshDomainWithFeatures__3" kindref="compound">MeshDomainWithFeatures_3</ref></computeroutput>. It also provides a member function to automatically detect sharp features and boundaries from the input polyhedral surface(s).</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>IGT</parametername>
</parameternamelist>
<parameterdescription>
<para>stands for a geometric traits class providing the types and functors required to implement the intersection tests and intersection computations for polyhedral boundary surfaces. This parameter has to be instantiated with a model of the concept <computeroutput><ref refid="classIntersectionGeometricTraits__3" kindref="compound">IntersectionGeometricTraits_3</ref></computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<xrefsect id="models_1_models000015"><xreftitle>Is Model Of</xreftitle><xrefdescription><para><computeroutput><ref refid="classMeshDomainWithFeatures__3" kindref="compound">MeshDomainWithFeatures_3</ref></computeroutput> </para></xrefdescription></xrefsect></para><para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Mesh__domain__with__polyline__features__3" kindref="compound">CGAL::Mesh_domain_with_polyline_features_3</ref>&lt;MD&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Polyhedral__mesh__domain__3" kindref="compound">CGAL::Polyhedral_mesh_domain_3</ref>&lt;Polyhedron,IGT,TriangleAccessor&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Mesh__polyhedron__3" kindref="compound">CGAL::Mesh_polyhedron_3</ref>&lt;IGT&gt;</computeroutput> </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="69">
        <label>CGAL::Mesh_domain_with_polyline_features_3&lt; CGAL::Polyhedral_mesh_domain_3&lt; CGAL::Mesh_polyhedron_3&lt; IGT &gt;::type, IGT &gt; &gt;</label>
        <link refid="classCGAL_1_1Mesh__domain__with__polyline__features__3"/>
        <childnode refid="70" relation="public-inheritance">
        </childnode>
        <childnode refid="72" relation="template-instance">
          <edgelabel>&lt; CGAL::Polyhedral_mesh_domain_3&lt; CGAL::Mesh_polyhedron_3&lt; IGT &gt;::type, IGT &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="71">
        <label>CGAL::Polyhedral_mesh_domain_3&lt; Polyhedron, IGT, TriangleAccessor &gt;</label>
        <link refid="classCGAL_1_1Polyhedral__mesh__domain__3"/>
      </node>
      <node id="68">
        <label>CGAL::Polyhedral_mesh_domain_with_features_3&lt; IGT &gt;</label>
        <link refid="classCGAL_1_1Polyhedral__mesh__domain__with__features__3"/>
        <childnode refid="69" relation="public-inheritance">
        </childnode>
      </node>
      <node id="73">
        <label>MeshDomain_3</label>
        <link refid="classMeshDomain__3"/>
      </node>
      <node id="70">
        <label>CGAL::Polyhedral_mesh_domain_3&lt; CGAL::Mesh_polyhedron_3&lt; IGT &gt;::type, IGT &gt;</label>
        <link refid="classCGAL_1_1Polyhedral__mesh__domain__3"/>
        <childnode refid="71" relation="template-instance">
          <edgelabel>&lt; CGAL::Mesh_polyhedron_3&lt; IGT &gt;::type, IGT &gt;</edgelabel>
        </childnode>
      </node>
      <node id="72">
        <label>CGAL::Mesh_domain_with_polyline_features_3&lt; MeshDomain_3 &gt;</label>
        <link refid="classCGAL_1_1Mesh__domain__with__polyline__features__3"/>
        <childnode refid="73" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="75">
        <label>CGAL::Mesh_domain_with_polyline_features_3&lt; CGAL::Polyhedral_mesh_domain_3&lt; CGAL::Mesh_polyhedron_3&lt; IGT &gt;::type, IGT &gt; &gt;</label>
        <link refid="classCGAL_1_1Mesh__domain__with__polyline__features__3"/>
        <childnode refid="76" relation="public-inheritance">
        </childnode>
        <childnode refid="78" relation="template-instance">
          <edgelabel>&lt; CGAL::Polyhedral_mesh_domain_3&lt; CGAL::Mesh_polyhedron_3&lt; IGT &gt;::type, IGT &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="77">
        <label>CGAL::Polyhedral_mesh_domain_3&lt; Polyhedron, IGT, TriangleAccessor &gt;</label>
        <link refid="classCGAL_1_1Polyhedral__mesh__domain__3"/>
      </node>
      <node id="74">
        <label>CGAL::Polyhedral_mesh_domain_with_features_3&lt; IGT &gt;</label>
        <link refid="classCGAL_1_1Polyhedral__mesh__domain__with__features__3"/>
        <childnode refid="75" relation="public-inheritance">
        </childnode>
      </node>
      <node id="79">
        <label>MeshDomain_3</label>
        <link refid="classMeshDomain__3"/>
      </node>
      <node id="76">
        <label>CGAL::Polyhedral_mesh_domain_3&lt; CGAL::Mesh_polyhedron_3&lt; IGT &gt;::type, IGT &gt;</label>
        <link refid="classCGAL_1_1Polyhedral__mesh__domain__3"/>
        <childnode refid="77" relation="template-instance">
          <edgelabel>&lt; CGAL::Mesh_polyhedron_3&lt; IGT &gt;::type, IGT &gt;</edgelabel>
        </childnode>
      </node>
      <node id="78">
        <label>CGAL::Mesh_domain_with_polyline_features_3&lt; MeshDomain_3 &gt;</label>
        <link refid="classCGAL_1_1Mesh__domain__with__polyline__features__3"/>
        <childnode refid="79" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="CGAL/Polyhedral_mesh_domain_with_features_3.h" line="33" column="1" bodyfile="CGAL/Polyhedral_mesh_domain_with_features_3.h" bodystart="30" bodyend="104"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Mesh__domain__with__polyline__features__3_1a364109e2a07e005e27cab30cfa334f02" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_mesh_domain_with_features_3</scope><name>add_features</name></member>
      <member refid="classCGAL_1_1Mesh__domain__with__polyline__features__3_1a625e43ab832eeff1e2acdc71fb07ffa2" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_mesh_domain_with_features_3</scope><name>add_features_and_incidences</name></member>
      <member refid="classCGAL_1_1Mesh__domain__with__polyline__features__3_1affec9006b8aaac3dde88168ba57ffbc2" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_mesh_domain_with_features_3</scope><name>construct_point_on_curve</name></member>
      <member refid="classCGAL_1_1Mesh__domain__with__polyline__features__3_1a7e4d8b538824c98d245dc9b3a7f6921e" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_mesh_domain_with_features_3</scope><name>Corner_index</name></member>
      <member refid="classCGAL_1_1Mesh__domain__with__polyline__features__3_1a4a64a8fae657b350a7ba15e7fe0b8e23" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_mesh_domain_with_features_3</scope><name>corner_index</name></member>
      <member refid="classCGAL_1_1Mesh__domain__with__polyline__features__3_1a4582ee071c44f683b82bed384a47cd48" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_mesh_domain_with_features_3</scope><name>curve_index</name></member>
      <member refid="classCGAL_1_1Mesh__domain__with__polyline__features__3_1a958ec58e582617d906fb7897f53ee597" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_mesh_domain_with_features_3</scope><name>Curve_index</name></member>
      <member refid="classCGAL_1_1Mesh__domain__with__polyline__features__3_1a54cccf390c7b69d8f7216341495bad4e" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_mesh_domain_with_features_3</scope><name>curve_length</name></member>
      <member refid="classCGAL_1_1Mesh__domain__with__polyline__features__3_1a53dc8687128d150f500c8721df07a227" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_mesh_domain_with_features_3</scope><name>curve_segment_length</name></member>
      <member refid="classCGAL_1_1Polyhedral__mesh__domain__with__features__3_1a1c6024f100d9a6cd64f4bdeffeb210e7" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_mesh_domain_with_features_3</scope><name>detect_borders</name></member>
      <member refid="classCGAL_1_1Polyhedral__mesh__domain__with__features__3_1a20d13f7d3885fd96dd5939e1320cce64" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_mesh_domain_with_features_3</scope><name>detect_features</name></member>
      <member refid="classCGAL_1_1Mesh__domain__with__polyline__features__3_1a3f46ffea7f794c683a902cce9be0ff92" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_mesh_domain_with_features_3</scope><name>distance_sign</name></member>
      <member refid="classCGAL_1_1Mesh__domain__with__polyline__features__3_1af33bbc89c488e20635c96a8f10da15e8" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_mesh_domain_with_features_3</scope><name>distance_sign_along_loop</name></member>
      <member refid="classCGAL_1_1Polyhedral__mesh__domain__with__features__3_1a5d8e66b530afb7f12e9dd7457e5be3c7" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_mesh_domain_with_features_3</scope><name>FT</name></member>
      <member refid="classCGAL_1_1Mesh__domain__with__polyline__features__3_1ab5c519a4d93d8e63867fdde9617a5bc3" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_mesh_domain_with_features_3</scope><name>get_corners</name></member>
      <member refid="classCGAL_1_1Mesh__domain__with__polyline__features__3_1a1fd503f8dc9696d9b9546d97cc3b4079" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_mesh_domain_with_features_3</scope><name>get_curves</name></member>
      <member refid="classCGAL_1_1Mesh__domain__with__polyline__features__3_1adbdab34e8b92c17e629facd3134718ca" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_mesh_domain_with_features_3</scope><name>Has_features</name></member>
      <member refid="classCGAL_1_1Mesh__domain__with__polyline__features__3_1ae920c401ea8ffd0657187c82c8bc3948" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_mesh_domain_with_features_3</scope><name>Index</name></member>
      <member refid="classCGAL_1_1Mesh__domain__with__polyline__features__3_1a4d84e2115e1559caa5d07d4cb19484c0" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_mesh_domain_with_features_3</scope><name>index_from_corner_index</name></member>
      <member refid="classCGAL_1_1Mesh__domain__with__polyline__features__3_1a21a5be733c533827c5100700ad8e37ab" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_mesh_domain_with_features_3</scope><name>index_from_curve_index</name></member>
      <member refid="classCGAL_1_1Mesh__domain__with__polyline__features__3_1af72f9cf0ffefaf5840e38da4bebd737d" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_mesh_domain_with_features_3</scope><name>is_curve_segment_covered</name></member>
      <member refid="classCGAL_1_1Mesh__domain__with__polyline__features__3_1a7d27e5dbaf99e9ed77790f0b2498dfaa" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_mesh_domain_with_features_3</scope><name>is_loop</name></member>
      <member refid="classCGAL_1_1Mesh__domain__with__polyline__features__3_1ae45bebd3ee79ac694a407cdc758193f5" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_mesh_domain_with_features_3</scope><name>Mesh_domain_with_polyline_features_3</name></member>
      <member refid="classCGAL_1_1Mesh__domain__with__polyline__features__3_1ab6ecea9e77ac6ca1916cde48d7b45461" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_mesh_domain_with_features_3</scope><name>Mesh_domain_with_polyline_features_3</name></member>
      <member refid="classCGAL_1_1Mesh__domain__with__polyline__features__3_1a7f9c4a5cc742894fa8087f5c7584a3c4" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_mesh_domain_with_features_3</scope><name>Mesh_domain_with_polyline_features_3</name></member>
      <member refid="classCGAL_1_1Polyhedral__mesh__domain__3_1ad0fdcf7446e0a0a94d06c75a77696772" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_mesh_domain_with_features_3</scope><name>Polyhedral_mesh_domain_3</name></member>
      <member refid="classCGAL_1_1Polyhedral__mesh__domain__3_1ad62d9971ded6d10e794409492ce96ca8" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_mesh_domain_with_features_3</scope><name>Polyhedral_mesh_domain_3</name></member>
      <member refid="classCGAL_1_1Polyhedral__mesh__domain__with__features__3_1a254f513ba195a38fad4919774d768ba0" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_mesh_domain_with_features_3</scope><name>Polyhedral_mesh_domain_with_features_3</name></member>
      <member refid="classCGAL_1_1Polyhedral__mesh__domain__with__features__3_1aff81e84bce031803eca2097924ee1a04" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_mesh_domain_with_features_3</scope><name>Polyhedral_mesh_domain_with_features_3</name></member>
      <member refid="classCGAL_1_1Polyhedral__mesh__domain__with__features__3_1acc241e033a1b04b4d4f795df5c0de308" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_mesh_domain_with_features_3</scope><name>Polyhedral_mesh_domain_with_features_3</name></member>
      <member refid="classCGAL_1_1Mesh__domain__with__polyline__features__3_1af69c35b1df1e267ee05aa727da58e361" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_mesh_domain_with_features_3</scope><name>Surface_patch_index</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
