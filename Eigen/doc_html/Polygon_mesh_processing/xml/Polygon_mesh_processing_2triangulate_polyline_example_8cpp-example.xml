<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="Polygon_mesh_processing_2triangulate_polyline_example_8cpp-example" kind="example">
    <compoundname>Polygon_mesh_processing/triangulate_polyline_example.cpp</compoundname>
    <detaileddescription>
<para><programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_inexact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Polygon_mesh_processing/triangulate_hole.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/utility.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Exact_predicates_inexact_constructions_kernel</ref><sp/>Kernel;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classKernel_1_1Point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel::Point_3</ref><sp/>Point;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;Point&gt;<sp/>polyline;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>polyline.push_back(Point(<sp/>1.,0.,0.));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>polyline.push_back(Point(<sp/>0.,1.,0.));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>polyline.push_back(Point(-1.,0.,0.));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>polyline.push_back(Point(<sp/>1.,1.,0.));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>repeating<sp/>first<sp/>point<sp/>(i.e.<sp/>polyline.push_back(Point(1.,0.,0.))<sp/>)<sp/>is<sp/>optional</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>any<sp/>type,<sp/>having<sp/>Type(int,<sp/>int,<sp/>int)<sp/>constructor<sp/>available,<sp/>can<sp/>be<sp/>used<sp/>to<sp/>hold<sp/>output<sp/>triangles</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Triple" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::Triple&lt;int, int, int&gt;</ref><sp/>Triangle_int;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;Triangle_int&gt;<sp/>patch;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>patch.reserve(polyline.size()<sp/>-2);<sp/></highlight><highlight class="comment">//<sp/>there<sp/>will<sp/>be<sp/>exactly<sp/>n-2<sp/>triangles<sp/>in<sp/>the<sp/>patch</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__hole__filling__grp_1ga8508fd49a2482ec7dcb3e1799234696a" kindref="member">CGAL::Polygon_mesh_processing::triangulate_hole_polyline</ref>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polyline,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::back_inserter(patch));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>patch.size();<sp/>++i)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Triangle<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>patch[i].first<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>patch[i].second<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>patch[i].third</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>note<sp/>that<sp/>no<sp/>degenerate<sp/>triangles<sp/>are<sp/>generated<sp/>in<sp/>the<sp/>patch</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;Point&gt;<sp/>polyline_collinear;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>polyline_collinear.push_back(Point(1.,0.,0.));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>polyline_collinear.push_back(Point(2.,0.,0.));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>polyline_collinear.push_back(Point(3.,0.,0.));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>polyline_collinear.push_back(Point(4.,0.,0.));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;Triangle_int&gt;<sp/>patch_will_be_empty;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__hole__filling__grp_1ga8508fd49a2482ec7dcb3e1799234696a" kindref="member">CGAL::Polygon_mesh_processing::triangulate_hole_polyline</ref>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polyline_collinear,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>back_inserter(patch_will_be_empty));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>CGAL_assertion(patch_will_be_empty.empty());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>    </detaileddescription>
  </compounddef>
</doxygen>
