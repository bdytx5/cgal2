<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>User Manual</title>
    <detaileddescription>
<para><anchor id="index_1Chapter_2D_Intersection_of_Curves"/><anchor id="index_1I1_ChapterSurfaceSweep"/>  <simplesect kind="authors"><para>Baruch Zukerman, Ron Wein, and Efi Fogel</para></simplesect>
</para><sect1 id="index_1Surface_sweep_2Introduction">
<title>Introduction</title>
<para>Let <formula id="6">$ {\mathcal C} = \{C_1, C_2, \ldots, C_n\}$</formula> be a set of curves. We wish to compute all intersection points between two curves in the set in an output-sensitive manner, without having to go over all <formula id="7">$ O(n^2)$</formula> curve pairs. To this end, we sweep an imaginary line <formula id="8">$ l$</formula> from <formula id="9">$ x = -\infty$</formula> to <formula id="10">$ x = \infty$</formula> over the plane. While sweeping the plane, we keep track of the order of curves intersecting it. This order changes at a finite number of <emphasis>event points</emphasis>, such that we only have to calculate the intersection points between two curves when they become contiguous. For more details on the <emphasis>surface-sweep algorithm</emphasis> see, for example, <ref refid="citelist_1CITEREF_bkos-cgaa-00" kindref="member">[1]</ref>, Chapter 2.</para><para>This chapter describes three functions implemented using the surface-sweep algorithm: given a collection of input curves, compute all intersection points, compute the set of subcurves that are pairwise interior-disjoint induced by them, and checking whether there is at least one pair of curves among them that intersect in their interior.</para><para>The implementation is robust. It supports general curves and handles all degenerate cases, including overlapping curves, vertical segments, and tangency between curves. The robustness of the algorithm is guaranteed if the functions are instantiated with a traits class that employs certified computations. This traits class must be a model of the <computeroutput><ref refid="classArrangementTraits__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Arrangement_on_surface_2.tag">ArrangementTraits_2</ref></computeroutput> concept - see the Chapter <ref refid="index_1chapterArrangement_on_surface_2" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Arrangement_on_surface_2.tag">2D Arrangements</ref> for more details.</para><para>The complexity of the surface-sweep algorithm is <formula id="11">$ O((n + k)\log{n})$</formula> where <formula id="12">$ n$</formula> is the number of the input curves and <formula id="3">$ k$</formula> is the number of intersection points induced by these curves.</para></sect1>
<sect1 id="index_1Surface_sweep_2Example">
<title>Example</title>
<para>The simple program listed below computes intersection points induced by a set of four input segments illustrated in <ref refid="index_1fig__SL_secsimple" kindref="member">fig__SL_secsimple</ref>.</para><para><anchor id="index_1fig__SL_secsimple"/><image type="html" name="sl_simple.png"></image>
 <image type="latex" name="sl_simple.png" width="15cm"></image>
  <ref refid="index_1fig__SL_secsimple" kindref="member">fig__SL_secsimple</ref> Four input segments  <linebreak/>
</para><para><linebreak/>
<bold>File</bold> <ref refid="Surface_sweep_2_2plane_sweep_8cpp-example" kindref="compound">Surface_sweep_2/plane_sweep.cpp</ref> <programlisting><codeline><highlight class="comment">//<sp/>Computing<sp/>intersection<sp/>points<sp/>among<sp/>curves<sp/>using<sp/>the<sp/>surface-sweep<sp/>alg.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_exact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Arr_segment_traits_2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Surface_sweep_2_algorithms.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Exact__predicates__exact__constructions__kernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Exact_predicates_exact_constructions_kernel</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kernel;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classKernel_1_1Point__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel::Point_2</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Arr__segment__traits__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Arrangement_on_surface_2.tag">CGAL::Arr_segment_traits_2&lt;Kernel&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Traits_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Traits_2::Curve_2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Segment_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>the<sp/>input<sp/>segments.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Segment_2<sp/>segments[]<sp/>=<sp/>{Segment_2<sp/>(Point_2<sp/>(1,<sp/>5),<sp/>Point_2<sp/>(8,<sp/>5)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Segment_2<sp/>(Point_2<sp/>(1,<sp/>1),<sp/>Point_2<sp/>(8,<sp/>8)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Segment_2<sp/>(Point_2<sp/>(3,<sp/>1),<sp/>Point_2<sp/>(3,<sp/>8)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Segment_2<sp/>(Point_2<sp/>(8,<sp/>5),<sp/>Point_2<sp/>(8,<sp/>8))};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>all<sp/>intersection<sp/>points.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::list&lt;Point_2&gt;<sp/>pts;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgIntersectionOfCurves2_1gaa0ccb28e78840ce9830e157bc6300586" kindref="member">CGAL::compute_intersection_points</ref>(segments,<sp/>segments<sp/>+<sp/>4,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::back_inserter(pts));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>the<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Found<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>pts.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>intersection<sp/>points:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::copy(pts.begin(),<sp/>pts.end(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostream_iterator&lt;Point_2&gt;(std::cout,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>non-intersecting<sp/>sub-segments<sp/>induced<sp/>by<sp/>the<sp/>input<sp/>segments.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::list&lt;Segment_2&gt;<sp/>sub_segs;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgIntersectionOfCurves2_1ga057822eb7bc42f6ef55914ba772d9f9c" kindref="member">CGAL::compute_subcurves</ref>(segments,<sp/>segments<sp/>+<sp/>4,<sp/>std::back_inserter(sub_segs));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Found<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>sub_segs.size()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>interior-disjoint<sp/>sub-segments.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>CGAL_assertion(<ref refid="group__PkgIntersectionOfCurves2_1gadb96b95f091371e834e3f7b4d24f7bb4" kindref="member">CGAL::do_curves_intersect</ref><sp/>(segments,<sp/>segments<sp/>+<sp/>4));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="index_1Surface_sweep_2Design">
<title>Design and Implementation History</title>
<para>The current version of the surface-sweep algorithm was written by Efi Fogel, based on previous implementations by Baruch Ester Ezra, Tali Zvi, and Baruch Zukerman. </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
