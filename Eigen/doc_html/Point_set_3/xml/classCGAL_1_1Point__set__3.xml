<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Point__set__3" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Point_set_3</compoundname>
    <includes local="no">CGAL/Point_set_3.h</includes>
    <innerclass refid="classCGAL_1_1Point__set__3_1_1Index" prot="public">CGAL::Point_set_3::Index</innerclass>
    <templateparamlist>
      <param>
        <type>typename Point</type>
      </param>
      <param>
        <type>typename Vector</type>
        <defval>typename <ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel_traits</ref>&lt;Point&gt;::<ref refid="classKernel_1_1Vector__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel::Vector_3</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Construction, Destruction, Assignment</header>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1aafda3c8eaae3d1cf6466d62138a9ac9f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CGAL::Point_set_3&lt; Point, Vector &gt;::Point_set_3</definition>
        <argsstring>(bool with_normal_map=false)</argsstring>
        <name>Point_set_3</name>
        <param>
          <type>bool</type>
          <declname>with_normal_map</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Creates an empty point set with no additional property. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_normal_map</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> if the normal map should be added. If <computeroutput>false</computeroutput> (default value), the normal map can still be added later on (see <computeroutput><ref refid="classCGAL_1_1Point__set__3_1a4f7dce77e9796e9cf44809ea3e4e9d6b" kindref="member">add_normal_map()</ref></computeroutput>). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="221" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="221" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1ae41c8923997b5a8548e25e51649a1df9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Point__set__3" kindref="compound">Point_set_3</ref> &amp;</type>
        <definition>Point_set_3&amp; CGAL::Point_set_3&lt; Point, Vector &gt;::operator=</definition>
        <argsstring>(const Point_set_3 &amp;ps)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__set__3" kindref="compound">Point_set_3</ref> &amp;</type>
          <declname>ps</declname>
        </param>
        <briefdescription>
<para>Assignment operator, all properties with their content are copied. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="231" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="231" bodyend="239"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Memory Management</header>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1a6a61b25872973b239c12a79f598dfb73" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Point_set_3&lt; Point, Vector &gt;::is_empty</definition>
        <argsstring>() const</argsstring>
        <name>is_empty</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if the number of elements not marked as removed is 0, <computeroutput>false</computeroutput> otherwise. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This does not count the removed elements.</para></simplesect>
<simplesect kind="note"><para>The method <computeroutput>empty()</computeroutput> is also available (see <computeroutput><ref refid="classRange" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput>) and does the same thing. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="271" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="271" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1a32ceb0d2076cecac38167ff362eccd2e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Point_set_3&lt; Point, Vector &gt;::number_of_points</definition>
        <argsstring>() const</argsstring>
        <name>number_of_points</name>
        <briefdescription>
<para>Returns the number of elements (not counting elements marked as removed). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>See <computeroutput><ref refid="classCGAL_1_1Point__set__3_1a14f5c5af31234bf24a736b22155b71be" kindref="member">number_of_removed_points()</ref></computeroutput> for getting the number of elements marked as removed.</para></simplesect>
<simplesect kind="note"><para>The method <computeroutput>size()</computeroutput> is also available (see <computeroutput><ref refid="classRange" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput>) and does the same thing. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="283" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="283" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1a1a2906af8c99af2e58ebca7b7fc54b3a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Point_set_3&lt; Point, Vector &gt;::join</definition>
        <argsstring>(Point_set_3 &amp;other)</argsstring>
        <name>join</name>
        <param>
          <type><ref refid="classCGAL_1_1Point__set__3" kindref="compound">Point_set_3</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Merges <computeroutput>other</computeroutput> in the point set. </para>        </briefdescription>
        <detaileddescription>
<para>Shifts the indices of points of <computeroutput>other</computeroutput> by <computeroutput><ref refid="classCGAL_1_1Point__set__3_1a32ceb0d2076cecac38167ff362eccd2e" kindref="member">number_of_points()</ref> + other.number_of_points()</computeroutput>.</para><para>Copies entries of all property maps which have the same name in the point set and <computeroutput>other</computeroutput>. Property maps which are only in <computeroutput>other</computeroutput> are ignored.</para><para><simplesect kind="note"><para>Garbage is collected in both point sets when calling this function. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="300" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="300" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1a6d53149421c3d97c949192e0258bac66" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Point_set_3&lt; Point, Vector &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Clears the point set properties and content. </para>        </briefdescription>
        <detaileddescription>
<para>After calling this function, the object is the same as a newly constructed object. The additional properties (such as normal vectors) are also removed and must thus be re-added if needed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="321" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="321" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1a1bd45ecee30f35477e412d4581bae211" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Point_set_3&lt; Point, Vector &gt;::clear_properties</definition>
        <argsstring>()</argsstring>
        <name>clear_properties</name>
        <briefdescription>
<para>Clears all properties created. </para>        </briefdescription>
        <detaileddescription>
<para>After calling this function, all properties are removed. The points are left unchanged. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="335" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="335" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1a5ad5771002caef53459ffde7e4b6b4ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Point_set_3&lt; Point, Vector &gt;::reserve</definition>
        <argsstring>(std::size_t s)</argsstring>
        <name>reserve</name>
        <param>
          <type>std::size_t</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Increases the capacity of internal containers to be able to efficiently accommodate at least <computeroutput>s</computeroutput> elements. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Expected final number of elements.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This method does not change the content of the point set and is only used for optimization. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="356" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="356" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1a938db0b9df274d2ee7b62b484fd806bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Point_set_3&lt; Point, Vector &gt;::resize</definition>
        <argsstring>(std::size_t s)</argsstring>
        <name>resize</name>
        <param>
          <type>std::size_t</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Changes size of the point set. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Target size of the point set.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>If the given size is larger than the current size, the capacity of the internal container is extended. If there are element marked as removed, they may be overwritten. If the given size is smaller than the current size, garbage is collected and the container is resized. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="369" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="369" bodyend="391"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Adding Points and Normals</header>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1ad216c71b08063e0e328c100d757db2bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Point__set__3_1aefdfb209bf53edf0f9fd1bc1ea0e5ba9" kindref="member">iterator</ref></type>
        <definition>iterator CGAL::Point_set_3&lt; Point, Vector &gt;::insert</definition>
        <argsstring>()</argsstring>
        <name>insert</name>
        <briefdescription>
<para>Inserts a new element with default property values. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The iterator on the newly added element.</para></simplesect>
<simplesect kind="note"><para>If a reallocation happens, all iterators, pointers and references related to the container are invalidated. Otherwise, only the end iterator is invalidated, and all iterators, pointers and references to elements are guaranteed to keep referring to the same elements they were referring to before the call. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="409" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="409" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1a9009460c6680b22c5823bbd160e33cf2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Point__set__3_1aefdfb209bf53edf0f9fd1bc1ea0e5ba9" kindref="member">iterator</ref></type>
        <definition>iterator CGAL::Point_set_3&lt; Point, Vector &gt;::insert</definition>
        <argsstring>(const Point &amp;p)</argsstring>
        <name>insert</name>
        <param>
          <type>const Point &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Inserts new point with default property values. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Point to insert</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Properties of the added point are initialized to their default value.</para></simplesect>
<simplesect kind="note"><para>If a reallocation happens, all iterators, pointers and references related to the container are invalidated. Otherwise, only the end iterator is invalidated, and all iterators, pointers and references to elements are guaranteed to keep referring to the same elements they were referring to before the call.</para></simplesect>
<simplesect kind="return"><para>The iterator on the newly added element. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="444" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="444" bodyend="449"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1acd87a6f1e03fdb0d1bec9111272043ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Point__set__3_1aefdfb209bf53edf0f9fd1bc1ea0e5ba9" kindref="member">iterator</ref></type>
        <definition>iterator CGAL::Point_set_3&lt; Point, Vector &gt;::insert</definition>
        <argsstring>(const Point &amp;p, const Vector &amp;n)</argsstring>
        <name>insert</name>
        <param>
          <type>const Point &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const Vector &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Convenience function to add a point with a normal vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Point to insert </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Associated normal vector</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Properties of the added point other than its normal vector are initialized to their default value.</para></simplesect>
<simplesect kind="note"><para>A normal property must have been added to the point set before using this method.</para></simplesect>
<simplesect kind="note"><para>If a reallocation happens, all iterators, pointers and references related to the container are invalidated. Otherwise, only the end iterator is invalidated, and all iterators, pointers and references to elements are guaranteed to keep referring to the same elements they were referring to before the call.</para></simplesect>
<simplesect kind="return"><para>The iterator on the newly added element. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="471" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="471" bodyend="477"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Accessors and Iterators</header>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1a3d9201b986808c9cf8c6aaa65d9cfc88" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Point__set__3_1aefdfb209bf53edf0f9fd1bc1ea0e5ba9" kindref="member">iterator</ref></type>
        <definition>iterator CGAL::Point_set_3&lt; Point, Vector &gt;::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Returns the begin iterator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="487" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="487" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1a97fac9d9fe82dea17c3de017f2f2a6e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Point__set__3_1aefdfb209bf53edf0f9fd1bc1ea0e5ba9" kindref="member">iterator</ref></type>
        <definition>iterator CGAL::Point_set_3&lt; Point, Vector &gt;::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
<para>Returns the past-the-end iterator. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The returned value is the same as <computeroutput><ref refid="classCGAL_1_1Point__set__3_1a75b49192a2866cbfc2caa8f854dab759" kindref="member">garbage_begin()</ref></computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="492" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="492" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1afcba783431b57f040be79a42b3f4ee99" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Point__set__3_1ac796907079351ad2fb7abcd8660ed0df" kindref="member">const_iterator</ref></type>
        <definition>const_iterator CGAL::Point_set_3&lt; Point, Vector &gt;::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Returns the begin constant iterator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="496" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="496" bodyend="496"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1a4e9d7f50aa4b4bca24e915a546578131" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Point__set__3_1ac796907079351ad2fb7abcd8660ed0df" kindref="member">const_iterator</ref></type>
        <definition>const_iterator CGAL::Point_set_3&lt; Point, Vector &gt;::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
<para>Returns the past-the-end constant iterator. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The returned value is the same as <computeroutput><ref refid="classCGAL_1_1Point__set__3_1a75b49192a2866cbfc2caa8f854dab759" kindref="member">garbage_begin()</ref></computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="501" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="501" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1a5acc26fcc6154088464952e5f818dee2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Point &amp;</type>
        <definition>Point&amp; CGAL::Point_set_3&lt; Point, Vector &gt;::point</definition>
        <argsstring>(const Index &amp;index)</argsstring>
        <name>point</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__set__3_1_1Index" kindref="compound">Index</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Returns a reference to the point corresponding to <computeroutput>index</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="505" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="505" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1a7ae809c10f7c3335eff967113cfbff00" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Point &amp;</type>
        <definition>const Point&amp; CGAL::Point_set_3&lt; Point, Vector &gt;::point</definition>
        <argsstring>(const Index &amp;index) const</argsstring>
        <name>point</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__set__3_1_1Index" kindref="compound">Index</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Returns a constant reference to the point corresponding to <computeroutput>index</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="509" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="509" bodyend="509"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1a3580382a87d8741d26028cacdd6d001e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Vector &amp;</type>
        <definition>Vector&amp; CGAL::Point_set_3&lt; Point, Vector &gt;::normal</definition>
        <argsstring>(const Index &amp;index)</argsstring>
        <name>normal</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__set__3_1_1Index" kindref="compound">Index</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Returns a reference to the normal corresponding to <computeroutput>index</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The normal property must have been added to the point set before calling this method (see <computeroutput><ref refid="classCGAL_1_1Point__set__3_1a4f7dce77e9796e9cf44809ea3e4e9d6b" kindref="member">add_normal_map()</ref></computeroutput>). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="516" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="516" bodyend="516"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1af607702e6d0bd8ed3aab696f7e36c756" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Vector &amp;</type>
        <definition>const Vector&amp; CGAL::Point_set_3&lt; Point, Vector &gt;::normal</definition>
        <argsstring>(const Index &amp;index) const</argsstring>
        <name>normal</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__set__3_1_1Index" kindref="compound">Index</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Returns a constant reference to the normal corresponding to <computeroutput>index</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The normal property must have been added to the point set before calling this method (see <computeroutput><ref refid="classCGAL_1_1Point__set__3_1a4f7dce77e9796e9cf44809ea3e4e9d6b" kindref="member">add_normal_map()</ref></computeroutput>). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="523" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="523" bodyend="523"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Removal Functions</header>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1a2373069f911654c58cfea2d01752eafb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Point_set_3&lt; Point, Vector &gt;::remove</definition>
        <argsstring>(iterator first, iterator last)</argsstring>
        <name>remove</name>
        <param>
          <type><ref refid="classCGAL_1_1Point__set__3_1aefdfb209bf53edf0f9fd1bc1ea0e5ba9" kindref="member">iterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Point__set__3_1aefdfb209bf53edf0f9fd1bc1ea0e5ba9" kindref="member">iterator</ref></type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Marks all elements between <computeroutput>first</computeroutput> and <computeroutput>last</computeroutput> as removed. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The elements are just marked as removed and are not erased from the memory. <computeroutput><ref refid="classCGAL_1_1Point__set__3_1a46c81a44d3e59eb8f6142d8651083adc" kindref="member">collect_garbage()</ref></computeroutput> should be called if the memory needs to be disallocated.</para></simplesect>
<simplesect kind="note"><para>All iterators, pointers and references related to the container are invalidated. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="539" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="539" bodyend="558"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1a69d31427b38854fc1dc1eb35e9f59ceb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Point_set_3&lt; Point, Vector &gt;::remove</definition>
        <argsstring>(iterator it)</argsstring>
        <name>remove</name>
        <param>
          <type><ref refid="classCGAL_1_1Point__set__3_1aefdfb209bf53edf0f9fd1bc1ea0e5ba9" kindref="member">iterator</ref></type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>Marks element specified by iterator as removed. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The element is just marked as removed and is not erased from the memory. <computeroutput><ref refid="classCGAL_1_1Point__set__3_1a46c81a44d3e59eb8f6142d8651083adc" kindref="member">collect_garbage()</ref></computeroutput> should be called if the memory needs to be freed.</para></simplesect>
<simplesect kind="note"><para>All iterators, pointers and references related to the container are invalidated. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="576" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="576" bodyend="580"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1ac6fa04edaef8a4b0f8841c2cc1b78b4b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Point_set_3&lt; Point, Vector &gt;::remove</definition>
        <argsstring>(const Index &amp;index)</argsstring>
        <name>remove</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__set__3_1_1Index" kindref="compound">Index</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Marks element specified by <computeroutput><ref refid="classCGAL_1_1Point__set__3_1_1Index" kindref="compound">Index</ref></computeroutput> as removed. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The element is just marked as removed and is not erased from the memory. <computeroutput><ref refid="classCGAL_1_1Point__set__3_1a46c81a44d3e59eb8f6142d8651083adc" kindref="member">collect_garbage()</ref></computeroutput> should be called if the memory needs to be freed.</para></simplesect>
<simplesect kind="note"><para>All iterators, pointers and references related to the container are invalidated. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="591" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="591" bodyend="594"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Garbage Management</header>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1a91231dd32d8f3a7d2ef9d491601c096a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Point_set_3&lt; Point, Vector &gt;::is_removed</definition>
        <argsstring>(const_iterator it) const</argsstring>
        <name>is_removed</name>
        <param>
          <type><ref refid="classCGAL_1_1Point__set__3_1ac796907079351ad2fb7abcd8660ed0df" kindref="member">const_iterator</ref></type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if the element is marked as removed, <computeroutput>false</computeroutput> otherwise. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>When iterating between <computeroutput><ref refid="classCGAL_1_1Point__set__3_1a3d9201b986808c9cf8c6aaa65d9cfc88" kindref="member">begin()</ref></computeroutput> and <computeroutput><ref refid="classCGAL_1_1Point__set__3_1a97fac9d9fe82dea17c3de017f2f2a6e6" kindref="member">end()</ref></computeroutput>, no element marked as removed can be found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="608" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="608" bodyend="611"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1a75b49192a2866cbfc2caa8f854dab759" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Point__set__3_1ac796907079351ad2fb7abcd8660ed0df" kindref="member">const_iterator</ref></type>
        <definition>const_iterator CGAL::Point_set_3&lt; Point, Vector &gt;::garbage_begin</definition>
        <argsstring>() const</argsstring>
        <name>garbage_begin</name>
        <briefdescription>
<para>Returns the constant iterator to the first element marked as removed (equal to <computeroutput><ref refid="classCGAL_1_1Point__set__3_1a0d70cc6b0c0914dd193ede933d92722a" kindref="member">garbage_end()</ref></computeroutput> if no elements are marked as removed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="617" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="617" bodyend="617"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1a0d70cc6b0c0914dd193ede933d92722a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Point__set__3_1ac796907079351ad2fb7abcd8660ed0df" kindref="member">const_iterator</ref></type>
        <definition>const_iterator CGAL::Point_set_3&lt; Point, Vector &gt;::garbage_end</definition>
        <argsstring>() const</argsstring>
        <name>garbage_end</name>
        <briefdescription>
<para>Returns the past-the-end constant iterator of the elements marked as removed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="621" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="621" bodyend="621"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1a14f5c5af31234bf24a736b22155b71be" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Point_set_3&lt; Point, Vector &gt;::number_of_removed_points</definition>
        <argsstring>() const</argsstring>
        <name>number_of_removed_points</name>
        <briefdescription>
<para>Number of removed points. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="625" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="625" bodyend="625"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1a9356e2a518a58f857bb56ae2f6726e11" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Point_set_3&lt; Point, Vector &gt;::has_garbage</definition>
        <argsstring>() const</argsstring>
        <name>has_garbage</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if there are elements marked as removed, <computeroutput>false</computeroutput> otherwise. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="632" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="632" bodyend="632"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1a46c81a44d3e59eb8f6142d8651083adc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Point_set_3&lt; Point, Vector &gt;::collect_garbage</definition>
        <argsstring>()</argsstring>
        <name>collect_garbage</name>
        <briefdescription>
<para>Erases from memory the elements marked as removed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="637" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="637" bodyend="662"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Property Handling</header>
      <description><para>A property <computeroutput>Property_map&lt;Type&gt;</computeroutput> allows to associate properties of type <computeroutput>Type</computeroutput> to a point.</para><para>Properties can be added, looked up with a string and removed at runtime. </para></description>
      <memberdef kind="typedef" id="classCGAL_1_1Point__set__3_1ac35e51676f4fd2d07192de5e831fd422" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>using CGAL::Point_set_3&lt; Point, Vector &gt;::Property_map =  unspecified_type</definition>
        <argsstring></argsstring>
        <name>Property_map</name>
        <briefdescription>
<para>Model of <computeroutput><ref refid="classLvaluePropertyMap" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">LvaluePropertyMap</ref></computeroutput> with <computeroutput><ref refid="classCGAL_1_1Point__set__3_1_1Index" kindref="compound">Index</ref></computeroutput> as a key type and <computeroutput>Type</computeroutput> as value type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="680" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="680" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1a1b8eda6e922e5ca614dd9f5286dc43ee" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Point_set_3&lt; Point, Vector &gt;::has_property_map</definition>
        <argsstring>(const std::string &amp;name) const</argsstring>
        <name>has_property_map</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Tests whether property <computeroutput>name</computeroutput> of type <computeroutput>T</computeroutput> already exists. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the property.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the property. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="692" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="692" bodyend="697"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1a8c47264e1e08ca02bedc0895f9ce8cf1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; <ref refid="classCGAL_1_1Point__set__3_1ac35e51676f4fd2d07192de5e831fd422" kindref="member">Property_map</ref>&lt; T &gt;, bool &gt;</type>
        <definition>std::pair&lt;Property_map&lt;T&gt;, bool&gt; CGAL::Point_set_3&lt; Point, Vector &gt;::add_property_map</definition>
        <argsstring>(const std::string &amp;name, const T t=T())</argsstring>
        <name>add_property_map</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>t</declname>
          <defval>T()</defval>
        </param>
        <briefdescription>
<para>Adds a new property <computeroutput>name</computeroutput> of type <computeroutput>T</computeroutput> with given default value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the property.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the property.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Value taken by the property on already created elements.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a pair containing the property map and a Boolean that is <computeroutput>true</computeroutput> if the property was added and <computeroutput>false</computeroutput> if it already exists (and was therefore not added but only returned). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="714" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="714" bodyend="720"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1a9512790822ff1e1f3b495f7d11604b5e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; <ref refid="classCGAL_1_1Point__set__3_1ac35e51676f4fd2d07192de5e831fd422" kindref="member">Property_map</ref>&lt; T &gt;, bool &gt;</type>
        <definition>std::pair&lt;Property_map&lt;T&gt;,bool&gt; CGAL::Point_set_3&lt; Point, Vector &gt;::property_map</definition>
        <argsstring>(const std::string &amp;name) const</argsstring>
        <name>property_map</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Returns the property <computeroutput>name</computeroutput> of type <computeroutput>T</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the property.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the property.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a pair containing: the specified property map and a Boolean set to <computeroutput>true</computeroutput> or an empty property map and a Boolean set to <computeroutput>false</computeroutput> (if the property was not found). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="735" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="735" bodyend="741"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1ad31fe016cf76b02d97e7c35673a2ab63" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Point_set_3&lt; Point, Vector &gt;::remove_property_map</definition>
        <argsstring>(Property_map&lt; T &gt; &amp;prop)</argsstring>
        <name>remove_property_map</name>
        <param>
          <type><ref refid="classCGAL_1_1Point__set__3_1ac35e51676f4fd2d07192de5e831fd422" kindref="member">Property_map</ref>&lt; T &gt; &amp;</type>
          <declname>prop</declname>
        </param>
        <briefdescription>
<para>Removes the specified property. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the property.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>The property.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns <computeroutput>true</computeroutput> if the property was removed and <computeroutput>false</computeroutput> if the property was not found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="754" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="754" bodyend="757"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1a798bb000eb5ffce8373219e41f0a1ebf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Point_set_3&lt; Point, Vector &gt;::has_normal_map</definition>
        <argsstring>() const</argsstring>
        <name>has_normal_map</name>
        <briefdescription>
<para>Convenience method that tests whether the point set has normals. </para>        </briefdescription>
        <detaileddescription>
<para>This method tests whether a property of type <computeroutput>Vector</computeroutput> and named <computeroutput>normal</computeroutput> exists. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="765" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="765" bodyend="769"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1a4f7dce77e9796e9cf44809ea3e4e9d6b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Point_set_3&lt; Point, Vector &gt;::add_normal_map</definition>
        <argsstring>(const Vector &amp;default_value=Vector(0., 0., 0.))</argsstring>
        <name>add_normal_map</name>
        <param>
          <type>const Vector &amp;</type>
          <declname>default_value</declname>
          <defval>Vector(0., 0., 0.)</defval>
        </param>
        <briefdescription>
<para>Convenience method that adds a normal property. </para>        </briefdescription>
        <detaileddescription>
<para>This method adds a property of type <computeroutput>Vector</computeroutput> and named <computeroutput>normal</computeroutput>.</para><para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the property was added, <computeroutput>false</computeroutput> if it already existed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="779" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="779" bodyend="784"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1a41a0ac0eecc100a02efca2039a1c35c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Point__set__3_1a88886944611a4181f8c5b8c23cd0ee54" kindref="member">Vector_map</ref></type>
        <definition>Vector_map CGAL::Point_set_3&lt; Point, Vector &gt;::normal_map</definition>
        <argsstring>()</argsstring>
        <name>normal_map</name>
        <briefdescription>
<para>Returns the property map of the normal property. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The normal property must have been added to the point set before calling this method (see <computeroutput><ref refid="classCGAL_1_1Point__set__3_1a4f7dce77e9796e9cf44809ea3e4e9d6b" kindref="member">add_normal_map()</ref></computeroutput>). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="791" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="791" bodyend="794"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1a29a8f19cac29156c56d8dafd284770a3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classCGAL_1_1Point__set__3_1a88886944611a4181f8c5b8c23cd0ee54" kindref="member">Vector_map</ref></type>
        <definition>const Vector_map CGAL::Point_set_3&lt; Point, Vector &gt;::normal_map</definition>
        <argsstring>() const</argsstring>
        <name>normal_map</name>
        <briefdescription>
<para>Returns the property map of the normal property (constant version). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The normal property must have been added to the point set before calling this method (see <computeroutput><ref refid="classCGAL_1_1Point__set__3_1a4f7dce77e9796e9cf44809ea3e4e9d6b" kindref="member">add_normal_map()</ref></computeroutput>). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="801" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="801" bodyend="804"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1a4e76f6a022e42a59479faaf0acef8811" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Point_set_3&lt; Point, Vector &gt;::remove_normal_map</definition>
        <argsstring>()</argsstring>
        <name>remove_normal_map</name>
        <briefdescription>
<para>Convenience method that removes the normal property. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Returns <computeroutput>true</computeroutput> if the property was removed and <computeroutput>false</computeroutput> if the property was not found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="811" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="811" bodyend="814"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1aa738f987bd96ad8e86e558d3cd9278e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Point__set__3_1a70d70ab6e94ec8b3f1fb14c6ba4d1f16" kindref="member">Point_map</ref></type>
        <definition>Point_map CGAL::Point_set_3&lt; Point, Vector &gt;::point_map</definition>
        <argsstring>()</argsstring>
        <name>point_map</name>
        <briefdescription>
<para>Returns the property map of the point property. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="818" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="818" bodyend="821"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1af06bf55e3d489d58294ef5a5ab87ada4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classCGAL_1_1Point__set__3_1a70d70ab6e94ec8b3f1fb14c6ba4d1f16" kindref="member">Point_map</ref></type>
        <definition>const Point_map CGAL::Point_set_3&lt; Point, Vector &gt;::point_map</definition>
        <argsstring>() const</argsstring>
        <name>point_map</name>
        <briefdescription>
<para>Returns the property map of the point property (constant version). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="826" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="826" bodyend="829"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1a55716cf7742c8945f706f95f4466537b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; CGAL::Point_set_3&lt; Point, Vector &gt;::properties</definition>
        <argsstring>() const</argsstring>
        <name>properties</name>
        <briefdescription>
<para>Returns a vector with all strings that describe properties. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="834" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="834" bodyend="840"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1a02ef886d19ffa53faf527625c633c81c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>unspecified_type CGAL::Point_set_3&lt; Point, Vector &gt;::parameters</definition>
        <argsstring>() const</argsstring>
        <name>parameters</name>
        <briefdescription>
<para>Returns a sequence of <ref refid="group__psp__namedparameters" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Point_set_processing_3.tag">Named Parameters</ref> for Point Set Processing algorithms. </para>        </briefdescription>
        <detaileddescription>
<para><variablelist>
<varlistentry><term>Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><ref refid="group__psp__namedparameters_1PSP_point_map" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Point_set_processing_3.tag">point_map</ref></para></entry><entry thead="no"><para>contains the point map (see <computeroutput><ref refid="classCGAL_1_1Point__set__3_1aa738f987bd96ad8e86e558d3cd9278e9" kindref="member">point_map()</ref></computeroutput>) </para></entry></row>
<row>
<entry thead="no"><para><ref refid="group__psp__namedparameters_1PSP_normal_map" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Point_set_processing_3.tag">normal_map</ref></para></entry><entry thead="no"><para>contains the normal map (see <computeroutput><ref refid="classCGAL_1_1Point__set__3_1a41a0ac0eecc100a02efca2039a1c35c5" kindref="member">normal_map()</ref></computeroutput>) </para></entry></row>
<row>
<entry thead="no"><para><ref refid="group__psp__namedparameters_1PSP_geom_traits" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Point_set_processing_3.tag">geom_traits</ref></para></entry><entry thead="no"><para>contains the kernel <computeroutput>typename <ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel_traits</ref>&lt;Point&gt;</computeroutput>::<computeroutput><ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para></entry></row>
</table>
</para></listitem>
</variablelist>
</para><para><simplesect kind="warning"><para>this method does not check if the normal map was instanciated or not. The normal map named parameter should not be used if this property was not instanciated first. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="868" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="868" bodyend="873"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Ranges</header>
      <memberdef kind="typedef" id="classCGAL_1_1Point__set__3_1a9e76c241b2f57092ae7f697a750c3661" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>using CGAL::Point_set_3&lt; Point, Vector &gt;::Property_range =  unspecified_type</definition>
        <argsstring></argsstring>
        <name>Property_range</name>
        <briefdescription>
<para>Model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput> that handles constant ranges for property maps with value type <computeroutput>Type</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="900" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="900" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1a896cdc5ec36cbd9a0f3a1e8d68d9af48" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__set__3_1a9e76c241b2f57092ae7f697a750c3661" kindref="member">Property_range</ref>&lt; T &gt;</type>
        <definition>Property_range&lt;T&gt; CGAL::Point_set_3&lt; Point, Vector &gt;::range</definition>
        <argsstring>(const Property_map&lt; T &gt; &amp;pmap) const</argsstring>
        <name>range</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__set__3_1ac35e51676f4fd2d07192de5e831fd422" kindref="member">Property_map</ref>&lt; T &gt; &amp;</type>
          <declname>pmap</declname>
        </param>
        <briefdescription>
<para>Returns a property as a range. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="907" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="907" bodyend="910"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1a9da8d77b4a882a89ced51e0e13c0d1f8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Point__set__3_1ae03986c20d80d52cd62b467d681d9b40" kindref="member">Point_range</ref></type>
        <definition>Point_range CGAL::Point_set_3&lt; Point, Vector &gt;::points</definition>
        <argsstring>() const</argsstring>
        <name>points</name>
        <briefdescription>
<para>Returns a constant range of points. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="915" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="915" bodyend="918"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1acfa6f77b17cf14e692631f26916a3b94" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Point__set__3_1a3080110d2037c55e1de4832ff2f3185a" kindref="member">Vector_range</ref></type>
        <definition>Vector_range CGAL::Point_set_3&lt; Point, Vector &gt;::normals</definition>
        <argsstring>() const</argsstring>
        <name>normals</name>
        <briefdescription>
<para>Returns a constant range of normals. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="923" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="923" bodyend="926"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Push Property Maps and Inserters (Advanced)</header>
      <description><para></para><para>The following method are specifically designed to make <computeroutput><ref refid="classCGAL_1_1Point__set__3" kindref="compound">CGAL::Point_set_3</ref></computeroutput> usable with CGAL input/output functions.</para><para> </para></description>
      <memberdef kind="typedef" id="classCGAL_1_1Point__set__3_1abec2593e18bd151b37186bac6f13095e" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>using CGAL::Point_set_3&lt; Point, Vector &gt;::Property_back_inserter =  unspecified_type</definition>
        <argsstring></argsstring>
        <name>Property_back_inserter</name>
        <briefdescription>
<para></para><para>Model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> used to insert elements by defining the value of the property <computeroutput>Property</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="947" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="947" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Point__set__3_1ac0f57d0c8967184fff962ef4f8733152" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>using CGAL::Point_set_3&lt; Point, Vector &gt;::Push_property_map =  unspecified_type</definition>
        <argsstring></argsstring>
        <name>Push_property_map</name>
        <briefdescription>
<para></para><para>Model of <computeroutput><ref refid="classWritablePropertyMap" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">WritablePropertyMap</ref></computeroutput> based on <computeroutput>Property</computeroutput> and that is allowed to push new items to the point set if needed. </para>        </briefdescription>
        <detaileddescription>
<para> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="954" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="954" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Point__set__3_1abdcca001156758eeb34617601d10335b" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Point__set__3_1abec2593e18bd151b37186bac6f13095e" kindref="member">Property_back_inserter</ref>&lt; Index_map &gt;</type>
        <definition>typedef Property_back_inserter&lt;Index_map&gt; CGAL::Point_set_3&lt; Point, Vector &gt;::Index_back_inserter</definition>
        <argsstring></argsstring>
        <name>Index_back_inserter</name>
        <briefdescription>
<para></para><para>Back inserter on indices  </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="1031" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="1031" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Point__set__3_1a241ffdeff84320fbe313dd5468d466bb" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Point__set__3_1abec2593e18bd151b37186bac6f13095e" kindref="member">Property_back_inserter</ref>&lt; <ref refid="classCGAL_1_1Point__set__3_1a70d70ab6e94ec8b3f1fb14c6ba4d1f16" kindref="member">Point_map</ref> &gt;</type>
        <definition>typedef Property_back_inserter&lt;Point_map&gt; CGAL::Point_set_3&lt; Point, Vector &gt;::Point_back_inserter</definition>
        <argsstring></argsstring>
        <name>Point_back_inserter</name>
        <briefdescription>
<para></para><para>Back inserter on points  </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="1035" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="1035" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Point__set__3_1a85ad4902b2ebd6d2a59d55f80d46d0c8" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Point__set__3_1ac0f57d0c8967184fff962ef4f8733152" kindref="member">Push_property_map</ref>&lt; <ref refid="classCGAL_1_1Point__set__3_1a70d70ab6e94ec8b3f1fb14c6ba4d1f16" kindref="member">Point_map</ref> &gt;</type>
        <definition>typedef Push_property_map&lt;Point_map&gt; CGAL::Point_set_3&lt; Point, Vector &gt;::Point_push_map</definition>
        <argsstring></argsstring>
        <name>Point_push_map</name>
        <briefdescription>
<para></para><para>Property map for pushing new points  </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="1039" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="1039" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Point__set__3_1a0306d24c1de28e281d29d36d9f2962dc" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Point__set__3_1ac0f57d0c8967184fff962ef4f8733152" kindref="member">Push_property_map</ref>&lt; <ref refid="classCGAL_1_1Point__set__3_1a88886944611a4181f8c5b8c23cd0ee54" kindref="member">Vector_map</ref> &gt;</type>
        <definition>typedef Push_property_map&lt;Vector_map&gt; CGAL::Point_set_3&lt; Point, Vector &gt;::Vector_push_map</definition>
        <argsstring></argsstring>
        <name>Vector_push_map</name>
        <briefdescription>
<para></para><para>Property map for pushing new vectors  </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="1043" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="1043" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1a7015ae885b9eb2cc86bea01428bf82f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__set__3_1ac0f57d0c8967184fff962ef4f8733152" kindref="member">Push_property_map</ref>&lt; <ref refid="classCGAL_1_1Point__set__3_1ac35e51676f4fd2d07192de5e831fd422" kindref="member">Property_map</ref>&lt; T &gt; &gt;</type>
        <definition>Push_property_map&lt;Property_map&lt;T&gt; &gt; CGAL::Point_set_3&lt; Point, Vector &gt;::push_property_map</definition>
        <argsstring>(Property_map&lt; T &gt; &amp;prop)</argsstring>
        <name>push_property_map</name>
        <param>
          <type><ref refid="classCGAL_1_1Point__set__3_1ac35e51676f4fd2d07192de5e831fd422" kindref="member">Property_map</ref>&lt; T &gt; &amp;</type>
          <declname>prop</declname>
        </param>
        <briefdescription>
<para></para><para>This is an advanced function. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the push property map of the given property.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the property.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>The property map.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a pair containing: the specified property map and a Boolean set to <computeroutput>true</computeroutput> or an empty property map and a Boolean set to <computeroutput>false</computeroutput> (if the property was not found).  </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="1061" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="1061" bodyend="1064"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1a2c1251f86561fbeaf604cc9d094c06da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Point__set__3_1a85ad4902b2ebd6d2a59d55f80d46d0c8" kindref="member">Point_push_map</ref></type>
        <definition>Point_push_map CGAL::Point_set_3&lt; Point, Vector &gt;::point_push_map</definition>
        <argsstring>()</argsstring>
        <name>point_push_map</name>
        <briefdescription>
<para></para><para>This is an advanced function. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the push property map of the point property.  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="1071" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="1071" bodyend="1074"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1a455cf274a28beddffbdb5d010f39b76a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Point__set__3_1a0306d24c1de28e281d29d36d9f2962dc" kindref="member">Vector_push_map</ref></type>
        <definition>Vector_push_map CGAL::Point_set_3&lt; Point, Vector &gt;::normal_push_map</definition>
        <argsstring>()</argsstring>
        <name>normal_push_map</name>
        <briefdescription>
<para></para><para>This is an advanced function. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the push property map of the normal property.</para><para><simplesect kind="note"><para>The normal property must have been added to the point set before calling this method (see <computeroutput><ref refid="classCGAL_1_1Point__set__3_1a4f7dce77e9796e9cf44809ea3e4e9d6b" kindref="member">add_normal_map()</ref></computeroutput>).  </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="1084" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="1084" bodyend="1087"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1ab5af3ed54a34b3ba3981c171bb2d1b14" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Point__set__3_1abdcca001156758eeb34617601d10335b" kindref="member">Index_back_inserter</ref></type>
        <definition>Index_back_inserter CGAL::Point_set_3&lt; Point, Vector &gt;::index_back_inserter</definition>
        <argsstring>()</argsstring>
        <name>index_back_inserter</name>
        <briefdescription>
<para></para><para>This is an advanced function. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the back inserter on the index property.  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="1094" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="1094" bodyend="1097"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1aecb31a95d1548b413b5d6ae6eb4b0a51" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Point__set__3_1a241ffdeff84320fbe313dd5468d466bb" kindref="member">Point_back_inserter</ref></type>
        <definition>Point_back_inserter CGAL::Point_set_3&lt; Point, Vector &gt;::point_back_inserter</definition>
        <argsstring>()</argsstring>
        <name>point_back_inserter</name>
        <briefdescription>
<para></para><para>This is an advanced function. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the back inserter on the point property.  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="1104" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="1104" bodyend="1107"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classCGAL_1_1Point__set__3_1aefdfb209bf53edf0f9fd1bc1ea0e5ba9" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Point_set_3&lt; Point, Vector &gt;::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
<para><ref refid="classIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">Iterator</ref> type of the point set with value type <computeroutput><ref refid="classCGAL_1_1Point__set__3_1_1Index" kindref="compound">Index</ref></computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="models_1_models000003"><xreftitle>Is Model Of</xreftitle><xrefdescription><para><ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref> </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="154" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Point__set__3_1ac796907079351ad2fb7abcd8660ed0df" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Point_set_3&lt; Point, Vector &gt;::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
<para>Constant iterator type of the point set with value type <computeroutput><ref refid="classCGAL_1_1Point__set__3_1_1Index" kindref="compound">Index</ref></computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="models_1_models000004"><xreftitle>Is Model Of</xreftitle><xrefdescription><para><ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref> </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="155" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Point__set__3_1a70d70ab6e94ec8b3f1fb14c6ba4d1f16" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Point__set__3_1ac35e51676f4fd2d07192de5e831fd422" kindref="member">Property_map</ref>&lt; Point &gt;</type>
        <definition>typedef Property_map&lt;Point&gt; CGAL::Point_set_3&lt; Point, Vector &gt;::Point_map</definition>
        <argsstring></argsstring>
        <name>Point_map</name>
        <briefdescription>
<para>Property map of points. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="161" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Point__set__3_1a88886944611a4181f8c5b8c23cd0ee54" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Point__set__3_1ac35e51676f4fd2d07192de5e831fd422" kindref="member">Property_map</ref>&lt; Vector &gt;</type>
        <definition>typedef Property_map&lt;Vector&gt; CGAL::Point_set_3&lt; Point, Vector &gt;::Vector_map</definition>
        <argsstring></argsstring>
        <name>Vector_map</name>
        <briefdescription>
<para>Property map of vectors. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="162" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Point__set__3_1ae03986c20d80d52cd62b467d681d9b40" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Point__set__3_1a9e76c241b2f57092ae7f697a750c3661" kindref="member">Property_range</ref>&lt; Point &gt;</type>
        <definition>typedef Property_range&lt;Point&gt; CGAL::Point_set_3&lt; Point, Vector &gt;::Point_range</definition>
        <argsstring></argsstring>
        <name>Point_range</name>
        <briefdescription>
<para>Constant range of points. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="195" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Point__set__3_1a3080110d2037c55e1de4832ff2f3185a" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Point__set__3_1a9e76c241b2f57092ae7f697a750c3661" kindref="member">Property_range</ref>&lt; Vector &gt;</type>
        <definition>typedef Property_range&lt;Vector&gt; CGAL::Point_set_3&lt; Point, Vector &gt;::Vector_range</definition>
        <argsstring></argsstring>
        <name>Vector_range</name>
        <briefdescription>
<para>Constant range of vectors. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="196" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="196" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="related">
      <memberdef kind="function" id="group__PkgPointSet3IO_1gaebb876ced23adf1763934b43b18eb429" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Point</type>
          </param>
          <param>
            <type>typename Vector</type>
          </param>
        </templateparamlist>
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, CGAL::Point_set_3&lt; Point, Vector &gt; &amp;ps)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Point__set__3" kindref="compound">CGAL::Point_set_3</ref>&lt; Point, Vector &gt; &amp;</type>
          <declname>ps</declname>
        </param>
        <briefdescription>
<para>Reads the point set from an input stream that can be either: </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>XYZ</para></listitem><listitem><para>OFF</para></listitem><listitem><para>PLY</para></listitem><listitem><para>LAS</para></listitem></itemizedlist>
</para><para>The format is detected from the stream. If the stream contains normal vectors, the normal map is added to the point set. For PLY input, all point properties found in the header are added. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3/IO.h" line="946" column="1" bodyfile="CGAL/Point_set_3/IO.h" bodystart="946" bodyend="969"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSet3IO_1ga552bef80fa3c835f3b7e6cfb038f8b78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Point</type>
          </param>
          <param>
            <type>typename Vector</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const CGAL::Point_set_3&lt; Point, Vector &gt; &amp;ps)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__set__3" kindref="compound">CGAL::Point_set_3</ref>&lt; Point, Vector &gt; &amp;</type>
          <declname>ps</declname>
        </param>
        <briefdescription>
<para>Inserts the point set in an output stream in ASCII PLY format. </para>        </briefdescription>
        <detaileddescription>
<para>All properties are inserted in their instantiation order. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3/IO.h" line="981" column="1" bodyfile="CGAL/Point_set_3/IO.h" bodystart="981" bodyend="986"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Point__set__3_1a322c2acd54d4017cf7685565c58ae668" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Point</type>
          </param>
          <param>
            <type>typename Vector</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__set__3" kindref="compound">Point_set_3</ref>&lt; Point, Vector &gt; &amp;</type>
        <definition>Point_set_3&lt; Point, Vector &gt; &amp; operator+=</definition>
        <argsstring>(Point_set_3&lt; Point, Vector &gt; &amp;ps, Point_set_3&lt; Point, Vector &gt; &amp;other)</argsstring>
        <name>operator+=</name>
        <param>
          <type><ref refid="classCGAL_1_1Point__set__3" kindref="compound">Point_set_3</ref>&lt; Point, Vector &gt; &amp;</type>
          <declname>ps</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Point__set__3" kindref="compound">Point_set_3</ref>&lt; Point, Vector &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Append <computeroutput>other</computeroutput> at the end of <computeroutput>ps</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Shifts the indices of points of <computeroutput>other</computeroutput> by <computeroutput>ps.number_of_points() + other.number_of_points()</computeroutput>.</para><para>Copies entries of all property maps which have the same name in <computeroutput>ps</computeroutput> and <computeroutput>other</computeroutput>. Property maps which are only in <computeroutput>other</computeroutput> are ignored.</para><para><simplesect kind="note"><para>Garbage is collected in both point sets when calling this function. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Point_set_3.h" line="1173" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="1173" bodyend="1178"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A collection of points with dynamically associated properties. </para>    </briefdescription>
    <detaileddescription>
<para>An instance of this class stores a set of indices of type <computeroutput><ref refid="classCGAL_1_1Point__set__3_1_1Index" kindref="compound">Index</ref></computeroutput>, each representing a point. Properties can be associated to each point and can be retrieved using the index of the point. There are two particular properties that are hard coded by this class: the coordinates of the points and the normal vectors.</para><para>The coordinates of a point can be access using the index of the point and the member function <computeroutput><ref refid="classCGAL_1_1Point__set__3_1a5acc26fcc6154088464952e5f818dee2" kindref="member">point()</ref></computeroutput>. This property is always present. The normal vector of a point can be accessed using the index of the point and the <computeroutput><ref refid="classCGAL_1_1Point__set__3_1a3580382a87d8741d26028cacdd6d001e" kindref="member">normal()</ref></computeroutput> function. This property must be explicitly created.</para><para>All properties can be accessed as a range using the functions <computeroutput><ref refid="classCGAL_1_1Point__set__3_1a9da8d77b4a882a89ced51e0e13c0d1f8" kindref="member">points()</ref></computeroutput>, <computeroutput><ref refid="classCGAL_1_1Point__set__3_1acfa6f77b17cf14e692631f26916a3b94" kindref="member">normals()</ref></computeroutput>, and <computeroutput><ref refid="classCGAL_1_1Point__set__3_1a896cdc5ec36cbd9a0f3a1e8d68d9af48" kindref="member">range()</ref></computeroutput> for points coordinates, normal vectors, and other properties respectively.</para><para>Removing a point with properties is achieved by moving its <computeroutput><ref refid="classCGAL_1_1Point__set__3_1_1Index" kindref="compound">Index</ref></computeroutput> at the end of the container and keeping track of the number of removed elements. A garbage collection method must be called to really remove it from memory.</para><para>For convenience, all functions of the package <ref refid="group__PkgPointSetProcessing" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Point_set_processing_3.tag">Point Set Processing Reference</ref> are provided with an overload that takes a <ref refid="classCGAL_1_1Point__set__3" kindref="compound">Point_set_3</ref> object as an argument.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Point</parametername>
</parameternamelist>
<parameterdescription>
<para>Point type. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Vector</parametername>
</parameternamelist>
<parameterdescription>
<para>Normal vector type.</para></parameterdescription>
</parameteritem>
</parameterlist>
<xrefsect id="models_1_models000001"><xreftitle>Is Model Of</xreftitle><xrefdescription><para><computeroutput><ref refid="classRange" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput> </para></xrefdescription></xrefsect></para>    </detaileddescription>
    <location file="CGAL/Point_set_3.h" line="84" column="1" bodyfile="CGAL/Point_set_3.h" bodystart="83" bodyend="1152"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Point__set__3_1a4f7dce77e9796e9cf44809ea3e4e9d6b" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>add_normal_map</name></member>
      <member refid="classCGAL_1_1Point__set__3_1a8c47264e1e08ca02bedc0895f9ce8cf1" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>add_property_map</name></member>
      <member refid="classCGAL_1_1Point__set__3_1a3d9201b986808c9cf8c6aaa65d9cfc88" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>begin</name></member>
      <member refid="classCGAL_1_1Point__set__3_1afcba783431b57f040be79a42b3f4ee99" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>begin</name></member>
      <member refid="classCGAL_1_1Point__set__3_1a6d53149421c3d97c949192e0258bac66" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>clear</name></member>
      <member refid="classCGAL_1_1Point__set__3_1a1bd45ecee30f35477e412d4581bae211" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>clear_properties</name></member>
      <member refid="classCGAL_1_1Point__set__3_1a46c81a44d3e59eb8f6142d8651083adc" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>collect_garbage</name></member>
      <member refid="classCGAL_1_1Point__set__3_1ac796907079351ad2fb7abcd8660ed0df" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>const_iterator</name></member>
      <member refid="classCGAL_1_1Point__set__3_1a97fac9d9fe82dea17c3de017f2f2a6e6" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>end</name></member>
      <member refid="classCGAL_1_1Point__set__3_1a4e9d7f50aa4b4bca24e915a546578131" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>end</name></member>
      <member refid="classCGAL_1_1Point__set__3_1a75b49192a2866cbfc2caa8f854dab759" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>garbage_begin</name></member>
      <member refid="classCGAL_1_1Point__set__3_1a0d70cc6b0c0914dd193ede933d92722a" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>garbage_end</name></member>
      <member refid="classCGAL_1_1Point__set__3_1a9356e2a518a58f857bb56ae2f6726e11" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>has_garbage</name></member>
      <member refid="classCGAL_1_1Point__set__3_1a798bb000eb5ffce8373219e41f0a1ebf" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>has_normal_map</name></member>
      <member refid="classCGAL_1_1Point__set__3_1a1b8eda6e922e5ca614dd9f5286dc43ee" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>has_property_map</name></member>
      <member refid="classCGAL_1_1Point__set__3_1abdcca001156758eeb34617601d10335b" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>Index_back_inserter</name></member>
      <member refid="classCGAL_1_1Point__set__3_1ab5af3ed54a34b3ba3981c171bb2d1b14" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>index_back_inserter</name></member>
      <member refid="classCGAL_1_1Point__set__3_1ad216c71b08063e0e328c100d757db2bc" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Point__set__3_1a9009460c6680b22c5823bbd160e33cf2" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Point__set__3_1acd87a6f1e03fdb0d1bec9111272043ae" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Point__set__3_1a6a61b25872973b239c12a79f598dfb73" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>is_empty</name></member>
      <member refid="classCGAL_1_1Point__set__3_1a91231dd32d8f3a7d2ef9d491601c096a" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>is_removed</name></member>
      <member refid="classCGAL_1_1Point__set__3_1aefdfb209bf53edf0f9fd1bc1ea0e5ba9" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>iterator</name></member>
      <member refid="classCGAL_1_1Point__set__3_1a1a2906af8c99af2e58ebca7b7fc54b3a" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>join</name></member>
      <member refid="classCGAL_1_1Point__set__3_1a3580382a87d8741d26028cacdd6d001e" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>normal</name></member>
      <member refid="classCGAL_1_1Point__set__3_1af607702e6d0bd8ed3aab696f7e36c756" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>normal</name></member>
      <member refid="classCGAL_1_1Point__set__3_1a41a0ac0eecc100a02efca2039a1c35c5" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>normal_map</name></member>
      <member refid="classCGAL_1_1Point__set__3_1a29a8f19cac29156c56d8dafd284770a3" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>normal_map</name></member>
      <member refid="classCGAL_1_1Point__set__3_1a455cf274a28beddffbdb5d010f39b76a" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>normal_push_map</name></member>
      <member refid="classCGAL_1_1Point__set__3_1acfa6f77b17cf14e692631f26916a3b94" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>normals</name></member>
      <member refid="classCGAL_1_1Point__set__3_1a32ceb0d2076cecac38167ff362eccd2e" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>number_of_points</name></member>
      <member refid="classCGAL_1_1Point__set__3_1a14f5c5af31234bf24a736b22155b71be" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>number_of_removed_points</name></member>
      <member refid="classCGAL_1_1Point__set__3_1a322c2acd54d4017cf7685565c58ae668" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>operator+=</name></member>
      <member refid="group__PkgPointSet3IO_1ga552bef80fa3c835f3b7e6cfb038f8b78" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>operator&lt;&lt;</name></member>
      <member refid="classCGAL_1_1Point__set__3_1ae41c8923997b5a8548e25e51649a1df9" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>operator=</name></member>
      <member refid="group__PkgPointSet3IO_1gaebb876ced23adf1763934b43b18eb429" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>operator&gt;&gt;</name></member>
      <member refid="classCGAL_1_1Point__set__3_1a02ef886d19ffa53faf527625c633c81c" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>parameters</name></member>
      <member refid="classCGAL_1_1Point__set__3_1a5acc26fcc6154088464952e5f818dee2" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>point</name></member>
      <member refid="classCGAL_1_1Point__set__3_1a7ae809c10f7c3335eff967113cfbff00" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>point</name></member>
      <member refid="classCGAL_1_1Point__set__3_1aecb31a95d1548b413b5d6ae6eb4b0a51" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>point_back_inserter</name></member>
      <member refid="classCGAL_1_1Point__set__3_1a241ffdeff84320fbe313dd5468d466bb" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>Point_back_inserter</name></member>
      <member refid="classCGAL_1_1Point__set__3_1aa738f987bd96ad8e86e558d3cd9278e9" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>point_map</name></member>
      <member refid="classCGAL_1_1Point__set__3_1af06bf55e3d489d58294ef5a5ab87ada4" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>point_map</name></member>
      <member refid="classCGAL_1_1Point__set__3_1a70d70ab6e94ec8b3f1fb14c6ba4d1f16" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>Point_map</name></member>
      <member refid="classCGAL_1_1Point__set__3_1a85ad4902b2ebd6d2a59d55f80d46d0c8" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>Point_push_map</name></member>
      <member refid="classCGAL_1_1Point__set__3_1a2c1251f86561fbeaf604cc9d094c06da" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>point_push_map</name></member>
      <member refid="classCGAL_1_1Point__set__3_1ae03986c20d80d52cd62b467d681d9b40" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>Point_range</name></member>
      <member refid="classCGAL_1_1Point__set__3_1aafda3c8eaae3d1cf6466d62138a9ac9f" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>Point_set_3</name></member>
      <member refid="classCGAL_1_1Point__set__3_1a9da8d77b4a882a89ced51e0e13c0d1f8" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>points</name></member>
      <member refid="classCGAL_1_1Point__set__3_1a55716cf7742c8945f706f95f4466537b" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>properties</name></member>
      <member refid="classCGAL_1_1Point__set__3_1abec2593e18bd151b37186bac6f13095e" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>Property_back_inserter</name></member>
      <member refid="classCGAL_1_1Point__set__3_1ac35e51676f4fd2d07192de5e831fd422" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>Property_map</name></member>
      <member refid="classCGAL_1_1Point__set__3_1a9512790822ff1e1f3b495f7d11604b5e" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>property_map</name></member>
      <member refid="classCGAL_1_1Point__set__3_1a9e76c241b2f57092ae7f697a750c3661" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>Property_range</name></member>
      <member refid="classCGAL_1_1Point__set__3_1a7015ae885b9eb2cc86bea01428bf82f6" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>push_property_map</name></member>
      <member refid="classCGAL_1_1Point__set__3_1ac0f57d0c8967184fff962ef4f8733152" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>Push_property_map</name></member>
      <member refid="classCGAL_1_1Point__set__3_1a896cdc5ec36cbd9a0f3a1e8d68d9af48" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>range</name></member>
      <member refid="classCGAL_1_1Point__set__3_1a2373069f911654c58cfea2d01752eafb" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>remove</name></member>
      <member refid="classCGAL_1_1Point__set__3_1a69d31427b38854fc1dc1eb35e9f59ceb" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>remove</name></member>
      <member refid="classCGAL_1_1Point__set__3_1ac6fa04edaef8a4b0f8841c2cc1b78b4b" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>remove</name></member>
      <member refid="classCGAL_1_1Point__set__3_1a4e76f6a022e42a59479faaf0acef8811" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>remove_normal_map</name></member>
      <member refid="classCGAL_1_1Point__set__3_1ad31fe016cf76b02d97e7c35673a2ab63" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>remove_property_map</name></member>
      <member refid="classCGAL_1_1Point__set__3_1a5ad5771002caef53459ffde7e4b6b4ff" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>reserve</name></member>
      <member refid="classCGAL_1_1Point__set__3_1a938db0b9df274d2ee7b62b484fd806bc" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>resize</name></member>
      <member refid="classCGAL_1_1Point__set__3_1a88886944611a4181f8c5b8c23cd0ee54" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>Vector_map</name></member>
      <member refid="classCGAL_1_1Point__set__3_1a0306d24c1de28e281d29d36d9f2962dc" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>Vector_push_map</name></member>
      <member refid="classCGAL_1_1Point__set__3_1a3080110d2037c55e1de4832ff2f3185a" prot="public" virt="non-virtual"><scope>CGAL::Point_set_3</scope><name>Vector_range</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
