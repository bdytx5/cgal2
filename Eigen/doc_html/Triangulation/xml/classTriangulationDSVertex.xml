<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classTriangulationDSVertex" kind="class" language="C++" prot="public">
    <compoundname>TriangulationDSVertex</compoundname>
    <includes local="no">Concepts/TriangulationDSVertex.h</includes>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classTriangulationDSVertex_1a6e5e87a0a6d528be8b949b4db01aa21a" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type TriangulationDSVertex::Triangulation_data_structure</definition>
        <argsstring></argsstring>
        <name>Triangulation_data_structure</name>
        <briefdescription>
<para>The <computeroutput>Triangulation_data_structure</computeroutput> in which the vertex is defined/used. </para>        </briefdescription>
        <detaileddescription>
<para>Must be a model of the <computeroutput><ref refid="classTriangulationDataStructure" kindref="compound">TriangulationDataStructure</ref></computeroutput> concept. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDSVertex.h" line="61" column="1" bodyfile="Concepts/TriangulationDSVertex.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classTriangulationDSVertex_1a5c8e5241393a9e4447b1ad52921b46fb" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>using TriangulationDSVertex::Rebind_TDS =  unspecified_type</definition>
        <argsstring></argsstring>
        <name>Rebind_TDS</name>
        <briefdescription>
<para>This nested template class has to define a type <computeroutput>Rebind_TDS&lt;TDS2&gt;::Other</computeroutput> which is the <emphasis>rebound</emphasis> vertex, that is, the one that will be actually used by <computeroutput>Triangulation_data_structure</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The <computeroutput>Rebind_TDS&lt;TDS2&gt;::Other</computeroutput> type will be the real base class of <computeroutput>Triangulation_data_structure::Vertex</computeroutput>. <simplesect kind="note"><para>It can be implemented using a nested template class. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDSVertex.h" line="72" column="1" bodyfile="Concepts/TriangulationDSVertex.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classTriangulationDSVertex_1aa5888028d4b165857d9232d86ba8bc24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TriangulationDSVertex::TriangulationDSVertex</definition>
        <argsstring>()</argsstring>
        <name>TriangulationDSVertex</name>
        <briefdescription>
<para>The default constructor (no incident full cell is set). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDSVertex.h" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDSVertex_1a80986a9c1ea946d2f1a5fd56ff0544d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TriangulationDSVertex::TriangulationDSVertex</definition>
        <argsstring>(Full_cell_handle c)</argsstring>
        <name>TriangulationDSVertex</name>
        <param>
          <type>Full_cell_handle</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Sets the incident full cell to <computeroutput>c</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>c</computeroutput> must not be the default-constructed <computeroutput>Full_cell_handle</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDSVertex.h" line="90" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Memory Management</header>
      <description><para>These member functions are required by <computeroutput>Triangulation_data_structure</computeroutput> because it uses <computeroutput><ref refid="classCGAL_1_1Compact__container" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::Compact_container</ref></computeroutput> to store its cells.</para><para>See the documentation of <computeroutput><ref refid="classCGAL_1_1Compact__container" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::Compact_container</ref></computeroutput> for the exact requirements. </para></description>
      <memberdef kind="function" id="classTriangulationDSVertex_1a7b3b0de63cea729418db8b058a328c98" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* TriangulationDSVertex::for_compact_container</definition>
        <argsstring>() const</argsstring>
        <name>for_compact_container</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDSVertex.h" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDSVertex_1a3943f581846ec6650860eb681936bc6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *&amp;</type>
        <definition>void* &amp; TriangulationDSVertex::for_compact_container</definition>
        <argsstring>()</argsstring>
        <name>for_compact_container</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDSVertex.h" line="109" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The concept <computeroutput><ref refid="classTriangulationDSVertex" kindref="compound">TriangulationDSVertex</ref></computeroutput> describes the requirements for the vertex base class of a <computeroutput><ref refid="classCGAL_1_1Triangulation__data__structure" kindref="compound">CGAL::Triangulation_data_structure</ref></computeroutput>. It refines the concept <computeroutput><ref refid="classTriangulationDataStructure_1_1Vertex" kindref="compound">TriangulationDataStructure::Vertex</ref></computeroutput>. </para>    </briefdescription>
    <detaileddescription>
<para> Since the <computeroutput><ref refid="classCGAL_1_1Triangulation__data__structure" kindref="compound">CGAL::Triangulation_data_structure</ref></computeroutput> is the class which defines the handle types, the vertex base class has to be somehow parameterized by the triangulation data structure. But since the <computeroutput><ref refid="classCGAL_1_1Triangulation__data__structure" kindref="compound">CGAL::Triangulation_data_structure</ref></computeroutput> itself is parameterized by the cell and vertex base classes, there is a cycle in the definition of these classes. In order to break the cycle, the base classes for cells and vertices which are plugged in to instantiate a <computeroutput>Triangulation_data_structure</computeroutput> use a <computeroutput>void</computeroutput> as triangulation data structure parameter. Then, the <computeroutput><ref refid="classCGAL_1_1Triangulation__data__structure" kindref="compound">CGAL::Triangulation_data_structure</ref></computeroutput> uses a <emphasis>rebind</emphasis> mechanism (similar to the one specified in <computeroutput>std::allocator</computeroutput>) in order to plug itself as parameter in the full cell and vertex base classes. This mechanism requires that the base class provides a templated nested class <computeroutput>Rebind_TDS</computeroutput> that itself provides the subtype <computeroutput>Rebind_TDS::Other</computeroutput> which is the <emphasis>rebound</emphasis> version of the base class. This <emphasis>rebound</emphasis> base class is the class that the <computeroutput><ref refid="classCGAL_1_1Triangulation__data__structure" kindref="compound">CGAL::Triangulation_data_structure</ref></computeroutput> actually uses as a base class for the class of <computeroutput>CGAL::Triangulation_data_structure::Vertex</computeroutput>.</para><para><xrefsect id="refines_1_refines000004"><xreftitle>Refines</xreftitle><xrefdescription><para><computeroutput><ref refid="classTriangulationDataStructure_1_1Vertex" kindref="compound">TriangulationDataStructure::Vertex</ref></computeroutput></para></xrefdescription></xrefsect></para><para><xrefsect id="hasModels_1_hasModels000008"><xreftitle>Has Models</xreftitle><xrefdescription><para><computeroutput><ref refid="classCGAL_1_1Triangulation__ds__vertex" kindref="compound">CGAL::Triangulation_ds_vertex</ref>&lt;TriangulationDataStructure_&gt;</computeroutput> </para><para><computeroutput><ref refid="classCGAL_1_1Triangulation__vertex" kindref="compound">CGAL::Triangulation_vertex</ref>&lt;TriangulationTraits_, Data, TriangulationDSVertex_&gt;</computeroutput></para></xrefdescription></xrefsect></para><para><simplesect kind="see"><para><computeroutput><ref refid="classTriangulationDSFullCell" kindref="compound">TriangulationDSFullCell</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classTriangulationDSFace" kindref="compound">TriangulationDSFace</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classTriangulationDataStructure" kindref="compound">TriangulationDataStructure</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classTriangulationDataStructure_1_1Vertex" kindref="compound">TriangulationDataStructure::Vertex</ref></computeroutput> </para></simplesect>
</para>    </detaileddescription>
    <location file="Concepts/TriangulationDSVertex.h" line="48" column="1" bodyfile="Concepts/TriangulationDSVertex.h" bodystart="48" bodyend="113"/>
    <listofallmembers>
      <member refid="classTriangulationDSVertex_1a7b3b0de63cea729418db8b058a328c98" prot="public" virt="non-virtual"><scope>TriangulationDSVertex</scope><name>for_compact_container</name></member>
      <member refid="classTriangulationDSVertex_1a3943f581846ec6650860eb681936bc6c" prot="public" virt="non-virtual"><scope>TriangulationDSVertex</scope><name>for_compact_container</name></member>
      <member refid="classTriangulationDSVertex_1a5c8e5241393a9e4447b1ad52921b46fb" prot="public" virt="non-virtual"><scope>TriangulationDSVertex</scope><name>Rebind_TDS</name></member>
      <member refid="classTriangulationDSVertex_1a6e5e87a0a6d528be8b949b4db01aa21a" prot="public" virt="non-virtual"><scope>TriangulationDSVertex</scope><name>Triangulation_data_structure</name></member>
      <member refid="classTriangulationDSVertex_1aa5888028d4b165857d9232d86ba8bc24" prot="public" virt="non-virtual"><scope>TriangulationDSVertex</scope><name>TriangulationDSVertex</name></member>
      <member refid="classTriangulationDSVertex_1a80986a9c1ea946d2f1a5fd56ff0544d8" prot="public" virt="non-virtual"><scope>TriangulationDSVertex</scope><name>TriangulationDSVertex</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
