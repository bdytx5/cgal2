<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Regular__triangulation" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Regular_triangulation</compoundname>
    <basecompoundref refid="classCGAL_1_1Triangulation" prot="public" virt="non-virtual">CGAL::Triangulation&lt; Regular_triangulation_traits_adapter&lt; RegularTriangulationTraits_ &gt;, TriangulationDataStructure_ &gt;</basecompoundref>
    <includes local="no">CGAL/Regular_triangulation.h</includes>
    <templateparamlist>
      <param>
        <type>typename RegularTriangulationTraits_</type>
      </param>
      <param>
        <type>typename TriangulationDataStructure_</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classCGAL_1_1Regular__triangulation_1a1f963e8534f6e685b8d10ddd4ea0f0f9" prot="public" static="no">
        <type>RegularTriangulationTraits_::Weighted_point_d</type>
        <definition>typedef RegularTriangulationTraits_::Weighted_point_d CGAL::Regular_triangulation&lt; RegularTriangulationTraits_, TriangulationDataStructure_ &gt;::Weighted_point</definition>
        <argsstring></argsstring>
        <name>Weighted_point</name>
        <briefdescription>
<para>A point in Euclidean space with an associated weight. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation.h" line="53" column="1" bodyfile="CGAL/Regular_triangulation.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation_1a4953aad5f8e4df255ffe04f110c5eedb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Regular_triangulation&lt; RegularTriangulationTraits_, TriangulationDataStructure_ &gt;::Regular_triangulation</definition>
        <argsstring>(int dim, const Geom_traits &amp;gt=Geom_traits())</argsstring>
        <name>Regular_triangulation</name>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation_1a352007b3356b48a186bb425e46556f6d" kindref="member">Geom_traits</ref> &amp;</type>
          <declname>gt</declname>
          <defval><ref refid="classCGAL_1_1Triangulation_1a352007b3356b48a186bb425e46556f6d" kindref="member">Geom_traits</ref>()</defval>
        </param>
        <briefdescription>
<para>Instantiates a regular triangulation with one vertex (the vertex at infinity). </para>        </briefdescription>
        <detaileddescription>
<para>See the description of the inherited nested type <computeroutput><ref refid="classCGAL_1_1Triangulation_1a147923c9862c050a130509b7f206cf64" kindref="member">Triangulation::Maximal_dimension</ref></computeroutput> for an explanation of the use of the parameter <computeroutput>dim</computeroutput>. The triangulation stores a copy of the geometric traits <computeroutput>gt</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation.h" line="67" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Point Insertion</header>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation_1a365db1589a11fdb7a79ce610e32e214d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation_1a9cce545266f97305c03009e19a9574b8" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Regular_triangulation&lt; RegularTriangulationTraits_, TriangulationDataStructure_ &gt;::insert</definition>
        <argsstring>(const Weighted_point &amp;p, Full_cell_handle hint=Full_cell_handle())</argsstring>
        <name>insert</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Regular__triangulation_1a1f963e8534f6e685b8d10ddd4ea0f0f9" kindref="member">Weighted_point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation_1a9dc0c1f6f1974fbc59ad55e172bdbe0a" kindref="member">Full_cell_handle</ref></type>
          <declname>hint</declname>
          <defval><ref refid="classCGAL_1_1Triangulation_1a9dc0c1f6f1974fbc59ad55e172bdbe0a" kindref="member">Full_cell_handle</ref>()</defval>
        </param>
        <briefdescription>
<para>Inserts weighted point <computeroutput>p</computeroutput> in the triangulation and returns the corresponding vertex. </para>        </briefdescription>
        <detaileddescription>
<para>If this insertion creates a vertex, this vertex is returned.</para><para>If <computeroutput>p</computeroutput> coincides with an existing vertex and has a greater weight, then the existing weighted point becomes hidden and <computeroutput>p</computeroutput> replaces it as vertex of the triangulation.</para><para>If <computeroutput>p</computeroutput> coincides with an already existing vertex (both point and weights being equal), then this vertex is returned and the triangulation remains unchanged.</para><para>Otherwise if <computeroutput>p</computeroutput> does not appear as a vertex of the triangulation, then it is stored as a hidden point and this method returns the default constructed handle.</para><para>Prior to the actual insertion, <computeroutput>p</computeroutput> is located in the triangulation; <computeroutput>hint</computeroutput> is used as a starting place for locating <computeroutput>p</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation.h" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation_1a188ae4e812a71cf91083f1903c7c3768" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation_1a9cce545266f97305c03009e19a9574b8" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Regular_triangulation&lt; RegularTriangulationTraits_, TriangulationDataStructure_ &gt;::insert</definition>
        <argsstring>(const Weighted_point &amp;p, Vertex_handle hint)</argsstring>
        <name>insert</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Regular__triangulation_1a1f963e8534f6e685b8d10ddd4ea0f0f9" kindref="member">Weighted_point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation_1a9cce545266f97305c03009e19a9574b8" kindref="member">Vertex_handle</ref></type>
          <declname>hint</declname>
        </param>
        <briefdescription>
<para>Same as above but uses a vertex as starting place for the search. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation.h" line="101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation_1a8cc30d717bf877fdbdc95eaf6b79c7eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation_1a9cce545266f97305c03009e19a9574b8" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Regular_triangulation&lt; RegularTriangulationTraits_, TriangulationDataStructure_ &gt;::insert</definition>
        <argsstring>(const Weighted_point &amp;p, Locate_type lt, const Face &amp;f, const Facet &amp;ft, Full_cell_handle c)</argsstring>
        <name>insert</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Regular__triangulation_1a1f963e8534f6e685b8d10ddd4ea0f0f9" kindref="member">Weighted_point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation_1ad5e9ac89fd2a2dbc52492acb1fa1dad1" kindref="member">Locate_type</ref></type>
          <declname>lt</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation_1ada52cef984f0e0c3a4feba1caaf5b2ba" kindref="member">Face</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation_1a8b1939b059439a2039f0138e390c4955" kindref="member">Facet</ref> &amp;</type>
          <declname>ft</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation_1a9dc0c1f6f1974fbc59ad55e172bdbe0a" kindref="member">Full_cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Inserts weighted point <computeroutput>p</computeroutput> in the triangulation. </para>        </briefdescription>
        <detaileddescription>
<para>Similar to the above <computeroutput><ref refid="classCGAL_1_1Regular__triangulation_1a365db1589a11fdb7a79ce610e32e214d" kindref="member">insert()</ref></computeroutput> function, but takes as additional parameter the return values of a previous location query. See description of <computeroutput><ref refid="classCGAL_1_1Triangulation_1ab8ef50362a2530d69deb3663fa9147f9" kindref="member">Triangulation::locate()</ref></computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation.h" line="109" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation_1a137c364d75728faa0b81de680573243d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          </param>
        </templateparamlist>
        <type>std::ptrdiff_t</type>
        <definition>std::ptrdiff_t CGAL::Regular_triangulation&lt; RegularTriangulationTraits_, TriangulationDataStructure_ &gt;::insert</definition>
        <argsstring>(ForwardIterator s, ForwardIterator e)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Inserts the weighted points found in range <computeroutput>[s,e)</computeroutput> in the regular triangulation. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the difference between the number of vertices after and before the insertions (it may be negative due to hidden points). Note that this function is not guaranteed to insert the points following the order of <computeroutput><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></computeroutput> because <computeroutput><ref refid="group__PkgSpatialSortingFunctions_1ga2f4d770272b84481f7c4c9b20b7174c7" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Spatial_sorting.tag">spatial_sort()</ref></computeroutput> is used to improve efficiency.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>must be an input iterator with the value type <computeroutput><ref refid="classCGAL_1_1Weighted__point" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_2.tag">Weighted_point</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation.h" line="124" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Queries</header>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation_1afe7185bff889f30131a6af6f3bf78e85" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Regular_triangulation&lt; RegularTriangulationTraits_, TriangulationDataStructure_ &gt;::is_in_conflict</definition>
        <argsstring>(const Weighted_point &amp;p, Full_cell_const_handle c) const</argsstring>
        <name>is_in_conflict</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Regular__triangulation_1a1f963e8534f6e685b8d10ddd4ea0f0f9" kindref="member">Weighted_point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation_1a1af144e869efba1cb61453b0202f5d3f" kindref="member">Full_cell_const_handle</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if and only if the point <computeroutput>p</computeroutput> is in conflict with full cell <computeroutput>c</computeroutput> (A weighted point <computeroutput>p</computeroutput> is said to be in conflict with a cell <computeroutput>c</computeroutput> if it has a negative power distance to the power sphere of <computeroutput>c</computeroutput>.) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation.h" line="136" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation_1ac2d2dfd133ee402f4e8c5a24915f01b6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Triangulation_1a8b1939b059439a2039f0138e390c4955" kindref="member">Facet</ref></type>
        <definition>Facet CGAL::Regular_triangulation&lt; RegularTriangulationTraits_, TriangulationDataStructure_ &gt;::compute_conflict_zone</definition>
        <argsstring>(const Weighted_point &amp;p, Full_cell_handle c, OutputIterator out) const</argsstring>
        <name>compute_conflict_zone</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Regular__triangulation_1a1f963e8534f6e685b8d10ddd4ea0f0f9" kindref="member">Weighted_point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation_1a9dc0c1f6f1974fbc59ad55e172bdbe0a" kindref="member">Full_cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Outputs handles to the full cells in conflict with point <computeroutput>p</computeroutput> into the <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref> out</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The full cell <computeroutput>c</computeroutput> is used as a starting point for gathering the full cells in conflict with <computeroutput>p</computeroutput>. A facet <computeroutput>(cc,i)</computeroutput> on the boundary of the conflict zone with <computeroutput>cc</computeroutput> in conflict is returned. <simplesect kind="pre"><para><computeroutput>c</computeroutput> is in conflict with <computeroutput>p</computeroutput> and <computeroutput>rt</computeroutput>.<computeroutput><ref refid="classCGAL_1_1Triangulation_1a62f94fb89a94243d74b2d1a273a50b1f" kindref="member">current_dimension()</ref></computeroutput> <formula id="5">$ \geq 1$</formula>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation.h" line="149" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Access Functions</header>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation_1aee5570c8d6bdc8cd8e37fabadcef2ead" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation_1ae83c49f5f2f90371376ee0faf469e760" kindref="member">size_type</ref></type>
        <definition>size_type CGAL::Regular_triangulation&lt; RegularTriangulationTraits_, TriangulationDataStructure_ &gt;::number_of_vertices</definition>
        <argsstring>() const</argsstring>
        <name>number_of_vertices</name>
        <briefdescription>
<para>Returns the number of finite vertices that are not hidden. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation.h" line="160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation_1a7748fa2ffdaf72d91224fdd943bc262a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation_1ae83c49f5f2f90371376ee0faf469e760" kindref="member">size_type</ref></type>
        <definition>size_type CGAL::Regular_triangulation&lt; RegularTriangulationTraits_, TriangulationDataStructure_ &gt;::number_of_hidden_vertices</definition>
        <argsstring>() const</argsstring>
        <name>number_of_hidden_vertices</name>
        <briefdescription>
<para>Returns the number of hidden vertices. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation.h" line="165" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class is used to maintain the regular triangulation <ndash/> also known as weighted Delaunay triangulation <ndash/> of a set of weighted points in <formula id="0">$ \mathbb{R}^D $</formula>. </para>    </briefdescription>
    <detaileddescription>
<para>The maximal dimension <formula id="1">$ D$</formula> can be specified at compile-time or run-time. It should be kept reasonably small <ndash/> see the performance section in the user manual for what reasonable means.</para><para><simplesect kind="warning"><para>The removal of points is not supported yet.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>RegularTriangulationTraits_</parametername>
</parameternamelist>
<parameterdescription>
<para>is the geometric traits class that provides the geometric types and predicates needed by regular triangulations. <computeroutput>RegularTriangulationTraits_</computeroutput> must be a model of the concept <computeroutput><ref refid="classRegularTriangulationTraits" kindref="compound">RegularTriangulationTraits</ref></computeroutput>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangulationDataStructure_</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of the concept <computeroutput><ref refid="classTriangulationDataStructure" kindref="compound">TriangulationDataStructure</ref></computeroutput>. This model is used to store the faces of the triangulation. The parameter <computeroutput>TriangulationDataStructure_</computeroutput> defaults to <computeroutput><ref refid="classCGAL_1_1Triangulation__data__structure" kindref="compound">Triangulation_data_structure</ref></computeroutput> whose template parameters are instantiated as follows: <itemizedlist>
<listitem>
<para><computeroutput>RegularTriangulationTraits_::Dimension</computeroutput> </para></listitem>
<listitem>
<para><computeroutput><ref refid="classCGAL_1_1Triangulation__vertex" kindref="compound">Triangulation_vertex</ref>&lt;<ref refid="classCGAL_1_1Regular__triangulation__traits__adapter" kindref="compound">CGAL::Regular_triangulation_traits_adapter</ref>&lt;RegularTriangulationTraits_&gt; &gt;</computeroutput> </para></listitem>
<listitem>
<para><computeroutput><ref refid="classCGAL_1_1Triangulation__full__cell" kindref="compound">Triangulation_full_cell</ref>&lt;<ref refid="classCGAL_1_1Regular__triangulation__traits__adapter" kindref="compound">CGAL::Regular_triangulation_traits_adapter</ref>&lt;RegularTriangulationTraits_&gt; &gt;</computeroutput>. </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<computeroutput><ref refid="classCGAL_1_1Regular__triangulation" kindref="compound">Regular_triangulation</ref></computeroutput> can be defined by specifying only the first parameter, or by using the tag <computeroutput><ref refid="structCGAL_1_1Default" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::Default</ref></computeroutput> as the second parameter.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Delaunay__triangulation" kindref="compound">Delaunay_triangulation</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Triangulation__data__structure" kindref="compound">Triangulation_data_structure</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Regular__triangulation__traits__adapter" kindref="compound">Regular_triangulation_traits_adapter</ref></computeroutput> </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="7">
        <label>CGAL::Triangulation&lt; Regular_triangulation_traits_adapter&lt; RegularTriangulationTraits_ &gt;, TriangulationDataStructure_ &gt;</label>
        <link refid="classCGAL_1_1Triangulation"/>
        <childnode refid="8" relation="template-instance">
          <edgelabel>&lt; Regular_triangulation_traits_adapter&lt; RegularTriangulationTraits_ &gt;, TriangulationDataStructure_ &gt;</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>CGAL::Triangulation&lt; TriangulationTraits_, TriangulationDataStructure_ &gt;</label>
        <link refid="classCGAL_1_1Triangulation"/>
      </node>
      <node id="6">
        <label>CGAL::Regular_triangulation&lt; RegularTriangulationTraits_, TriangulationDataStructure_ &gt;</label>
        <link refid="classCGAL_1_1Regular__triangulation"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="10">
        <label>CGAL::Triangulation&lt; Regular_triangulation_traits_adapter&lt; RegularTriangulationTraits_ &gt;, TriangulationDataStructure_ &gt;</label>
        <link refid="classCGAL_1_1Triangulation"/>
        <childnode refid="11" relation="template-instance">
          <edgelabel>&lt; Regular_triangulation_traits_adapter&lt; RegularTriangulationTraits_ &gt;, TriangulationDataStructure_ &gt;</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>CGAL::Triangulation&lt; TriangulationTraits_, TriangulationDataStructure_ &gt;</label>
        <link refid="classCGAL_1_1Triangulation"/>
      </node>
      <node id="9">
        <label>CGAL::Regular_triangulation&lt; RegularTriangulationTraits_, TriangulationDataStructure_ &gt;</label>
        <link refid="classCGAL_1_1Regular__triangulation"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="CGAL/Regular_triangulation.h" line="44" column="1" bodyfile="CGAL/Regular_triangulation.h" bodystart="42" bodyend="170"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Triangulation_1a62eda072a392c3e3837dfe4af91ee57f" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>are_incident_full_cells_valid</name></member>
      <member refid="classCGAL_1_1Triangulation_1a2facc61faaa2cec2ddfb750f72d81bcf" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>collapse_face</name></member>
      <member refid="classCGAL_1_1Regular__triangulation_1ac2d2dfd133ee402f4e8c5a24915f01b6" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>compute_conflict_zone</name></member>
      <member refid="classCGAL_1_1Triangulation_1a62f94fb89a94243d74b2d1a273a50b1f" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>current_dimension</name></member>
      <member refid="classCGAL_1_1Triangulation_1a94c8cff5d58de158d6035a597e208234" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>difference_type</name></member>
      <member refid="classCGAL_1_1Triangulation_1a780dd7423be3005779871317919413a2" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>empty</name></member>
      <member refid="classCGAL_1_1Triangulation_1ada52cef984f0e0c3a4feba1caaf5b2ba" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>Face</name></member>
      <member refid="classCGAL_1_1Triangulation_1a8b1939b059439a2039f0138e390c4955" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>Facet</name></member>
      <member refid="classCGAL_1_1Triangulation_1ab327fb6e008bcb7b385fd0c2bfdbdf76" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>Facet_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation_1a12dbb76f5fa83a360dbef6d3ddfbc388" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>facets_begin</name></member>
      <member refid="classCGAL_1_1Triangulation_1aad6830f68c30647e7ef21af16483194e" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>facets_end</name></member>
      <member refid="classCGAL_1_1Triangulation_1a6c33ee8a64012e49586c529f39757e32" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>Finite_facet_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation_1a9166332ea17e26fd5fdb1220478757fb" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>finite_facets_begin</name></member>
      <member refid="classCGAL_1_1Triangulation_1a0d991b81fa64caab32542b5aa1712eb8" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>finite_facets_end</name></member>
      <member refid="classCGAL_1_1Triangulation_1a8a675a9dadf7bd7d511dc4ba2c8b8e8b" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>Finite_full_cell_const_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation_1a81ba3b7bf860344f1e9caca53e6d5cd2" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>Finite_full_cell_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation_1afc03fd650523922c05332f3649921a4b" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>finite_full_cells_begin</name></member>
      <member refid="classCGAL_1_1Triangulation_1a59e47b3a229f0a323da15fc6d985100d" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>finite_full_cells_end</name></member>
      <member refid="classCGAL_1_1Triangulation_1aab014ba0508c8d17232452acbd3e8a7c" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>Finite_vertex_const_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation_1a6097653102d5cfe0df39ddc4b1742a5e" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>Finite_vertex_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation_1a3d58f149d9280456218eac0f6aab9c28" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>finite_vertices_begin</name></member>
      <member refid="classCGAL_1_1Triangulation_1abb2c1c00d7c359c364fb7f22ed65732b" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>finite_vertices_end</name></member>
      <member refid="classCGAL_1_1Triangulation_1a9dd8ae15c2aabba82c9f2c62a8a80acc" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>full_cell</name></member>
      <member refid="classCGAL_1_1Triangulation_1ac4d235ca89ed6f3ff64f4a3faf015eea" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>Full_cell</name></member>
      <member refid="classCGAL_1_1Triangulation_1a1af144e869efba1cb61453b0202f5d3f" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>Full_cell_const_handle</name></member>
      <member refid="classCGAL_1_1Triangulation_1abf5d59502213cf9887e4befe7ad66da6" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>Full_cell_const_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation_1a9dc0c1f6f1974fbc59ad55e172bdbe0a" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>Full_cell_handle</name></member>
      <member refid="classCGAL_1_1Triangulation_1a912c8764d774b853ee4965418ab39840" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>Full_cell_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation_1a04cdf99328b3511282ac62a7420df7e1" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>full_cells_begin</name></member>
      <member refid="classCGAL_1_1Triangulation_1a10e44b74801a177b62bf7c2fda2be226" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>full_cells_end</name></member>
      <member refid="classCGAL_1_1Triangulation_1a352007b3356b48a186bb425e46556f6d" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>Geom_traits</name></member>
      <member refid="classCGAL_1_1Triangulation_1a37330515770a3ceff69d7003622f0e8a" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>geom_traits</name></member>
      <member refid="classCGAL_1_1Triangulation_1ad5e9ac89fd2a2dbc52492acb1fa1dad1a4fb921e49e10cc8c13ae0af39563098e" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>IN_FACE</name></member>
      <member refid="classCGAL_1_1Triangulation_1ad5e9ac89fd2a2dbc52492acb1fa1dad1ae2f2769cedcfab4ec0a04e643951bbde" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>IN_FACET</name></member>
      <member refid="classCGAL_1_1Triangulation_1ad5e9ac89fd2a2dbc52492acb1fa1dad1a8d6394b632b0117d045db08d06fac769" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>IN_FULL_CELL</name></member>
      <member refid="classCGAL_1_1Triangulation_1ae7cc3a139eb04cd9c71a97460155cb38" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>index_of_covertex</name></member>
      <member refid="classCGAL_1_1Triangulation_1abba18bc51e982b4fb7d56fc1b894dfbf" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>infinite_full_cell</name></member>
      <member refid="classCGAL_1_1Triangulation_1a44e3585e1b8fa31b718310a3f32a92af" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>infinite_vertex</name></member>
      <member refid="classCGAL_1_1Regular__triangulation_1a365db1589a11fdb7a79ce610e32e214d" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Regular__triangulation_1a188ae4e812a71cf91083f1903c7c3768" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Regular__triangulation_1a8cc30d717bf877fdbdc95eaf6b79c7eb" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Regular__triangulation_1a137c364d75728faa0b81de680573243d" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Triangulation_1a2a6a11038170429d97260391d0acae8e" prot="public" virt="non-virtual" ambiguityscope="Triangulation&lt; Regular_triangulation_traits_adapter&lt; RegularTriangulationTraits_ &gt;, TriangulationDataStructure_ &gt;::"><scope>CGAL::Regular_triangulation</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Triangulation_1a79e945a3e013ddcdafb14bd5967a18ec" prot="public" virt="non-virtual" ambiguityscope="Triangulation&lt; Regular_triangulation_traits_adapter&lt; RegularTriangulationTraits_ &gt;, TriangulationDataStructure_ &gt;::"><scope>CGAL::Regular_triangulation</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Triangulation_1ac98183b1c784328d4280ec9870398831" prot="public" virt="non-virtual" ambiguityscope="Triangulation&lt; Regular_triangulation_traits_adapter&lt; RegularTriangulationTraits_ &gt;, TriangulationDataStructure_ &gt;::"><scope>CGAL::Regular_triangulation</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Triangulation_1a7bba92f7964a3b0a9c513c5a31504fba" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>insert_in_face</name></member>
      <member refid="classCGAL_1_1Triangulation_1a43bf60f8f5ce31f2073ae691b7d275bf" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>insert_in_facet</name></member>
      <member refid="classCGAL_1_1Triangulation_1a54643ea790cd66d67e56b33c40530789" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>insert_in_full_cell</name></member>
      <member refid="classCGAL_1_1Triangulation_1a2b49b3f3dead836d3bea31d495b89d0b" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>insert_in_hole</name></member>
      <member refid="classCGAL_1_1Triangulation_1a27d7dfc1989bb1bddf856da77bc2ff3b" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>insert_in_hole</name></member>
      <member refid="classCGAL_1_1Triangulation_1a4f168d5d6798c12b20230d13c36d3367" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>insert_outside_affine_hull</name></member>
      <member refid="classCGAL_1_1Triangulation_1ad4c6fa10fc9b75f462a8514834e27d01" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>insert_outside_convex_hull</name></member>
      <member refid="classCGAL_1_1Regular__triangulation_1afe7185bff889f30131a6af6f3bf78e85" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>is_in_conflict</name></member>
      <member refid="classCGAL_1_1Triangulation_1abc324aac5057a1d4763c1706200419c6" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Triangulation_1a8213719b293536a01b670379ca3aba28" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Triangulation_1a22a5005903613be10d59df6f1465afc9" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Triangulation_1a545a8951fa681312943a901978537018" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Triangulation_1a24225e8b6a8193d4d2ec2b48f2da0248" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>is_valid</name></member>
      <member refid="classCGAL_1_1Triangulation_1ab8ef50362a2530d69deb3663fa9147f9" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>locate</name></member>
      <member refid="classCGAL_1_1Triangulation_1a46b11884eca037fc82e4bc0121a3518a" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>locate</name></member>
      <member refid="classCGAL_1_1Triangulation_1af9ea0ceb6cc5c814e4ed63738396a6b6" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>locate</name></member>
      <member refid="classCGAL_1_1Triangulation_1a6e71f40009edee950c1c87258a3aee5c" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>locate</name></member>
      <member refid="classCGAL_1_1Triangulation_1ad5e9ac89fd2a2dbc52492acb1fa1dad1" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>Locate_type</name></member>
      <member refid="classCGAL_1_1Triangulation_1a2183e2d5583c4a339b6ddf40c9acc781" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>maximal_dimension</name></member>
      <member refid="classCGAL_1_1Triangulation_1a147923c9862c050a130509b7f206cf64" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>Maximal_dimension</name></member>
      <member refid="classCGAL_1_1Triangulation_1a9ead5898e253681887633542f6f2f7ad" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>number_of_finite_full_cells</name></member>
      <member refid="classCGAL_1_1Triangulation_1a48ce908ceee25383948a7042fb51762f" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>number_of_full_cells</name></member>
      <member refid="classCGAL_1_1Regular__triangulation_1a7748fa2ffdaf72d91224fdd943bc262a" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>number_of_hidden_vertices</name></member>
      <member refid="classCGAL_1_1Regular__triangulation_1aee5570c8d6bdc8cd8e37fabadcef2ead" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>number_of_vertices</name></member>
      <member refid="classCGAL_1_1Triangulation_1ad5e9ac89fd2a2dbc52492acb1fa1dad1ade1e70cfdf4d2dbe34d52a17e01e6d91" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>ON_VERTEX</name></member>
      <member refid="classCGAL_1_1Triangulation_1a6480b2bbfac9a8cff2b928fce9b1f5d4" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>operator&lt;&lt;</name></member>
      <member refid="classCGAL_1_1Triangulation_1a1bd74fdea9e3943ac096d9d2a0be5163" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>operator&gt;&gt;</name></member>
      <member refid="classCGAL_1_1Triangulation_1ad5e9ac89fd2a2dbc52492acb1fa1dad1a4fc81f6eab064619eab117d842cb6cad" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>OUTSIDE_AFFINE_HULL</name></member>
      <member refid="classCGAL_1_1Triangulation_1ad5e9ac89fd2a2dbc52492acb1fa1dad1a132f39ec6fbc6497258e6b76488c5676" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>OUTSIDE_CONVEX_HULL</name></member>
      <member refid="classCGAL_1_1Triangulation_1a1b422d984178df24b1802d9ea89a3731" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>Point</name></member>
      <member refid="classCGAL_1_1Regular__triangulation_1a4953aad5f8e4df255ffe04f110c5eedb" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>Regular_triangulation</name></member>
      <member refid="classCGAL_1_1Triangulation_1ae83c49f5f2f90371376ee0faf469e760" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>size_type</name></member>
      <member refid="classCGAL_1_1Triangulation_1ac0d79b01b2d90dcafa2f72c6dec96da0" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>tds</name></member>
      <member refid="classCGAL_1_1Triangulation_1a3567f6691efc7de6d8cf242fdcd71e8c" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>tds</name></member>
      <member refid="classCGAL_1_1Triangulation_1af7c419089770b5f8f8f695ddc4bae647" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>Triangulation</name></member>
      <member refid="classCGAL_1_1Triangulation_1aab75ff276e6fce6c1b26bcdcdaab9fc3" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>Triangulation</name></member>
      <member refid="classCGAL_1_1Triangulation_1af5bb59ee9b23d16ae5c1a8beac52cb2b" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>Triangulation_ds</name></member>
      <member refid="classCGAL_1_1Triangulation_1a105744e8ed756cd79c689fac0cc4c169" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>Vertex</name></member>
      <member refid="classCGAL_1_1Triangulation_1a4d0d07682df8287266b3543963c7491f" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>Vertex_const_handle</name></member>
      <member refid="classCGAL_1_1Triangulation_1a641484a12d5a795053c827142ca2f218" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>Vertex_const_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation_1a9cce545266f97305c03009e19a9574b8" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>Vertex_handle</name></member>
      <member refid="classCGAL_1_1Triangulation_1a4171657a4bb334b0d4c940f3b724c332" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>Vertex_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation_1a800fed6555205ba8985bdb98917676df" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>vertices_begin</name></member>
      <member refid="classCGAL_1_1Triangulation_1a02ab969e86936929273eb0a757f0f622" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>vertices_end</name></member>
      <member refid="classCGAL_1_1Regular__triangulation_1a1f963e8534f6e685b8d10ddd4ea0f0f9" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation</scope><name>Weighted_point</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
