<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Triangulation__vertex" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Triangulation_vertex</compoundname>
    <includes local="no">CGAL/Triangulation_vertex.h</includes>
    <templateparamlist>
      <param>
        <type>typename TriangulationTraits_</type>
      </param>
      <param>
        <type>typename <ref refid="classCGAL_1_1Triangulation__vertex_1a486da7e9659d1f90a39886787057ca2e" kindref="member">Data</ref></type>
      </param>
      <param>
        <type>typename TriangulationDSVertex_</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__vertex_1a55713c48b827c2a14f79ee99c448ef4a" prot="public" static="no">
        <type>TriangulationTraits_::Point_d</type>
        <definition>typedef TriangulationTraits_::Point_d CGAL::Triangulation_vertex&lt; TriangulationTraits_, Data, TriangulationDSVertex_ &gt;::Point</definition>
        <argsstring></argsstring>
        <name>Point</name>
        <briefdescription>
<para>The point type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_vertex.h" line="49" column="1" bodyfile="CGAL/Triangulation_vertex.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__vertex_1a486da7e9659d1f90a39886787057ca2e" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Triangulation__vertex_1a486da7e9659d1f90a39886787057ca2e" kindref="member">Data</ref></type>
        <definition>typedef Data CGAL::Triangulation_vertex&lt; TriangulationTraits_, Data, TriangulationDSVertex_ &gt;::Data</definition>
        <argsstring></argsstring>
        <name>Data</name>
        <briefdescription>
<para>The type of the additional data stored in the vertex. </para>        </briefdescription>
        <detaileddescription>
<para>If you read a <computeroutput><ref refid="classCGAL_1_1Triangulation__vertex" kindref="compound">Triangulation_vertex</ref></computeroutput> from a stream (a file) or write a <computeroutput><ref refid="classCGAL_1_1Triangulation__vertex" kindref="compound">Triangulation_vertex</ref></computeroutput> to a stream, then streaming operators <computeroutput>&lt;&lt;</computeroutput> and <computeroutput>&gt;&gt;</computeroutput> must be provided for this type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_vertex.h" line="56" column="1" bodyfile="CGAL/Triangulation_vertex.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__vertex_1a3d1b2110959f0c327a13bd77224e3eea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>CGAL::Triangulation_vertex&lt; TriangulationTraits_, Data, TriangulationDSVertex_ &gt;::Triangulation_vertex</definition>
        <argsstring>(Full_cell_handle c, const Point &amp;p, const T &amp;t)</argsstring>
        <name>Triangulation_vertex</name>
        <param>
          <type>Full_cell_handle</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__vertex_1a55713c48b827c2a14f79ee99c448ef4a" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Constructs a vertex with incident full cell <computeroutput>c</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The vertex is embedded at point <computeroutput>p</computeroutput> and the parameter <computeroutput>t</computeroutput> is passed to the <computeroutput>Data</computeroutput> constructor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_vertex.h" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__vertex_1a353238dd1186bcd11d7ba3dd5287721e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>CGAL::Triangulation_vertex&lt; TriangulationTraits_, Data, TriangulationDSVertex_ &gt;::Triangulation_vertex</definition>
        <argsstring>(const Point &amp;p, const T &amp;t)</argsstring>
        <name>Triangulation_vertex</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__vertex_1a55713c48b827c2a14f79ee99c448ef4a" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Same as above, but without incident full cell. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_vertex.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__vertex_1ab2c46a79e703e6c1b91f47ded7a4e5c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Triangulation_vertex&lt; TriangulationTraits_, Data, TriangulationDSVertex_ &gt;::Triangulation_vertex</definition>
        <argsstring>()</argsstring>
        <name>Triangulation_vertex</name>
        <briefdescription>
<para>Same as above, but with default-constructed <computeroutput>Point</computeroutput> and <computeroutput>Data</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_vertex.h" line="81" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Data access</header>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__vertex_1ae324ad7717a0b4e2395245d44d54b3e5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classCGAL_1_1Triangulation__vertex_1a486da7e9659d1f90a39886787057ca2e" kindref="member">Data</ref> &amp;</type>
        <definition>const Data&amp; CGAL::Triangulation_vertex&lt; TriangulationTraits_, Data, TriangulationDSVertex_ &gt;::data</definition>
        <argsstring>() const</argsstring>
        <name>data</name>
        <briefdescription>
<para>Returns a const reference to the stored data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_vertex.h" line="91" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__vertex_1a2d2a37b214d4d7d4ae1ddccd0068649b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__vertex_1a486da7e9659d1f90a39886787057ca2e" kindref="member">Data</ref> &amp;</type>
        <definition>Data&amp; CGAL::Triangulation_vertex&lt; TriangulationTraits_, Data, TriangulationDSVertex_ &gt;::data</definition>
        <argsstring>()</argsstring>
        <name>data</name>
        <briefdescription>
<para>Returns a non-const reference to the stored data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_vertex.h" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__vertex_1a8dd3680d95eec187e75adb4f6c5fb54e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream&amp; CGAL::Triangulation_vertex&lt; TriangulationTraits_, Data, TriangulationDSVertex_ &gt;::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, Triangulation_vertex &amp;v)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__vertex" kindref="compound">Triangulation_vertex</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Inputs the non-combinatorial information given by the vertex, i.e., the point and other possible information. </para>        </briefdescription>
        <detaileddescription>
<para>The data of type <computeroutput>Data</computeroutput> is also read. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_vertex.h" line="103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__vertex_1ac18f78a91a6ff456665ca6bc418b22ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; CGAL::Triangulation_vertex&lt; TriangulationTraits_, Data, TriangulationDSVertex_ &gt;::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Triangulation_vertex &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__vertex" kindref="compound">Triangulation_vertex</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Outputs the non-combinatorial information given by the vertex, i.e., the point and other possible information. </para>        </briefdescription>
        <detaileddescription>
<para>The data of type <computeroutput>Data</computeroutput> is also written. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_vertex.h" line="110" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The class <computeroutput><ref refid="classCGAL_1_1Triangulation__vertex" kindref="compound">Triangulation_vertex</ref></computeroutput> is a model of the concept <computeroutput><ref refid="classTriangulationVertex" kindref="compound">TriangulationVertex</ref></computeroutput>. </para>    </briefdescription>
    <detaileddescription>
<para>It is used by default for representing vertices in the class <computeroutput><ref refid="classCGAL_1_1Triangulation" kindref="compound">Triangulation</ref>&lt;TriangulationTraits_, TriangulationDataStructure_&gt;</computeroutput>.</para><para>A <computeroutput><ref refid="classCGAL_1_1Triangulation__vertex" kindref="compound">Triangulation_vertex</ref></computeroutput> stores a point and an incident full cell.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;TriangulationTraits_&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of the concept <computeroutput><ref refid="classTriangulationTraits" kindref="compound">TriangulationTraits</ref></computeroutput>. It provides geometric types and predicates for use in the <computeroutput><ref refid="classCGAL_1_1Triangulation" kindref="compound">Triangulation</ref>&lt;TriangulationTraits_, TriangulationDataStructure_&gt;</computeroutput> class. It is of interest here for its declaration of the <computeroutput>Point</computeroutput> type.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Data</parametername>
</parameternamelist>
<parameterdescription>
<para>is an optional type of data to be stored in the vertex class. The class template <computeroutput><ref refid="classCGAL_1_1Triangulation__vertex" kindref="compound">Triangulation_vertex</ref></computeroutput> accepts that no second parameter be specified. In this case, <computeroutput>Data</computeroutput> defaults to <computeroutput>CGAL::No_vertex_data</computeroutput>. <computeroutput>CGAL::No_vertex_data</computeroutput> can be explicitely specified to allow to access the third parameter.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;TriangulationDSVertex_&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of the concept <computeroutput><ref refid="classTriangulationDSVertex" kindref="compound">TriangulationDSVertex</ref></computeroutput>. The class template <computeroutput><ref refid="classCGAL_1_1Triangulation__vertex" kindref="compound">Triangulation_vertex</ref></computeroutput> accepts that no third parameter be specified. It also accepts the tag <computeroutput><ref refid="structCGAL_1_1Default" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::Default</ref></computeroutput> as third parameter. In both cases, <computeroutput>TriangulationDSVertex_</computeroutput> defaults to <computeroutput><ref refid="classCGAL_1_1Triangulation__ds__vertex" kindref="compound">CGAL::Triangulation_ds_vertex</ref>&lt;&gt;</computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<xrefsect id="models_1_models000006"><xreftitle>Is Model Of</xreftitle><xrefdescription><para><computeroutput><ref refid="classTriangulationVertex" kindref="compound">TriangulationVertex</ref></computeroutput> Additionally, the class <computeroutput><ref refid="classCGAL_1_1Triangulation__vertex" kindref="compound">Triangulation_vertex</ref></computeroutput> provides the following types, constructors and methods:</para></xrefdescription></xrefsect></para><para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Triangulation__full__cell" kindref="compound">Triangulation_full_cell</ref>&lt;TriangulationTraits_, <ref refid="classCGAL_1_1Triangulation__vertex_1a486da7e9659d1f90a39886787057ca2e" kindref="member">Data</ref>, TriangulationDSFullCell_&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Triangulation__data__structure" kindref="compound">Triangulation_data_structure</ref>&lt;Dimensionality, TriangulationDSVertex_, TriangulationDSFullCell_&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Triangulation" kindref="compound">Triangulation</ref>&lt;TriangulationTraits_, TriangulationDataStructure_&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Delaunay__triangulation" kindref="compound">Delaunay_triangulation</ref>&lt;DelaunayTriangulationTraits_, TriangulationDataStructure_&gt;</computeroutput> </para></simplesect>
</para>    </detaileddescription>
    <location file="CGAL/Triangulation_vertex.h" line="40" column="1" bodyfile="CGAL/Triangulation_vertex.h" bodystart="40" bodyend="114"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Triangulation__vertex_1a486da7e9659d1f90a39886787057ca2e" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_vertex</scope><name>Data</name></member>
      <member refid="classCGAL_1_1Triangulation__vertex_1ae324ad7717a0b4e2395245d44d54b3e5" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_vertex</scope><name>data</name></member>
      <member refid="classCGAL_1_1Triangulation__vertex_1a2d2a37b214d4d7d4ae1ddccd0068649b" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_vertex</scope><name>data</name></member>
      <member refid="classCGAL_1_1Triangulation__vertex_1ac18f78a91a6ff456665ca6bc418b22ab" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_vertex</scope><name>operator&lt;&lt;</name></member>
      <member refid="classCGAL_1_1Triangulation__vertex_1a8dd3680d95eec187e75adb4f6c5fb54e" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_vertex</scope><name>operator&gt;&gt;</name></member>
      <member refid="classCGAL_1_1Triangulation__vertex_1a55713c48b827c2a14f79ee99c448ef4a" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_vertex</scope><name>Point</name></member>
      <member refid="classCGAL_1_1Triangulation__vertex_1a3d1b2110959f0c327a13bd77224e3eea" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_vertex</scope><name>Triangulation_vertex</name></member>
      <member refid="classCGAL_1_1Triangulation__vertex_1a353238dd1186bcd11d7ba3dd5287721e" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_vertex</scope><name>Triangulation_vertex</name></member>
      <member refid="classCGAL_1_1Triangulation__vertex_1ab2c46a79e703e6c1b91f47ded7a4e5c2" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_vertex</scope><name>Triangulation_vertex</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
