<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classTriangulationVertex" kind="class" language="C++" prot="public">
    <compoundname>TriangulationVertex</compoundname>
    <includes local="no">Concepts/TriangulationVertex.h</includes>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classTriangulationVertex_1a533d686b79fc6195d2faf08eff3204a0" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type TriangulationVertex::Point</definition>
        <argsstring></argsstring>
        <name>Point</name>
        <briefdescription>
<para>The type of the point stored in the vertex. </para>        </briefdescription>
        <detaileddescription>
<para>It must be the same as the point type <computeroutput><ref refid="classTriangulationTraits_1afcb378257e144696a767152acfa5ccac" kindref="member">TriangulationTraits::Point_d</ref></computeroutput> when the <computeroutput><ref refid="classTriangulationVertex" kindref="compound">TriangulationVertex</ref></computeroutput> is used in the class <computeroutput>Triangulation&lt;<ref refid="classTriangulationTraits" kindref="compound">TriangulationTraits</ref>, TriangulationDataStructure_&gt;</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationVertex.h" line="41" column="1" bodyfile="Concepts/TriangulationVertex.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classTriangulationVertex_1ab3f2b22be32b9663d480a2e46c505604" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TriangulationVertex::TriangulationVertex</definition>
        <argsstring>(Full_cell_handle c, const Point &amp;p)</argsstring>
        <name>TriangulationVertex</name>
        <param>
          <type>Full_cell_handle</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classTriangulationVertex_1a533d686b79fc6195d2faf08eff3204a0" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Constructs a vertex with incident full cell <computeroutput>c</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The vertex is embedded at point <computeroutput>p</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationVertex.h" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationVertex_1a4926320cc13644c96f9e0ae7d1cd8ac5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TriangulationVertex::TriangulationVertex</definition>
        <argsstring>(const Point &amp;p)</argsstring>
        <name>TriangulationVertex</name>
        <param>
          <type>const <ref refid="classTriangulationVertex_1a533d686b79fc6195d2faf08eff3204a0" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Same as above, but without incident full cell. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationVertex.h" line="56" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationVertex_1af8c2007efb7ebd2d780570d46f2ccc4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TriangulationVertex::TriangulationVertex</definition>
        <argsstring>()</argsstring>
        <name>TriangulationVertex</name>
        <briefdescription>
<para>Same as above, but with a default-constructed <computeroutput>Point</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationVertex.h" line="61" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <memberdef kind="function" id="classTriangulationVertex_1af5e882055936c00e2a80a9dbf74ed0ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TriangulationVertex::set_point</definition>
        <argsstring>(const Point &amp;p)</argsstring>
        <name>set_point</name>
        <param>
          <type>const <ref refid="classTriangulationVertex_1a533d686b79fc6195d2faf08eff3204a0" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>The parameter <computeroutput>p</computeroutput> becomes the new geometrical position of the vertex. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationVertex.h" line="71" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationVertex_1a05483f72089471413f230bff848962b4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classTriangulationVertex_1a533d686b79fc6195d2faf08eff3204a0" kindref="member">Point</ref> &amp;</type>
        <definition>const Point&amp; TriangulationVertex::point</definition>
        <argsstring>() const</argsstring>
        <name>point</name>
        <briefdescription>
<para>Returns the vertex&apos;s position. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationVertex.h" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationVertex_1af12b781b01374a49a06e4a090b0c38d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream&amp; TriangulationVertex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, TriangulationVertex &amp;v)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationVertex" kindref="compound">TriangulationVertex</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Inputs the non-combinatorial information given by the vertex, i.e., the point and other possible information. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationVertex.h" line="82" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationVertex_1a61b976bc2be11e70fddadf5861cc8252" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; TriangulationVertex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const TriangulationVertex &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classTriangulationVertex" kindref="compound">TriangulationVertex</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Outputs the non-combinatorial information given by the vertex, i.e., the point and other possible information. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationVertex.h" line="88" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The concept <computeroutput><ref refid="classTriangulationVertex" kindref="compound">TriangulationVertex</ref></computeroutput> describes the requirements on the type used by the class <computeroutput><ref refid="classCGAL_1_1Triangulation" kindref="compound">CGAL::Triangulation</ref>&lt;TriangulationTraits_, TriangulationDataStructure_&gt;</computeroutput>, and its derived classes, to represent a vertex. </para>    </briefdescription>
    <detaileddescription>
<para> <xrefsect id="refines_1_refines000007"><xreftitle>Refines</xreftitle><xrefdescription><para><computeroutput><ref refid="classTriangulationDSVertex" kindref="compound">TriangulationDSVertex</ref></computeroutput> We only list below the additional specific requirements of <ref refid="classTriangulationVertex" kindref="compound">TriangulationVertex</ref>. Compared to <ref refid="classTriangulationDSVertex" kindref="compound">TriangulationDSVertex</ref>, the main difference is the addition of an association of the vertex with a geometric point. </para></xrefdescription></xrefsect></para><para><xrefsect id="hasModels_1_hasModels000011"><xreftitle>Has Models</xreftitle><xrefdescription><para><computeroutput><ref refid="classCGAL_1_1Triangulation__vertex" kindref="compound">CGAL::Triangulation_vertex</ref>&lt;TriangulationTraits_, Data, TriangulationDSVertex_&gt;</computeroutput></para></xrefdescription></xrefsect></para><para><heading level="2">Input/Output </heading>
</para><para>These operators can be used directly and are called by the I/O operator of class <computeroutput>Triangulation</computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Triangulation__vertex" kindref="compound">CGAL::Triangulation_vertex</ref>&lt;TriangulationTraits_, Data, TriangulationDSVertex_&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classTriangulationFullCell" kindref="compound">TriangulationFullCell</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Triangulation" kindref="compound">CGAL::Triangulation</ref>&lt;TriangulationTraits_, TriangulationDataStructure_&gt;</computeroutput> </para></simplesect>
</para>    </detaileddescription>
    <location file="Concepts/TriangulationVertex.h" line="29" column="1" bodyfile="Concepts/TriangulationVertex.h" bodystart="29" bodyend="92"/>
    <listofallmembers>
      <member refid="classTriangulationVertex_1a61b976bc2be11e70fddadf5861cc8252" prot="public" virt="non-virtual"><scope>TriangulationVertex</scope><name>operator&lt;&lt;</name></member>
      <member refid="classTriangulationVertex_1af12b781b01374a49a06e4a090b0c38d3" prot="public" virt="non-virtual"><scope>TriangulationVertex</scope><name>operator&gt;&gt;</name></member>
      <member refid="classTriangulationVertex_1a05483f72089471413f230bff848962b4" prot="public" virt="non-virtual"><scope>TriangulationVertex</scope><name>point</name></member>
      <member refid="classTriangulationVertex_1a533d686b79fc6195d2faf08eff3204a0" prot="public" virt="non-virtual"><scope>TriangulationVertex</scope><name>Point</name></member>
      <member refid="classTriangulationVertex_1af5e882055936c00e2a80a9dbf74ed0ac" prot="public" virt="non-virtual"><scope>TriangulationVertex</scope><name>set_point</name></member>
      <member refid="classTriangulationVertex_1ab3f2b22be32b9663d480a2e46c505604" prot="public" virt="non-virtual"><scope>TriangulationVertex</scope><name>TriangulationVertex</name></member>
      <member refid="classTriangulationVertex_1a4926320cc13644c96f9e0ae7d1cd8ac5" prot="public" virt="non-virtual"><scope>TriangulationVertex</scope><name>TriangulationVertex</name></member>
      <member refid="classTriangulationVertex_1af8c2007efb7ebd2d780570d46f2ccc4d" prot="public" virt="non-virtual"><scope>TriangulationVertex</scope><name>TriangulationVertex</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
