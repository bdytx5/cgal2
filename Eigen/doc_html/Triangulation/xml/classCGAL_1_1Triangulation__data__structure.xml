<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Triangulation__data__structure" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Triangulation_data_structure</compoundname>
    <includes local="no">CGAL/Triangulation_data_structure.h</includes>
    <templateparamlist>
      <param>
        <type>typename Dimensionality</type>
      </param>
      <param>
        <type>typename TriangulationDSVertex_</type>
      </param>
      <param>
        <type>typename TriangulationDSFullCell_</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__data__structure_1a64fbb138a0aeb1ea45fcec29d8cf51b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Triangulation_data_structure&lt; Dimensionality, TriangulationDSVertex_, TriangulationDSFullCell_ &gt;::Triangulation_data_structure</definition>
        <argsstring>(const Triangulation_data_structure &amp;t2)</argsstring>
        <name>Triangulation_data_structure</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__data__structure" kindref="compound">Triangulation_data_structure</ref> &amp;</type>
          <declname>t2</declname>
        </param>
        <briefdescription>
<para>The copy constructor. </para>        </briefdescription>
        <detaileddescription>
<para>Creates a copy of the <computeroutput><ref refid="classCGAL_1_1Triangulation__data__structure" kindref="compound">Triangulation_data_structure</ref></computeroutput> <computeroutput>t2</computeroutput> passed as argument. All vertices and full cells are duplicated. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_data_structure.h" line="55" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Validity check</header>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__data__structure_1a7233f1d42170a960489d1257b6f6459c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangulation_data_structure&lt; Dimensionality, TriangulationDSVertex_, TriangulationDSFullCell_ &gt;::is_valid</definition>
        <argsstring>(bool verbose=true) const</argsstring>
        <name>is_valid</name>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Implements the validity checks required by the concept <computeroutput><ref refid="classTriangulationDataStructure" kindref="compound">TriangulationDataStructure</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Note that passing all these tests does not guarantee that we have a triangulation (abstract pure simplicial complex). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_data_structure.h" line="69" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__data__structure_1a5087b1d2f8ea02dc87b4c846afe3dd9a" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>using CGAL::Triangulation_data_structure&lt; Dimensionality, TriangulationDSVertex_, TriangulationDSFullCell_ &gt;::Rebind_vertex =  unspecified_type</definition>
        <argsstring></argsstring>
        <name>Rebind_vertex</name>
        <briefdescription>
<para></para><para>This template class allows to get the type of a triangulation data structure that only changes the vertex type. </para>        </briefdescription>
        <detaileddescription>
<para>It has to define a type <computeroutput>Other</computeroutput> which is a <emphasis>rebound</emphasis> triangulation data structure with <computeroutput>Vb2</computeroutput> as vertex type. <simplesect kind="note"><para>It can be implemented using a nested template class.  </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_data_structure.h" line="86" column="1" bodyfile="CGAL/Triangulation_data_structure.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__data__structure_1afdfacb10ac5656b5f24927dc74ac1bde" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>using CGAL::Triangulation_data_structure&lt; Dimensionality, TriangulationDSVertex_, TriangulationDSFullCell_ &gt;::Rebind_full_cell =  unspecified_type</definition>
        <argsstring></argsstring>
        <name>Rebind_full_cell</name>
        <briefdescription>
<para></para><para>This template class allows to get the type of a triangulation data structure that only changes the full cell type. </para>        </briefdescription>
        <detaileddescription>
<para>It has to define a type <computeroutput>Other</computeroutput> which is a <emphasis>rebound</emphasis> triangulation data structure with <computeroutput>Fcb2</computeroutput> as full cell type. <simplesect kind="note"><para>It can be implemented using a nested template class.  </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_data_structure.h" line="98" column="1" bodyfile="CGAL/Triangulation_data_structure.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Vertex insertion</header>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__data__structure_1ae9bc3372b077f9fb62b1698b33c53aca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type>Full_cell_handle</type>
        <definition>Full_cell_handle CGAL::Triangulation_data_structure&lt; Dimensionality, TriangulationDSVertex_, TriangulationDSFullCell_ &gt;::insert_in_tagged_hole</definition>
        <argsstring>(Vertex_handle v, Facet f, OutputIterator new_full_cells)</argsstring>
        <name>insert_in_tagged_hole</name>
        <param>
          <type>Vertex_handle</type>
          <declname>v</declname>
        </param>
        <param>
          <type>Facet</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>new_full_cells</declname>
        </param>
        <briefdescription>
<para></para><para>A set <computeroutput>C</computeroutput> of full cells satisfying the same condition as in method <computeroutput>Triangulation_data_structure::insert_in_hole()</computeroutput> is assumed to be marked. </para>        </briefdescription>
        <detaileddescription>
<para>This method creates new full cells from vertex <computeroutput>v</computeroutput> to the boundary of <computeroutput>C</computeroutput>. The boundary is recognized by checking the mark of the full cells. This method is used by <computeroutput>Triangulation_data_structure::insert_in_hole()</computeroutput>. s <simplesect kind="pre"><para>same as <computeroutput><ref refid="classTriangulationDataStructure_1a9b8c4026fd56a333715b91ebc665e4b5" kindref="member">TriangulationDataStructure::insert_in_hole()</ref></computeroutput>  </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_data_structure.h" line="117" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class is a data structure used for storing a triangulation of dimension <formula id="20">$ d\leq D$</formula> (<computeroutput>D</computeroutput> is the maximal dimension). </para>    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Dimensionality</parametername>
</parameternamelist>
<parameterdescription>
<para>can be either <itemizedlist>
<listitem>
<para><computeroutput><ref refid="structCGAL_1_1Dimension__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Dimension_tag</ref>&lt;D&gt;</computeroutput> for some integer <computeroutput>D</computeroutput>. This indicates that the triangulation data structure can store simplices (full cells) of dimension at most <computeroutput>D</computeroutput>. The maximal dimension <computeroutput>D</computeroutput> is known by the compiler, which triggers some optimizations. Or </para></listitem>
<listitem>
<para><computeroutput><ref refid="structCGAL_1_1Dynamic__dimension__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Dynamic_dimension_tag</ref></computeroutput>. In this case, the maximum dimension of the simplices (full cells) is passed as an integer argument to an instance constructor (see <computeroutput><ref refid="classTriangulationDataStructure" kindref="compound">TriangulationDataStructure</ref></computeroutput>).</para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;TriangulationDSVertex_&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>stands for a class to be used as the base <computeroutput>Vertex</computeroutput> type in the triangulation data structure. It must be a model of the concept <computeroutput><ref refid="classTriangulationDSVertex" kindref="compound">TriangulationDSVertex</ref></computeroutput>. The class template <computeroutput><ref refid="classCGAL_1_1Triangulation__data__structure" kindref="compound">Triangulation_data_structure</ref></computeroutput> can be defined by specifying only the first parameter. It also accepts the tag <computeroutput><ref refid="structCGAL_1_1Default" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::Default</ref></computeroutput> as second parameter. In both cases, <computeroutput>TriangulationDSVertex_</computeroutput> defaults to <computeroutput><ref refid="classCGAL_1_1Triangulation__ds__vertex" kindref="compound">CGAL::Triangulation_ds_vertex</ref>&lt;&gt;</computeroutput>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;TriangulationDSFullCell_&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>stands for a class to be used as the base <computeroutput>Full_cell</computeroutput> type in the triangulation data structure. It must be a model of the concept <computeroutput><ref refid="classTriangulationDSFullCell" kindref="compound">TriangulationDSFullCell</ref></computeroutput>. The class template <computeroutput><ref refid="classCGAL_1_1Triangulation__data__structure" kindref="compound">Triangulation_data_structure</ref></computeroutput> accepts that no third parameter be specified. It also accepts the tag <computeroutput><ref refid="structCGAL_1_1Default" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::Default</ref></computeroutput> as third parameter. In both cases, <computeroutput>TriangulationDSFullCell_</computeroutput> defaults to <computeroutput><ref refid="classCGAL_1_1Triangulation__ds__full__cell" kindref="compound">CGAL::Triangulation_ds_full_cell</ref>&lt;&gt;</computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<xrefsect id="models_1_models000001"><xreftitle>Is Model Of</xreftitle><xrefdescription><para><computeroutput><ref refid="classTriangulationDataStructure" kindref="compound">TriangulationDataStructure</ref></computeroutput>. In addition, the class <computeroutput><ref refid="classCGAL_1_1Triangulation__data__structure" kindref="compound">Triangulation_data_structure</ref></computeroutput> provides the following types and methods.</para></xrefdescription></xrefsect></para><para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Triangulation__ds__vertex" kindref="compound">Triangulation_ds_vertex</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Triangulation__ds__full__cell" kindref="compound">Triangulation_ds_full_cell</ref></computeroutput> </para></simplesect>
</para>    </detaileddescription>
    <location file="CGAL/Triangulation_data_structure.h" line="45" column="1" bodyfile="CGAL/Triangulation_data_structure.h" bodystart="45" bodyend="122"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Triangulation__data__structure_1ae9bc3372b077f9fb62b1698b33c53aca" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_data_structure</scope><name>insert_in_tagged_hole</name></member>
      <member refid="classCGAL_1_1Triangulation__data__structure_1a7233f1d42170a960489d1257b6f6459c" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_data_structure</scope><name>is_valid</name></member>
      <member refid="classCGAL_1_1Triangulation__data__structure_1afdfacb10ac5656b5f24927dc74ac1bde" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_data_structure</scope><name>Rebind_full_cell</name></member>
      <member refid="classCGAL_1_1Triangulation__data__structure_1a5087b1d2f8ea02dc87b4c846afe3dd9a" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_data_structure</scope><name>Rebind_vertex</name></member>
      <member refid="classCGAL_1_1Triangulation__data__structure_1a64fbb138a0aeb1ea45fcec29d8cf51b5" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_data_structure</scope><name>Triangulation_data_structure</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
