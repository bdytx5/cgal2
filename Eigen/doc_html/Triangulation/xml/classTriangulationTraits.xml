<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classTriangulationTraits" kind="class" language="C++" prot="public">
    <compoundname>TriangulationTraits</compoundname>
    <includes local="no">Concepts/TriangulationTraits.h</includes>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classTriangulationTraits_1a333a19426aa60c3363af494782caa891" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type TriangulationTraits::Dimension</definition>
        <argsstring></argsstring>
        <name>Dimension</name>
        <briefdescription>
<para>A type representing the dimension of the predicates (but not necessarily the one of <computeroutput>Point_d</computeroutput>). </para>        </briefdescription>
        <detaileddescription>
<para>If <formula id="51">$ n $</formula> is the number of points required by the <computeroutput>Orientation_d</computeroutput> predicate, then <computeroutput>Dimension</computeroutput> <formula id="52">$ = n - 1$</formula>. It can be static (<computeroutput>Dimension</computeroutput>=<computeroutput><ref refid="structCGAL_1_1Dimension__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Dimension_tag</ref>&lt;int dim&gt;</computeroutput>) or dynamic (<computeroutput>Dimension</computeroutput>=<computeroutput><ref refid="structCGAL_1_1Dynamic__dimension__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Dynamic_dimension_tag</ref></computeroutput>). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationTraits.h" line="36" column="1" bodyfile="Concepts/TriangulationTraits.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classTriangulationTraits_1afcb378257e144696a767152acfa5ccac" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type TriangulationTraits::Point_d</definition>
        <argsstring></argsstring>
        <name>Point_d</name>
        <briefdescription>
<para>A type representing a point in Euclidean space. </para>        </briefdescription>
        <detaileddescription>
<para>It must be <computeroutput><ref refid="classDefaultConstructible" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">DefaultConstructible</ref></computeroutput>, <computeroutput><ref refid="classCopyConstructible" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">CopyConstructible</ref></computeroutput> and <computeroutput><ref refid="classAssignable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">Assignable</ref></computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationTraits.h" line="42" column="1" bodyfile="Concepts/TriangulationTraits.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classTriangulationTraits_1a12b37c3d97f0a024fba7ca8b46b68364" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type TriangulationTraits::Orientation_d</definition>
        <argsstring></argsstring>
        <name>Orientation_d</name>
        <briefdescription>
<para>A predicate object that must provide the templated operator <computeroutput>template&lt;typename <ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref>&gt; Orientation operator()(ForwardIterator start, ForwardIterator end)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The operator returns the orientation of the simplex defined by the points in the range <computeroutput>[start, end)</computeroutput>; the value can be <computeroutput><ref refid="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a963eefff16725de743f4022f4e23fc0d" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::POSITIVE</ref></computeroutput>, <computeroutput><ref refid="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a3aef56502334293e3ad25e166d74bb2a" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::NEGATIVE</ref></computeroutput> or <computeroutput><ref refid="group__kernel__enums_1ga56587f3c15032c9127a9fe81c038b0d7" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::COPLANAR</ref></computeroutput>. <simplesect kind="pre"><para>If <computeroutput>Dimension</computeroutput>=<computeroutput><ref refid="structCGAL_1_1Dimension__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Dimension_tag</ref>&lt;D&gt;</computeroutput>, then <computeroutput>std::distance(start,end)=D+1</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationTraits.h" line="53" column="1" bodyfile="Concepts/TriangulationTraits.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classTriangulationTraits_1a9eb79cae7da0befeb3b69550a78b01bf" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type TriangulationTraits::Contained_in_affine_hull_d</definition>
        <argsstring></argsstring>
        <name>Contained_in_affine_hull_d</name>
        <briefdescription>
<para>A predicate object that must provide the templated operator <computeroutput>template&lt;typename <ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref>&gt; bool operator()(ForwardIterator start, ForwardIterator end, const Point_d &amp; p)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The operator returns <computeroutput>true</computeroutput> if and only if point <computeroutput>p</computeroutput> is contained in the affine space spanned by the points in the range <computeroutput>[start, end)</computeroutput>. That affine space is also called the <emphasis>affine hull</emphasis> of the points in the range. <simplesect kind="pre"><para>If <computeroutput>Dimension</computeroutput>=<computeroutput><ref refid="structCGAL_1_1Dimension__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Dimension_tag</ref>&lt;D&gt;</computeroutput>, then <computeroutput>std::distance(start,end)=D+1</computeroutput>. The points in the range must be affinely independent. Note that in the <ref refid="namespaceCGAL" kindref="compound">CGAL</ref> kernels, this predicate works also with affinely dependent points. <formula id="53">$ 2\leq k\leq D$</formula>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationTraits.h" line="70" column="1" bodyfile="Concepts/TriangulationTraits.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <description><para>In the <formula id="1">$ D$</formula>-dimensional oriented space, a <formula id="54">$ k-1$</formula> dimensional subspace (flat) defined by <formula id="13">$ k$</formula> points can be oriented in two different ways.</para><para>Choosing the orientation of any simplex defined by <formula id="13">$ k$</formula> points in a flat fixes the orientation of the flat and therefore the orientation of all other simplices in this flat. To be able to orient lower dimensional flats, we use the following classes: </para></description>
      <memberdef kind="typedef" id="classTriangulationTraits_1afc5236686346da808714fda977c744e1" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type TriangulationTraits::Flat_orientation_d</definition>
        <argsstring></argsstring>
        <name>Flat_orientation_d</name>
        <briefdescription>
<para>A type representing an orientation of an affine subspace of dimension <formula id="13">$ k$</formula> strictly smaller than the dimension of the traits. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationTraits.h" line="88" column="1" bodyfile="Concepts/TriangulationTraits.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classTriangulationTraits_1a023db16bead142cc628052dee2c9cd02" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type TriangulationTraits::Construct_flat_orientation_d</definition>
        <argsstring></argsstring>
        <name>Construct_flat_orientation_d</name>
        <briefdescription>
<para>A construction object that must provide the templated operator <computeroutput>template&lt;typename <ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref>&gt; Flat_orientation_d operator()(ForwardIterator start, ForwardIterator end)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The flat spanned by the points in the range <computeroutput>R=[start, end)</computeroutput> can be oriented in two different ways, the operator returns an object that allow to orient that flat so that <computeroutput>R=[start, end)</computeroutput> defines a positive simplex. <simplesect kind="pre"><para>If <computeroutput>Dimension</computeroutput>=<computeroutput><ref refid="structCGAL_1_1Dimension__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Dimension_tag</ref>&lt;D&gt;</computeroutput>, then <computeroutput>std::distance(start,end)=D+1</computeroutput>. The points in range <computeroutput>[start,end)</computeroutput> must be affinely independent. <formula id="53">$ 2\leq k\leq D$</formula>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationTraits.h" line="106" column="1" bodyfile="Concepts/TriangulationTraits.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classTriangulationTraits_1acd06ad263131638a9b86846d232f7fdb" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type TriangulationTraits::In_flat_orientation_d</definition>
        <argsstring></argsstring>
        <name>In_flat_orientation_d</name>
        <briefdescription>
<para>A predicate object that must provide the templated operator <computeroutput>template&lt;typename <ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref>&gt; Orientation operator()(Flat_orientation_d orient,ForwardIterator start, ForwardIterator end)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The operator returns <computeroutput><ref refid="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a963eefff16725de743f4022f4e23fc0d" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::POSITIVE</ref></computeroutput>, <computeroutput><ref refid="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a3aef56502334293e3ad25e166d74bb2a" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::NEGATIVE</ref></computeroutput> or <computeroutput><ref refid="group__kernel__enums_1ga56587f3c15032c9127a9fe81c038b0d7" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::COPLANAR</ref></computeroutput> depending on the orientation of the simplex defined by the points in the range <computeroutput>[start, end)</computeroutput>. The points are supposed to belong to the lower dimensional flat whose orientation is given by <computeroutput>orient</computeroutput>. <simplesect kind="pre"><para><computeroutput>std::distance(start,end)=k</computeroutput> where <formula id="13">$ k$</formula> is the number of points used to construct <computeroutput>orient</computeroutput>. <formula id="53">$ 2\leq k\leq D$</formula>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationTraits.h" line="122" column="1" bodyfile="Concepts/TriangulationTraits.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classTriangulationTraits_1a5f2ff44a211c3bc2ebfd84c49148d9a6" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type TriangulationTraits::Compare_lexicographically_d</definition>
        <argsstring></argsstring>
        <name>Compare_lexicographically_d</name>
        <briefdescription>
<para>A predicate object that must provide the operator <computeroutput>Comparison_result operator()(const Point_d &amp; p, const Point_d &amp; q)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The operator returns <computeroutput>SMALLER</computeroutput> if <computeroutput>p</computeroutput> is lexicographically smaller than point <computeroutput>q</computeroutput>, <computeroutput>EQUAL</computeroutput> if both points are the same and <computeroutput>LARGER</computeroutput> otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationTraits.h" line="132" column="1" bodyfile="Concepts/TriangulationTraits.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classTriangulationTraits_1ac2caab2dc763ad2b1afd8463709d45ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TriangulationTraits::TriangulationTraits</definition>
        <argsstring>()</argsstring>
        <name>TriangulationTraits</name>
        <briefdescription>
<para>The default constructor (optional). </para>        </briefdescription>
        <detaileddescription>
<para>This is not required when an instance of the traits is provided to the constructor of <computeroutput><ref refid="classCGAL_1_1Triangulation" kindref="compound">CGAL::Triangulation</ref></computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationTraits.h" line="144" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <description><para>The following methods permit access to the traits class&apos;s predicates: </para></description>
      <memberdef kind="function" id="classTriangulationTraits_1a19f44a018311c2d5a75f8961aae29201" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationTraits_1a12b37c3d97f0a024fba7ca8b46b68364" kindref="member">Orientation_d</ref></type>
        <definition>Orientation_d TriangulationTraits::orientation_d_object</definition>
        <argsstring>() const</argsstring>
        <name>orientation_d_object</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationTraits.h" line="155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationTraits_1a68a00f13269eb53dcfcd7ead33d6a489" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationTraits_1a9eb79cae7da0befeb3b69550a78b01bf" kindref="member">Contained_in_affine_hull_d</ref></type>
        <definition>Contained_in_affine_hull_d TriangulationTraits::contained_in_affine_hull_d_object</definition>
        <argsstring>() const</argsstring>
        <name>contained_in_affine_hull_d_object</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationTraits.h" line="160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationTraits_1a6be21878d41d55ea74c98e959ac197f4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationTraits_1a023db16bead142cc628052dee2c9cd02" kindref="member">Construct_flat_orientation_d</ref></type>
        <definition>Construct_flat_orientation_d TriangulationTraits::construct_flat_orientation_d_object</definition>
        <argsstring>() const</argsstring>
        <name>construct_flat_orientation_d_object</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationTraits.h" line="166" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationTraits_1a1501a1d1acef5dfe686d25b1f9cbe231" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationTraits_1acd06ad263131638a9b86846d232f7fdb" kindref="member">In_flat_orientation_d</ref></type>
        <definition>In_flat_orientation_d TriangulationTraits::in_flat_orientation_d_object</definition>
        <argsstring>() const</argsstring>
        <name>in_flat_orientation_d_object</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationTraits.h" line="171" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationTraits_1a9b6dab1ff41ff2d8e9693a48ddceec1e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationTraits_1a5f2ff44a211c3bc2ebfd84c49148d9a6" kindref="member">Compare_lexicographically_d</ref></type>
        <definition>Compare_lexicographically_d TriangulationTraits::compare_lexicographically_d_object</definition>
        <argsstring>() const</argsstring>
        <name>compare_lexicographically_d_object</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationTraits.h" line="176" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This concept describes the geometric types and predicates required to build a triangulation. It corresponds to the first template parameter of the class <computeroutput><ref refid="classCGAL_1_1Triangulation" kindref="compound">CGAL::Triangulation</ref>&lt;TriangulationTraits_, TriangulationDataStructure_&gt;</computeroutput>. </para>    </briefdescription>
    <detaileddescription>
<para> <xrefsect id="refines_1_refines000006"><xreftitle>Refines</xreftitle><xrefdescription><para><computeroutput><ref refid="classSpatialSortingTraits__d" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Spatial_sorting.tag">SpatialSortingTraits_d</ref></computeroutput></para></xrefdescription></xrefsect></para><para>If a range of points is inserted, the traits must refine <computeroutput><ref refid="classSpatialSortingTraits__d" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Spatial_sorting.tag">SpatialSortingTraits_d</ref></computeroutput>. The insertion is then optimized using spatial sorting. This is not required if the points are inserted one by one.</para><para><xrefsect id="hasModels_1_hasModels000010"><xreftitle>Has Models</xreftitle><xrefdescription><para><computeroutput><ref refid="structCGAL_1_1Epick__d" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">CGAL::Epick_d</ref>&lt;Dim&gt;</computeroutput></para></xrefdescription></xrefsect></para><para><simplesect kind="see"><para><computeroutput><ref refid="classDelaunayTriangulationTraits" kindref="compound">DelaunayTriangulationTraits</ref></computeroutput> </para></simplesect>
</para>    </detaileddescription>
    <location file="Concepts/TriangulationTraits.h" line="22" column="1" bodyfile="Concepts/TriangulationTraits.h" bodystart="22" bodyend="181"/>
    <listofallmembers>
      <member refid="classTriangulationTraits_1a5f2ff44a211c3bc2ebfd84c49148d9a6" prot="public" virt="non-virtual"><scope>TriangulationTraits</scope><name>Compare_lexicographically_d</name></member>
      <member refid="classTriangulationTraits_1a9b6dab1ff41ff2d8e9693a48ddceec1e" prot="public" virt="non-virtual"><scope>TriangulationTraits</scope><name>compare_lexicographically_d_object</name></member>
      <member refid="classTriangulationTraits_1a023db16bead142cc628052dee2c9cd02" prot="public" virt="non-virtual"><scope>TriangulationTraits</scope><name>Construct_flat_orientation_d</name></member>
      <member refid="classTriangulationTraits_1a6be21878d41d55ea74c98e959ac197f4" prot="public" virt="non-virtual"><scope>TriangulationTraits</scope><name>construct_flat_orientation_d_object</name></member>
      <member refid="classTriangulationTraits_1a9eb79cae7da0befeb3b69550a78b01bf" prot="public" virt="non-virtual"><scope>TriangulationTraits</scope><name>Contained_in_affine_hull_d</name></member>
      <member refid="classTriangulationTraits_1a68a00f13269eb53dcfcd7ead33d6a489" prot="public" virt="non-virtual"><scope>TriangulationTraits</scope><name>contained_in_affine_hull_d_object</name></member>
      <member refid="classTriangulationTraits_1a333a19426aa60c3363af494782caa891" prot="public" virt="non-virtual"><scope>TriangulationTraits</scope><name>Dimension</name></member>
      <member refid="classTriangulationTraits_1afc5236686346da808714fda977c744e1" prot="public" virt="non-virtual"><scope>TriangulationTraits</scope><name>Flat_orientation_d</name></member>
      <member refid="classTriangulationTraits_1acd06ad263131638a9b86846d232f7fdb" prot="public" virt="non-virtual"><scope>TriangulationTraits</scope><name>In_flat_orientation_d</name></member>
      <member refid="classTriangulationTraits_1a1501a1d1acef5dfe686d25b1f9cbe231" prot="public" virt="non-virtual"><scope>TriangulationTraits</scope><name>in_flat_orientation_d_object</name></member>
      <member refid="classTriangulationTraits_1a12b37c3d97f0a024fba7ca8b46b68364" prot="public" virt="non-virtual"><scope>TriangulationTraits</scope><name>Orientation_d</name></member>
      <member refid="classTriangulationTraits_1a19f44a018311c2d5a75f8961aae29201" prot="public" virt="non-virtual"><scope>TriangulationTraits</scope><name>orientation_d_object</name></member>
      <member refid="classTriangulationTraits_1afcb378257e144696a767152acfa5ccac" prot="public" virt="non-virtual"><scope>TriangulationTraits</scope><name>Point_d</name></member>
      <member refid="classTriangulationTraits_1ac2caab2dc763ad2b1afd8463709d45ee" prot="public" virt="non-virtual"><scope>TriangulationTraits</scope><name>TriangulationTraits</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
