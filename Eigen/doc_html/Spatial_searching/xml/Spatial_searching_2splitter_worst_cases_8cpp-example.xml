<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="Spatial_searching_2splitter_worst_cases_8cpp-example" kind="example">
    <compoundname>Spatial_searching/splitter_worst_cases.cpp</compoundname>
    <detaileddescription>
<para><programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Simple_cartesian.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Orthogonal_k_neighbor_search.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Search_traits_2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Simple__cartesian" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Simple_cartesian&lt;double&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kernel;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Search__traits__2" kindref="compound">CGAL::Search_traits_2&lt;Kernel&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Traits_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classKernel_1_1Point__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel::Point_2</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Sliding__midpoint" kindref="compound">CGAL::Sliding_midpoint&lt;Traits_2&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sliding_midpoint;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Median__of__rectangle" kindref="compound">CGAL::Median_of_rectangle&lt;Traits_2&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Median_of_rectangle;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Euclidean__distance" kindref="compound">CGAL::Euclidean_distance&lt;Traits_2&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Distance;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Orthogonal__k__neighbor__search" kindref="compound">CGAL::Orthogonal_k_neighbor_search&lt;Traits_2,Distance,Sliding_midpoint&gt;</ref><sp/><sp/><sp/><sp/><sp/>Neighbor_search_sliding;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Orthogonal__k__neighbor__search" kindref="compound">CGAL::Orthogonal_k_neighbor_search&lt;Traits_2,Distance,Median_of_rectangle&gt;</ref><sp/><sp/>Neighbor_search_median;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Neighbor_search_sliding::Tree<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tree_sliding;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Neighbor_search_median::Tree<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tree_median;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;Point_2&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Points;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Points<sp/>sliding_worst_case;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>,j<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>10<sp/>;<sp/>++i<sp/>,<sp/>j<sp/>*=<sp/>2){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>sliding_worst_case.push_back(Point_2(((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)i)/10<sp/>,<sp/>0));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>sliding_worst_case.push_back(Point_2(<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)j<sp/>,<sp/>0));<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Sliding_midpoint<sp/>sliding(10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Median_of_rectangle<sp/>median(10);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Tree_sliding<sp/>tree1(sliding_worst_case.begin(),<sp/>sliding_worst_case.end()<sp/>,<sp/>sliding);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tree1.build();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Worst<sp/>case<sp/>tree<sp/>for<sp/>Sliding<sp/>midpoint<sp/>and<sp/>Midpoint<sp/>of<sp/>max<sp/>spread<sp/>:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tree1.statistics(std::cout);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tree1.clear();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout&lt;&lt;std::endl&lt;&lt;</highlight><highlight class="stringliteral">&quot;Same<sp/>data<sp/>with<sp/>median<sp/>splitter:&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Tree_median<sp/>tree2(sliding_worst_case.begin(),<sp/>sliding_worst_case.end()<sp/>,<sp/>median<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tree2.statistics(std::cout);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tree2.clear();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Points<sp/>median_worst_case;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>19<sp/>;<sp/>++i){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>median_worst_case.push_back(Point_2(<sp/>0<sp/>,<sp/>i));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>median_worst_case.push_back(Point_2(20,0));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Tree_median<sp/>tree3(median_worst_case.begin()<sp/>,<sp/>median_worst_case.end()<sp/>,<sp/>median);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tree3.build();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;std::endl&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Worst<sp/>case<sp/>tree<sp/>for<sp/>Median<sp/>of<sp/>rectangle,<sp/>Median<sp/>of<sp/>max<sp/>spread<sp/>:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tree3.statistics(std::cout);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tree3.clear();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout&lt;&lt;std::endl&lt;&lt;</highlight><highlight class="stringliteral">&quot;Same<sp/>data<sp/>with<sp/>midpoint<sp/>splitter:&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Tree_sliding<sp/>tree4(median_worst_case.begin()<sp/>,<sp/>median_worst_case.end()<sp/>,<sp/>sliding);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tree4.build();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tree4.statistics(std::cout);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tree4.clear();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>    </detaileddescription>
  </compounddef>
</doxygen>
