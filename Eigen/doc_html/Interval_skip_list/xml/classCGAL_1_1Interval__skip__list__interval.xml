<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Interval__skip__list__interval" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Interval_skip_list_interval</compoundname>
    <includes local="no">CGAL/Interval_skip_list_interval.h</includes>
    <templateparamlist>
      <param>
        <type>typename Value</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Interval__skip__list__interval_1aa6ac3eb3d18ed89884fdab29d74cdf59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Interval_skip_list_interval&lt; Value &gt;::Interval_skip_list_interval</definition>
        <argsstring>()</argsstring>
        <name>Interval_skip_list_interval</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Interval_skip_list_interval.h" line="27" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Interval__skip__list__interval_1a78d9a95888d4018a34b068d0ca5b0730" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Interval_skip_list_interval&lt; Value &gt;::Interval_skip_list_interval</definition>
        <argsstring>(const Value &amp;i, const Value &amp;s, bool ic=true, bool uc=true)</argsstring>
        <name>Interval_skip_list_interval</name>
        <param>
          <type>const Value &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const Value &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ic</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>uc</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Constructs the interval with infimum <computeroutput>i</computeroutput> and supremum <computeroutput>s</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The arguments <computeroutput>ic</computeroutput> and <computeroutput>uc</computeroutput> have value <computeroutput>true</computeroutput>, iff the interval is closed at the lower and upper bound, respectively. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Interval_skip_list_interval.h" line="34" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <memberdef kind="function" id="classCGAL_1_1Interval__skip__list__interval_1a24f8b5771fa90ef9da9aacbb049b3c35" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Interval_skip_list_interval&lt; Value &gt;::inf_closed</definition>
        <argsstring>() const</argsstring>
        <name>inf_closed</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput>, iff the interval is closed at the lower bound. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Interval_skip_list_interval.h" line="47" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Interval__skip__list__interval_1ad1ea8a06cab11345fdccadf768fcc953" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Interval_skip_list_interval&lt; Value &gt;::sup_closed</definition>
        <argsstring>() const</argsstring>
        <name>sup_closed</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput>, iff the interval is closed at the upper bound. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Interval_skip_list_interval.h" line="52" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="related">
      <memberdef kind="function" id="classCGAL_1_1Interval__skip__list__interval_1a0d020e55433b2a0b05dd1fb3455fd4c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>ostream &amp;</type>
        <definition>ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const Interval_skip_list_interval&lt; V &gt; &amp;i)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Interval__skip__list__interval" kindref="compound">Interval_skip_list_interval</ref>&lt; V &gt; &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Inserts the interval <computeroutput>i</computeroutput> into the stream <computeroutput>os</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The output operator for <computeroutput>Value</computeroutput> is defined. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Interval_skip_list_interval.h" line="65" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The class <computeroutput><ref refid="classCGAL_1_1Interval__skip__list__interval" kindref="compound">Interval_skip_list_interval</ref></computeroutput> represents intervals with lower and upper bound of type <computeroutput>Value</computeroutput>. </para>    </briefdescription>
    <detaileddescription>
<para>These intervals can be open or closed at each endpoint.</para><para><bold>I/O</bold><linebreak/>
</para><para>The output operator is defined for <computeroutput>std::ostream</computeroutput>.</para><para><xrefsect id="models_1_models000001"><xreftitle>Is Model Of</xreftitle><xrefdescription><para><computeroutput><ref refid="classInterval" kindref="compound">Interval</ref></computeroutput></para></xrefdescription></xrefsect></para>    </detaileddescription>
    <location file="CGAL/Interval_skip_list_interval.h" line="18" column="1" bodyfile="CGAL/Interval_skip_list_interval.h" bodystart="18" bodyend="56"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Interval__skip__list__interval_1a24f8b5771fa90ef9da9aacbb049b3c35" prot="public" virt="non-virtual"><scope>CGAL::Interval_skip_list_interval</scope><name>inf_closed</name></member>
      <member refid="classCGAL_1_1Interval__skip__list__interval_1aa6ac3eb3d18ed89884fdab29d74cdf59" prot="public" virt="non-virtual"><scope>CGAL::Interval_skip_list_interval</scope><name>Interval_skip_list_interval</name></member>
      <member refid="classCGAL_1_1Interval__skip__list__interval_1a78d9a95888d4018a34b068d0ca5b0730" prot="public" virt="non-virtual"><scope>CGAL::Interval_skip_list_interval</scope><name>Interval_skip_list_interval</name></member>
      <member refid="classCGAL_1_1Interval__skip__list__interval_1a0d020e55433b2a0b05dd1fb3455fd4c9" prot="public" virt="non-virtual"><scope>CGAL::Interval_skip_list_interval</scope><name>operator&lt;&lt;</name></member>
      <member refid="classCGAL_1_1Interval__skip__list__interval_1ad1ea8a06cab11345fdccadf768fcc953" prot="public" virt="non-virtual"><scope>CGAL::Interval_skip_list_interval</scope><name>sup_closed</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
