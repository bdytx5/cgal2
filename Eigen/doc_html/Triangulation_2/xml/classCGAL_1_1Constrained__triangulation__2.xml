<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Constrained__triangulation__2" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Constrained_triangulation_2</compoundname>
    <basecompoundref refid="classCGAL_1_1Triangulation__2" prot="public" virt="non-virtual">CGAL::Triangulation_2&lt; Traits, Tds &gt;</basecompoundref>
    <derivedcompoundref refid="classCGAL_1_1Constrained__Delaunay__triangulation__2" prot="public" virt="non-virtual">CGAL::Constrained_Delaunay_triangulation_2&lt; Traits, Tds, Itag &gt;</derivedcompoundref>
    <includes local="no">CGAL/Constrained_triangulation_2.h</includes>
    <templateparamlist>
      <param>
        <type>typename Traits</type>
      </param>
      <param>
        <type>typename Tds</type>
      </param>
      <param>
        <type>typename Itag</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classCGAL_1_1Constrained__triangulation__2_1a1e78d826e7feec8a5277ce1892c7fed1" prot="public" static="no">
        <type>std::pair&lt; <ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref>, <ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref> &gt;</type>
        <definition>typedef std::pair&lt;Point,Point&gt; CGAL::Constrained_triangulation_2&lt; Traits, Tds, Itag &gt;::Constraint</definition>
        <argsstring></argsstring>
        <name>Constraint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription><para>The type of constraints.</para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_triangulation_2.h" line="158" column="1" bodyfile="CGAL/Constrained_triangulation_2.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Constrained__triangulation__2_1a44977d249f0000aa8e89d087630aa2ce" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Constrained_triangulation_2&lt; Traits, Tds, Itag &gt;::Constrained_edges_iterator</definition>
        <argsstring></argsstring>
        <name>Constrained_edges_iterator</name>
        <briefdescription>
<para>A bidirectional iterator to visit all the edges <computeroutput>e</computeroutput> of the triangulation which are constrained. </para>        </briefdescription>
        <detaileddescription>
<para>The order of visit is undefined. The value type of this iterator is <computeroutput>Edge</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_triangulation_2.h" line="166" column="1" bodyfile="CGAL/Constrained_triangulation_2.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Constrained__triangulation__2_1a4b33f318231acca6327208c6ae1038ad" prot="public" static="no">
        <type>Itag</type>
        <definition>typedef Itag CGAL::Constrained_triangulation_2&lt; Traits, Tds, Itag &gt;::Intersection_tag</definition>
        <argsstring></argsstring>
        <name>Intersection_tag</name>
        <briefdescription>
<para>The intersection tag which decides how intersections between input constraints are dealt with. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_triangulation_2.h" line="173" column="1" bodyfile="CGAL/Constrained_triangulation_2.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Constrained__triangulation__2_1a1c8b3c488ae0ebf4c01543b7b3060c33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Constrained_triangulation_2&lt; Traits, Tds, Itag &gt;::Constrained_triangulation_2</definition>
        <argsstring>()</argsstring>
        <name>Constrained_triangulation_2</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_triangulation_2.h" line="183" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Constrained__triangulation__2_1aefccee0a7e957d288711af17abb93aa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Constrained_triangulation_2&lt; Traits, Tds, Itag &gt;::Constrained_triangulation_2</definition>
        <argsstring>(const Constrained_triangulation_2 &amp;ct1)</argsstring>
        <name>Constrained_triangulation_2</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Constrained__triangulation__2" kindref="compound">Constrained_triangulation_2</ref> &amp;</type>
          <declname>ct1</declname>
        </param>
        <briefdescription>
<para>Copy constructor: All faces and vertices are duplicated and the constrained status of edges is copied. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_triangulation_2.h" line="190" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Queries</header>
      <memberdef kind="function" id="classCGAL_1_1Constrained__triangulation__2_1ab44b095428f9904fcee0809c1d588cf4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Constrained_triangulation_2&lt; Traits, Tds, Itag &gt;::is_constrained</definition>
        <argsstring>(Edge e) const</argsstring>
        <name>is_constrained</name>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1ad28c6e0e0e65b8aaecb1ae76d8744b33" kindref="member">Edge</ref></type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if edge <computeroutput>e</computeroutput> is a constrained edge. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_triangulation_2.h" line="202" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Constrained__triangulation__2_1a708bba1dbb87720334965f9a3ab5dea1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Constrained_triangulation_2&lt; Traits, Tds, Itag &gt;::are_there_incident_constraints</definition>
        <argsstring>(Vertex_handle v) const</argsstring>
        <name>are_there_incident_constraints</name>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if at least one of the edges incident to vertex <computeroutput>v</computeroutput> is constrained. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_triangulation_2.h" line="208" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Constrained__triangulation__2_1a656b5e3760abb09058a99b81495b4bf2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OutputItEdges</type>
          </param>
        </templateparamlist>
        <type>OutputItEdges</type>
        <definition>OutputItEdges CGAL::Constrained_triangulation_2&lt; Traits, Tds, Itag &gt;::incident_constraints</definition>
        <argsstring>(Vertex_handle v, OutputItEdges out) const</argsstring>
        <name>incident_constraints</name>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type>OutputItEdges</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Outputs the constrained edges incident to <computeroutput>v</computeroutput> into the output iterator <computeroutput>out</computeroutput> and returns the resulting output iterator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OutputItEdges</parametername>
</parameternamelist>
<parameterdescription>
<para>is an <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> with <computeroutput>Edge</computeroutput> as value type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_triangulation_2.h" line="218" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Constrained__triangulation__2_1a7a2b63651a821648ead9f485ca869396" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Constrained__triangulation__2_1a44977d249f0000aa8e89d087630aa2ce" kindref="member">Constrained_edges_iterator</ref></type>
        <definition>Constrained_edges_iterator CGAL::Constrained_triangulation_2&lt; Traits, Tds, Itag &gt;::constrained_edges_begin</definition>
        <argsstring>() const</argsstring>
        <name>constrained_edges_begin</name>
        <briefdescription>
<para>returns an iterator that enumerates the constrained edges. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_triangulation_2.h" line="225" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Constrained__triangulation__2_1af54645071a20783fed21dc7d26e42eea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Constrained__triangulation__2_1a44977d249f0000aa8e89d087630aa2ce" kindref="member">Constrained_edges_iterator</ref></type>
        <definition>Constrained_edges_iterator CGAL::Constrained_triangulation_2&lt; Traits, Tds, Itag &gt;::constrained_edges_end</definition>
        <argsstring>() const</argsstring>
        <name>constrained_edges_end</name>
        <briefdescription>
<para>returns the past-the-end iterator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_triangulation_2.h" line="230" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Insertion and Removal</header>
      <memberdef kind="function" id="classCGAL_1_1Constrained__triangulation__2_1abfd3276988d1e307b7e824094e9b0f37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Constrained_triangulation_2&lt; Traits, Tds, Itag &gt;::insert</definition>
        <argsstring>(Point p, Face_handle f=Face_handle())</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
          <defval><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref>()</defval>
        </param>
        <briefdescription>
<para>Inserts point <computeroutput>p</computeroutput> and restores the status (constrained or not) of all the touched edges. </para>        </briefdescription>
        <detaileddescription>
<para>If present, <computeroutput>f</computeroutput> is used as an hint for the location of <computeroutput>p</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_triangulation_2.h" line="243" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Constrained__triangulation__2_1a7c7986fda43ab0933d2c27fadb791695" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Constrained_triangulation_2&lt; Traits, Tds, Itag &gt;::insert</definition>
        <argsstring>(const Point &amp;p, Locate_type &amp;lt, Face_handle loc, int li)</argsstring>
        <name>insert</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1a22dbae3b466c50924759754de5865db6" kindref="member">Locate_type</ref> &amp;</type>
          <declname>lt</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>loc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>li</declname>
        </param>
        <briefdescription>
<para>Inserts point <computeroutput>p</computeroutput> in the triangulation at the location given by <computeroutput>(lt,loc,i)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Triangulation__2_1a940567120751e7864c7b345eaf756642" kindref="member">Triangulation_2::locate()</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_triangulation_2.h" line="250" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Constrained__triangulation__2_1a9f241ea2630d3360a1611c3456d38a12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Constrained_triangulation_2&lt; Traits, Tds, Itag &gt;::push_back</definition>
        <argsstring>(const Point &amp;p)</argsstring>
        <name>push_back</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Equivalent to <computeroutput>insert(p)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_triangulation_2.h" line="257" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Constrained__triangulation__2_1afe08cf8e463e0d38e9455b9ab32656b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Constrained_triangulation_2&lt; Traits, Tds, Itag &gt;::insert_constraint</definition>
        <argsstring>(Point a, Point b)</argsstring>
        <name>insert_constraint</name>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Inserts points <computeroutput>a</computeroutput> and <computeroutput>b</computeroutput> in this order, and inserts the line segment <computeroutput>ab</computeroutput> as a constraint. </para>        </briefdescription>
        <detaileddescription>
<para>Removes the faces crossed by segment <computeroutput>ab</computeroutput> and creates new faces instead. If a vertex <computeroutput>c</computeroutput> lies on segment <computeroutput>ab</computeroutput>, constraint <computeroutput>ab</computeroutput> is replaced by the two constraints <computeroutput>ac</computeroutput> and <computeroutput>cb</computeroutput>. Apart from the insertion of <computeroutput>a</computeroutput> and <computeroutput>b</computeroutput>, the algorithm runs in time proportional to the number of removed triangles. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_triangulation_2.h" line="268" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Constrained__triangulation__2_1a1b60406419c8fbadb6347bc151bf3737" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Constrained_triangulation_2&lt; Traits, Tds, Itag &gt;::push_back</definition>
        <argsstring>(const std::pair&lt; Point, Point &gt; &amp;c)</argsstring>
        <name>push_back</name>
        <param>
          <type>const std::pair&lt; <ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref>, <ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref> &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Equivalent to <computeroutput>insert(c.first, c.second)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_triangulation_2.h" line="273" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Constrained__triangulation__2_1a52c9761ff78057546636755c2b56ce37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Constrained_triangulation_2&lt; Traits, Tds, Itag &gt;::insert_constraint</definition>
        <argsstring>(const Vertex_handle &amp;va, const Vertex_handle &amp;vb)</argsstring>
        <name>insert_constraint</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref> &amp;</type>
          <declname>va</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref> &amp;</type>
          <declname>vb</declname>
        </param>
        <briefdescription>
<para>Inserts the line segment <computeroutput>s</computeroutput> whose endpoints are the vertices <computeroutput>va</computeroutput> and <computeroutput>vb</computeroutput> as a constraint. </para>        </briefdescription>
        <detaileddescription>
<para>The triangles intersected by <computeroutput>s</computeroutput> are removed and new ones are created. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_triangulation_2.h" line="281" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Constrained__triangulation__2_1a7d76825a8b6136ade811e0831cdcabd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PointIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Constrained_triangulation_2&lt; Traits, Tds, Itag &gt;::insert_constraint</definition>
        <argsstring>(PointIterator first, PointIterator last, bool close=false)</argsstring>
        <name>insert_constraint</name>
        <param>
          <type>PointIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>PointIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>close</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Inserts a polyline defined by the points in the range <computeroutput>[first,last)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The polyline is considered as a polygon if the first and last point are equal or if <computeroutput>close = true</computeroutput>. This enables for example passing the vertex range of a <computeroutput><ref refid="classCGAL_1_1Polygon__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polygon.tag">Polygon_2</ref></computeroutput>. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be an <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput> with the value type <computeroutput>Point</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_triangulation_2.h" line="289" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Constrained__triangulation__2_1a85d8b0065c69032c7a218d42cc2ef0ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Constrained_triangulation_2&lt; Traits, Tds, Itag &gt;::remove</definition>
        <argsstring>(Vertex_handle v)</argsstring>
        <name>remove</name>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Removes a vertex <computeroutput>v</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>Vertex <computeroutput>v</computeroutput> is not incident to a constrained edge. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_triangulation_2.h" line="297" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Constrained__triangulation__2_1a4e02e42abbf1208fedc77fe124bc08e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Constrained_triangulation_2&lt; Traits, Tds, Itag &gt;::remove_incident_constraints</definition>
        <argsstring>(Vertex_handle v)</argsstring>
        <name>remove_incident_constraints</name>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Make the edges incident to vertex <computeroutput>v</computeroutput> unconstrained edges. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_triangulation_2.h" line="302" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Constrained__triangulation__2_1a4fda0957b54456a9fb5f7a0ae66270f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Constrained_triangulation_2&lt; Traits, Tds, Itag &gt;::remove_constrained_edge</definition>
        <argsstring>(Face_handle f, int i)</argsstring>
        <name>remove_constrained_edge</name>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Make edge <computeroutput>(f,i)</computeroutput> unconstrained. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_triangulation_2.h" line="307" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Constrained__triangulation__2_1a2393e7bc173b8cc898b2fa5ea438239e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Constrained_triangulation_2&lt; Traits, Tds, Itag &gt;::is_valid</definition>
        <argsstring>(bool verbose=false, int level=0) const</argsstring>
        <name>is_valid</name>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Checks the validity of the triangulation and the consistency of the constrained marks in edges. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_triangulation_2.h" line="314" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="related">
      <memberdef kind="function" id="classCGAL_1_1Constrained__triangulation__2_1a128d68bd21ad8baf174c22116269d994" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const Constrained_triangulation_2&lt; Traits, Tds &gt; &amp;Ct)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Constrained__triangulation__2" kindref="compound">Constrained_triangulation_2</ref>&lt; Traits, Tds &gt; &amp;</type>
          <declname>Ct</declname>
        </param>
        <briefdescription>
<para>Writes the triangulation as for <computeroutput><ref refid="classCGAL_1_1Triangulation__2" kindref="compound">Triangulation_2</ref>&lt;Traits,Tds&gt;</computeroutput> and, for each face <computeroutput>f</computeroutput>, and integers <computeroutput>i=0,1,2</computeroutput>, writes &quot;C&quot; or &quot;N&quot; depending whether edge <computeroutput>(f,i)</computeroutput> is constrained or not. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_triangulation_2.h" line="326" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Constrained__triangulation__2_1a28d4d44a218a6b1344f655fcff3280a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>istream &amp;</type>
        <definition>istream &amp; operator&gt;&gt;</definition>
        <argsstring>(istream &amp;is, Constrained_triangulation_2&lt; Traits, Tds &gt; Ct &amp;t)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Constrained__triangulation__2" kindref="compound">Constrained_triangulation_2</ref>&lt; Traits, Tds &gt; Ct &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Reads a triangulation from stream <computeroutput>is</computeroutput> and assigns it to <computeroutput>t</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Data in the stream must have the same format <computeroutput>operator&lt;&lt;</computeroutput> uses. Note that <computeroutput>t</computeroutput> is first cleared. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_triangulation_2.h" line="333" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A constrained triangulation is a triangulation of a set of points which has to include among its edges a given set of polylines joining the points. </para>    </briefdescription>
    <detaileddescription>
<para>The given polylines are called <emphasis>constraints</emphasis> and the corresponding edges in the triangulation are called <emphasis>constrained edges</emphasis>.</para><para>The endpoints of constrained edges are of course vertices of the triangulation. However the triangulation may include other vertices as well. There are three versions of constrained triangulations <itemizedlist>
<listitem>
<para>In the basic version, the constrained triangulation does not handle intersecting constraints, and the set of input constraints is required to be a set of polylines that do not intersect except possibly at their endpoints. An exception of type <computeroutput>Intersection_of_constraints_exception</computeroutput> is thrown upon insertion of a constraint intersecting in its interior an already inserted constraint. Any number of constrained edges may share the same endpoint. Constrained edges may be vertical or have zero length. </para></listitem>
<listitem>
<para>The two other versions support intersecting input constraints. In those versions, input constraints may consist of intersecting, overlapping or partially overlapping segments. The triangulation introduces additional vertices at each point which is a proper intersection point of two constraints. A single constraint intersecting other constraints will then appear as the union of several constrained edges of the triangulation. There are two ways to deal with intersecting constraints. <itemizedlist>
<listitem>
<para>The first one is robust when predicates are evaluated exactly but constructions (i. e. intersection computations) are approximate. </para></listitem>
<listitem>
<para>The second one should be used with exact arithmetic (meaning exact evaluation of predicates and exact computation of intersections.) </para></listitem>
</itemizedlist>
</para></listitem>
</itemizedlist>
In order to retrieve the constrained edges of a constraint, or the constraints overlapping with a constrained edge, we provide the class <computeroutput><ref refid="classCGAL_1_1Constrained__triangulation__plus__2" kindref="compound">Constrained_triangulation_plus_2</ref></computeroutput>. This class maintains a constraint hierarchy data structure. See Section <ref refid="index_1Section_2D_Triangulations_Constrained_Plus" kindref="member">Constrained Triangulations with a Bidirectional Mapping between Constraints and Subconstraints</ref> for details. This class should also be used when doing exact intersection computations as it avoids the cascading of intersection computations.</para><para><image type="html" name="constraints.png"></image>
 <image type="latex" name="constraints.png"></image>
</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Traits</parametername>
</parameternamelist>
<parameterdescription>
<para>is a geometric traits class and must be a model of the concept <computeroutput><ref refid="classTriangulationTraits__2" kindref="compound">TriangulationTraits_2</ref></computeroutput>. When intersection of input constraints are supported, the geometric traits class is required to provide additional function object types to compute the intersection of two segments. It has then to be a model of the concept <computeroutput><ref refid="classConstrainedTriangulationTraits__2" kindref="compound">ConstrainedTriangulationTraits_2</ref></computeroutput>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Tds</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of the concept <computeroutput><ref refid="classTriangulationDataStructure__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/TDS_2.tag">TriangulationDataStructure_2</ref></computeroutput> or <computeroutput><ref refid="structCGAL_1_1Default" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Default</ref></computeroutput>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Itag</parametername>
</parameternamelist>
<parameterdescription>
<para>is the intersection tag which serves to choose between the different strategies to deal with constraints intersections. CGAL provides three valid types for this parameter:<itemizedlist>
<listitem><para><computeroutput><ref refid="structCGAL_1_1No__intersection__tag" kindref="compound">No_intersection_tag</ref></computeroutput> disallows intersections of input constraints,</para></listitem><listitem><para><computeroutput><ref refid="structCGAL_1_1Exact__predicates__tag" kindref="compound">Exact_predicates_tag</ref></computeroutput> is to be used when the traits class provides exact predicates but approximate constructions of the intersection points.</para></listitem><listitem><para><computeroutput><ref refid="structCGAL_1_1Exact__intersections__tag" kindref="compound">Exact_intersections_tag</ref></computeroutput> is to be used in conjunction with an exact arithmetic type.</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
The information about constrained edges is stored in the faces of the triangulation. Thus the nested <computeroutput>Face</computeroutput> type of a constrained triangulation offers additional functionalities to deal with this information. These additional functionalities induce additional requirements on the face base class plugged into the triangulation data structure of a constrained Delaunay triangulation. The face base of a constrained Delaunay triangulation has to be a model of the concept <computeroutput><ref refid="classConstrainedTriangulationFaceBase__2" kindref="compound">ConstrainedTriangulationFaceBase_2</ref></computeroutput>.</para><para>CGAL provides default instantiations for the template parameters <computeroutput>Tds</computeroutput> and <computeroutput>Itag</computeroutput>, and for the <computeroutput><ref refid="classConstrainedTriangulationFaceBase__2" kindref="compound">ConstrainedTriangulationFaceBase_2</ref></computeroutput>. If <computeroutput>Gt</computeroutput> is the geometric traits class parameter, the default for <computeroutput><ref refid="classConstrainedTriangulationFaceBase__2" kindref="compound">ConstrainedTriangulationFaceBase_2</ref></computeroutput> is the class <computeroutput><ref refid="classCGAL_1_1Constrained__triangulation__face__base__2" kindref="compound">Constrained_triangulation_face_base_2</ref>&lt;Gt&gt;</computeroutput> and the default for the triangulation data structure parameter is the class <computeroutput><ref refid="classCGAL_1_1Triangulation__data__structure__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/TDS_2.tag">Triangulation_data_structure_2</ref> &lt; <ref refid="classCGAL_1_1Triangulation__vertex__base__2" kindref="compound">Triangulation_vertex_base_2</ref>&lt;Gt&gt;, <ref refid="classCGAL_1_1Constrained__triangulation__face__base__2" kindref="compound">Constrained_triangulation_face_base_2</ref>&lt;Gt&gt; &gt;</computeroutput>. The default intersection tag is <computeroutput><ref refid="structCGAL_1_1No__intersection__tag" kindref="compound">No_intersection_tag</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Triangulation__2" kindref="compound">CGAL::Triangulation_2</ref>&lt;Traits,Tds&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classTriangulationDataStructure__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/TDS_2.tag">TriangulationDataStructure_2</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classTriangulationTraits__2" kindref="compound">TriangulationTraits_2</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classConstrainedTriangulationTraits__2" kindref="compound">ConstrainedTriangulationTraits_2</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classConstrainedTriangulationFaceBase__2" kindref="compound">ConstrainedTriangulationFaceBase_2</ref></computeroutput></para></simplesect>
<bold>Implementation</bold><linebreak/>
</para><para>The insertion of a constrained edge runs in time proportional to the number of triangles intersected by this edge. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="9">
        <label>CGAL::Triangulation_2&lt; Traits, Tds &gt;</label>
        <link refid="classCGAL_1_1Triangulation__2"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>CGAL::Triangulation_cw_ccw_2</label>
        <link refid="classCGAL_1_1Triangulation__cw__ccw__2"/>
      </node>
      <node id="8">
        <label>CGAL::Constrained_triangulation_2&lt; Traits, Tds, Itag &gt;</label>
        <link refid="classCGAL_1_1Constrained__triangulation__2"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>CGAL::Constrained_Delaunay_triangulation_2&lt; Traits, Tds, Itag &gt;</label>
        <link refid="classCGAL_1_1Constrained__Delaunay__triangulation__2"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="13">
        <label>CGAL::Triangulation_2&lt; Traits, Tds &gt;</label>
        <link refid="classCGAL_1_1Triangulation__2"/>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>CGAL::Triangulation_cw_ccw_2</label>
        <link refid="classCGAL_1_1Triangulation__cw__ccw__2"/>
      </node>
      <node id="12">
        <label>CGAL::Constrained_triangulation_2&lt; Traits, Tds, Itag &gt;</label>
        <link refid="classCGAL_1_1Constrained__triangulation__2"/>
        <childnode refid="13" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="CGAL/Constrained_triangulation_2.h" line="148" column="1" bodyfile="CGAL/Constrained_triangulation_2.h" bodystart="148" bodyend="318"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Triangulation__2_1a83de89d7d1c6e306b331b7158728bb57" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>all_edges_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1aee85b73cb094f95603939be436e63438" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>all_edges_end</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a5b63aff651ae1e485ea2c7d20421b4b9" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>All_edges_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a93f4b88a11e455e4af2f5442e5d4824d" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>all_faces_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a395ece5a58ae27040ccbbb9503899671" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>all_faces_end</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ae5363996414e60613b556b14a9f87891" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>All_faces_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1adb9bbf3918a8081d21fc0c1de20b157e" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>all_vertices_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a99d052d1f8a1f99c8defec48604192f5" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>all_vertices_end</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a1d4600a9428fed798c112964ba57d9f1" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>All_vertices_iterator</name></member>
      <member refid="classCGAL_1_1Constrained__triangulation__2_1a708bba1dbb87720334965f9a3ab5dea1" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>are_there_incident_constraints</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a38ffc4db3bc10b11ae77bbcd4fe21005" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>ccw</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a4185c75ba2c5ec34181fdef8fa57401c" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>circumcenter</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a031db533d1f567a2c7b0e9736f85a4f1" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>clear</name></member>
      <member refid="classCGAL_1_1Constrained__triangulation__2_1a7a2b63651a821648ead9f485ca869396" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>constrained_edges_begin</name></member>
      <member refid="classCGAL_1_1Constrained__triangulation__2_1af54645071a20783fed21dc7d26e42eea" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>constrained_edges_end</name></member>
      <member refid="classCGAL_1_1Constrained__triangulation__2_1a44977d249f0000aa8e89d087630aa2ce" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>Constrained_edges_iterator</name></member>
      <member refid="classCGAL_1_1Constrained__triangulation__2_1a1c8b3c488ae0ebf4c01543b7b3060c33" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>Constrained_triangulation_2</name></member>
      <member refid="classCGAL_1_1Constrained__triangulation__2_1aefccee0a7e957d288711af17abb93aa9" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>Constrained_triangulation_2</name></member>
      <member refid="classCGAL_1_1Constrained__triangulation__2_1a1e78d826e7feec8a5277ce1892c7fed1" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>Constraint</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a49fc8cd3cd899d0c0aa6bc0f20c72a0f" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>cw</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ae837aea43417f936cefb715765d332e1" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>difference_type</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a644f9730fdece05c0e951201e0012805" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>dimension</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a22dbae3b466c50924759754de5865db6a5111882933f6615f618c8900e2bc6acf" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>EDGE</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ad28c6e0e0e65b8aaecb1ae76d8744b33" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>Edge</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a997ed97a0ac906a0342ad18c91a1ec81" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>Edge_circulator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a22dbae3b466c50924759754de5865db6a937da59ce47b08cfc0d452901e6c3625" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>FACE</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a6c6a38b0ce694a47c2323834107fa758" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>Face</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a1bda2ab92ccf638bb22fc223ae281b96" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>Face_circulator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>Face_handle</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a3d7335c51c4c777fec2b9c2560f2635f" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>finite_edges_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a6bd40af3800321a0d0d43f489b37fc2a" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>finite_edges_end</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1af70ca2702b9de4ae712b953f6a94b9a2" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>Finite_edges_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a66241217c984aa597d36d4ff6f0ff3f2" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>finite_faces_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a3df949e116750967bc46db9ba53da7c0" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>finite_faces_end</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a84923815e1cfca537c93cee97c0ed24f" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>Finite_faces_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a78d0a3bd3637897ab1abe06389899b63" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>finite_vertex</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1afec203a9cabc1700b76a3f7d4b388840" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>finite_vertices_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a00acf9a6484acec989b945dca69cac0b" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>finite_vertices_end</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a3dfacc0bd86f726c637b7ff86f404f84" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>Finite_vertices_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1aa47a446fc11809d30146fbcdb689a396" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>flip</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a94f47e3c6bdf5e36ae51180bcd013ad6" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>Geom_traits</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a7b0d7ae604821c821ce2fea5a9536ad6" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>geom_traits</name></member>
      <member refid="classCGAL_1_1Constrained__triangulation__2_1a656b5e3760abb09058a99b81495b4bf2" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>incident_constraints</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a1708a62dea4a40f63025848e4afaefa0" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>incident_edges</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a843853eb19644389ba8d6024765eb4f7" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>incident_edges</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a1ca68226e40c30304c4d54685a77a7ca" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>incident_faces</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a341c4f3888b6ede6b9df55c2bb745ca3" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>incident_faces</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1afebc0e18dc93bce4b62b1e06944a6921" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>incident_vertices</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a58c9a0c9f69a356a31c8a7c02eff1841" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>incident_vertices</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a123f9d90c0fbdf6716ff7f14c0ac88bf" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>includes_edge</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a0d62215704e84f18ef9294b27f9e82b0" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>inexact_locate</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a5758b4f843e2d884d759f278e154ed87" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>infinite_face</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ae146d68059cd9d1430bafba2cbe25461" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>infinite_vertex</name></member>
      <member refid="classCGAL_1_1Constrained__triangulation__2_1abfd3276988d1e307b7e824094e9b0f37" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Constrained__triangulation__2_1a7c7986fda43ab0933d2c27fadb791695" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a1025cd7e7226ccb44d82f0fb1d63ad4e" prot="public" virt="non-virtual" ambiguityscope="CGAL::Triangulation_2::"><scope>CGAL::Constrained_triangulation_2</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ab5282f769ba8445b872b4d32e8b38487" prot="public" virt="non-virtual" ambiguityscope="CGAL::Triangulation_2::"><scope>CGAL::Constrained_triangulation_2</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ae4146b1ad3bd65fc8e8bb49cb00f86d4" prot="public" virt="non-virtual" ambiguityscope="CGAL::Triangulation_2::"><scope>CGAL::Constrained_triangulation_2</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Constrained__triangulation__2_1afe08cf8e463e0d38e9455b9ab32656b5" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>insert_constraint</name></member>
      <member refid="classCGAL_1_1Constrained__triangulation__2_1a52c9761ff78057546636755c2b56ce37" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>insert_constraint</name></member>
      <member refid="classCGAL_1_1Constrained__triangulation__2_1a7d76825a8b6136ade811e0831cdcabd8" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>insert_constraint</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a359b4c5e12af04f9235b5f2f42cae709" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>insert_first</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1aefd64b3be7364535e808ed62faaa6a67" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>insert_in_edge</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a8f4a1ca36147ac331db5be089e17a2a5" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>insert_in_face</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ad8a56f1fb051ce731a079671799010de" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>insert_outside_affine_hull</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a2c35ed5fa9ea46b55687c36a4755d592" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>insert_outside_convex_hull</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a6a30184b0267dc1cdc9cc516440cbb4e" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>insert_second</name></member>
      <member refid="classCGAL_1_1Constrained__triangulation__2_1a4b33f318231acca6327208c6ae1038ad" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>Intersection_tag</name></member>
      <member refid="classCGAL_1_1Constrained__triangulation__2_1ab44b095428f9904fcee0809c1d588cf4" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>is_constrained</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a37b3896ab3a416fe4adff475ed625e16" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>is_edge</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1adbeb9736f9bfc588658316669cd7fb44" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>is_edge</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a7a94b10ae76a8d4d6e762c19e05b6343" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>is_face</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a4084823ee026d7a00a3991cd2b553fe0" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>is_face</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1acf8596038ef09d0d3ffcba99e912d1da" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1acf8e2ef548683138d8766b6c89794fbb" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a8009eb06cbe50a3fa1358d203a1fa924" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ac7519fb75001a53abba7e8d9127d22c5" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ae4becba370b2929508ec894aa2b0370d" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1aa9ca70cc8b0cb3e0b6c0bf062d710613" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Constrained__triangulation__2_1a2393e7bc173b8cc898b2fa5ea438239e" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>is_valid</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ad720b1a9adc835ed1a27c228eea1e36c" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>Line_face_circulator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a41a46211193d767f122504f2eb99189a" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>line_walk</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a940567120751e7864c7b345eaf756642" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>locate</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1af61a05a0a53d009e111a3873c1796b52" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>locate</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a22dbae3b466c50924759754de5865db6" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>Locate_type</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ab97ce60b20674d0a7a4455e88c2eadb1" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>mirror_edge</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a9c54807a29595dc1116054cc4ac214fd" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>mirror_index</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a9213aedceda4c17381960d041d4f297a" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>mirror_vertex</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a62de40896ebe056bbf008eb4090eb76b" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>move</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a433cff4ceaeaba390df1a968d93a4899" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>move_if_no_collision</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ab18fcf7127c007253348fcfb37b67df4" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>number_of_faces</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1abb274869c3eac8fb775702bf68c4e8f1" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>number_of_vertices</name></member>
      <member refid="classCGAL_1_1Constrained__triangulation__2_1a128d68bd21ad8baf174c22116269d994" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>operator&lt;&lt;</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ac7351668deed7464974684ab3c7147ea" prot="public" virt="non-virtual" ambiguityscope="CGAL::Triangulation_2::"><scope>CGAL::Constrained_triangulation_2</scope><name>operator&lt;&lt;</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a40701ad345813f8df044fd197d3c9d96" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>operator=</name></member>
      <member refid="classCGAL_1_1Constrained__triangulation__2_1a28d4d44a218a6b1344f655fcff3280a9" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>operator&gt;&gt;</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a8dc99f907cc125ce7a55024da5ddb4c0" prot="public" virt="non-virtual" ambiguityscope="CGAL::Triangulation_2::"><scope>CGAL::Constrained_triangulation_2</scope><name>operator&gt;&gt;</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a01fbafc011677846a729a809b4b21a99" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>oriented_side</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a22dbae3b466c50924759754de5865db6ae8b775f120094d9b0a6871f53446184f" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>OUTSIDE_AFFINE_HULL</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a22dbae3b466c50924759754de5865db6afd690e18b1d2857068085d771fc354d4" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>OUTSIDE_CONVEX_HULL</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>Point</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a06ec87f55894738972350f631f6dc1fe" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>Point_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a048beaadce99c9bdfeaa69dd68701c32" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>points_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1adb17161924b6d2b6e7ac537d6b760728" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>points_end</name></member>
      <member refid="classCGAL_1_1Constrained__triangulation__2_1a9f241ea2630d3360a1611c3456d38a12" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>push_back</name></member>
      <member refid="classCGAL_1_1Constrained__triangulation__2_1a1b60406419c8fbadb6347bc151bf3737" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>push_back</name></member>
      <member refid="classCGAL_1_1Constrained__triangulation__2_1a85d8b0065c69032c7a218d42cc2ef0ef" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>remove</name></member>
      <member refid="classCGAL_1_1Constrained__triangulation__2_1a4fda0957b54456a9fb5f7a0ae66270f4" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>remove_constrained_edge</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a4b3389b24fe7bfe703151375d15a745a" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>remove_degree_3</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ac00496f74f7d05465407861f5a447768" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>remove_first</name></member>
      <member refid="classCGAL_1_1Constrained__triangulation__2_1a4e02e42abbf1208fedc77fe124bc08e2" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>remove_incident_constraints</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a44461f8dc31540c015f24ee3d36870ab" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>remove_second</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ac3beee6618a86505bfc03bcbfbb46a4a" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>segment</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a06f3967c92db0fe28368c31ff671c658" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>segment</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ad43c112fe392ea9194b449e6116499c5" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>segment</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1afd84762f5a856ebdbd9786de8744feda" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>segment</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ae7b5594c15ef61394d76826e1fc1e8e6" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>Segment</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a25a5eaabf6ba1d9c9acf240b4453c09a" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>set_infinite_vertex</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1abc885b3d116e1d0b6943b211e750e472" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>side_of_oriented_circle</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1aa7b0b96c9ed11cab337313f34cd96a59" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>size_type</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a8b058b055ef24a4b6fc25bf110e46638" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>star_hole</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a4511afae77c0c2978b6412d9411e4fe2" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>star_hole</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a1788d6ffa3f5986b2b07e7e0b48a2ffc" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>swap</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1afb8abca60f08ed498b54bd1992f56d28" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>tds</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ac091a355bc30d57601d2419a5807c906" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>tds</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a48984e6735c075b17d7a956cb396d1f5" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>Triangle</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a176b3903b04aaad6996d1c2a56a14dcc" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>triangle</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a97deb44f4edfb6baa30c12a22f928dc7" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>Triangulation_2</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a6e43f49405b43057d1b911a9f6e39404" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>Triangulation_2</name></member>
      <member refid="classCGAL_1_1Triangulation__cw__ccw__2_1a7069704014f0d62aa327453e5bcfb44d" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>Triangulation_cw_ccw_2</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1addbcd86ae5679a10363f46080159d00d" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>Triangulation_data_structure</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a22dbae3b466c50924759754de5865db6a4fc5b644a7c38197036955ba1662afe5" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>VERTEX</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1af48b3f6c165d50c74fe67a75caec129a" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>Vertex</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ade901d47c7c422f7978adf3ac0188a9d" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>Vertex_circulator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" prot="public" virt="non-virtual"><scope>CGAL::Constrained_triangulation_2</scope><name>Vertex_handle</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
