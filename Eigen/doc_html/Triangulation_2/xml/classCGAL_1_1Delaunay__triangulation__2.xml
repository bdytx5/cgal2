<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Delaunay__triangulation__2" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Delaunay_triangulation_2</compoundname>
    <basecompoundref refid="classCGAL_1_1Triangulation__2" prot="public" virt="non-virtual">CGAL::Triangulation_2&lt; Traits, Tds &gt;</basecompoundref>
    <includes local="no">CGAL/Delaunay_triangulation_2.h</includes>
    <templateparamlist>
      <param>
        <type>typename Traits</type>
      </param>
      <param>
        <type>typename Tds</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Delaunay__triangulation__2_1ad73f72c9a5b8c03ca956d39d9f6d0010" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Delaunay_triangulation_2&lt; Traits, Tds &gt;::Delaunay_triangulation_2</definition>
        <argsstring>(const Traits &amp;gt=Traits())</argsstring>
        <name>Delaunay_triangulation_2</name>
        <param>
          <type>const Traits &amp;</type>
          <declname>gt</declname>
          <defval>Traits()</defval>
        </param>
        <briefdescription>
<para>default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Delaunay_triangulation_2.h" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Delaunay__triangulation__2_1a8e282a5c5b5019e1f922dea7119e6f43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Delaunay_triangulation_2&lt; Traits, Tds &gt;::Delaunay_triangulation_2</definition>
        <argsstring>(const Delaunay_triangulation_2&lt; Traits, Tds &gt; &amp;tr)</argsstring>
        <name>Delaunay_triangulation_2</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Delaunay__triangulation__2" kindref="compound">Delaunay_triangulation_2</ref>&lt; Traits, Tds &gt; &amp;</type>
          <declname>tr</declname>
        </param>
        <briefdescription>
<para>copy constructor. </para>        </briefdescription>
        <detaileddescription>
<para>All the vertices and faces are duplicated. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Delaunay_triangulation_2.h" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Delaunay__triangulation__2_1a7ce0f4762abf64702c5571a29eefaf62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Delaunay__triangulation__2" kindref="compound">Delaunay_triangulation_2</ref>&lt; Traits, Tds &gt;</type>
        <definition>Delaunay_triangulation_2&lt;Traits,Tds&gt; CGAL::Delaunay_triangulation_2&lt; Traits, Tds &gt;::dt</definition>
        <argsstring>(InputIterator first, InputIterator last, Traits gt=Traits())</argsstring>
        <name>dt</name>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>last</declname>
        </param>
        <param>
          <type>Traits</type>
          <declname>gt</declname>
          <defval>Traits()</defval>
        </param>
        <briefdescription>
<para>Equivalent to constructing an empty triangulation with the optional traits class argument and calling insert(first,last). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Delaunay_triangulation_2.h" line="102" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Insertion and Removal</header>
      <description><para>The following insertion and removal functions overwrite the functions inherited from the class <computeroutput><ref refid="classCGAL_1_1Triangulation__2" kindref="compound">Triangulation_2</ref>&lt;Traits,Tds&gt;</computeroutput> to maintain the Delaunay property.</para><para>In the degenerate case when there are co-circular points, the Delaunay triangulation is known not to be uniquely defined. In this case, CGAL chooses a particular Delaunay triangulation using a symbolic perturbation scheme <ref refid="citelist_1CITEREF_cgal:dt-pvr3d-03" kindref="member">[2]</ref>. Note that the other modifier functions of <computeroutput><ref refid="classCGAL_1_1Triangulation__2" kindref="compound">Triangulation_2</ref>&lt;Traits,Tds&gt;</computeroutput> are not overwritten. Thus a call to <ref refid="classCGAL_1_1Triangulation__2_1a8f4a1ca36147ac331db5be089e17a2a5" kindref="member">Triangulation_2::insert_in_face()</ref> <ref refid="classCGAL_1_1Triangulation__2_1a8f4a1ca36147ac331db5be089e17a2a5" kindref="member"><computeroutput>insert_in_face()</computeroutput></ref> <ref refid="classCGAL_1_1Triangulation__2_1aefd64b3be7364535e808ed62faaa6a67" kindref="member"><computeroutput>insert_in_edge()</computeroutput></ref>, <ref refid="classCGAL_1_1Triangulation__2_1a2c35ed5fa9ea46b55687c36a4755d592" kindref="member"><computeroutput>insert_outside_convex_hull()</computeroutput></ref>, <ref refid="classCGAL_1_1Triangulation__2_1ad8a56f1fb051ce731a079671799010de" kindref="member"><computeroutput>insert_outside_affine_hull()</computeroutput></ref> or <ref refid="classCGAL_1_1Triangulation__2_1aa47a446fc11809d30146fbcdb689a396" kindref="member"><computeroutput>flip()</computeroutput></ref> on a valid Delaunay triangulation might lead to a triangulation which is no longer a Delaunay triangulation. </para></description>
      <memberdef kind="function" id="classCGAL_1_1Delaunay__triangulation__2_1a81efeca7e8a7605aba1d3b4f951a96dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Delaunay_triangulation_2&lt; Traits, Tds &gt;::insert</definition>
        <argsstring>(const Point &amp;p, Face_handle f=Face_handle())</argsstring>
        <name>insert</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
          <defval><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref>()</defval>
        </param>
        <briefdescription>
<para>inserts point <computeroutput>p</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>If point <computeroutput>p</computeroutput> coincides with an already existing vertex, this vertex is returned and the triangulation is not updated. Optional parameter <computeroutput>f</computeroutput> is used to initialize the location of <computeroutput>p</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Delaunay_triangulation_2.h" line="132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Delaunay__triangulation__2_1ad4b4e9423867399e922285de5eb826c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Delaunay_triangulation_2&lt; Traits, Tds &gt;::insert</definition>
        <argsstring>(const Point &amp;p, Locate_type &amp;lt, Face_handle loc, int li)</argsstring>
        <name>insert</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1a22dbae3b466c50924759754de5865db6" kindref="member">Locate_type</ref> &amp;</type>
          <declname>lt</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>loc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>li</declname>
        </param>
        <briefdescription>
<para>inserts a point <computeroutput>p</computeroutput> at the location given by <computeroutput>(lt,loc,li)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Triangulation__2_1a940567120751e7864c7b345eaf756642" kindref="member">Triangulation_2::locate()</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Delaunay_triangulation_2.h" line="138" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Delaunay__triangulation__2_1a392d4df302f4f255eada59588c84b86e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Delaunay_triangulation_2&lt; Traits, Tds &gt;::push_back</definition>
        <argsstring>(const Point &amp;p)</argsstring>
        <name>push_back</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>equivalent to <computeroutput>insert(p)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Delaunay_triangulation_2.h" line="144" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Delaunay__triangulation__2_1a2c02556452fea3d9e3f6cbd332d8c126" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PointInputIterator</type>
          </param>
        </templateparamlist>
        <type>std::ptrdiff_t</type>
        <definition>std::ptrdiff_t CGAL::Delaunay_triangulation_2&lt; Traits, Tds &gt;::insert</definition>
        <argsstring>(PointInputIterator first, PointInputIterator last)</argsstring>
        <name>insert</name>
        <param>
          <type>PointInputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>PointInputIterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>inserts the points in the range <computeroutput>[first,last)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the number of inserted points. Note that this function is not guaranteed to insert the points following the order of <computeroutput>PointInputIterator</computeroutput>, as <computeroutput><ref refid="group__PkgSpatialSortingFunctions_1ga2f4d770272b84481f7c4c9b20b7174c7" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Spatial_sorting.tag">spatial_sort()</ref></computeroutput> is used to improve efficiency. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointInputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be an input iterator with the value type <computeroutput>Point</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Delaunay_triangulation_2.h" line="156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Delaunay__triangulation__2_1a0ea76bda5cb948080eebf974af7fc506" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PointWithInfoInputIterator</type>
          </param>
        </templateparamlist>
        <type>std::ptrdiff_t</type>
        <definition>std::ptrdiff_t CGAL::Delaunay_triangulation_2&lt; Traits, Tds &gt;::insert</definition>
        <argsstring>(PointWithInfoInputIterator first, PointWithInfoInputIterator last)</argsstring>
        <name>insert</name>
        <param>
          <type>PointWithInfoInputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>PointWithInfoInputIterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>inserts the points in the iterator range <computeroutput>[first,last)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the number of inserted points. Note that this function is not guaranteed to insert the points following the order of <computeroutput>PointWithInfoInputIterator</computeroutput>, as <computeroutput><ref refid="group__PkgSpatialSortingFunctions_1ga2f4d770272b84481f7c4c9b20b7174c7" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Spatial_sorting.tag">spatial_sort()</ref></computeroutput> is used to improve efficiency. Given a pair <computeroutput>(p,i)</computeroutput>, the vertex <computeroutput>v</computeroutput> storing <computeroutput>p</computeroutput> also stores <computeroutput>i</computeroutput>, that is <computeroutput>v.point() == p</computeroutput> and <computeroutput>v.info() == i</computeroutput>. If several pairs have the same point, only one vertex is created, and one of the objects of type <computeroutput>Vertex::Info</computeroutput> will be stored in the vertex. <simplesect kind="pre"><para><computeroutput>Vertex</computeroutput> must be model of the concept <computeroutput><ref refid="classTriangulationVertexBaseWithInfo__2" kindref="compound">TriangulationVertexBaseWithInfo_2</ref></computeroutput>.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointWithInfoInputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be an input iterator with the value type <computeroutput>std::pair&lt;Point,Vertex::Info&gt;</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Delaunay_triangulation_2.h" line="174" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Delaunay__triangulation__2_1afa5a9fdfb89174b851a3ef47ef48608d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Delaunay_triangulation_2&lt; Traits, Tds &gt;::remove</definition>
        <argsstring>(Vertex_handle v)</argsstring>
        <name>remove</name>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>removes the vertex from the triangulation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Delaunay_triangulation_2.h" line="179" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Displacement</header>
      <memberdef kind="function" id="classCGAL_1_1Delaunay__triangulation__2_1a02f72cc90245c6ba23cc7f47a9fa1d31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Delaunay_triangulation_2&lt; Traits, Tds &gt;::move_if_no_collision</definition>
        <argsstring>(Vertex_handle v, const Point &amp;p)</argsstring>
        <name>move_if_no_collision</name>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>if there is not already another vertex placed on <computeroutput>p</computeroutput>, the triangulation is modified such that the new position of vertex <computeroutput>v</computeroutput> is <computeroutput>p</computeroutput>, and <computeroutput>v</computeroutput> is returned. </para>        </briefdescription>
        <detaileddescription>
<para>Otherwise, the triangulation is not modified and the vertex at point <computeroutput>p</computeroutput> is returned. <simplesect kind="pre"><para>Vertex <computeroutput>v</computeroutput> must be finite. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Delaunay_triangulation_2.h" line="193" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Delaunay__triangulation__2_1a2c543a671d71d57d178354249e1c66a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Delaunay_triangulation_2&lt; Traits, Tds &gt;::move</definition>
        <argsstring>(Vertex_handle v, const Point &amp;p)</argsstring>
        <name>move</name>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>same as <computeroutput><ref refid="classCGAL_1_1Delaunay__triangulation__2_1a02f72cc90245c6ba23cc7f47a9fa1d31" kindref="member">move_if_no_collision()</ref></computeroutput>, if there is no collision. </para>        </briefdescription>
        <detaileddescription>
<para>Otherwise, <computeroutput>v</computeroutput> is deleted and the vertex placed on <computeroutput>p</computeroutput> is returned. <simplesect kind="pre"><para>Vertex <computeroutput>v</computeroutput> must be finite. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Delaunay_triangulation_2.h" line="200" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Queries</header>
      <memberdef kind="function" id="classCGAL_1_1Delaunay__triangulation__2_1a30e5bdf852f888b3b2fd33e9dbfa4bcb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Delaunay_triangulation_2&lt; Traits, Tds &gt;::nearest_vertex</definition>
        <argsstring>(const Point &amp;p, Face_handle f=Face_handle()) const</argsstring>
        <name>nearest_vertex</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
          <defval><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref>()</defval>
        </param>
        <briefdescription>
<para>returns any nearest vertex of <computeroutput>p</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The implemented function begins with a location step and <computeroutput>f</computeroutput> may be used to initialize the location. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Delaunay_triangulation_2.h" line="213" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Delaunay__triangulation__2_1a5fdcede9f4c7df7193d950be6bfec511" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OutputItFaces</type>
          </param>
          <param>
            <type>class OutputItBoundaryEdges</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; OutputItFaces, OutputItBoundaryEdges &gt;</type>
        <definition>std::pair&lt;OutputItFaces,OutputItBoundaryEdges&gt; CGAL::Delaunay_triangulation_2&lt; Traits, Tds &gt;::get_conflicts_and_boundary</definition>
        <argsstring>(const Point &amp;p, OutputItFaces fit, OutputItBoundaryEdges eit, Face_handle start) const</argsstring>
        <name>get_conflicts_and_boundary</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>OutputItFaces</type>
          <declname>fit</declname>
        </param>
        <param>
          <type>OutputItBoundaryEdges</type>
          <declname>eit</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>start</declname>
        </param>
        <briefdescription>
<para>outputs the faces and boundary edges of the conflict zone of point <computeroutput>p</computeroutput> into output iterators. </para>        </briefdescription>
        <detaileddescription>
<para>This function outputs in the container pointed to by <computeroutput>fit</computeroutput> the faces which are in conflict with point <computeroutput>p</computeroutput>, i. e., the faces whose circumcircle contains <computeroutput>p</computeroutput>. It outputs in the container pointed to by <computeroutput>eit</computeroutput> the the boundary of the zone in conflict with <computeroutput>p</computeroutput>. The boundary edges of the conflict zone are output in counter-clockwise order and each edge is described through its incident face which is not in conflict with <computeroutput>p</computeroutput>. The function returns in a <computeroutput>std::pair</computeroutput> the resulting output iterators.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OutItFaces</parametername>
</parameternamelist>
<parameterdescription>
<para>is an output iterator with <computeroutput>Face_handle</computeroutput> as value type. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutItBoundaryEdges</parametername>
</parameternamelist>
<parameterdescription>
<para>is an output iterator with <computeroutput>Edge</computeroutput> as value type. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput><ref refid="classCGAL_1_1Triangulation__2_1a644f9730fdece05c0e951201e0012805" kindref="member">dimension()</ref>==2</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Delaunay_triangulation_2.h" line="237" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Delaunay__triangulation__2_1a9676393843c31a6954630af8d9e61c1a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OutputItFaces</type>
          </param>
        </templateparamlist>
        <type>OutputItFaces</type>
        <definition>OutputItFaces CGAL::Delaunay_triangulation_2&lt; Traits, Tds &gt;::get_conflicts</definition>
        <argsstring>(const Point &amp;p, OutputItFaces fit, Face_handle start) const</argsstring>
        <name>get_conflicts</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>OutputItFaces</type>
          <declname>fit</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>start</declname>
        </param>
        <briefdescription>
<para>outputs the faces of the conflict zone of point <computeroutput>p</computeroutput> into an output iterator. </para>        </briefdescription>
        <detaileddescription>
<para>same as <computeroutput><ref refid="classCGAL_1_1Delaunay__triangulation__2_1a5fdcede9f4c7df7193d950be6bfec511" kindref="member">get_conflicts_and_boundary()</ref></computeroutput> except that only the faces in conflict with <computeroutput>p</computeroutput> are output. The function returns the resulting output iterator. <simplesect kind="pre"><para><computeroutput><ref refid="classCGAL_1_1Triangulation__2_1a644f9730fdece05c0e951201e0012805" kindref="member">dimension()</ref>==2</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Delaunay_triangulation_2.h" line="250" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Delaunay__triangulation__2_1a8f7c50d523d7dccdd285979768ec01db" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OutputItBoundaryEdges</type>
          </param>
        </templateparamlist>
        <type>OutputItBoundaryEdges</type>
        <definition>OutputItBoundaryEdges CGAL::Delaunay_triangulation_2&lt; Traits, Tds &gt;::get_boundary_of_conflicts</definition>
        <argsstring>(const Point &amp;p, OutputItBoundaryEdges eit, Face_handle start) const</argsstring>
        <name>get_boundary_of_conflicts</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>OutputItBoundaryEdges</type>
          <declname>eit</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>start</declname>
        </param>
        <briefdescription>
<para>outputs the boundary edges of the conflict zone of point <computeroutput>p</computeroutput> into an output iterator. </para>        </briefdescription>
        <detaileddescription>
<para>This function outputs in the container pointed to by <computeroutput>eit</computeroutput>, the boundary of the zone in conflict with <computeroutput>p</computeroutput>. The boundary edges of the conflict zone are output in counterclockwise order and each edge is described through the incident face which is not in conflict with <computeroutput>p</computeroutput>. The function returns the resulting output iterator. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OutputItBoundaryEdges</parametername>
</parameternamelist>
<parameterdescription>
<para>is an output iterator with <computeroutput>Edge</computeroutput> as value type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Delaunay_triangulation_2.h" line="268" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Voronoi Diagram</header>
      <description><para>The following member functions provide the elements of the dual Voronoi diagram. </para></description>
      <memberdef kind="function" id="classCGAL_1_1Delaunay__triangulation__2_1a0c10749e92002e2316001ef8af93aa6f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref></type>
        <definition>Point CGAL::Delaunay_triangulation_2&lt; Traits, Tds &gt;::dual</definition>
        <argsstring>(const Face_handle &amp;f) const</argsstring>
        <name>dual</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Returns the center of the circle circumscribed to face <computeroutput>f</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>f</computeroutput> is not infinite. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Delaunay_triangulation_2.h" line="283" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Delaunay__triangulation__2_1a98edd189bfb04054f54765ec6e457907" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Object" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Object</ref></type>
        <definition>Object CGAL::Delaunay_triangulation_2&lt; Traits, Tds &gt;::dual</definition>
        <argsstring>(const Edge &amp;e) const</argsstring>
        <name>dual</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1ad28c6e0e0e65b8aaecb1ae76d8744b33" kindref="member">Edge</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>returns a segment, a ray or a line supported by the bisector of the endpoints of <computeroutput>e</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>If faces incident to <computeroutput>e</computeroutput> are both finite, a segment whose endpoints are the duals of each incident face is returned. If only one incident face is finite, a ray whose endpoint is the dual of the finite incident face is returned. Otherwise both incident faces are infinite and the bisector line is returned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Delaunay_triangulation_2.h" line="295" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Delaunay__triangulation__2_1a7dcdd95304ad90d255326d074478e9c7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Object" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Object</ref></type>
        <definition>Object CGAL::Delaunay_triangulation_2&lt; Traits, Tds &gt;::dual</definition>
        <argsstring>(const Edge_circulator &amp;ec) const</argsstring>
        <name>dual</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1a997ed97a0ac906a0342ad18c91a1ec81" kindref="member">Edge_circulator</ref> &amp;</type>
          <declname>ec</declname>
        </param>
        <briefdescription>
<para>Idem. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Delaunay_triangulation_2.h" line="300" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Delaunay__triangulation__2_1adef6d07028b8afd40ac189233d8e4f0a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Object" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Object</ref></type>
        <definition>Object CGAL::Delaunay_triangulation_2&lt; Traits, Tds &gt;::dual</definition>
        <argsstring>(const Edge_iterator &amp;ei) const</argsstring>
        <name>dual</name>
        <param>
          <type>const Edge_iterator &amp;</type>
          <declname>ei</declname>
        </param>
        <briefdescription>
<para>Idem. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Delaunay_triangulation_2.h" line="305" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Delaunay__triangulation__2_1a7904b0176d781671b9805dfc599128fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Stream</type>
          </param>
        </templateparamlist>
        <type>Stream &amp;</type>
        <definition>Stream&amp; CGAL::Delaunay_triangulation_2&lt; Traits, Tds &gt;::draw_dual</definition>
        <argsstring>(Stream &amp;ps)</argsstring>
        <name>draw_dual</name>
        <param>
          <type>Stream &amp;</type>
          <declname>ps</declname>
        </param>
        <briefdescription>
<para>output the dual Voronoi diagram to stream <computeroutput>ps</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Delaunay_triangulation_2.h" line="311" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Predicates</header>
      <memberdef kind="function" id="classCGAL_1_1Delaunay__triangulation__2_1a347b47deabcaddcb92e588a5f7c0d8aa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1ga5006dd2552d97fa577d81bd819c0f979" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Oriented_side</ref></type>
        <definition>Oriented_side CGAL::Delaunay_triangulation_2&lt; Traits, Tds &gt;::side_of_oriented_circle</definition>
        <argsstring>(Face_handle f, const Point &amp;p) const</argsstring>
        <name>side_of_oriented_circle</name>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns the side of <computeroutput>p</computeroutput> with respect to the circle circumscribing the triangle associated with <computeroutput>f</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Delaunay_triangulation_2.h" line="322" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Miscellaneous</header>
      <description><para>The checking function <computeroutput><ref refid="classCGAL_1_1Delaunay__triangulation__2_1ad21e33690547b7d8a831a0edccd2e09f" kindref="member">is_valid()</ref></computeroutput> is also overwritten to additionally test the empty circle property. </para></description>
      <memberdef kind="function" id="classCGAL_1_1Delaunay__triangulation__2_1ad21e33690547b7d8a831a0edccd2e09f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Delaunay_triangulation_2&lt; Traits, Tds &gt;::is_valid</definition>
        <argsstring>(bool verbose=false, int level=0) const</argsstring>
        <name>is_valid</name>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>tests the validity of the triangulation as a <computeroutput><ref refid="classCGAL_1_1Triangulation__2" kindref="compound">Triangulation_2</ref></computeroutput> and additionally tests the Delaunay property. </para>        </briefdescription>
        <detaileddescription>
<para>This method is mainly useful for debugging Delaunay triangulation algorithms designed by the user. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Delaunay_triangulation_2.h" line="337" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The class <computeroutput><ref refid="classCGAL_1_1Delaunay__triangulation__2" kindref="compound">Delaunay_triangulation_2</ref></computeroutput> is designed to represent the Delaunay triangulation of a set of points in a plane. </para>    </briefdescription>
    <detaileddescription>
<para>A Delaunay triangulation of a set of points is a triangulation of the sets of points that fulfills the following <emphasis>empty circle property</emphasis> (also called <emphasis>Delaunay property</emphasis>): the circumscribing circle of any facet of the triangulation contains no point of the set in its interior. For a point set with no case of co-circularity of more than three points, the Delaunay triangulation is unique, it is the dual of the Voronoi diagram of the points.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Tds</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classTriangulationDataStructure__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/TDS_2.tag">TriangulationDataStructure_2</ref></computeroutput>. CGAL provides a default instantiation for this parameter, which is the class <computeroutput><ref refid="classCGAL_1_1Triangulation__data__structure__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/TDS_2.tag">CGAL::Triangulation_data_structure_2</ref> &lt; <ref refid="classCGAL_1_1Triangulation__vertex__base__2" kindref="compound">CGAL::Triangulation_vertex_base_2</ref>&lt;Traits&gt;, <ref refid="classCGAL_1_1Triangulation__face__base__2" kindref="compound">CGAL::Triangulation_face_base_2</ref>&lt;Traits&gt; &gt;</computeroutput>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Traits</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classDelaunayTriangulationTraits__2" kindref="compound">DelaunayTriangulationTraits_2</ref></computeroutput>. The concept <computeroutput><ref refid="classDelaunayTriangulationTraits__2" kindref="compound">DelaunayTriangulationTraits_2</ref></computeroutput> refines the concept <computeroutput><ref refid="classTriangulationTraits__2" kindref="compound">TriangulationTraits_2</ref></computeroutput>, providing a predicate type to check the empty circle property.</para></parameterdescription>
</parameteritem>
</parameterlist>
Changing this predicate type allows the user to build Delaunay triangulations for different metrics such that <formula id="0">$ L_1$</formula> or <formula id="1">$ L_{\infty}$</formula> or any metric defined by a convex object. However, the user of an exotic metric must be careful that the constructed triangulation has to be a triangulation of the convex hull which means that convex hull edges have to be Delaunay edges. This is granted for any smooth convex metric (like <formula id="2">$ L_2$</formula>) and can be ensured for other metrics (like <formula id="1">$ L_{\infty}$</formula>) by the addition to the point set of well chosen sentinel points. The concept of <computeroutput><ref refid="classDelaunayTriangulationTraits__2" kindref="compound">DelaunayTriangulationTraits_2</ref></computeroutput> is described <ref refid="classDelaunayTriangulationTraits__2" kindref="compound">DelaunayTriangulationTraits_2</ref>.</para><para>When dealing with a large triangulations, the user is advised to encapsulate the Delaunay triangulation class into a triangulation hierarchy, which means to use the class <computeroutput><ref refid="classCGAL_1_1Triangulation__hierarchy__2" kindref="compound">Triangulation_hierarchy_2</ref>&lt;Tr&gt;</computeroutput> with the template parameter instantiated with <computeroutput><ref refid="classCGAL_1_1Delaunay__triangulation__2" kindref="compound">Delaunay_triangulation_2</ref></computeroutput>. The triangulation hierarchy will then offer the same functionalities but be much more for efficient for locations and insertions.</para><para><bold>Types</bold><linebreak/>
</para><para>All the types defined in <computeroutput><ref refid="classCGAL_1_1Triangulation__2" kindref="compound">Triangulation_2</ref>&lt;Traits,Tds&gt;</computeroutput> are inherited.</para><para><bold>Implementation</bold><linebreak/>
</para><para>Insertion is implemented by inserting in the triangulation, then performing a sequence of Delaunay flips. The number of flips is <formula id="3">$ O(d)$</formula> if the new vertex is of degree <formula id="4">$ d$</formula> in the new triangulation. For points distributed uniformly at random, insertion takes time <formula id="5">$ O(1)$</formula> on average.</para><para>Removal calls the removal in the triangulation and then re-triangulates the hole in such a way that the Delaunay criterion is satisfied. Removal of a vertex of degree <formula id="4">$ d$</formula> takes time <formula id="6">$ O(d^2)$</formula>. The degree <formula id="4">$ d$</formula> is <formula id="5">$ O(1)$</formula> for a random vertex in the triangulation.</para><para>After a point location step, the nearest neighbor is found in time <formula id="7">$ O(n)$</formula> in the worst case, but in time <formula id="5">$ O(1)$</formula> for vertices distributed uniformly at random and any query point.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Triangulation__2" kindref="compound">CGAL::Triangulation_2</ref>&lt;Traits,Tds&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classTriangulationDataStructure__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/TDS_2.tag">TriangulationDataStructure_2</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classDelaunayTriangulationTraits__2" kindref="compound">DelaunayTriangulationTraits_2</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Triangulation__hierarchy__2" kindref="compound">Triangulation_hierarchy_2</ref>&lt;Tr&gt;</computeroutput> </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="26">
        <label>CGAL::Triangulation_2&lt; Traits, Tds &gt;</label>
        <link refid="classCGAL_1_1Triangulation__2"/>
        <childnode refid="27" relation="public-inheritance">
        </childnode>
      </node>
      <node id="25">
        <label>CGAL::Delaunay_triangulation_2&lt; Traits, Tds &gt;</label>
        <link refid="classCGAL_1_1Delaunay__triangulation__2"/>
        <childnode refid="26" relation="public-inheritance">
        </childnode>
      </node>
      <node id="27">
        <label>CGAL::Triangulation_cw_ccw_2</label>
        <link refid="classCGAL_1_1Triangulation__cw__ccw__2"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="29">
        <label>CGAL::Triangulation_2&lt; Traits, Tds &gt;</label>
        <link refid="classCGAL_1_1Triangulation__2"/>
        <childnode refid="30" relation="public-inheritance">
        </childnode>
      </node>
      <node id="28">
        <label>CGAL::Delaunay_triangulation_2&lt; Traits, Tds &gt;</label>
        <link refid="classCGAL_1_1Delaunay__triangulation__2"/>
        <childnode refid="29" relation="public-inheritance">
        </childnode>
      </node>
      <node id="30">
        <label>CGAL::Triangulation_cw_ccw_2</label>
        <link refid="classCGAL_1_1Triangulation__cw__ccw__2"/>
      </node>
    </collaborationgraph>
    <location file="CGAL/Delaunay_triangulation_2.h" line="80" column="1" bodyfile="CGAL/Delaunay_triangulation_2.h" bodystart="80" bodyend="341"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Triangulation__2_1a83de89d7d1c6e306b331b7158728bb57" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>all_edges_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1aee85b73cb094f95603939be436e63438" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>all_edges_end</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a5b63aff651ae1e485ea2c7d20421b4b9" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>All_edges_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a93f4b88a11e455e4af2f5442e5d4824d" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>all_faces_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a395ece5a58ae27040ccbbb9503899671" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>all_faces_end</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ae5363996414e60613b556b14a9f87891" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>All_faces_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1adb9bbf3918a8081d21fc0c1de20b157e" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>all_vertices_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a99d052d1f8a1f99c8defec48604192f5" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>all_vertices_end</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a1d4600a9428fed798c112964ba57d9f1" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>All_vertices_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a38ffc4db3bc10b11ae77bbcd4fe21005" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>ccw</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a4185c75ba2c5ec34181fdef8fa57401c" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>circumcenter</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a031db533d1f567a2c7b0e9736f85a4f1" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>clear</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a49fc8cd3cd899d0c0aa6bc0f20c72a0f" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>cw</name></member>
      <member refid="classCGAL_1_1Delaunay__triangulation__2_1ad73f72c9a5b8c03ca956d39d9f6d0010" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>Delaunay_triangulation_2</name></member>
      <member refid="classCGAL_1_1Delaunay__triangulation__2_1a8e282a5c5b5019e1f922dea7119e6f43" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>Delaunay_triangulation_2</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ae837aea43417f936cefb715765d332e1" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>difference_type</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a644f9730fdece05c0e951201e0012805" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>dimension</name></member>
      <member refid="classCGAL_1_1Delaunay__triangulation__2_1a7904b0176d781671b9805dfc599128fd" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>draw_dual</name></member>
      <member refid="classCGAL_1_1Delaunay__triangulation__2_1a7ce0f4762abf64702c5571a29eefaf62" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>dt</name></member>
      <member refid="classCGAL_1_1Delaunay__triangulation__2_1a0c10749e92002e2316001ef8af93aa6f" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>dual</name></member>
      <member refid="classCGAL_1_1Delaunay__triangulation__2_1a98edd189bfb04054f54765ec6e457907" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>dual</name></member>
      <member refid="classCGAL_1_1Delaunay__triangulation__2_1a7dcdd95304ad90d255326d074478e9c7" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>dual</name></member>
      <member refid="classCGAL_1_1Delaunay__triangulation__2_1adef6d07028b8afd40ac189233d8e4f0a" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>dual</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a22dbae3b466c50924759754de5865db6a5111882933f6615f618c8900e2bc6acf" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>EDGE</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ad28c6e0e0e65b8aaecb1ae76d8744b33" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>Edge</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a997ed97a0ac906a0342ad18c91a1ec81" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>Edge_circulator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a6c6a38b0ce694a47c2323834107fa758" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>Face</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a22dbae3b466c50924759754de5865db6a937da59ce47b08cfc0d452901e6c3625" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>FACE</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a1bda2ab92ccf638bb22fc223ae281b96" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>Face_circulator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>Face_handle</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a3d7335c51c4c777fec2b9c2560f2635f" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>finite_edges_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a6bd40af3800321a0d0d43f489b37fc2a" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>finite_edges_end</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1af70ca2702b9de4ae712b953f6a94b9a2" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>Finite_edges_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a66241217c984aa597d36d4ff6f0ff3f2" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>finite_faces_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a3df949e116750967bc46db9ba53da7c0" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>finite_faces_end</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a84923815e1cfca537c93cee97c0ed24f" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>Finite_faces_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a78d0a3bd3637897ab1abe06389899b63" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>finite_vertex</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1afec203a9cabc1700b76a3f7d4b388840" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>finite_vertices_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a00acf9a6484acec989b945dca69cac0b" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>finite_vertices_end</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a3dfacc0bd86f726c637b7ff86f404f84" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>Finite_vertices_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1aa47a446fc11809d30146fbcdb689a396" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>flip</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a94f47e3c6bdf5e36ae51180bcd013ad6" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>Geom_traits</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a7b0d7ae604821c821ce2fea5a9536ad6" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>geom_traits</name></member>
      <member refid="classCGAL_1_1Delaunay__triangulation__2_1a8f7c50d523d7dccdd285979768ec01db" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>get_boundary_of_conflicts</name></member>
      <member refid="classCGAL_1_1Delaunay__triangulation__2_1a9676393843c31a6954630af8d9e61c1a" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>get_conflicts</name></member>
      <member refid="classCGAL_1_1Delaunay__triangulation__2_1a5fdcede9f4c7df7193d950be6bfec511" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>get_conflicts_and_boundary</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a1708a62dea4a40f63025848e4afaefa0" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>incident_edges</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a843853eb19644389ba8d6024765eb4f7" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>incident_edges</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a1ca68226e40c30304c4d54685a77a7ca" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>incident_faces</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a341c4f3888b6ede6b9df55c2bb745ca3" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>incident_faces</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1afebc0e18dc93bce4b62b1e06944a6921" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>incident_vertices</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a58c9a0c9f69a356a31c8a7c02eff1841" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>incident_vertices</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a123f9d90c0fbdf6716ff7f14c0ac88bf" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>includes_edge</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a0d62215704e84f18ef9294b27f9e82b0" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>inexact_locate</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a5758b4f843e2d884d759f278e154ed87" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>infinite_face</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ae146d68059cd9d1430bafba2cbe25461" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>infinite_vertex</name></member>
      <member refid="classCGAL_1_1Delaunay__triangulation__2_1a81efeca7e8a7605aba1d3b4f951a96dc" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Delaunay__triangulation__2_1ad4b4e9423867399e922285de5eb826c8" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Delaunay__triangulation__2_1a2c02556452fea3d9e3f6cbd332d8c126" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Delaunay__triangulation__2_1a0ea76bda5cb948080eebf974af7fc506" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ab5282f769ba8445b872b4d32e8b38487" prot="public" virt="non-virtual" ambiguityscope="CGAL::Triangulation_2::"><scope>CGAL::Delaunay_triangulation_2</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ae4146b1ad3bd65fc8e8bb49cb00f86d4" prot="public" virt="non-virtual" ambiguityscope="CGAL::Triangulation_2::"><scope>CGAL::Delaunay_triangulation_2</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a359b4c5e12af04f9235b5f2f42cae709" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>insert_first</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1aefd64b3be7364535e808ed62faaa6a67" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>insert_in_edge</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a8f4a1ca36147ac331db5be089e17a2a5" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>insert_in_face</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ad8a56f1fb051ce731a079671799010de" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>insert_outside_affine_hull</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a2c35ed5fa9ea46b55687c36a4755d592" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>insert_outside_convex_hull</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a6a30184b0267dc1cdc9cc516440cbb4e" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>insert_second</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a37b3896ab3a416fe4adff475ed625e16" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>is_edge</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1adbeb9736f9bfc588658316669cd7fb44" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>is_edge</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a7a94b10ae76a8d4d6e762c19e05b6343" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>is_face</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a4084823ee026d7a00a3991cd2b553fe0" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>is_face</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1acf8596038ef09d0d3ffcba99e912d1da" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1acf8e2ef548683138d8766b6c89794fbb" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a8009eb06cbe50a3fa1358d203a1fa924" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ac7519fb75001a53abba7e8d9127d22c5" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ae4becba370b2929508ec894aa2b0370d" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1aa9ca70cc8b0cb3e0b6c0bf062d710613" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Delaunay__triangulation__2_1ad21e33690547b7d8a831a0edccd2e09f" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>is_valid</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ad720b1a9adc835ed1a27c228eea1e36c" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>Line_face_circulator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a41a46211193d767f122504f2eb99189a" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>line_walk</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a940567120751e7864c7b345eaf756642" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>locate</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1af61a05a0a53d009e111a3873c1796b52" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>locate</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a22dbae3b466c50924759754de5865db6" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>Locate_type</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ab97ce60b20674d0a7a4455e88c2eadb1" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>mirror_edge</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a9c54807a29595dc1116054cc4ac214fd" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>mirror_index</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a9213aedceda4c17381960d041d4f297a" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>mirror_vertex</name></member>
      <member refid="classCGAL_1_1Delaunay__triangulation__2_1a2c543a671d71d57d178354249e1c66a2" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>move</name></member>
      <member refid="classCGAL_1_1Delaunay__triangulation__2_1a02f72cc90245c6ba23cc7f47a9fa1d31" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>move_if_no_collision</name></member>
      <member refid="classCGAL_1_1Delaunay__triangulation__2_1a30e5bdf852f888b3b2fd33e9dbfa4bcb" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>nearest_vertex</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ab18fcf7127c007253348fcfb37b67df4" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>number_of_faces</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1abb274869c3eac8fb775702bf68c4e8f1" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>number_of_vertices</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ac7351668deed7464974684ab3c7147ea" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>operator&lt;&lt;</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a40701ad345813f8df044fd197d3c9d96" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>operator=</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a8dc99f907cc125ce7a55024da5ddb4c0" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>operator&gt;&gt;</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a01fbafc011677846a729a809b4b21a99" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>oriented_side</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a22dbae3b466c50924759754de5865db6ae8b775f120094d9b0a6871f53446184f" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>OUTSIDE_AFFINE_HULL</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a22dbae3b466c50924759754de5865db6afd690e18b1d2857068085d771fc354d4" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>OUTSIDE_CONVEX_HULL</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>Point</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a06ec87f55894738972350f631f6dc1fe" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>Point_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a048beaadce99c9bdfeaa69dd68701c32" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>points_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1adb17161924b6d2b6e7ac537d6b760728" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>points_end</name></member>
      <member refid="classCGAL_1_1Delaunay__triangulation__2_1a392d4df302f4f255eada59588c84b86e" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>push_back</name></member>
      <member refid="classCGAL_1_1Delaunay__triangulation__2_1afa5a9fdfb89174b851a3ef47ef48608d" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>remove</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a4b3389b24fe7bfe703151375d15a745a" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>remove_degree_3</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ac00496f74f7d05465407861f5a447768" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>remove_first</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a44461f8dc31540c015f24ee3d36870ab" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>remove_second</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ac3beee6618a86505bfc03bcbfbb46a4a" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>segment</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a06f3967c92db0fe28368c31ff671c658" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>segment</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ad43c112fe392ea9194b449e6116499c5" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>segment</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1afd84762f5a856ebdbd9786de8744feda" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>segment</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ae7b5594c15ef61394d76826e1fc1e8e6" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>Segment</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a25a5eaabf6ba1d9c9acf240b4453c09a" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>set_infinite_vertex</name></member>
      <member refid="classCGAL_1_1Delaunay__triangulation__2_1a347b47deabcaddcb92e588a5f7c0d8aa" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>side_of_oriented_circle</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1abc885b3d116e1d0b6943b211e750e472" prot="public" virt="non-virtual" ambiguityscope="CGAL::Triangulation_2::"><scope>CGAL::Delaunay_triangulation_2</scope><name>side_of_oriented_circle</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1aa7b0b96c9ed11cab337313f34cd96a59" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>size_type</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a8b058b055ef24a4b6fc25bf110e46638" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>star_hole</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a4511afae77c0c2978b6412d9411e4fe2" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>star_hole</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a1788d6ffa3f5986b2b07e7e0b48a2ffc" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>swap</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1afb8abca60f08ed498b54bd1992f56d28" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>tds</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ac091a355bc30d57601d2419a5807c906" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>tds</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a48984e6735c075b17d7a956cb396d1f5" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>Triangle</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a176b3903b04aaad6996d1c2a56a14dcc" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>triangle</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a97deb44f4edfb6baa30c12a22f928dc7" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>Triangulation_2</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a6e43f49405b43057d1b911a9f6e39404" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>Triangulation_2</name></member>
      <member refid="classCGAL_1_1Triangulation__cw__ccw__2_1a7069704014f0d62aa327453e5bcfb44d" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>Triangulation_cw_ccw_2</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1addbcd86ae5679a10363f46080159d00d" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>Triangulation_data_structure</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1af48b3f6c165d50c74fe67a75caec129a" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>Vertex</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a22dbae3b466c50924759754de5865db6a4fc5b644a7c38197036955ba1662afe5" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>VERTEX</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ade901d47c7c422f7978adf3ac0188a9d" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>Vertex_circulator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" prot="public" virt="non-virtual"><scope>CGAL::Delaunay_triangulation_2</scope><name>Vertex_handle</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
