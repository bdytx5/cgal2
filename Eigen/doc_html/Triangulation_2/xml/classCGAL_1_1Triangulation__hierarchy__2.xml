<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Triangulation__hierarchy__2" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Triangulation_hierarchy_2</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Tr</basecompoundref>
    <includes local="no">CGAL/Triangulation_hierarchy_2.h</includes>
    <templateparamlist>
      <param>
        <type>typename Tr</type>
      </param>
    </templateparamlist>
    <briefdescription>
<para>The class <computeroutput><ref refid="classCGAL_1_1Triangulation__hierarchy__2" kindref="compound">Triangulation_hierarchy_2</ref></computeroutput> implements a triangulation augmented with a data structure which allows fast point location queries. </para>    </briefdescription>
    <detaileddescription>
<para>The data structure is a hierarchy of triangulations. The triangulation at the lowest level is the original triangulation where operations and point location are to be performed. Then at each succeeding level, the data structure stores a triangulation of a small random sample of the vertices of the triangulation at the preceding level.</para><para>Point location is done through a top-down nearest neighbor query. The nearest neighbor query is first performed naively in the top level triangulation. Then, at each following level, the nearest neighbor at that level is found through a linear walk performed from the nearest neighbor found at the preceding level.</para><para>Because the number of vertices in each triangulation is only a small fraction of the number of vertices of the preceding triangulation the data structure remains small and achieves fast point location queries on real data. As proved in <ref refid="citelist_1CITEREF_d-iirdt-98" kindref="member">[3]</ref>, this structure has an optimal behavior when it is built for Delaunay triangulations. However it can be used as well for other triangulations.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Tr</parametername>
</parameternamelist>
<parameterdescription>
<para>may be any of the CGAL triangulation classes.</para></parameterdescription>
</parameteritem>
</parameterlist>
<bold>Types</bold><linebreak/>
</para><para>The class <computeroutput><ref refid="classCGAL_1_1Triangulation__hierarchy__2" kindref="compound">Triangulation_hierarchy_2</ref></computeroutput> inherits the types from its base triangulation class <computeroutput>Tr</computeroutput>.</para><para>The class <computeroutput><ref refid="classCGAL_1_1Triangulation__hierarchy__2" kindref="compound">Triangulation_hierarchy_2</ref></computeroutput> offers exactly the same functionalities as the triangulation Tr does. Location queries are overloaded to benefit from the data structure. Modifiers (insertion, removal, and displacement) are overloaded to take care of updating the data structure.</para><para>Be careful that I/O operations are not overloaded. Writing a <computeroutput><ref refid="classCGAL_1_1Triangulation__hierarchy__2" kindref="compound">Triangulation_hierarchy_2</ref></computeroutput> into a file writes only the lowest level triangulation and drops the hierarchy and reading it from a file results in a triangulation whose efficiency will be that of an ordinary triangulation.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Triangulation__2" kindref="compound">CGAL::Triangulation_2</ref>&lt;Traits,Tds&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Delaunay__triangulation__2" kindref="compound">CGAL::Delaunay_triangulation_2</ref>&lt;Traits,Tds&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classTriangulationHierarchyVertexBase__2" kindref="compound">TriangulationHierarchyVertexBase_2</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Triangulation__hierarchy__vertex__base__2" kindref="compound">CGAL::Triangulation_hierarchy_vertex_base_2</ref>&lt;Vb&gt;</computeroutput> </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="82">
        <label>CGAL::Triangulation_hierarchy_2&lt; Tr &gt;</label>
        <link refid="classCGAL_1_1Triangulation__hierarchy__2"/>
        <childnode refid="83" relation="public-inheritance">
        </childnode>
      </node>
      <node id="83">
        <label>Tr</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="84">
        <label>CGAL::Triangulation_hierarchy_2&lt; Tr &gt;</label>
        <link refid="classCGAL_1_1Triangulation__hierarchy__2"/>
        <childnode refid="85" relation="public-inheritance">
        </childnode>
      </node>
      <node id="85">
        <label>Tr</label>
      </node>
    </collaborationgraph>
    <location file="CGAL/Triangulation_hierarchy_2.h" line="61" column="1" bodyfile="CGAL/Triangulation_hierarchy_2.h" bodystart="61" bodyend="66"/>
    <listofallmembers>
    </listofallmembers>
  </compounddef>
</doxygen>
