<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Regular__triangulation__2" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Regular_triangulation_2</compoundname>
    <basecompoundref refid="classCGAL_1_1Triangulation__2" prot="public" virt="non-virtual">CGAL::Triangulation_2&lt; Traits, Tds &gt;</basecompoundref>
    <includes local="no">CGAL/Regular_triangulation_2.h</includes>
    <templateparamlist>
      <param>
        <type>typename Traits</type>
      </param>
      <param>
        <type>typename Tds</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classCGAL_1_1Regular__triangulation__2_1a9dd35445b6959affbe37f00664ba09f5" prot="public" static="no">
        <type>Traits::Distance</type>
        <definition>typedef Traits::Distance CGAL::Regular_triangulation_2&lt; Traits, Tds &gt;::Distance</definition>
        <argsstring></argsstring>
        <name>Distance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_2.h" line="145" column="1" bodyfile="CGAL/Regular_triangulation_2.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Regular__triangulation__2_1ae61db0f9a4ee41f934f234c2cb38cf44" prot="public" static="no">
        <type>Traits::Line</type>
        <definition>typedef Traits::Line CGAL::Regular_triangulation_2&lt; Traits, Tds &gt;::Line</definition>
        <argsstring></argsstring>
        <name>Line</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_2.h" line="150" column="1" bodyfile="CGAL/Regular_triangulation_2.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Regular__triangulation__2_1a5f06adae38f48d10cb02b258a1060d54" prot="public" static="no">
        <type>Traits::Ray</type>
        <definition>typedef Traits::Ray CGAL::Regular_triangulation_2&lt; Traits, Tds &gt;::Ray</definition>
        <argsstring></argsstring>
        <name>Ray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_2.h" line="155" column="1" bodyfile="CGAL/Regular_triangulation_2.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Regular__triangulation__2_1ae663c78fd4c5e495ecf7e8e0c4a68121" prot="public" static="no">
        <type>Traits::Point_2</type>
        <definition>typedef Traits::Point_2 CGAL::Regular_triangulation_2&lt; Traits, Tds &gt;::Bare_point</definition>
        <argsstring></argsstring>
        <name>Bare_point</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_2.h" line="160" column="1" bodyfile="CGAL/Regular_triangulation_2.h" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Regular__triangulation__2_1aefb33aff2f0f6487d9d091afba872540" prot="public" static="no">
        <type>Traits::Weighted_point_2</type>
        <definition>typedef Traits::Weighted_point_2 CGAL::Regular_triangulation_2&lt; Traits, Tds &gt;::Weighted_point</definition>
        <argsstring></argsstring>
        <name>Weighted_point</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_2.h" line="165" column="1" bodyfile="CGAL/Regular_triangulation_2.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Regular__triangulation__2_1a6d16bed3ff51430152b05eda873f1062" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Regular_triangulation_2&lt; Traits, Tds &gt;::All_vertices_iterator</definition>
        <argsstring></argsstring>
        <name>All_vertices_iterator</name>
        <briefdescription>
<para>An iterator that allows to enumerate the vertices that are not hidden. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_2.h" line="171" column="1" bodyfile="CGAL/Regular_triangulation_2.h" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Regular__triangulation__2_1aaf7b3f6a6288499a36bd8216834e050f" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Regular_triangulation_2&lt; Traits, Tds &gt;::Finite_vertices_iterator</definition>
        <argsstring></argsstring>
        <name>Finite_vertices_iterator</name>
        <briefdescription>
<para>An iterator that allows to enumerate the finite vertices that are not hidden. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_2.h" line="177" column="1" bodyfile="CGAL/Regular_triangulation_2.h" bodystart="177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Regular__triangulation__2_1af4129dec90bf5dace08e0b99e4f22e57" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Regular_triangulation_2&lt; Traits, Tds &gt;::Hidden_vertices_iterator</definition>
        <argsstring></argsstring>
        <name>Hidden_vertices_iterator</name>
        <briefdescription>
<para>An iterator that allows to enumerate the hidden vertices. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_2.h" line="183" column="1" bodyfile="CGAL/Regular_triangulation_2.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__2_1aaecc0d4e13c9c614f450e3a87ff5d003" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Regular_triangulation_2&lt; Traits, Tds &gt;::Regular_triangulation_2</definition>
        <argsstring>(const Traits &amp;gt=Traits())</argsstring>
        <name>Regular_triangulation_2</name>
        <param>
          <type>const Traits &amp;</type>
          <declname>gt</declname>
          <defval>Traits()</defval>
        </param>
        <briefdescription>
<para>Introduces an empty regular triangulation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_2.h" line="193" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__2_1ac5c3a21d620925951677fb5bce91ebdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Regular_triangulation_2&lt; Traits, Tds &gt;::Regular_triangulation_2</definition>
        <argsstring>(const Regular_triangulation_2 &amp;rt)</argsstring>
        <name>Regular_triangulation_2</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Regular__triangulation__2" kindref="compound">Regular_triangulation_2</ref> &amp;</type>
          <declname>rt</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_2.h" line="198" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__2_1af5bf27f22b396f2a82e066d4094b4d3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Regular__triangulation__2" kindref="compound">Regular_triangulation_2</ref>&lt; Traits, Tds &gt;</type>
        <definition>Regular_triangulation_2&lt;Traits,Tds&gt; CGAL::Regular_triangulation_2&lt; Traits, Tds &gt;::Regular_triangulation_2</definition>
        <argsstring>(InputIterator first, InputIterator last, Traits gt=Traits())</argsstring>
        <name>Regular_triangulation_2</name>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>last</declname>
        </param>
        <param>
          <type>Traits</type>
          <declname>gt</declname>
          <defval>Traits()</defval>
        </param>
        <briefdescription>
<para>Equivalent to constructing an empty triangulation with the optional traits class argument and calling insert(first,last). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_2.h" line="205" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Insertion and Removal</header>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__2_1af7c85fa190b96836fb6c6a8704a0171c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Regular_triangulation_2&lt; Traits, Tds &gt;::insert</definition>
        <argsstring>(const Weighted_point &amp;p, Face_handle f=Face_handle())</argsstring>
        <name>insert</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Regular__triangulation__2_1aefb33aff2f0f6487d9d091afba872540" kindref="member">Weighted_point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
          <defval><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref>()</defval>
        </param>
        <briefdescription>
<para>inserts weighted point <computeroutput>p</computeroutput> in the regular triangulation. </para>        </briefdescription>
        <detaileddescription>
<para>If the point <computeroutput>p</computeroutput> does not appear as a vertex of the triangulation, the returned vertex is a hidden vertex. If given the parameter <computeroutput>f</computeroutput> is used as an hint for the place to start the location process of point <computeroutput>p</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_2.h" line="220" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__2_1af84121d48fc9f74a50ad4cd0f2c02c09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Regular_triangulation_2&lt; Traits, Tds &gt;::insert</definition>
        <argsstring>(const Weighted_point &amp;p, Locate_type lt, Face_handle loc, int li)</argsstring>
        <name>insert</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Regular__triangulation__2_1aefb33aff2f0f6487d9d091afba872540" kindref="member">Weighted_point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1a22dbae3b466c50924759754de5865db6" kindref="member">Locate_type</ref></type>
          <declname>lt</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>loc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>li</declname>
        </param>
        <briefdescription>
<para>insert a weighted point <computeroutput>p</computeroutput> whose bare-point is assumed to be located in <computeroutput>lt,loc,li</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>See the description of member function <computeroutput><ref refid="classCGAL_1_1Triangulation__2_1a940567120751e7864c7b345eaf756642" kindref="member">Triangulation_2::locate()</ref></computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_2.h" line="229" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__2_1a1e25076b21dcd8777d78328548cec377" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Regular_triangulation_2&lt; Traits, Tds &gt;::push_back</definition>
        <argsstring>(const Point &amp;p)</argsstring>
        <name>push_back</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Equivalent to <computeroutput>insert(p)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_2.h" line="236" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__2_1aff389dbf55d75b55959daeffcfef127c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          </param>
        </templateparamlist>
        <type>std::ptrdiff_t</type>
        <definition>std::ptrdiff_t CGAL::Regular_triangulation_2&lt; Traits, Tds &gt;::insert</definition>
        <argsstring>(InputIterator first, InputIterator last)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>inserts the weighted points in the range <computeroutput>[first,last)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>It returns the difference of the number of vertices between after and before the insertions (it may be negative due to hidden points). Note that this function is not guaranteed to insert the weighted points following the order of <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput>, as <computeroutput><ref refid="group__PkgSpatialSortingFunctions_1ga2f4d770272b84481f7c4c9b20b7174c7" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Spatial_sorting.tag">spatial_sort()</ref></computeroutput> is used to improve efficiency. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>must be an input iterator with the value type <computeroutput><ref refid="classCGAL_1_1Weighted__point" kindref="compound">Weighted_point</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_2.h" line="249" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__2_1a6cf16173eb2b2fa3c37e643650f27e33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class WeightedPointWithInfoInputIterator</type>
          </param>
        </templateparamlist>
        <type>std::ptrdiff_t</type>
        <definition>std::ptrdiff_t CGAL::Regular_triangulation_2&lt; Traits, Tds &gt;::insert</definition>
        <argsstring>(WeightedPointWithInfoInputIterator first, WeightedPointWithInfoInputIterator last)</argsstring>
        <name>insert</name>
        <param>
          <type>WeightedPointWithInfoInputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>WeightedPointWithInfoInputIterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>inserts the weighted points in the range <computeroutput>[first,last)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>It returns the difference of the number of vertices between after and before the insertions (it may be negative due to hidden points). Note that this function is not guaranteed to insert the weighted points following the order of <computeroutput>WeightedPointWithInfoInputIterator</computeroutput>, as <computeroutput>spatial_sort</computeroutput> is used to improve efficiency. Given a pair <computeroutput>(p,i)</computeroutput>, the vertex <computeroutput>v</computeroutput> storing <computeroutput>p</computeroutput> also stores <computeroutput>i</computeroutput>, that is <computeroutput>v.point() == p</computeroutput> and <computeroutput>v.info() == i</computeroutput>. If several pairs have the same point, only one vertex is created, one of the objects of type <computeroutput>Vertex::Info</computeroutput> will be stored in the vertex. <simplesect kind="pre"><para><computeroutput>Vertex</computeroutput> must be model of the concept <computeroutput><ref refid="classTriangulationVertexBaseWithInfo__2" kindref="compound">TriangulationVertexBaseWithInfo_2</ref></computeroutput>.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>WeightedPointWithInfoInputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be an input iterator with value type <computeroutput>std::pair&lt;<ref refid="classCGAL_1_1Weighted__point" kindref="compound">Weighted_point</ref>,Vertex::Info&gt;</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_2.h" line="268" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__2_1a872a40ea550d69b0ba04cacd5d7f52e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Regular_triangulation_2&lt; Traits, Tds &gt;::remove</definition>
        <argsstring>(Vertex_handle v)</argsstring>
        <name>remove</name>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>removes the vertex from the triangulation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_2.h" line="273" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Queries</header>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__2_1a46dc71615018af24a84b3a47ee514fb2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OutputItFaces</type>
          </param>
          <param>
            <type>class OutputItBoundaryEdges</type>
          </param>
          <param>
            <type>class OutputItHiddenVertices</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Triple" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::Triple</ref>&lt; OutputItFaces, OutputItBoundaryEdges, OutputItHiddenVertices &gt;</type>
        <definition>CGAL::Triple&lt;OutputItFaces,OutputItBoundaryEdges,OutputItHiddenVertices&gt; CGAL::Regular_triangulation_2&lt; Traits, Tds &gt;::get_conflicts_and_boundary_and_hidden_vertices</definition>
        <argsstring>(const Weighted_point &amp;p, OutputItFaces fit, OutputItBoundaryEdges eit, OutputItHiddenVertices vit, Face_handle start) const</argsstring>
        <name>get_conflicts_and_boundary_and_hidden_vertices</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Regular__triangulation__2_1aefb33aff2f0f6487d9d091afba872540" kindref="member">Weighted_point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>OutputItFaces</type>
          <declname>fit</declname>
        </param>
        <param>
          <type>OutputItBoundaryEdges</type>
          <declname>eit</declname>
        </param>
        <param>
          <type>OutputItHiddenVertices</type>
          <declname>vit</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>start</declname>
        </param>
        <briefdescription>
<para>outputs the faces, boundary edges, and hidden vertices of the conflict zone of point <computeroutput>p</computeroutput> to output iterators. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OutputItFaces</parametername>
</parameternamelist>
<parameterdescription>
<para>is an output iterator with <computeroutput>Face_handle</computeroutput> as value type. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutputItBoundaryEdges</parametername>
</parameternamelist>
<parameterdescription>
<para>is an output iterator with <computeroutput>Edge</computeroutput> as value type. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutputItHiddenVertices</parametername>
</parameternamelist>
<parameterdescription>
<para>is an output iterator with <computeroutput>Vertex_handle</computeroutput> as value type.</para></parameterdescription>
</parameteritem>
</parameterlist>
This member function outputs in the container pointed to by <computeroutput>fit</computeroutput> the faces which are in conflict with point <computeroutput>p</computeroutput>, i.e., the faces whose power circles have negative power wrt. <computeroutput>p</computeroutput>. It outputs in the container pointed to by <computeroutput>eit</computeroutput> the boundary of the zone in conflict with <computeroutput>p</computeroutput>. It inserts the vertices that would be hidden by <computeroutput>p</computeroutput> into the container pointed to by <computeroutput>vit</computeroutput>. The boundary edges of the conflict zone are output in counter-clockwise order and each edge is described through its incident face which is not in conflict with <computeroutput>p</computeroutput>. The function returns in a <computeroutput><ref refid="classCGAL_1_1Triple" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::Triple</ref></computeroutput> the resulting output iterators. <simplesect kind="pre"><para><computeroutput><ref refid="classCGAL_1_1Triangulation__2_1a644f9730fdece05c0e951201e0012805" kindref="member">dimension()</ref>==2</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_2.h" line="307" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__2_1a5b7244b2bb71653f27e4417e8ba66582" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OutputItFaces</type>
          </param>
          <param>
            <type>class OutputItBoundaryEdges</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; OutputItFaces, OutputItBoundaryEdges &gt;</type>
        <definition>std::pair&lt;OutputItFaces,OutputItBoundaryEdges&gt; CGAL::Regular_triangulation_2&lt; Traits, Tds &gt;::get_conflicts_and_boundary</definition>
        <argsstring>(const Weighted_point &amp;p, OutputItFaces fit, OutputItBoundaryEdges eit, Face_handle start) const</argsstring>
        <name>get_conflicts_and_boundary</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Regular__triangulation__2_1aefb33aff2f0f6487d9d091afba872540" kindref="member">Weighted_point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>OutputItFaces</type>
          <declname>fit</declname>
        </param>
        <param>
          <type>OutputItBoundaryEdges</type>
          <declname>eit</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>start</declname>
        </param>
        <briefdescription>
<para>outputs the faces and boundary edges of the conflict zone of point <computeroutput>p</computeroutput> to output iterators. </para>        </briefdescription>
        <detaileddescription>
<para>See <computeroutput><ref refid="classCGAL_1_1Regular__triangulation__2_1a46dc71615018af24a84b3a47ee514fb2" kindref="member">get_conflicts_and_boundary_and_hidden_vertices()</ref></computeroutput> for details.</para><para>The function returns in a <computeroutput>std::pair</computeroutput> the resulting output iterators. <simplesect kind="pre"><para><computeroutput><ref refid="classCGAL_1_1Triangulation__2_1a644f9730fdece05c0e951201e0012805" kindref="member">dimension()</ref>==2</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_2.h" line="322" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__2_1a0b640b40c4eac8ece1ecb062bb781f82" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OutputItFaces</type>
          </param>
          <param>
            <type>class OutputItHiddenVertices</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; OutputItFaces, OutputItHiddenVertices &gt;</type>
        <definition>std::pair&lt;OutputItFaces,OutputItHiddenVertices&gt; CGAL::Regular_triangulation_2&lt; Traits, Tds &gt;::get_conflicts_and_hidden_vertices</definition>
        <argsstring>(const Weighted_point &amp;p, OutputItFaces fit, OutputItHiddenVertices vit, Face_handle start) const</argsstring>
        <name>get_conflicts_and_hidden_vertices</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Regular__triangulation__2_1aefb33aff2f0f6487d9d091afba872540" kindref="member">Weighted_point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>OutputItFaces</type>
          <declname>fit</declname>
        </param>
        <param>
          <type>OutputItHiddenVertices</type>
          <declname>vit</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>start</declname>
        </param>
        <briefdescription>
<para>outputs the faces and hidden vertices of the conflict zone of point <computeroutput>p</computeroutput> to output iterators. </para>        </briefdescription>
        <detaileddescription>
<para>See <computeroutput><ref refid="classCGAL_1_1Regular__triangulation__2_1a46dc71615018af24a84b3a47ee514fb2" kindref="member">get_conflicts_and_boundary_and_hidden_vertices()</ref></computeroutput> for details. The function returns in a <computeroutput>std::pair</computeroutput> the resulting output iterators. <simplesect kind="pre"><para><computeroutput><ref refid="classCGAL_1_1Triangulation__2_1a644f9730fdece05c0e951201e0012805" kindref="member">dimension()</ref>==2</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_2.h" line="337" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__2_1abb1f2251936c217d1dbc79ae30b32a00" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OutputItBoundaryEdges</type>
          </param>
          <param>
            <type>class OutputItHiddenVertices</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; OutputItBoundaryEdges, OutputItHiddenVertices &gt;</type>
        <definition>std::pair&lt;OutputItBoundaryEdges,OutputItHiddenVertices&gt; CGAL::Regular_triangulation_2&lt; Traits, Tds &gt;::get_boundary_of_conflicts_and_hidden_vertices</definition>
        <argsstring>(const Weighted_point &amp;p, OutputItBoundaryEdges eit, OutputItHiddenVertices vit, Face_handle start) const</argsstring>
        <name>get_boundary_of_conflicts_and_hidden_vertices</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Regular__triangulation__2_1aefb33aff2f0f6487d9d091afba872540" kindref="member">Weighted_point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>OutputItBoundaryEdges</type>
          <declname>eit</declname>
        </param>
        <param>
          <type>OutputItHiddenVertices</type>
          <declname>vit</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>start</declname>
        </param>
        <briefdescription>
<para>outputs the boundary edges and hidden vertices of the conflict zone of point <computeroutput>p</computeroutput> to output iterators. </para>        </briefdescription>
        <detaileddescription>
<para>See <computeroutput><ref refid="classCGAL_1_1Regular__triangulation__2_1a46dc71615018af24a84b3a47ee514fb2" kindref="member">get_conflicts_and_boundary_and_hidden_vertices()</ref></computeroutput> for details. The function returns in a <computeroutput>std::pair</computeroutput> the resulting output iterators. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_2.h" line="350" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__2_1af5b70b2adb1c5bed63cbdba360722870" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OutputItFaces</type>
          </param>
        </templateparamlist>
        <type>OutputItFaces</type>
        <definition>OutputItFaces CGAL::Regular_triangulation_2&lt; Traits, Tds &gt;::get_conflicts</definition>
        <argsstring>(const Point &amp;p, OutputItFaces fit, Face_handle start) const</argsstring>
        <name>get_conflicts</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>OutputItFaces</type>
          <declname>fit</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>start</declname>
        </param>
        <briefdescription>
<para>outputs the faces of the conflict zone of point <computeroutput>p</computeroutput> to output iterators. </para>        </briefdescription>
        <detaileddescription>
<para>The function returns the resulting output iterator. <simplesect kind="pre"><para><computeroutput><ref refid="classCGAL_1_1Triangulation__2_1a644f9730fdece05c0e951201e0012805" kindref="member">dimension()</ref>==2</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_2.h" line="362" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__2_1a87f0331a55f11d23d7d2a414f30c25aa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OutputItBoundaryEdges</type>
          </param>
        </templateparamlist>
        <type>OutputItBoundaryEdges</type>
        <definition>OutputItBoundaryEdges CGAL::Regular_triangulation_2&lt; Traits, Tds &gt;::get_boundary_of_conflicts</definition>
        <argsstring>(const Point &amp;p, OutputItBoundaryEdges eit, Face_handle start) const</argsstring>
        <name>get_boundary_of_conflicts</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>OutputItBoundaryEdges</type>
          <declname>eit</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>start</declname>
        </param>
        <briefdescription>
<para>outputs the boundary edges of the conflict zone of <computeroutput>p</computeroutput> in counterclockwise order where each edge is described through the incident face which is not in conflict with <computeroutput>p</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The function returns the resulting output iterator. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_2.h" line="375" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__2_1a331e6e1a3505964fd87281e8e21cc57d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OutputItHiddenVertices</type>
          </param>
        </templateparamlist>
        <type>OutputItHiddenVertices</type>
        <definition>OutputItHiddenVertices CGAL::Regular_triangulation_2&lt; Traits, Tds &gt;::get_hidden_vertices</definition>
        <argsstring>(const Point &amp;p, OutputItHiddenVertices vit, Face_handle start) const</argsstring>
        <name>get_hidden_vertices</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>OutputItHiddenVertices</type>
          <declname>vit</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>start</declname>
        </param>
        <briefdescription>
<para>outputs the hidden vertices of the conflict zone of <computeroutput>p</computeroutput> into an output iterator. </para>        </briefdescription>
        <detaileddescription>
<para>The function returns the resulting output iterator. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_2.h" line="386" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__2_1acba4995cf4efa5b1f3df89c85b4a9e98" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Regular_triangulation_2&lt; Traits, Tds &gt;::nearest_power_vertex</definition>
        <argsstring>(Bare_point p) const</argsstring>
        <name>nearest_power_vertex</name>
        <param>
          <type><ref refid="classCGAL_1_1Regular__triangulation__2_1ae663c78fd4c5e495ecf7e8e0c4a68121" kindref="member">Bare_point</ref></type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns the vertex of the triangulation which is nearest to <computeroutput>p</computeroutput> with respect to the power distance. </para>        </briefdescription>
        <detaileddescription>
<para>This means that the power of the query point <computeroutput>p</computeroutput> with respect to the weighted point in the nearest vertex is smaller than the power of <computeroutput>p</computeroutput> with respect to the weighted point in any other vertex. Ties are broken arbitrarily. The default constructed handle is returned if the triangulation is empty. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_2.h" line="398" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Access Functions</header>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__2_1a1cb23f4ddf072ce8a99dafffaab41531" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CGAL::Regular_triangulation_2&lt; Traits, Tds &gt;::number_of_vertices</definition>
        <argsstring>() const</argsstring>
        <name>number_of_vertices</name>
        <briefdescription>
<para>returns the number of finite vertices that are not hidden. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_2.h" line="408" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__2_1acb93618556e2e6f6f2a439e05ea7bdf5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CGAL::Regular_triangulation_2&lt; Traits, Tds &gt;::number_of_hidden_vertices</definition>
        <argsstring>() const</argsstring>
        <name>number_of_hidden_vertices</name>
        <briefdescription>
<para>returns the number of hidden vertices. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_2.h" line="413" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__2_1ac0cfbef1539e5d87688e52b75186b5f6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Regular__triangulation__2_1af4129dec90bf5dace08e0b99e4f22e57" kindref="member">Hidden_vertices_iterator</ref></type>
        <definition>Hidden_vertices_iterator CGAL::Regular_triangulation_2&lt; Traits, Tds &gt;::hidden_vertices_begin</definition>
        <argsstring>() const</argsstring>
        <name>hidden_vertices_begin</name>
        <briefdescription>
<para>starts at an arbitrary hidden vertex. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_2.h" line="418" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__2_1ae6014aaf628273c5dbb384c3aa3c917d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Regular__triangulation__2_1af4129dec90bf5dace08e0b99e4f22e57" kindref="member">Hidden_vertices_iterator</ref></type>
        <definition>Hidden_vertices_iterator CGAL::Regular_triangulation_2&lt; Traits, Tds &gt;::hidden_vertices_end</definition>
        <argsstring>() const</argsstring>
        <name>hidden_vertices_end</name>
        <briefdescription>
<para>past the end iterator for the sequence of hidden vertices. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_2.h" line="423" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__2_1a5335a03f8d86ba92489e504c56df6c8d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Regular__triangulation__2_1aaf7b3f6a6288499a36bd8216834e050f" kindref="member">Finite_vertices_iterator</ref></type>
        <definition>Finite_vertices_iterator CGAL::Regular_triangulation_2&lt; Traits, Tds &gt;::finite_vertices_begin</definition>
        <argsstring>() const</argsstring>
        <name>finite_vertices_begin</name>
        <briefdescription>
<para>starts at an arbitrary unhidden finite vertex </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_2.h" line="428" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__2_1ad56f4aeea0ea07f662616469ab598af2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Regular__triangulation__2_1aaf7b3f6a6288499a36bd8216834e050f" kindref="member">Finite_vertices_iterator</ref></type>
        <definition>Finite_vertices_iterator CGAL::Regular_triangulation_2&lt; Traits, Tds &gt;::finite_vertices_end</definition>
        <argsstring>() const</argsstring>
        <name>finite_vertices_end</name>
        <briefdescription>
<para>Past-the-end iterator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_2.h" line="433" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__2_1a31a9f88f8e7955ac5354a2d171975665" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Regular__triangulation__2_1a6d16bed3ff51430152b05eda873f1062" kindref="member">All_vertices_iterator</ref></type>
        <definition>All_vertices_iterator CGAL::Regular_triangulation_2&lt; Traits, Tds &gt;::all_vertices_end</definition>
        <argsstring>() const</argsstring>
        <name>all_vertices_end</name>
        <briefdescription>
<para>starts at an arbitrary unhidden vertex. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_2.h" line="439" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__2_1a716b4f1a8137472b58c5a8e04ffbeab2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Regular__triangulation__2_1a6d16bed3ff51430152b05eda873f1062" kindref="member">All_vertices_iterator</ref></type>
        <definition>All_vertices_iterator CGAL::Regular_triangulation_2&lt; Traits, Tds &gt;::all_vertices_begin</definition>
        <argsstring>() const</argsstring>
        <name>all_vertices_begin</name>
        <briefdescription>
<para>past the end iterator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_2.h" line="444" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Dual Power Diagram</header>
      <description><para>The following member functions provide the elements of the dual power diagram. </para></description>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__2_1a0611f91a79631094cba26f5a9ebbd4e9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref></type>
        <definition>Point CGAL::Regular_triangulation_2&lt; Traits, Tds &gt;::weighted_circumcenter</definition>
        <argsstring>(const Face_handle &amp;f) const</argsstring>
        <name>weighted_circumcenter</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>returns the center of the circle orthogonal to the three weighted points corresponding to the vertices of face <computeroutput>f</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>f</computeroutput> is not infinite. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_2.h" line="458" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__2_1af13fbc7d6ccade793e20696a14c328d3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref></type>
        <definition>Point CGAL::Regular_triangulation_2&lt; Traits, Tds &gt;::dual</definition>
        <argsstring>(const Face_handle &amp;f) const</argsstring>
        <name>dual</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>same as weighted_circumcenter. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_2.h" line="463" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__2_1ae6953fb0897a117a70947ca23ac4181c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Object" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Object</ref></type>
        <definition>Object CGAL::Regular_triangulation_2&lt; Traits, Tds &gt;::dual</definition>
        <argsstring>(const Edge &amp;e) const</argsstring>
        <name>dual</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1ad28c6e0e0e65b8aaecb1ae76d8744b33" kindref="member">Edge</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>If both incident faces are finite, returns a segment whose endpoints are the duals of each incident face. </para>        </briefdescription>
        <detaileddescription>
<para>If only one incident face is finite, returns a ray whose endpoint is the dual of the finite incident face and supported by the line which is the bisector of the edge&apos;s endpoints. If both incident faces are infinite, returns the line which is the bisector of the edge&apos;s endpoints otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_2.h" line="473" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__2_1a298dbffcaa51ef7bba980c6af4498434" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Object" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Object</ref></type>
        <definition>Object CGAL::Regular_triangulation_2&lt; Traits, Tds &gt;::dual</definition>
        <argsstring>(const Edge_circulator &amp;ec) const</argsstring>
        <name>dual</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1a997ed97a0ac906a0342ad18c91a1ec81" kindref="member">Edge_circulator</ref> &amp;</type>
          <declname>ec</declname>
        </param>
        <briefdescription>
<para>Idem. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_2.h" line="478" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__2_1ac03f63085cf8815e18ae628a02adc55d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Object" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Object</ref></type>
        <definition>Object CGAL::Regular_triangulation_2&lt; Traits, Tds &gt;::dual</definition>
        <argsstring>(const Edge_iterator &amp;ei) const</argsstring>
        <name>dual</name>
        <param>
          <type>const Edge_iterator &amp;</type>
          <declname>ei</declname>
        </param>
        <briefdescription>
<para>Idem. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_2.h" line="483" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__2_1ac688f07eea5398a78b17c180d554a78c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Stream</type>
          </param>
        </templateparamlist>
        <type>Stream &amp;</type>
        <definition>Stream&amp; CGAL::Regular_triangulation_2&lt; Traits, Tds &gt;::draw_dual</definition>
        <argsstring>(Stream &amp;ps)</argsstring>
        <name>draw_dual</name>
        <param>
          <type>Stream &amp;</type>
          <declname>ps</declname>
        </param>
        <briefdescription>
<para>output the dual power diagram to stream <computeroutput>ps</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_2.h" line="489" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Predicates</header>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__2_1ae1b834e8242b78216cc469659e9ba765" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1ga5006dd2552d97fa577d81bd819c0f979" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Oriented_side</ref></type>
        <definition>Oriented_side CGAL::Regular_triangulation_2&lt; Traits, Tds &gt;::power_test</definition>
        <argsstring>(Face_handle f, const Weighted_point &amp;p) const</argsstring>
        <name>power_test</name>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Regular__triangulation__2_1aefb33aff2f0f6487d9d091afba872540" kindref="member">Weighted_point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns the power test of <computeroutput>p</computeroutput> with respect to the power circle associated with <computeroutput>f</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_2.h" line="501" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Miscellaneous</header>
      <memberdef kind="function" id="classCGAL_1_1Regular__triangulation__2_1aa733e76552cc4d57baab7f96ed871bb9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Regular_triangulation_2&lt; Traits, Tds &gt;::is_valid</definition>
        <argsstring>(bool verbose=false, int level=0) const</argsstring>
        <name>is_valid</name>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Tests the validity of the triangulation as a <computeroutput><ref refid="classCGAL_1_1Triangulation__2" kindref="compound">Triangulation_2</ref></computeroutput> and additionally test the regularity of the triangulation. </para>        </briefdescription>
        <detaileddescription>
<para>This method is useful to debug regular triangulation algorithms implemented by the user. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Regular_triangulation_2.h" line="515" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The class <computeroutput><ref refid="classCGAL_1_1Regular__triangulation__2" kindref="compound">Regular_triangulation_2</ref></computeroutput> is designed to maintain the regular triangulation of a set of weighted points. </para>    </briefdescription>
    <detaileddescription>
<para>Let <formula id="8">$ { PW} = \{(p_i, w_i), i = 1, \ldots , n \}$</formula> be a set of weighted points where each <formula id="9">$ p_i$</formula> is a point and each <formula id="10">$ w_i$</formula> is a scalar called the weight of point <formula id="9">$ p_i$</formula>. Alternatively, each weighted point <formula id="11">$ (p_i, w_i)$</formula> can be regarded as a two dimensional sphere with center <formula id="9">$ p_i$</formula> and radius <formula id="12">$ r_i=\sqrt{w_i}$</formula>.</para><para>The power diagram of the set <formula id="13">$ { PW}$</formula> is a planar partition such that each cell corresponds to sphere <formula id="11">$ (p_i, w_i)$</formula> of <formula id="13">$ { PW}$</formula> and is the locus of points <formula id="14">$ p$</formula> whose power with respect to <formula id="11">$ (p_i, w_i)$</formula> is less than its power with respect to any other sphere <formula id="15">$ (p_j, w_j)$</formula> in <formula id="13">$ { PW}$</formula>. The dual of this diagram is a triangulation whose domain covers the convex hull of the set <formula id="16">$ { P}= \{ p_i, i = 1, \ldots , n \}$</formula> of center points and whose vertices are a subset of <formula id="17">$ { P}$</formula>. Such a triangulation is called a regular triangulation. The three points <formula id="18">$ p_i, p_j$</formula> and <formula id="19">$ p_k$</formula> of <formula id="17">$ { P}$</formula> form a triangle in the regular triangulation of <formula id="13">$ { PW}$</formula> iff there is a point <formula id="14">$ p$</formula> of the plane whose powers with respect to <formula id="11">$ (p_i, w_i)$</formula>, <formula id="15">$ (p_j, w_j)$</formula> and <formula id="20">$ (p_k, w_k)$</formula> are equal and less than the power of <formula id="14">$ p$</formula> with respect to any other sphere in <formula id="13">$ { PW}$</formula>.</para><para>Let us defined the power product of two weighted points <formula id="11">$ (p_i, w_i)$</formula> and <formula id="15">$ (p_j, w_j)$</formula> as: <formula id="21">\[ \Pi(p_i, w_i,p_j, w_j) = p_ip_j ^2 - w_i - w_j . \]</formula> <formula id="22">$ \Pi(p_i, w_i,p_j, 0)$</formula> is simply the power of point <formula id="23">$ p_j$</formula> with respect to the sphere <formula id="11">$ (p_i, w_i)$</formula>, and two weighted points are said to be orthogonal if their power product is null. The power circle of three weighted points <formula id="11">$ (p_i, w_i)$</formula>, <formula id="15">$ (p_j, w_j)$</formula> and <formula id="20">$ (p_k, w_k)$</formula> is defined as the unique circle <formula id="24">$ (\pi, \omega)$</formula> orthogonal to <formula id="11">$ (p_i, w_i)$</formula>, <formula id="15">$ (p_j, w_j)$</formula> and <formula id="20">$ (p_k, w_k)$</formula>.</para><para>The regular triangulation of the sets <formula id="13">$ { PW}$</formula> satisfies the following <emphasis>regular property</emphasis> (which just reduces to the Delaunay property when all the weights are null): a triangle <formula id="25">$ p_ip_jp_k$</formula> of the regular triangulation of <formula id="13">$ { PW}$</formula> is such that the power product of any weighted point <formula id="26">$ (p_l, w_l)$</formula> of <formula id="13">$ { PW}$</formula> with the power circle of <formula id="11">$ (p_i, w_i)$</formula>, <formula id="15">$ (p_j, w_j)$</formula> is <formula id="20">$ (p_k, w_k)$</formula> is positive or null. We call power test of the weighted point <formula id="26">$ (p_l, w_l)$</formula> with respect to the face <formula id="25">$ p_ip_jp_k$</formula>, the predicates testing the sign of the power product of <formula id="26">$ (p_l, w_l)$</formula> with respect to the power circle of <formula id="11">$ (p_i, w_i)$</formula>, <formula id="15">$ (p_j, w_j)$</formula> is <formula id="20">$ (p_k, w_k)$</formula>. This power product is given by the following determinant <formula id="27">\[ \left| \begin{array}{cccc} 1 &amp; x_i &amp; y_i &amp; x_i ^2 + y_i ^2 - w_i \\ 1 &amp; x_j &amp; y_j &amp; x_j ^2 + y_j ^2 - w_j \\ 1 &amp; x_k &amp; y_k &amp; x_k ^2 + y_k ^2 - w_k \\ 1 &amp; x_l &amp; y_l &amp; x_l ^2 + y_l ^2 - w_l \end{array} \right| \]</formula></para><para>A pair of neighboring faces <formula id="25">$ p_ip_jp_k$</formula> and <formula id="28">$ p_ip_jp_l$</formula> is said to be locally regular (with respect to the weights in <formula id="13">$ { PW}$</formula>) if the power test of <formula id="29">$ (p_l,w_l)$</formula> with respect to <formula id="25">$ p_ip_jp_k$</formula> is positive. A classical result of computational geometry establishes that a triangulation of the convex hull of <formula id="17">$ { P}$</formula> such that any pair of neighboring faces is regular with respect to <formula id="13">$ { PW}$</formula>, is a regular triangulation of <formula id="13">$ { PW}$</formula>.</para><para>Alternatively, the regular triangulation of the weighted points set <formula id="13">$ { PW}$</formula> can be obtained as the projection on the two dimensional plane of the convex hull of the set of three dimensional points <formula id="30">$ { P&apos;}= \{ (p_i,p_i ^2 - w_i ), i = 1, \ldots , n \}$</formula>.</para><para>The vertices of the regular triangulation of a set of weighted points <formula id="13">$ { PW}$</formula> form only a subset of the set of center points of <formula id="13">$ { PW}$</formula>. Therefore the insertion of a weighted point in a regular triangulation does not necessarily imply the creation of a new vertex. If the new inserted point does not appear as a vertex in the regular triangulation, it is said to be hidden.</para><para>Hidden points are stored in special vertices called hidden vertices. A hidden point is considered as hidden by the facet of the triangulation where its point component is located : in fact, the hidden point can appear as vertex of the triangulation only if this facet is removed. Each face of a regular triangulation stores the list of hidden vertices whose points are located in the facet. When a facet is removed, points hidden by this facet are reinserted in the triangulation.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Traits</parametername>
</parameternamelist>
<parameterdescription>
<para>is the geometric traits parameter and must be a model of the concept <computeroutput><ref refid="classRegularTriangulationTraits__2" kindref="compound">RegularTriangulationTraits_2</ref></computeroutput>. The concept <computeroutput><ref refid="classRegularTriangulationTraits__2" kindref="compound">RegularTriangulationTraits_2</ref></computeroutput> refines the concept <computeroutput><ref refid="classTriangulationTraits__2" kindref="compound">TriangulationTraits_2</ref></computeroutput> by adding the type <computeroutput><ref refid="classCGAL_1_1Weighted__point__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Weighted_point_2</ref></computeroutput> to describe weighted points and the type <computeroutput>Power_side_of_oriented_power_circle_2</computeroutput> to perform power tests on weighted points.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Tds</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classTriangulationDataStructure__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/TDS_2.tag">TriangulationDataStructure_2</ref></computeroutput>. The face base of a regular triangulation has to be a model of the concept <computeroutput><ref refid="classRegularTriangulationFaceBase__2" kindref="compound">RegularTriangulationFaceBase_2</ref></computeroutput>. while the vertex base class has to be a model of <computeroutput><ref refid="classRegularTriangulationVertexBase__2" kindref="compound">RegularTriangulationVertexBase_2</ref></computeroutput>. CGAL provides a default instantiation for the <computeroutput>Tds</computeroutput> parameter by the class <computeroutput><ref refid="classCGAL_1_1Triangulation__data__structure__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/TDS_2.tag">Triangulation_data_structure_2</ref> &lt; <ref refid="classCGAL_1_1Regular__triangulation__vertex__base__2" kindref="compound">Regular_triangulation_vertex_base_2</ref>&lt;Traits&gt;, <ref refid="classCGAL_1_1Regular__triangulation__face__base__2" kindref="compound">Regular_triangulation_face_base_2</ref>&lt;Traits&gt; &gt;</computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Triangulation__2" kindref="compound">CGAL::Triangulation_2</ref>&lt;Traits,Tds&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classTriangulationDataStructure__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/TDS_2.tag">TriangulationDataStructure_2</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classRegularTriangulationTraits__2" kindref="compound">RegularTriangulationTraits_2</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classRegularTriangulationFaceBase__2" kindref="compound">RegularTriangulationFaceBase_2</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classRegularTriangulationVertexBase__2" kindref="compound">RegularTriangulationVertexBase_2</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Regular__triangulation__face__base__2" kindref="compound">CGAL::Regular_triangulation_face_base_2</ref>&lt;Traits&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Regular__triangulation__vertex__base__2" kindref="compound">CGAL::Regular_triangulation_vertex_base_2</ref>&lt;Traits&gt;</computeroutput> </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="38">
        <label>CGAL::Triangulation_2&lt; Traits, Tds &gt;</label>
        <link refid="classCGAL_1_1Triangulation__2"/>
        <childnode refid="39" relation="public-inheritance">
        </childnode>
      </node>
      <node id="37">
        <label>CGAL::Regular_triangulation_2&lt; Traits, Tds &gt;</label>
        <link refid="classCGAL_1_1Regular__triangulation__2"/>
        <childnode refid="38" relation="public-inheritance">
        </childnode>
      </node>
      <node id="39">
        <label>CGAL::Triangulation_cw_ccw_2</label>
        <link refid="classCGAL_1_1Triangulation__cw__ccw__2"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="41">
        <label>CGAL::Triangulation_2&lt; Traits, Tds &gt;</label>
        <link refid="classCGAL_1_1Triangulation__2"/>
        <childnode refid="42" relation="public-inheritance">
        </childnode>
      </node>
      <node id="40">
        <label>CGAL::Regular_triangulation_2&lt; Traits, Tds &gt;</label>
        <link refid="classCGAL_1_1Regular__triangulation__2"/>
        <childnode refid="41" relation="public-inheritance">
        </childnode>
      </node>
      <node id="42">
        <label>CGAL::Triangulation_cw_ccw_2</label>
        <link refid="classCGAL_1_1Triangulation__cw__ccw__2"/>
      </node>
    </collaborationgraph>
    <location file="CGAL/Regular_triangulation_2.h" line="136" column="1" bodyfile="CGAL/Regular_triangulation_2.h" bodystart="136" bodyend="519"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Triangulation__2_1a83de89d7d1c6e306b331b7158728bb57" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>all_edges_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1aee85b73cb094f95603939be436e63438" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>all_edges_end</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a5b63aff651ae1e485ea2c7d20421b4b9" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>All_edges_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a93f4b88a11e455e4af2f5442e5d4824d" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>all_faces_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a395ece5a58ae27040ccbbb9503899671" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>all_faces_end</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ae5363996414e60613b556b14a9f87891" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>All_faces_iterator</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__2_1a716b4f1a8137472b58c5a8e04ffbeab2" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>all_vertices_begin</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__2_1a31a9f88f8e7955ac5354a2d171975665" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>all_vertices_end</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__2_1a6d16bed3ff51430152b05eda873f1062" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>All_vertices_iterator</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__2_1ae663c78fd4c5e495ecf7e8e0c4a68121" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>Bare_point</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a38ffc4db3bc10b11ae77bbcd4fe21005" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>ccw</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a4185c75ba2c5ec34181fdef8fa57401c" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>circumcenter</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a031db533d1f567a2c7b0e9736f85a4f1" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>clear</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a49fc8cd3cd899d0c0aa6bc0f20c72a0f" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>cw</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ae837aea43417f936cefb715765d332e1" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>difference_type</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a644f9730fdece05c0e951201e0012805" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>dimension</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__2_1a9dd35445b6959affbe37f00664ba09f5" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>Distance</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__2_1ac688f07eea5398a78b17c180d554a78c" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>draw_dual</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__2_1af13fbc7d6ccade793e20696a14c328d3" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>dual</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__2_1ae6953fb0897a117a70947ca23ac4181c" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>dual</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__2_1a298dbffcaa51ef7bba980c6af4498434" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>dual</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__2_1ac03f63085cf8815e18ae628a02adc55d" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>dual</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ad28c6e0e0e65b8aaecb1ae76d8744b33" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>Edge</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a22dbae3b466c50924759754de5865db6a5111882933f6615f618c8900e2bc6acf" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>EDGE</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a997ed97a0ac906a0342ad18c91a1ec81" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>Edge_circulator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a6c6a38b0ce694a47c2323834107fa758" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>Face</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a22dbae3b466c50924759754de5865db6a937da59ce47b08cfc0d452901e6c3625" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>FACE</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a1bda2ab92ccf638bb22fc223ae281b96" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>Face_circulator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>Face_handle</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a3d7335c51c4c777fec2b9c2560f2635f" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>finite_edges_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a6bd40af3800321a0d0d43f489b37fc2a" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>finite_edges_end</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1af70ca2702b9de4ae712b953f6a94b9a2" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>Finite_edges_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a66241217c984aa597d36d4ff6f0ff3f2" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>finite_faces_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a3df949e116750967bc46db9ba53da7c0" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>finite_faces_end</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a84923815e1cfca537c93cee97c0ed24f" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>Finite_faces_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a78d0a3bd3637897ab1abe06389899b63" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>finite_vertex</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__2_1a5335a03f8d86ba92489e504c56df6c8d" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>finite_vertices_begin</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__2_1ad56f4aeea0ea07f662616469ab598af2" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>finite_vertices_end</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__2_1aaf7b3f6a6288499a36bd8216834e050f" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>Finite_vertices_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1aa47a446fc11809d30146fbcdb689a396" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>flip</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a94f47e3c6bdf5e36ae51180bcd013ad6" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>Geom_traits</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a7b0d7ae604821c821ce2fea5a9536ad6" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>geom_traits</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__2_1a87f0331a55f11d23d7d2a414f30c25aa" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>get_boundary_of_conflicts</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__2_1abb1f2251936c217d1dbc79ae30b32a00" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>get_boundary_of_conflicts_and_hidden_vertices</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__2_1af5b70b2adb1c5bed63cbdba360722870" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>get_conflicts</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__2_1a5b7244b2bb71653f27e4417e8ba66582" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>get_conflicts_and_boundary</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__2_1a46dc71615018af24a84b3a47ee514fb2" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>get_conflicts_and_boundary_and_hidden_vertices</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__2_1a0b640b40c4eac8ece1ecb062bb781f82" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>get_conflicts_and_hidden_vertices</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__2_1a331e6e1a3505964fd87281e8e21cc57d" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>get_hidden_vertices</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__2_1ac0cfbef1539e5d87688e52b75186b5f6" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>hidden_vertices_begin</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__2_1ae6014aaf628273c5dbb384c3aa3c917d" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>hidden_vertices_end</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__2_1af4129dec90bf5dace08e0b99e4f22e57" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>Hidden_vertices_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a1708a62dea4a40f63025848e4afaefa0" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>incident_edges</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a843853eb19644389ba8d6024765eb4f7" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>incident_edges</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a1ca68226e40c30304c4d54685a77a7ca" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>incident_faces</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a341c4f3888b6ede6b9df55c2bb745ca3" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>incident_faces</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1afebc0e18dc93bce4b62b1e06944a6921" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>incident_vertices</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a58c9a0c9f69a356a31c8a7c02eff1841" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>incident_vertices</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a123f9d90c0fbdf6716ff7f14c0ac88bf" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>includes_edge</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a0d62215704e84f18ef9294b27f9e82b0" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>inexact_locate</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a5758b4f843e2d884d759f278e154ed87" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>infinite_face</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ae146d68059cd9d1430bafba2cbe25461" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>infinite_vertex</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__2_1af7c85fa190b96836fb6c6a8704a0171c" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__2_1af84121d48fc9f74a50ad4cd0f2c02c09" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__2_1aff389dbf55d75b55959daeffcfef127c" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__2_1a6cf16173eb2b2fa3c37e643650f27e33" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a1025cd7e7226ccb44d82f0fb1d63ad4e" prot="public" virt="non-virtual" ambiguityscope="CGAL::Triangulation_2::"><scope>CGAL::Regular_triangulation_2</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ab5282f769ba8445b872b4d32e8b38487" prot="public" virt="non-virtual" ambiguityscope="CGAL::Triangulation_2::"><scope>CGAL::Regular_triangulation_2</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a359b4c5e12af04f9235b5f2f42cae709" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>insert_first</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1aefd64b3be7364535e808ed62faaa6a67" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>insert_in_edge</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a8f4a1ca36147ac331db5be089e17a2a5" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>insert_in_face</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ad8a56f1fb051ce731a079671799010de" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>insert_outside_affine_hull</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a2c35ed5fa9ea46b55687c36a4755d592" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>insert_outside_convex_hull</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a6a30184b0267dc1cdc9cc516440cbb4e" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>insert_second</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a37b3896ab3a416fe4adff475ed625e16" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>is_edge</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1adbeb9736f9bfc588658316669cd7fb44" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>is_edge</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a7a94b10ae76a8d4d6e762c19e05b6343" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>is_face</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a4084823ee026d7a00a3991cd2b553fe0" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>is_face</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1acf8596038ef09d0d3ffcba99e912d1da" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1acf8e2ef548683138d8766b6c89794fbb" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a8009eb06cbe50a3fa1358d203a1fa924" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ac7519fb75001a53abba7e8d9127d22c5" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ae4becba370b2929508ec894aa2b0370d" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1aa9ca70cc8b0cb3e0b6c0bf062d710613" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__2_1aa733e76552cc4d57baab7f96ed871bb9" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>is_valid</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__2_1ae61db0f9a4ee41f934f234c2cb38cf44" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>Line</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ad720b1a9adc835ed1a27c228eea1e36c" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>Line_face_circulator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a41a46211193d767f122504f2eb99189a" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>line_walk</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a940567120751e7864c7b345eaf756642" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>locate</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1af61a05a0a53d009e111a3873c1796b52" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>locate</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a22dbae3b466c50924759754de5865db6" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>Locate_type</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ab97ce60b20674d0a7a4455e88c2eadb1" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>mirror_edge</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a9c54807a29595dc1116054cc4ac214fd" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>mirror_index</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a9213aedceda4c17381960d041d4f297a" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>mirror_vertex</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a62de40896ebe056bbf008eb4090eb76b" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>move</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a433cff4ceaeaba390df1a968d93a4899" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>move_if_no_collision</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__2_1acba4995cf4efa5b1f3df89c85b4a9e98" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>nearest_power_vertex</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ab18fcf7127c007253348fcfb37b67df4" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>number_of_faces</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__2_1acb93618556e2e6f6f2a439e05ea7bdf5" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>number_of_hidden_vertices</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__2_1a1cb23f4ddf072ce8a99dafffaab41531" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>number_of_vertices</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ac7351668deed7464974684ab3c7147ea" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>operator&lt;&lt;</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a40701ad345813f8df044fd197d3c9d96" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>operator=</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a8dc99f907cc125ce7a55024da5ddb4c0" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>operator&gt;&gt;</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a01fbafc011677846a729a809b4b21a99" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>oriented_side</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a22dbae3b466c50924759754de5865db6ae8b775f120094d9b0a6871f53446184f" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>OUTSIDE_AFFINE_HULL</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a22dbae3b466c50924759754de5865db6afd690e18b1d2857068085d771fc354d4" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>OUTSIDE_CONVEX_HULL</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>Point</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a06ec87f55894738972350f631f6dc1fe" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>Point_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a048beaadce99c9bdfeaa69dd68701c32" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>points_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1adb17161924b6d2b6e7ac537d6b760728" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>points_end</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__2_1ae1b834e8242b78216cc469659e9ba765" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>power_test</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__2_1a1e25076b21dcd8777d78328548cec377" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>push_back</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__2_1a5f06adae38f48d10cb02b258a1060d54" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>Ray</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__2_1aaecc0d4e13c9c614f450e3a87ff5d003" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>Regular_triangulation_2</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__2_1ac5c3a21d620925951677fb5bce91ebdb" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>Regular_triangulation_2</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__2_1af5bf27f22b396f2a82e066d4094b4d3f" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>Regular_triangulation_2</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__2_1a872a40ea550d69b0ba04cacd5d7f52e5" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>remove</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a4b3389b24fe7bfe703151375d15a745a" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>remove_degree_3</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ac00496f74f7d05465407861f5a447768" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>remove_first</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a44461f8dc31540c015f24ee3d36870ab" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>remove_second</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ac3beee6618a86505bfc03bcbfbb46a4a" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>segment</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a06f3967c92db0fe28368c31ff671c658" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>segment</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ad43c112fe392ea9194b449e6116499c5" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>segment</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1afd84762f5a856ebdbd9786de8744feda" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>segment</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ae7b5594c15ef61394d76826e1fc1e8e6" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>Segment</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a25a5eaabf6ba1d9c9acf240b4453c09a" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>set_infinite_vertex</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1abc885b3d116e1d0b6943b211e750e472" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>side_of_oriented_circle</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1aa7b0b96c9ed11cab337313f34cd96a59" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>size_type</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a8b058b055ef24a4b6fc25bf110e46638" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>star_hole</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a4511afae77c0c2978b6412d9411e4fe2" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>star_hole</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a1788d6ffa3f5986b2b07e7e0b48a2ffc" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>swap</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1afb8abca60f08ed498b54bd1992f56d28" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>tds</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ac091a355bc30d57601d2419a5807c906" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>tds</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a176b3903b04aaad6996d1c2a56a14dcc" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>triangle</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a48984e6735c075b17d7a956cb396d1f5" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>Triangle</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a97deb44f4edfb6baa30c12a22f928dc7" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>Triangulation_2</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a6e43f49405b43057d1b911a9f6e39404" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>Triangulation_2</name></member>
      <member refid="classCGAL_1_1Triangulation__cw__ccw__2_1a7069704014f0d62aa327453e5bcfb44d" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>Triangulation_cw_ccw_2</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1addbcd86ae5679a10363f46080159d00d" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>Triangulation_data_structure</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a22dbae3b466c50924759754de5865db6a4fc5b644a7c38197036955ba1662afe5" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>VERTEX</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1af48b3f6c165d50c74fe67a75caec129a" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>Vertex</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ade901d47c7c422f7978adf3ac0188a9d" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>Vertex_circulator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>Vertex_handle</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__2_1a0611f91a79631094cba26f5a9ebbd4e9" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>weighted_circumcenter</name></member>
      <member refid="classCGAL_1_1Regular__triangulation__2_1aefb33aff2f0f6487d9d091afba872540" prot="public" virt="non-virtual"><scope>CGAL::Regular_triangulation_2</scope><name>Weighted_point</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
