<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Constrained__Delaunay__triangulation__2" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Constrained_Delaunay_triangulation_2</compoundname>
    <basecompoundref refid="classCGAL_1_1Constrained__triangulation__2" prot="public" virt="non-virtual">CGAL::Constrained_triangulation_2&lt; Traits, Tds, Itag &gt;</basecompoundref>
    <includes local="no">CGAL/Constrained_Delaunay_triangulation_2.h</includes>
    <templateparamlist>
      <param>
        <type>typename Traits</type>
      </param>
      <param>
        <type>typename Tds</type>
      </param>
      <param>
        <type>typename Itag</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Constrained__Delaunay__triangulation__2_1a5fb5d57653e99b4f7821a3daa67f15cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Constrained_Delaunay_triangulation_2&lt; Traits, Tds, Itag &gt;::Constrained_Delaunay_triangulation_2</definition>
        <argsstring>(const Traits &amp;t=Traits())</argsstring>
        <name>Constrained_Delaunay_triangulation_2</name>
        <param>
          <type>const Traits &amp;</type>
          <declname>t</declname>
          <defval>Traits()</defval>
        </param>
        <briefdescription>
<para>Introduces an empty constrained Delaunay triangulation <computeroutput>cdt</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_Delaunay_triangulation_2.h" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Constrained__Delaunay__triangulation__2_1ae65da02e587bf8e107ccf7b728d72cec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Constrained_Delaunay_triangulation_2&lt; Traits, Tds, Itag &gt;::Constrained_Delaunay_triangulation_2</definition>
        <argsstring>(const Constrained_Delaunay_triangulation_2 &amp;cdt1)</argsstring>
        <name>Constrained_Delaunay_triangulation_2</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Constrained__Delaunay__triangulation__2" kindref="compound">Constrained_Delaunay_triangulation_2</ref> &amp;</type>
          <declname>cdt1</declname>
        </param>
        <briefdescription>
<para>Copy constructor: All faces and vertices are duplicated and the constrained status of edges is copied. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_Delaunay_triangulation_2.h" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Constrained__Delaunay__triangulation__2_1a720b8ce2815e138f2d48169abb76d445" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ConstraintIterator</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>CGAL::Constrained_Delaunay_triangulation_2&lt; Traits, Tds, Itag &gt;::Constrained_Delaunay_triangulation_2</definition>
        <argsstring>(ConstraintIterator first, ConstraintIterator last, const Traits &amp;t=Traits())</argsstring>
        <name>Constrained_Delaunay_triangulation_2</name>
        <param>
          <type>ConstraintIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ConstraintIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>t</declname>
          <defval>Traits()</defval>
        </param>
        <briefdescription>
<para>Builds a constrained triangulation with constraints in the range <computeroutput>[first,last)</computeroutput> by calling <computeroutput>insert_constraints(first, last)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ConstraintIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be an <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput> with the value type <computeroutput>std::pair&lt;Point,Point&gt;</computeroutput> or <computeroutput>Segment</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_Delaunay_triangulation_2.h" line="116" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Insertion and Removal</header>
      <description><para>The following member functions overwrite the corresponding members of the base class to include a step restoring the Delaunay constrained property after modification of the triangulation. </para></description>
      <memberdef kind="function" id="classCGAL_1_1Constrained__Delaunay__triangulation__2_1ae157cc826f847c3c781c9e29497c05bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Constrained_Delaunay_triangulation_2&lt; Traits, Tds, Itag &gt;::insert</definition>
        <argsstring>(Point p, Face_handle f=Face_handle())</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
          <defval><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref>()</defval>
        </param>
        <briefdescription>
<para>Inserts point <computeroutput>p</computeroutput> in the triangulation, with face <computeroutput>f</computeroutput> as a hint for the location of <computeroutput>p</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_Delaunay_triangulation_2.h" line="133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Constrained__Delaunay__triangulation__2_1ac9d89bbfd82eb5d38ccffd040eb3ebe3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Constrained_Delaunay_triangulation_2&lt; Traits, Tds, Itag &gt;::insert</definition>
        <argsstring>(const Point &amp;p, Locate_type lt, Face_handle loc, int li)</argsstring>
        <name>insert</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1a22dbae3b466c50924759754de5865db6" kindref="member">Locate_type</ref></type>
          <declname>lt</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>loc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>li</declname>
        </param>
        <briefdescription>
<para>Inserts point <computeroutput>p</computeroutput> in the triangulation at the location given by <computeroutput>(lt,loc,i)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Triangulation__2_1a940567120751e7864c7b345eaf756642" kindref="member">Triangulation_2::locate()</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_Delaunay_triangulation_2.h" line="140" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Constrained__Delaunay__triangulation__2_1a32c5552b6f44911fd6cec57a21557251" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Constrained_Delaunay_triangulation_2&lt; Traits, Tds, Itag &gt;::push_back</definition>
        <argsstring>(const Point &amp;p)</argsstring>
        <name>push_back</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Equivalent to <computeroutput>insert(p)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_Delaunay_triangulation_2.h" line="147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Constrained__Delaunay__triangulation__2_1abc13da95fa9146b392d4caafe0eb9a74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PointIterator</type>
          </param>
        </templateparamlist>
        <type>std::ptrdiff_t</type>
        <definition>std::ptrdiff_t CGAL::Constrained_Delaunay_triangulation_2&lt; Traits, Tds, Itag &gt;::insert</definition>
        <argsstring>(PointIterator first, PointIterator last)</argsstring>
        <name>insert</name>
        <param>
          <type>PointIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>PointIterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Inserts the points in the range <computeroutput>[first,last)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the number of inserted points. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be an <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput> with the value type <computeroutput>Point</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_Delaunay_triangulation_2.h" line="156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Constrained__Delaunay__triangulation__2_1a39734a9d8817729037b36c2b60641fbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PointWithInfoIterator</type>
          </param>
        </templateparamlist>
        <type>std::ptrdiff_t</type>
        <definition>std::ptrdiff_t CGAL::Constrained_Delaunay_triangulation_2&lt; Traits, Tds, Itag &gt;::insert</definition>
        <argsstring>(PointWithInfoIterator first, PointWithInfoIterator last)</argsstring>
        <name>insert</name>
        <param>
          <type>PointWithInfoIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>PointWithInfoIterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>inserts the points in the iterator range <computeroutput>[first,last)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the number of inserted points. Note that this function is not guaranteed to insert the points following the order of <computeroutput>PointWithInfoIterator</computeroutput>, as <computeroutput><ref refid="group__PkgSpatialSortingFunctions_1ga2f4d770272b84481f7c4c9b20b7174c7" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Spatial_sorting.tag">spatial_sort()</ref></computeroutput> is used to improve efficiency. Given a pair <computeroutput>(p,i)</computeroutput>, the vertex <computeroutput>v</computeroutput> storing <computeroutput>p</computeroutput> also stores <computeroutput>i</computeroutput>, that is <computeroutput>v.point() == p</computeroutput> and <computeroutput>v.info() == i</computeroutput>. If several pairs have the same point, only one vertex is created, and one of the objects of type <computeroutput>Vertex::Info</computeroutput> will be stored in the vertex. <simplesect kind="pre"><para><computeroutput>Vertex</computeroutput> must be model of the concept <computeroutput><ref refid="classTriangulationVertexBaseWithInfo__2" kindref="compound">TriangulationVertexBaseWithInfo_2</ref></computeroutput>.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointWithInfoIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be an <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput> with the value type <computeroutput>std::pair&lt;Point,Vertex::Info&gt;</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_Delaunay_triangulation_2.h" line="173" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Constrained__Delaunay__triangulation__2_1a4374cf307382b6ceee07db4bdc1e4e61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Constrained_Delaunay_triangulation_2&lt; Traits, Tds, Itag &gt;::insert_constraint</definition>
        <argsstring>(Point a, Point b)</argsstring>
        <name>insert_constraint</name>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Inserts the line segment <computeroutput>ab</computeroutput> as a constraint in the triangulation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_Delaunay_triangulation_2.h" line="178" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Constrained__Delaunay__triangulation__2_1a439d8b9bbae5cca46643714653aa3daf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Constrained_Delaunay_triangulation_2&lt; Traits, Tds, Itag &gt;::push_back</definition>
        <argsstring>(const std::pair&lt; Point, Point &gt; &amp;c)</argsstring>
        <name>push_back</name>
        <param>
          <type>const std::pair&lt; <ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref>, <ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref> &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Inserts the line segment between the points <computeroutput>c.first</computeroutput> and <computeroutput>c.second</computeroutput> as a constraint in the triangulation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_Delaunay_triangulation_2.h" line="183" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Constrained__Delaunay__triangulation__2_1acd1f7edafecd48ea978e43c98c87172e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Constrained_Delaunay_triangulation_2&lt; Traits, Tds, Itag &gt;::insert_constraint</definition>
        <argsstring>(Vertex_handle va, Vertex_handle vb)</argsstring>
        <name>insert_constraint</name>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
          <declname>va</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
          <declname>vb</declname>
        </param>
        <briefdescription>
<para>Inserts the line segment whose endpoints are the vertices <computeroutput>va</computeroutput> and <computeroutput>vb</computeroutput> as a constraint in the triangulation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_Delaunay_triangulation_2.h" line="190" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Constrained__Delaunay__triangulation__2_1acc9e0ac49922f90f7418548a40f6a6c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PointIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Constrained_Delaunay_triangulation_2&lt; Traits, Tds, Itag &gt;::insert_constraint</definition>
        <argsstring>(PointIterator first, PointIterator last, bool close=false)</argsstring>
        <name>insert_constraint</name>
        <param>
          <type>PointIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>PointIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>close</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Inserts a polyline defined by the points in the range <computeroutput>[first,last)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The polyline is considered as a polygon if the first and last point are equal or if <computeroutput>close = true</computeroutput>. This enables for example passing the vertex range of a <computeroutput><ref refid="classCGAL_1_1Polygon__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polygon.tag">Polygon_2</ref></computeroutput>. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be an <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput> with the value type <computeroutput>Point</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_Delaunay_triangulation_2.h" line="198" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Constrained__Delaunay__triangulation__2_1a2fa90339d0c18d07c60857fe42acab2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ConstraintIterator</type>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Constrained_Delaunay_triangulation_2&lt; Traits, Tds, Itag &gt;::insert_constraints</definition>
        <argsstring>(ConstraintIterator first, ConstraintIterator last)</argsstring>
        <name>insert_constraints</name>
        <param>
          <type>ConstraintIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ConstraintIterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>inserts the constraints in the range <computeroutput>[first,last)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Note that this function is not guaranteed to insert the constraints following the order of <computeroutput>ConstraintIterator</computeroutput>, as <computeroutput><ref refid="group__PkgSpatialSortingFunctions_1ga2f4d770272b84481f7c4c9b20b7174c7" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Spatial_sorting.tag">spatial_sort()</ref></computeroutput> is used to improve efficiency. More precisely, all endpoints are inserted prior to the segments and according to the order provided by the spatial sort. Once endpoints have been inserted, the segments are inserted in the order of the input iterator, using the vertex handles of its endpoints.</para><para><simplesect kind="return"><para>the number of inserted points. </para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ConstraintIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be an <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput> with the value type <computeroutput>std::pair&lt;Point,Point&gt;</computeroutput> or <computeroutput>Segment</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_Delaunay_triangulation_2.h" line="214" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Constrained__Delaunay__triangulation__2_1a3707074708b073b8526d5d7d0f03fbb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PointIterator</type>
          </param>
          <param>
            <type>class IndicesIterator</type>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Constrained_Delaunay_triangulation_2&lt; Traits, Tds, Itag &gt;::insert_constraints</definition>
        <argsstring>(PointIterator points_first, PointIterator points_last, IndicesIterator indices_first, IndicesIterator indices_last)</argsstring>
        <name>insert_constraints</name>
        <param>
          <type>PointIterator</type>
          <declname>points_first</declname>
        </param>
        <param>
          <type>PointIterator</type>
          <declname>points_last</declname>
        </param>
        <param>
          <type>IndicesIterator</type>
          <declname>indices_first</declname>
        </param>
        <param>
          <type>IndicesIterator</type>
          <declname>indices_last</declname>
        </param>
        <briefdescription>
<para>Same as above except that each constraints is given as a pair of indices of the points in the range [points_first, points_last). </para>        </briefdescription>
        <detaileddescription>
<para>The indices must go from 0 to <computeroutput>std::distance(points_first, points_last)</computeroutput> <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>is an <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput> with the value type <computeroutput>Point</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IndicesIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>is an <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput> with <computeroutput>std::pair&lt;Int, Int&gt;</computeroutput> where <computeroutput>Int</computeroutput> is an integral type implicitly convertible to <computeroutput>std::size_t</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_Delaunay_triangulation_2.h" line="223" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Constrained__Delaunay__triangulation__2_1af771142d9573bf2a3024b65a431733e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Constrained_Delaunay_triangulation_2&lt; Traits, Tds, Itag &gt;::remove</definition>
        <argsstring>(Vertex_handle &amp;v)</argsstring>
        <name>remove</name>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Removes vertex v. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>Vertex <computeroutput>v</computeroutput> is not incident to a constrained edge. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_Delaunay_triangulation_2.h" line="232" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Constrained__Delaunay__triangulation__2_1a670c69207373e02ebe2a8c0b54bd0165" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Constrained_Delaunay_triangulation_2&lt; Traits, Tds, Itag &gt;::remove_incident_constraints</definition>
        <argsstring>(Vertex_handle v)</argsstring>
        <name>remove_incident_constraints</name>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Make the edges incident to vertex <computeroutput>v</computeroutput> unconstrained edges. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_Delaunay_triangulation_2.h" line="237" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Constrained__Delaunay__triangulation__2_1ad352d91f497094b8f36ba873a4ffe025" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Constrained_Delaunay_triangulation_2&lt; Traits, Tds, Itag &gt;::remove_constraint</definition>
        <argsstring>(const Face_handle &amp;f, int i)</argsstring>
        <name>remove_constraint</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Make the edge <computeroutput>(f,i)</computeroutput> unconstrained. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_Delaunay_triangulation_2.h" line="242" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Queries</header>
      <description><para>The following template member functions query the set of faces in conflict with a point <computeroutput>p</computeroutput>.</para><para>The notion of conflict refers here to a constrained Delaunay setting which means the following. Constrained edges are considered as visibility obstacles and a point <computeroutput>p</computeroutput> is considered to be in conflict with a face <computeroutput>f</computeroutput> iff it is visible from the interior of <computeroutput>f</computeroutput> and included in the circumcircle of <computeroutput>f</computeroutput>. </para></description>
      <memberdef kind="function" id="classCGAL_1_1Constrained__Delaunay__triangulation__2_1a5a92ab29d7106464f2d59a6386c91ba2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OutputItFaces</type>
          </param>
          <param>
            <type>class OutputItBoundaryEdges</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; OutputItFaces, OutputItBoundaryEdges &gt;</type>
        <definition>std::pair&lt;OutputItFaces,OutputItBoundaryEdges&gt; CGAL::Constrained_Delaunay_triangulation_2&lt; Traits, Tds, Itag &gt;::get_conflicts_and_boundary</definition>
        <argsstring>(const Point &amp;p, OutputItFaces fit, OutputItBoundaryEdges eit, Face_handle start) const</argsstring>
        <name>get_conflicts_and_boundary</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>OutputItFaces</type>
          <declname>fit</declname>
        </param>
        <param>
          <type>OutputItBoundaryEdges</type>
          <declname>eit</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>start</declname>
        </param>
        <briefdescription>
<para>outputs the faces and boundary edges of the conflict zone of point <computeroutput>p</computeroutput> into output iterators. </para>        </briefdescription>
        <detaileddescription>
<para>This function outputs in the container pointed to by <computeroutput>fit</computeroutput> the faces which are in conflict with point <computeroutput>p</computeroutput>. It outputs in the container pointed to by <computeroutput>eit</computeroutput> the boundary of the zone in conflict with <computeroutput>p</computeroutput>. The boundary edges of the conflict zone are output in counterclockwise order and each edge is described through its incident face which is not in conflict with <computeroutput>p</computeroutput>. The function returns in a <computeroutput>std::pair</computeroutput> the resulting output iterators.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OutItFaces</parametername>
</parameternamelist>
<parameterdescription>
<para>is an <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> with the value type <computeroutput>Face_handle</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutItBoundaryEdges</parametername>
</parameternamelist>
<parameterdescription>
<para>is an <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> with the value type <computeroutput>Edge</computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput><ref refid="classCGAL_1_1Triangulation__2_1a644f9730fdece05c0e951201e0012805" kindref="member">dimension()</ref>==2</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_Delaunay_triangulation_2.h" line="277" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Constrained__Delaunay__triangulation__2_1a0f36f8ce1c2a362a3f3cbe0dfece6865" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OutputItFaces</type>
          </param>
        </templateparamlist>
        <type>OutputItFaces</type>
        <definition>OutputItFaces CGAL::Constrained_Delaunay_triangulation_2&lt; Traits, Tds, Itag &gt;::get_conflicts</definition>
        <argsstring>(const Point &amp;p, OutputItFaces fit, Face_handle start) const</argsstring>
        <name>get_conflicts</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>OutputItFaces</type>
          <declname>fit</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>start</declname>
        </param>
        <briefdescription>
<para>outputs the faces of the conflict zone of point <computeroutput>p</computeroutput> into an output iterator. </para>        </briefdescription>
        <detaileddescription>
<para>Same as <computeroutput>get_conflicts_and_boundary</computeroutput> except that only the faces in conflict with <computeroutput>p</computeroutput> are output. The function returns the resulting output iterator. <simplesect kind="pre"><para><computeroutput><ref refid="classCGAL_1_1Triangulation__2_1a644f9730fdece05c0e951201e0012805" kindref="member">dimension()</ref>==2</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_Delaunay_triangulation_2.h" line="291" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Constrained__Delaunay__triangulation__2_1aebdcf4d3e925c8dd4f6a4b1d95f90357" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OutputItBoundaryEdges</type>
          </param>
        </templateparamlist>
        <type>OutputItBoundaryEdges</type>
        <definition>OutputItBoundaryEdges CGAL::Constrained_Delaunay_triangulation_2&lt; Traits, Tds, Itag &gt;::get_boundary_of_conflicts</definition>
        <argsstring>(const Point &amp;p, OutputItBoundaryEdges eit, Face_handle start) const</argsstring>
        <name>get_boundary_of_conflicts</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>OutputItBoundaryEdges</type>
          <declname>eit</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>start</declname>
        </param>
        <briefdescription>
<para>outputs the boundary edges of the conflict zone of point <computeroutput>p</computeroutput> into an output iterator. </para>        </briefdescription>
        <detaileddescription>
<para>This functions outputs in the container pointed to by <computeroutput>eit</computeroutput>, the boundary of the zone in conflict with <computeroutput>p</computeroutput>. The boundary edges of the conflict zone are output in counter-clockwise order and each edge is described through the incident face which is not in conflict with <computeroutput>p</computeroutput>. The function returns the resulting output iterator. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OutputItBoundaryEdges</parametername>
</parameternamelist>
<parameterdescription>
<para>is an <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> with the value type <computeroutput>Edge</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_Delaunay_triangulation_2.h" line="309" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Checking</header>
      <memberdef kind="function" id="classCGAL_1_1Constrained__Delaunay__triangulation__2_1a2ca5f487ca99082ea84a3654aad3743f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Constrained_Delaunay_triangulation_2&lt; Traits, Tds, Itag &gt;::is_valid</definition>
        <argsstring>() const</argsstring>
        <name>is_valid</name>
        <briefdescription>
<para>checks if the triangulation is valid and if each constrained edge is consistently marked constrained in its two incident faces. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_Delaunay_triangulation_2.h" line="322" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Flips</header>
      <memberdef kind="function" id="classCGAL_1_1Constrained__Delaunay__triangulation__2_1a2bfd91c9e57ce01f5c231557b9c5a392" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Constrained_Delaunay_triangulation_2&lt; Traits, Tds, Itag &gt;::is_flipable</definition>
        <argsstring>(Face_handle f, int i) const</argsstring>
        <name>is_flipable</name>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>determines if edge <computeroutput>(f,i)</computeroutput> can be flipped. </para>        </briefdescription>
        <detaileddescription>
<para></para><para>Returns true if edge <computeroutput>(f,i)</computeroutput> is not constrained and the circle circumscribing <computeroutput>f</computeroutput> contains the vertex of <computeroutput>f-&gt;neighbor(i)</computeroutput> opposite to edge <computeroutput>(f,i)</computeroutput>.  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_Delaunay_triangulation_2.h" line="338" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Constrained__Delaunay__triangulation__2_1ad689e8a731c7b81f7643eb1115d8ecfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Constrained_Delaunay_triangulation_2&lt; Traits, Tds, Itag &gt;::flip</definition>
        <argsstring>(Face_handle &amp;f, int i)</argsstring>
        <name>flip</name>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>This is an advanced function. </para>        </briefdescription>
        <detaileddescription>
<para></para><para>Flip <computeroutput>f</computeroutput> and <computeroutput>f-&gt;neighbor(i)</computeroutput>.  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_Delaunay_triangulation_2.h" line="346" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Constrained__Delaunay__triangulation__2_1ae990fb337d68ba827ba040966b3dc86d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Constrained_Delaunay_triangulation_2&lt; Traits, Tds, Itag &gt;::propagating_flip</definition>
        <argsstring>(List_edges &amp;edges)</argsstring>
        <name>propagating_flip</name>
        <param>
          <type>List_edges &amp;</type>
          <declname>edges</declname>
        </param>
        <briefdescription>
<para>makes the triangulation constrained Delaunay by flipping edges. </para>        </briefdescription>
        <detaileddescription>
<para></para><para>The list <computeroutput>edges</computeroutput> contains an initial list of edges to be flipped. The returned triangulation is constrained Delaunay if the initial list contains at least all the edges of the input triangulation that failed to be constrained Delaunay. (An edge is said to be constrained Delaunay if it is either constrained or locally Delaunay.)  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Constrained_Delaunay_triangulation_2.h" line="360" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A constrained Delaunay triangulation is a triangulation with constrained edges which tries to be as much Delaunay as possible. </para>    </briefdescription>
    <detaileddescription>
<para>Constrained edges are not necessarily Delaunay edges, therefore a constrained Delaunay triangulation is not a Delaunay triangulation. A constrained Delaunay is a triangulation whose faces do not necessarily fulfill the empty circle property but fulfill a weaker property called the <emphasis>constrained empty circle</emphasis>. To state this property, it is convenient to think of constrained edges as blocking the view. Then, a triangulation is constrained Delaunay if the circumscribing circle of any of its triangular faces includes in its interior no vertex that is visible from the interior of the triangle.</para><para>As in the case of constrained triangulations, three different versions of Delaunay constrained triangulations are offered depending on whether the user wishes to handle intersecting input constraints or not.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Traits</parametername>
</parameternamelist>
<parameterdescription>
<para>is the geometric traits of a constrained Delaunay triangulation. It must be a model of <computeroutput><ref refid="classDelaunayTriangulationTraits__2" kindref="compound">DelaunayTriangulationTraits_2</ref></computeroutput>, providing the <computeroutput>side_of_oriented_circle</computeroutput> test of a Delaunay triangulation. When intersection of input constraints are supported, the geometric traits class is required to provide additional function object types to compute the intersection of two segments. and has then to be also a model of the concept <computeroutput><ref refid="classConstrainedTriangulationTraits__2" kindref="compound">ConstrainedTriangulationTraits_2</ref></computeroutput>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Tds</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classTriangulationDataStructure__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/TDS_2.tag">TriangulationDataStructure_2</ref></computeroutput>or <computeroutput><ref refid="structCGAL_1_1Default" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Default</ref></computeroutput>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Itag</parametername>
</parameternamelist>
<parameterdescription>
<para>allows to select if intersecting constraints are supported and how they are handled.<itemizedlist>
<listitem><para><computeroutput><ref refid="structCGAL_1_1No__intersection__tag" kindref="compound">No_intersection_tag</ref></computeroutput> if intersections of input constraints are disallowed,</para></listitem><listitem><para><computeroutput><ref refid="structCGAL_1_1Exact__predicates__tag" kindref="compound">Exact_predicates_tag</ref></computeroutput> allows intersections between input constraints and is to be used when the traits class provides exact predicates but approximate constructions of the intersection points,</para></listitem><listitem><para><computeroutput><ref refid="structCGAL_1_1Exact__intersections__tag" kindref="compound">Exact_intersections_tag</ref></computeroutput> allows intersections between input constraints and is to be used in conjunction with an exact arithmetic type.</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
A constrained Delaunay triangulation is not a Delaunay triangulation but it is a constrained triangulation. Therefore the class <computeroutput><ref refid="classCGAL_1_1Constrained__Delaunay__triangulation__2" kindref="compound">Constrained_Delaunay_triangulation_2</ref></computeroutput> derives from the class <computeroutput><ref refid="classCGAL_1_1Constrained__triangulation__2" kindref="compound">Constrained_triangulation_2</ref>&lt;Traits,Tds&gt;</computeroutput>. Also, information about the status (constrained or not) of the edges of the triangulation is stored in the faces. Thus the nested <computeroutput>Face</computeroutput> type of a constrained triangulation offers additional functionalities to deal with this information. These additional functionalities induce additional requirements on the base face class plugged into the triangulation data structure of a constrained Delaunay triangulation. The base face of a constrained Delaunay triangulation has to be a model of the concept <computeroutput><ref refid="classConstrainedTriangulationFaceBase__2" kindref="compound">ConstrainedTriangulationFaceBase_2</ref></computeroutput>.</para><para>CGAL provides a default for the template parameters. If <computeroutput>Gt</computeroutput> is the geometric traits parameter, the default for <computeroutput><ref refid="classConstrainedTriangulationFaceBase__2" kindref="compound">ConstrainedTriangulationFaceBase_2</ref></computeroutput> is the class <computeroutput><ref refid="classCGAL_1_1Constrained__triangulation__face__base__2" kindref="compound">Constrained_triangulation_face_base_2</ref>&lt;Gt&gt;</computeroutput> and the default for the triangulation data structure parameter is the class <computeroutput><ref refid="classCGAL_1_1Triangulation__data__structure__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/TDS_2.tag">Triangulation_data_structure_2</ref>&lt; <ref refid="classCGAL_1_1Triangulation__vertex__base__2" kindref="compound">CGAL::Triangulation_vertex_base_2</ref>&lt;Gt&gt;, <ref refid="classCGAL_1_1Constrained__triangulation__face__base__2" kindref="compound">Constrained_triangulation_face_base_2</ref>&lt;Gt&gt; &gt;</computeroutput>. The default intersection tag is <computeroutput><ref refid="structCGAL_1_1No__intersection__tag" kindref="compound">No_intersection_tag</ref></computeroutput>.</para><para><bold>Types</bold><linebreak/>
</para><para>All types used in this class are inherited from the base class <computeroutput><ref refid="classCGAL_1_1Constrained__triangulation__2" kindref="compound">Constrained_triangulation_2</ref>&lt;Traits,Tds,Itag&gt;</computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Constrained__triangulation__2" kindref="compound">CGAL::Constrained_triangulation_2</ref>&lt;Traits,Tds,Itag&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classTriangulationDataStructure__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/TDS_2.tag">TriangulationDataStructure_2</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classDelaunayTriangulationTraits__2" kindref="compound">DelaunayTriangulationTraits_2</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classConstrainedTriangulationTraits__2" kindref="compound">ConstrainedTriangulationTraits_2</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classConstrainedDelaunayTriangulationTraits__2" kindref="compound">ConstrainedDelaunayTriangulationTraits_2</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classConstrainedTriangulationFaceBase__2" kindref="compound">ConstrainedTriangulationFaceBase_2</ref></computeroutput> </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>CGAL::Triangulation_2&lt; Traits, Tds &gt;</label>
        <link refid="classCGAL_1_1Triangulation__2"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>CGAL::Triangulation_cw_ccw_2</label>
        <link refid="classCGAL_1_1Triangulation__cw__ccw__2"/>
      </node>
      <node id="1">
        <label>CGAL::Constrained_triangulation_2&lt; Traits, Tds, Itag &gt;</label>
        <link refid="classCGAL_1_1Constrained__triangulation__2"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="0">
        <label>CGAL::Constrained_Delaunay_triangulation_2&lt; Traits, Tds, Itag &gt;</label>
        <link refid="classCGAL_1_1Constrained__Delaunay__triangulation__2"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6">
        <label>CGAL::Triangulation_2&lt; Traits, Tds &gt;</label>
        <link refid="classCGAL_1_1Triangulation__2"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>CGAL::Triangulation_cw_ccw_2</label>
        <link refid="classCGAL_1_1Triangulation__cw__ccw__2"/>
      </node>
      <node id="5">
        <label>CGAL::Constrained_triangulation_2&lt; Traits, Tds, Itag &gt;</label>
        <link refid="classCGAL_1_1Constrained__triangulation__2"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>CGAL::Constrained_Delaunay_triangulation_2&lt; Traits, Tds, Itag &gt;</label>
        <link refid="classCGAL_1_1Constrained__Delaunay__triangulation__2"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="CGAL/Constrained_Delaunay_triangulation_2.h" line="91" column="1" bodyfile="CGAL/Constrained_Delaunay_triangulation_2.h" bodystart="91" bodyend="364"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Triangulation__2_1a83de89d7d1c6e306b331b7158728bb57" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>all_edges_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1aee85b73cb094f95603939be436e63438" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>all_edges_end</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a5b63aff651ae1e485ea2c7d20421b4b9" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>All_edges_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a93f4b88a11e455e4af2f5442e5d4824d" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>all_faces_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a395ece5a58ae27040ccbbb9503899671" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>all_faces_end</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ae5363996414e60613b556b14a9f87891" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>All_faces_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1adb9bbf3918a8081d21fc0c1de20b157e" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>all_vertices_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a99d052d1f8a1f99c8defec48604192f5" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>all_vertices_end</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a1d4600a9428fed798c112964ba57d9f1" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>All_vertices_iterator</name></member>
      <member refid="classCGAL_1_1Constrained__triangulation__2_1a708bba1dbb87720334965f9a3ab5dea1" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>are_there_incident_constraints</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a38ffc4db3bc10b11ae77bbcd4fe21005" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>ccw</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a4185c75ba2c5ec34181fdef8fa57401c" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>circumcenter</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a031db533d1f567a2c7b0e9736f85a4f1" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>clear</name></member>
      <member refid="classCGAL_1_1Constrained__Delaunay__triangulation__2_1a5fb5d57653e99b4f7821a3daa67f15cb" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>Constrained_Delaunay_triangulation_2</name></member>
      <member refid="classCGAL_1_1Constrained__Delaunay__triangulation__2_1ae65da02e587bf8e107ccf7b728d72cec" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>Constrained_Delaunay_triangulation_2</name></member>
      <member refid="classCGAL_1_1Constrained__Delaunay__triangulation__2_1a720b8ce2815e138f2d48169abb76d445" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>Constrained_Delaunay_triangulation_2</name></member>
      <member refid="classCGAL_1_1Constrained__triangulation__2_1a7a2b63651a821648ead9f485ca869396" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>constrained_edges_begin</name></member>
      <member refid="classCGAL_1_1Constrained__triangulation__2_1af54645071a20783fed21dc7d26e42eea" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>constrained_edges_end</name></member>
      <member refid="classCGAL_1_1Constrained__triangulation__2_1a44977d249f0000aa8e89d087630aa2ce" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>Constrained_edges_iterator</name></member>
      <member refid="classCGAL_1_1Constrained__triangulation__2_1a1c8b3c488ae0ebf4c01543b7b3060c33" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>Constrained_triangulation_2</name></member>
      <member refid="classCGAL_1_1Constrained__triangulation__2_1aefccee0a7e957d288711af17abb93aa9" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>Constrained_triangulation_2</name></member>
      <member refid="classCGAL_1_1Constrained__triangulation__2_1a1e78d826e7feec8a5277ce1892c7fed1" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>Constraint</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a49fc8cd3cd899d0c0aa6bc0f20c72a0f" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>cw</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ae837aea43417f936cefb715765d332e1" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>difference_type</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a644f9730fdece05c0e951201e0012805" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>dimension</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ad28c6e0e0e65b8aaecb1ae76d8744b33" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>Edge</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a22dbae3b466c50924759754de5865db6a5111882933f6615f618c8900e2bc6acf" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>EDGE</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a997ed97a0ac906a0342ad18c91a1ec81" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>Edge_circulator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a6c6a38b0ce694a47c2323834107fa758" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>Face</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a22dbae3b466c50924759754de5865db6a937da59ce47b08cfc0d452901e6c3625" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>FACE</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a1bda2ab92ccf638bb22fc223ae281b96" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>Face_circulator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>Face_handle</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a3d7335c51c4c777fec2b9c2560f2635f" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>finite_edges_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a6bd40af3800321a0d0d43f489b37fc2a" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>finite_edges_end</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1af70ca2702b9de4ae712b953f6a94b9a2" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>Finite_edges_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a66241217c984aa597d36d4ff6f0ff3f2" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>finite_faces_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a3df949e116750967bc46db9ba53da7c0" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>finite_faces_end</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a84923815e1cfca537c93cee97c0ed24f" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>Finite_faces_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a78d0a3bd3637897ab1abe06389899b63" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>finite_vertex</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1afec203a9cabc1700b76a3f7d4b388840" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>finite_vertices_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a00acf9a6484acec989b945dca69cac0b" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>finite_vertices_end</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a3dfacc0bd86f726c637b7ff86f404f84" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>Finite_vertices_iterator</name></member>
      <member refid="classCGAL_1_1Constrained__Delaunay__triangulation__2_1ad689e8a731c7b81f7643eb1115d8ecfa" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>flip</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1aa47a446fc11809d30146fbcdb689a396" prot="public" virt="non-virtual" ambiguityscope="CGAL::Constrained_triangulation_2::"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>flip</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a7b0d7ae604821c821ce2fea5a9536ad6" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>geom_traits</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a94f47e3c6bdf5e36ae51180bcd013ad6" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>Geom_traits</name></member>
      <member refid="classCGAL_1_1Constrained__Delaunay__triangulation__2_1aebdcf4d3e925c8dd4f6a4b1d95f90357" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>get_boundary_of_conflicts</name></member>
      <member refid="classCGAL_1_1Constrained__Delaunay__triangulation__2_1a0f36f8ce1c2a362a3f3cbe0dfece6865" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>get_conflicts</name></member>
      <member refid="classCGAL_1_1Constrained__Delaunay__triangulation__2_1a5a92ab29d7106464f2d59a6386c91ba2" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>get_conflicts_and_boundary</name></member>
      <member refid="classCGAL_1_1Constrained__triangulation__2_1a656b5e3760abb09058a99b81495b4bf2" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>incident_constraints</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a1708a62dea4a40f63025848e4afaefa0" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>incident_edges</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a843853eb19644389ba8d6024765eb4f7" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>incident_edges</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a1ca68226e40c30304c4d54685a77a7ca" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>incident_faces</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a341c4f3888b6ede6b9df55c2bb745ca3" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>incident_faces</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1afebc0e18dc93bce4b62b1e06944a6921" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>incident_vertices</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a58c9a0c9f69a356a31c8a7c02eff1841" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>incident_vertices</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a123f9d90c0fbdf6716ff7f14c0ac88bf" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>includes_edge</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a0d62215704e84f18ef9294b27f9e82b0" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>inexact_locate</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a5758b4f843e2d884d759f278e154ed87" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>infinite_face</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ae146d68059cd9d1430bafba2cbe25461" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>infinite_vertex</name></member>
      <member refid="classCGAL_1_1Constrained__Delaunay__triangulation__2_1ae157cc826f847c3c781c9e29497c05bd" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Constrained__Delaunay__triangulation__2_1ac9d89bbfd82eb5d38ccffd040eb3ebe3" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Constrained__Delaunay__triangulation__2_1abc13da95fa9146b392d4caafe0eb9a74" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Constrained__Delaunay__triangulation__2_1a39734a9d8817729037b36c2b60641fbc" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Constrained__triangulation__2_1a7c7986fda43ab0933d2c27fadb791695" prot="public" virt="non-virtual" ambiguityscope="CGAL::Constrained_triangulation_2::"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a1025cd7e7226ccb44d82f0fb1d63ad4e" prot="public" virt="non-virtual" ambiguityscope="CGAL::Triangulation_2::"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ae4146b1ad3bd65fc8e8bb49cb00f86d4" prot="public" virt="non-virtual" ambiguityscope="CGAL::Triangulation_2::"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Constrained__Delaunay__triangulation__2_1a4374cf307382b6ceee07db4bdc1e4e61" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>insert_constraint</name></member>
      <member refid="classCGAL_1_1Constrained__Delaunay__triangulation__2_1acd1f7edafecd48ea978e43c98c87172e" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>insert_constraint</name></member>
      <member refid="classCGAL_1_1Constrained__Delaunay__triangulation__2_1acc9e0ac49922f90f7418548a40f6a6c3" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>insert_constraint</name></member>
      <member refid="classCGAL_1_1Constrained__triangulation__2_1a52c9761ff78057546636755c2b56ce37" prot="public" virt="non-virtual" ambiguityscope="CGAL::Constrained_triangulation_2::"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>insert_constraint</name></member>
      <member refid="classCGAL_1_1Constrained__Delaunay__triangulation__2_1a2fa90339d0c18d07c60857fe42acab2a" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>insert_constraints</name></member>
      <member refid="classCGAL_1_1Constrained__Delaunay__triangulation__2_1a3707074708b073b8526d5d7d0f03fbb4" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>insert_constraints</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a359b4c5e12af04f9235b5f2f42cae709" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>insert_first</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1aefd64b3be7364535e808ed62faaa6a67" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>insert_in_edge</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a8f4a1ca36147ac331db5be089e17a2a5" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>insert_in_face</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ad8a56f1fb051ce731a079671799010de" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>insert_outside_affine_hull</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a2c35ed5fa9ea46b55687c36a4755d592" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>insert_outside_convex_hull</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a6a30184b0267dc1cdc9cc516440cbb4e" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>insert_second</name></member>
      <member refid="classCGAL_1_1Constrained__triangulation__2_1a4b33f318231acca6327208c6ae1038ad" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>Intersection_tag</name></member>
      <member refid="classCGAL_1_1Constrained__triangulation__2_1ab44b095428f9904fcee0809c1d588cf4" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>is_constrained</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a37b3896ab3a416fe4adff475ed625e16" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>is_edge</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1adbeb9736f9bfc588658316669cd7fb44" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>is_edge</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a7a94b10ae76a8d4d6e762c19e05b6343" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>is_face</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a4084823ee026d7a00a3991cd2b553fe0" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>is_face</name></member>
      <member refid="classCGAL_1_1Constrained__Delaunay__triangulation__2_1a2bfd91c9e57ce01f5c231557b9c5a392" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>is_flipable</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1acf8596038ef09d0d3ffcba99e912d1da" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1acf8e2ef548683138d8766b6c89794fbb" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a8009eb06cbe50a3fa1358d203a1fa924" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ac7519fb75001a53abba7e8d9127d22c5" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ae4becba370b2929508ec894aa2b0370d" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1aa9ca70cc8b0cb3e0b6c0bf062d710613" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Constrained__Delaunay__triangulation__2_1a2ca5f487ca99082ea84a3654aad3743f" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>is_valid</name></member>
      <member refid="classCGAL_1_1Constrained__triangulation__2_1a2393e7bc173b8cc898b2fa5ea438239e" prot="public" virt="non-virtual" ambiguityscope="CGAL::Constrained_triangulation_2::"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>is_valid</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ad720b1a9adc835ed1a27c228eea1e36c" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>Line_face_circulator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a41a46211193d767f122504f2eb99189a" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>line_walk</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a940567120751e7864c7b345eaf756642" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>locate</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1af61a05a0a53d009e111a3873c1796b52" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>locate</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a22dbae3b466c50924759754de5865db6" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>Locate_type</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ab97ce60b20674d0a7a4455e88c2eadb1" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>mirror_edge</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a9c54807a29595dc1116054cc4ac214fd" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>mirror_index</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a9213aedceda4c17381960d041d4f297a" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>mirror_vertex</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a62de40896ebe056bbf008eb4090eb76b" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>move</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a433cff4ceaeaba390df1a968d93a4899" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>move_if_no_collision</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ab18fcf7127c007253348fcfb37b67df4" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>number_of_faces</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1abb274869c3eac8fb775702bf68c4e8f1" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>number_of_vertices</name></member>
      <member refid="classCGAL_1_1Constrained__triangulation__2_1a128d68bd21ad8baf174c22116269d994" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>operator&lt;&lt;</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ac7351668deed7464974684ab3c7147ea" prot="public" virt="non-virtual" ambiguityscope="CGAL::Triangulation_2::"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>operator&lt;&lt;</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a40701ad345813f8df044fd197d3c9d96" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>operator=</name></member>
      <member refid="classCGAL_1_1Constrained__triangulation__2_1a28d4d44a218a6b1344f655fcff3280a9" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>operator&gt;&gt;</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a8dc99f907cc125ce7a55024da5ddb4c0" prot="public" virt="non-virtual" ambiguityscope="CGAL::Triangulation_2::"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>operator&gt;&gt;</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a01fbafc011677846a729a809b4b21a99" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>oriented_side</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a22dbae3b466c50924759754de5865db6ae8b775f120094d9b0a6871f53446184f" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>OUTSIDE_AFFINE_HULL</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a22dbae3b466c50924759754de5865db6afd690e18b1d2857068085d771fc354d4" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>OUTSIDE_CONVEX_HULL</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>Point</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a06ec87f55894738972350f631f6dc1fe" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>Point_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a048beaadce99c9bdfeaa69dd68701c32" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>points_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1adb17161924b6d2b6e7ac537d6b760728" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>points_end</name></member>
      <member refid="classCGAL_1_1Constrained__Delaunay__triangulation__2_1ae990fb337d68ba827ba040966b3dc86d" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>propagating_flip</name></member>
      <member refid="classCGAL_1_1Constrained__Delaunay__triangulation__2_1a32c5552b6f44911fd6cec57a21557251" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>push_back</name></member>
      <member refid="classCGAL_1_1Constrained__Delaunay__triangulation__2_1a439d8b9bbae5cca46643714653aa3daf" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>push_back</name></member>
      <member refid="classCGAL_1_1Constrained__Delaunay__triangulation__2_1af771142d9573bf2a3024b65a431733e8" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>remove</name></member>
      <member refid="classCGAL_1_1Constrained__triangulation__2_1a85d8b0065c69032c7a218d42cc2ef0ef" prot="public" virt="non-virtual" ambiguityscope="CGAL::Constrained_triangulation_2::"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>remove</name></member>
      <member refid="classCGAL_1_1Constrained__triangulation__2_1a4fda0957b54456a9fb5f7a0ae66270f4" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>remove_constrained_edge</name></member>
      <member refid="classCGAL_1_1Constrained__Delaunay__triangulation__2_1ad352d91f497094b8f36ba873a4ffe025" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>remove_constraint</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a4b3389b24fe7bfe703151375d15a745a" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>remove_degree_3</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ac00496f74f7d05465407861f5a447768" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>remove_first</name></member>
      <member refid="classCGAL_1_1Constrained__Delaunay__triangulation__2_1a670c69207373e02ebe2a8c0b54bd0165" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>remove_incident_constraints</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a44461f8dc31540c015f24ee3d36870ab" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>remove_second</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ae7b5594c15ef61394d76826e1fc1e8e6" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>Segment</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ac3beee6618a86505bfc03bcbfbb46a4a" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>segment</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a06f3967c92db0fe28368c31ff671c658" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>segment</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ad43c112fe392ea9194b449e6116499c5" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>segment</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1afd84762f5a856ebdbd9786de8744feda" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>segment</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a25a5eaabf6ba1d9c9acf240b4453c09a" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>set_infinite_vertex</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1abc885b3d116e1d0b6943b211e750e472" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>side_of_oriented_circle</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1aa7b0b96c9ed11cab337313f34cd96a59" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>size_type</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a8b058b055ef24a4b6fc25bf110e46638" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>star_hole</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a4511afae77c0c2978b6412d9411e4fe2" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>star_hole</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a1788d6ffa3f5986b2b07e7e0b48a2ffc" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>swap</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1afb8abca60f08ed498b54bd1992f56d28" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>tds</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ac091a355bc30d57601d2419a5807c906" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>tds</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a176b3903b04aaad6996d1c2a56a14dcc" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>triangle</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a48984e6735c075b17d7a956cb396d1f5" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>Triangle</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a97deb44f4edfb6baa30c12a22f928dc7" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>Triangulation_2</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a6e43f49405b43057d1b911a9f6e39404" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>Triangulation_2</name></member>
      <member refid="classCGAL_1_1Triangulation__cw__ccw__2_1a7069704014f0d62aa327453e5bcfb44d" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>Triangulation_cw_ccw_2</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1addbcd86ae5679a10363f46080159d00d" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>Triangulation_data_structure</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1af48b3f6c165d50c74fe67a75caec129a" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>Vertex</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a22dbae3b466c50924759754de5865db6a4fc5b644a7c38197036955ba1662afe5" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>VERTEX</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ade901d47c7c422f7978adf3ac0188a9d" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>Vertex_circulator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" prot="public" virt="non-virtual"><scope>CGAL::Constrained_Delaunay_triangulation_2</scope><name>Vertex_handle</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
