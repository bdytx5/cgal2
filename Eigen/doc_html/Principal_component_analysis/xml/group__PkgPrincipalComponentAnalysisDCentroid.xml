<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__PkgPrincipalComponentAnalysisDCentroid" kind="group">
    <compoundname>PkgPrincipalComponentAnalysisDCentroid</compoundname>
    <title>CGAL::centroid()</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgPrincipalComponentAnalysisDCentroid_1ga7ebdcd3bc99932bcca01bdab53b28391" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          </param>
          <param>
            <type>typename Tag</type>
          </param>
        </templateparamlist>
        <type>Deduced</type>
        <definition>Deduced CGAL::centroid</definition>
        <argsstring>(InputIterator first, InputIterator beyond, const Tag &amp;t)</argsstring>
        <name>centroid</name>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>const Tag &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>computes the centroid of a non-empty set of 2D or 3D objects. </para>        </briefdescription>
        <detaileddescription>
<para>The tag is used to specify the dimension to be considered from the objects.</para><para><simplesect kind="pre"><para>first != beyond.</para></simplesect>
<simplesect kind="return"><para>The return type is either <computeroutput>K::Point_2</computeroutput> or <computeroutput>K::Point_3</computeroutput>, depending on the dimension of the input objects, where <computeroutput>K</computeroutput> is <programlisting><codeline><highlight class="normal">CGAL::Kernel_traits&lt;std::iterator_traits&lt;InputIterator&gt;::value_type&gt;::Kernel</highlight></codeline>
</programlisting></para></simplesect>
<bold>Two Dimensional Input</bold><linebreak/>
</para><para>The value type must be either <computeroutput>K::Point_2</computeroutput>, <computeroutput>K::Segment_2</computeroutput>, <computeroutput>K::Triangle_2</computeroutput>, <computeroutput>K::Rectangle_2</computeroutput> or <computeroutput>K::Circle_2</computeroutput>. To fit a set of disks the user must call the function with value type <computeroutput>K::Circle_2</computeroutput> and with dimension tag of 2. The tag must range between <computeroutput><ref refid="structCGAL_1_1Dimension__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Dimension_tag</ref>&lt;0&gt;</computeroutput> and <computeroutput><ref refid="structCGAL_1_1Dimension__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Dimension_tag</ref>&lt;2&gt;</computeroutput>.</para><para><bold>Three Dimensional Input</bold><linebreak/>
</para><para>The value type must be either <computeroutput>K::Point_3</computeroutput>, <computeroutput>K::Segment_3</computeroutput>, <computeroutput>K::Triangle_3</computeroutput>, <computeroutput>K::Cuboid_3</computeroutput>, <computeroutput>K::Sphere_3</computeroutput> or <computeroutput>K::Tetrahedron_3</computeroutput>. To fit a set of balls the user must call the function with value type <computeroutput>K::Sphere_3</computeroutput> and with dimension tag of 3. The tag must range between <computeroutput><ref refid="structCGAL_1_1Dimension__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Dimension_tag</ref>&lt;0&gt;</computeroutput> and <computeroutput><ref refid="structCGAL_1_1Dimension__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Dimension_tag</ref>&lt;3&gt;</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/centroid.h" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPrincipalComponentAnalysisDCentroid_1ga424a49b3f176d176786ef7b22432b682" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          </param>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename Tag</type>
          </param>
        </templateparamlist>
        <type>Deduced</type>
        <definition>Deduced CGAL::centroid</definition>
        <argsstring>(InputIterator first, InputIterator beyond, const K &amp;k, const Tag &amp;t)</argsstring>
        <name>centroid</name>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>const K &amp;</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const Tag &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>computes the centroid of a non-empty set of 2D or 3D objects. </para>        </briefdescription>
        <detaileddescription>
<para>The tag is used to specify the dimension to be considered from the objects.</para><para><simplesect kind="pre"><para>first != beyond.</para></simplesect>
<simplesect kind="return"><para>The return type is either <computeroutput>K::Point_2</computeroutput> or <computeroutput>K::Point_3</computeroutput>, depending on the dimension of the input objects.</para></simplesect>
<bold>Two Dimensional Input</bold><linebreak/>
</para><para>The value type must be either <computeroutput>K::Point_2</computeroutput>, <computeroutput>K::Segment_2</computeroutput>, <computeroutput>K::Triangle_2</computeroutput>, <computeroutput>K::Rectangle_2</computeroutput> or <computeroutput>K::Circle_2</computeroutput>. To fit a set of disks the user must call the function with value type <computeroutput>K::Circle_2</computeroutput> and with dimension tag of 2. The tag must range between <computeroutput><ref refid="structCGAL_1_1Dimension__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Dimension_tag</ref>&lt;0&gt;</computeroutput> and <computeroutput><ref refid="structCGAL_1_1Dimension__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Dimension_tag</ref>&lt;2&gt;</computeroutput>.</para><para><bold>Three Dimensional Input</bold><linebreak/>
</para><para>The value type must be either <computeroutput>K::Point_3</computeroutput>, <computeroutput>K::Segment_3</computeroutput>, <computeroutput>K::Triangle_3</computeroutput>, <computeroutput>K::Cuboid_3</computeroutput>, <computeroutput>K::Sphere_3</computeroutput> or <computeroutput>K::Tetrahedron_3</computeroutput>. To fit a set of balls the user must call the function with value type <computeroutput>K::Sphere_3</computeroutput> and with dimension tag of 3. The tag must range between <computeroutput><ref refid="structCGAL_1_1Dimension__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Dimension_tag</ref>&lt;0&gt;</computeroutput> and <computeroutput><ref refid="structCGAL_1_1Dimension__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Dimension_tag</ref>&lt;3&gt;</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/centroid.h" line="92" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The function <computeroutput><ref refid="group__centroid__grp_1gacc395064255dfefdb1420309db234210" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">centroid()</ref></computeroutput> computes the (uniform) center of mass of a set of 2D or 3D bounded objects. </para>    </briefdescription>
    <detaileddescription>
<para>In 2D these objects include points, segments, triangles, iso rectangles, circles and disks. In 3D these objects include points, segments, triangles, iso cuboids, spheres, balls and tetrahedra.</para><para>The user can also optionally pass an explicit kernel, in case the default based on <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel_traits</ref></computeroutput> is not sufficient. The default dimension tag is deduced automatically, although the user can pass a <computeroutput>tag</computeroutput> specifying the dimension of the objects to be considered for the centroid computation. For example, the default dimension of a tetrahedron is 3, but specifying a dimension 0 computes the centroid of the tetrahedron vertices (3D points), specifying a dimension 1 computes the centroid of the tetrahedron edges (3D segments) and specifying a dimension 2 computes the centroid of the tetrahedron facets (3D triangles).</para><para><simplesect kind="see"><para><ref refid="group__PkgPrincipalComponentAnalysisDBary" kindref="compound"><computeroutput>CGAL::barycenter()</computeroutput> </ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__centroid__grp" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag"><computeroutput>CGAL::centroid() (Linear Kernel)</computeroutput> </ref> </para></simplesect>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
