<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__PkgPrincipalComponentAnalysisDLLSF3" kind="group">
    <compoundname>PkgPrincipalComponentAnalysisDLLSF3</compoundname>
    <title>CGAL::linear_least_square_fitting_3()</title>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="group__PkgPrincipalComponentAnalysisDLLSF3_1gadcf556c115c6bac30a54bf7fdd0d32e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          </param>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename Tag</type>
          </param>
          <param>
            <type>typename DiagonalizeTraits_</type>
          </param>
        </templateparamlist>
        <type>K::FT</type>
        <definition>K::FT CGAL::linear_least_squares_fitting_3</definition>
        <argsstring>(InputIterator first, InputIterator beyond, typename K::Line_3 &amp;line, typename K::Point_3 &amp;centroid, const Tag &amp;tag, const K &amp;k, const DiagonalizeTraits_ &amp;diagonalize_traits)</argsstring>
        <name>linear_least_squares_fitting_3</name>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>typename K::Line_3 &amp;</type>
          <declname>line</declname>
        </param>
        <param>
          <type>typename K::Point_3 &amp;</type>
          <declname>centroid</declname>
        </param>
        <param>
          <type>const Tag &amp;</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>const K &amp;</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const DiagonalizeTraits_ &amp;</type>
          <declname>diagonalize_traits</declname>
        </param>
        <briefdescription>
<para>The function <computeroutput><ref refid="group__PkgPrincipalComponentAnalysisDLLSF3_1gadcf556c115c6bac30a54bf7fdd0d32e3" kindref="member">linear_least_squares_fitting_3()</ref></computeroutput> computes the best fitting 3D line or plane (in the least squares sense) of a set of 3D objects such as points, segments, triangles, spheres, balls, iso cuboids or tetrahedra. </para>        </briefdescription>
        <detaileddescription>
<para>The best fitting linear sub-space (here line or plane) minimizes the sum of squared distances from all points comprising these objects to their orthogonal projections onto this linear subspace. It can be shown that the best line or plane goes through the centroid of the set. This problem is equivalent to search for the linear sub-space which maximizes the variance of projected points (sum of squared distances to the centroid). Internally we solve this problem by eigen decomposition of the covariance matrix of the whole set. Note that the <formula id="3">$ 3 \times 3$</formula> covariance matrix is computed internally in closed form and not by point sampling the objects. Eigenvectors corresponding to large eigenvalues are the directions in which the data has strong component, or equivalently large variance.</para><para>The fitting quality property is characterized by the values of the three eigenvalues. When all three values are distinct the best linear subspace is uniquely determined, be it a line or a plane. When all three eigenvalues are equal there is no preferable sub-space and any line or plane going through the centroid share the same fitting property (a horizontal plane or a line along the x axis are returned by default). A best fitting line is uniquely determined as soon as the largest eigenvalue is different from the two others, otherwise all lines contained in the best fitting plane share the same fitting property. A best fitting plane is uniquely determined as soon as the smallest eigenvalue is different from the two others, otherwise all planes going through the best fitting line share the same fitting property.</para><para>computes the best fitting 3D line of a 3D object set in the range [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>). The value returned is a fitting quality between <formula id="0">$ 0$</formula> and <formula id="1">$ 1$</formula>, where <formula id="0">$ 0$</formula> means that the variance is the same along any line contained within the best fitting plane, and <formula id="1">$ 1$</formula> means that the variance is null orthogonally to the best fitting line (hence the fit is perfect).</para><para>The tag <computeroutput>tag</computeroutput> identifies the dimension to be considered from the objects. For point sets it should be 0. For segment sets it could be 1 or 0 according to whether one wants to fit the entire segments or just the end points. For triangle sets it can range from 0 to 2 according to whether one wants to fit either the corner points, the segments or the whole triangles. For iso cuboid sets it can range from 0 to 3 according to whether one wants to fit either the corners, the segments, the faces or the whole solid iso cuboids. For sphere sets it can be 2 or 3 according to whether one wants to fit either the surface of the spheres or the whole solid balls. For tetrahedron sets it can range from 0 to 3 according to whether one wants to fit either the points, the segments, the surface triangles or the whole solid tetrahedra.</para><para>The class <computeroutput>K</computeroutput> is the kernel in which the value type of <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput> is defined. It can be omitted and deduced automatically from the value type.</para><para>The class <computeroutput>DiagonalizeTraits_</computeroutput> is a model of <computeroutput><ref refid="classDiagonalizeTraits" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Solver_interface.tag">DiagonalizeTraits</ref></computeroutput>. It can be omitted if Eigen 3 (or greater) is available and <computeroutput>CGAL_EIGEN3_ENABLED</computeroutput> is defined: in that case, an overload using <computeroutput><ref refid="classCGAL_1_1Eigen__diagonalize__traits" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Solver_interface.tag">Eigen_diagonalize_traits</ref></computeroutput> is provided.</para><para><simplesect kind="note"><para>This function is significantly faster when using <computeroutput><ref refid="classCGAL_1_1Eigen__diagonalize__traits" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Solver_interface.tag">Eigen_diagonalize_traits</ref></computeroutput> and it is strongly advised to use this model.</para></simplesect>
<bold>Requirements</bold><linebreak/>
</para><para><orderedlist>
<listitem>
<para><computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput> must have a value type equivalent to <computeroutput>K::Point_3</computeroutput>, <computeroutput>K::Segment_3</computeroutput>, <computeroutput>K::Triangle_3</computeroutput>, <computeroutput>K::Iso_cuboid_3</computeroutput>, <computeroutput>K::Sphere_3</computeroutput> or <computeroutput>K::Tetrahedron_3</computeroutput>. </para></listitem>
<listitem>
<para><computeroutput>line</computeroutput> is the best fitting line computed. </para></listitem>
<listitem>
<para><computeroutput>centroid</computeroutput> is the centroid computed. This parameter is optional and can be omitted. </para></listitem>
<listitem>
<para><computeroutput>tag</computeroutput> is the tag identifying the dimension to be considered from the objects. It should range from <computeroutput><ref refid="structCGAL_1_1Dimension__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Dimension_tag</ref>&lt;0&gt;</computeroutput> to <computeroutput><ref refid="structCGAL_1_1Dimension__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Dimension_tag</ref>&lt;3&gt;</computeroutput>. Also, it should not be of a dimension greater nor smaller than the geometry of the object. For example, a <computeroutput>Triangle</computeroutput> can not have a <computeroutput><ref refid="structCGAL_1_1Dimension__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Dimension_tag</ref>&lt;3&gt;</computeroutput> tag. A <computeroutput>Segment</computeroutput> can not have a <computeroutput><ref refid="structCGAL_1_1Dimension__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Dimension_tag</ref>&lt;2&gt;</computeroutput> nor a <computeroutput><ref refid="structCGAL_1_1Dimension__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Dimension_tag</ref>&lt;3&gt;</computeroutput> tag. A <computeroutput>Sphere</computeroutput> can not have a <computeroutput><ref refid="structCGAL_1_1Dimension__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Dimension_tag</ref>&lt;0&gt;</computeroutput> nor a <computeroutput><ref refid="structCGAL_1_1Dimension__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Dimension_tag</ref>&lt;1&gt;</computeroutput> tag. </para></listitem>
</orderedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/linear_least_squares_fitting_3.h" line="91" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPrincipalComponentAnalysisDLLSF3_1gad39edb9f84ea2c280317e6c6c6146911" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          </param>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename Tag</type>
          </param>
          <param>
            <type>typename DiagonalizeTraits_</type>
          </param>
        </templateparamlist>
        <type>K::FT</type>
        <definition>K::FT CGAL::linear_least_squares_fitting_3</definition>
        <argsstring>(InputIterator first, InputIterator beyond, typename K::Plane_3 &amp;plane, typename K::Point_3 &amp;centroid, const Tag &amp;tag, const K &amp;k, const DiagonalizeTraits_ &amp;diagonalize_traits)</argsstring>
        <name>linear_least_squares_fitting_3</name>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>typename K::Plane_3 &amp;</type>
          <declname>plane</declname>
        </param>
        <param>
          <type>typename K::Point_3 &amp;</type>
          <declname>centroid</declname>
        </param>
        <param>
          <type>const Tag &amp;</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>const K &amp;</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const DiagonalizeTraits_ &amp;</type>
          <declname>diagonalize_traits</declname>
        </param>
        <briefdescription>
<para>computes the best fitting 3D plane of a 3D object set in the range [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>). </para>        </briefdescription>
        <detaileddescription>
<para>The value returned is a fitting quality between <formula id="0">$ 0$</formula> and <formula id="1">$ 1$</formula>, where <formula id="0">$ 0$</formula> means that the variance is the same along any plane going through the best fitting line, and <formula id="1">$ 1$</formula> means that the variance is null orthogonally to the best fitting plane (hence the fit is perfect).</para><para>The class <computeroutput>K</computeroutput> is the kernel in which the value type of <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput> is defined. It can be omitted and deduced automatically from the value type. The tag <computeroutput>tag</computeroutput> identifies the dimension to be considered from the objects (see above).</para><para>The class <computeroutput>DiagonalizeTraits_</computeroutput> is a model of <computeroutput><ref refid="classDiagonalizeTraits" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Solver_interface.tag">DiagonalizeTraits</ref></computeroutput>. It can be omitted: if Eigen 3 (or greater) is available and <computeroutput>CGAL_EIGEN3_ENABLED</computeroutput> is defined then an overload using <computeroutput><ref refid="classCGAL_1_1Eigen__diagonalize__traits" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Solver_interface.tag">Eigen_diagonalize_traits</ref></computeroutput> is provided. Otherwise, the internal implementation <computeroutput>Diagonalize_traits</computeroutput> is used.</para><para><simplesect kind="note"><para>This function is significantly faster when using <computeroutput><ref refid="classCGAL_1_1Eigen__diagonalize__traits" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Solver_interface.tag">Eigen_diagonalize_traits</ref></computeroutput> and it is strongly advised to use this model.</para></simplesect>
<bold>Requirements</bold><linebreak/>
</para><para><orderedlist>
<listitem>
<para><computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput> has a value type equivalent to <computeroutput>K::Point_3</computeroutput>, <computeroutput>K::Segment_3</computeroutput>, <computeroutput>K::Triangle_3</computeroutput>, <computeroutput>K::Iso_cuboid_3</computeroutput>, <computeroutput>K::Sphere_3</computeroutput> or <computeroutput>K::Tetrahedron_3</computeroutput>. </para></listitem>
<listitem>
<para><computeroutput>plane</computeroutput> is the best fitting plane computed. </para></listitem>
<listitem>
<para><computeroutput>centroid</computeroutput> is the centroid computed. This parameter is optional and can be omitted. </para></listitem>
<listitem>
<para><computeroutput>tag</computeroutput> is the tag identifying the dimension to be considered from the objects. It should range from <computeroutput><ref refid="structCGAL_1_1Dimension__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Dimension_tag</ref>&lt;0&gt;</computeroutput> to <computeroutput><ref refid="structCGAL_1_1Dimension__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Dimension_tag</ref>&lt;3&gt;</computeroutput>. Also, it should not be of a dimension greater nor smaller than the geometry of the object. For example, a <computeroutput>Triangle</computeroutput> can not have a <computeroutput><ref refid="structCGAL_1_1Dimension__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Dimension_tag</ref>&lt;3&gt;</computeroutput> tag. A <computeroutput>Segment</computeroutput> can not have a <computeroutput><ref refid="structCGAL_1_1Dimension__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Dimension_tag</ref>&lt;2&gt;</computeroutput> nor a <computeroutput><ref refid="structCGAL_1_1Dimension__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Dimension_tag</ref>&lt;3&gt;</computeroutput> tag. A <computeroutput>Sphere</computeroutput> can not have a <computeroutput><ref refid="structCGAL_1_1Dimension__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Dimension_tag</ref>&lt;0&gt;</computeroutput> nor a <computeroutput><ref refid="structCGAL_1_1Dimension__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Dimension_tag</ref>&lt;1&gt;</computeroutput> tag. </para></listitem>
</orderedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/linear_least_squares_fitting_3.h" line="137" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
