<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Sphere__3" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Sphere_3</compoundname>
    <includes local="no">CGAL/Sphere_3.h</includes>
    <templateparamlist>
      <param>
        <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Sphere__3_1afaa9b613520cfde8fbd53c643c9cf921" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Sphere_3&lt; Kernel &gt;::Sphere_3</definition>
        <argsstring>(const Point_3&lt; Kernel &gt; &amp;center, const Kernel::FT &amp;squared_radius, const Orientation &amp;orientation=COUNTERCLOCKWISE)</argsstring>
        <name>Sphere_3</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>center</declname>
        </param>
        <param>
          <type>const <ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref> &amp;</type>
          <declname>squared_radius</declname>
        </param>
        <param>
          <type>const <ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member">Orientation</ref> &amp;</type>
          <declname>orientation</declname>
          <defval><ref refid="group__kernel__enums_1ga39fcfbab0b0f0ce9139ad1613e21d60d" kindref="member">COUNTERCLOCKWISE</ref></defval>
        </param>
        <briefdescription>
<para>introduces a variable <computeroutput>c</computeroutput> of type <computeroutput><ref refid="classCGAL_1_1Sphere__3" kindref="compound">Sphere_3</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>It is initialized to the sphere with center <computeroutput>center</computeroutput>, squared radius <computeroutput>squared_radius</computeroutput> and orientation <computeroutput>orientation</computeroutput>. <simplesect kind="pre"><para><computeroutput>orientation</computeroutput> <formula id="41">$ \neq$</formula> <ref refid="group__kernel__enums_1ga56587f3c15032c9127a9fe81c038b0d7" kindref="member">COPLANAR</ref>, and furthermore, <computeroutput>squared_radius</computeroutput> <formula id="42">$ \geq$</formula> 0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sphere_3.h" line="32" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sphere__3_1a258421fe590a1fc492e518657f936c3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Sphere_3&lt; Kernel &gt;::Sphere_3</definition>
        <argsstring>(const Point_3&lt; Kernel &gt; &amp;p, const Point_3&lt; Kernel &gt; &amp;q, const Point_3&lt; Kernel &gt; &amp;r, const Point_3&lt; Kernel &gt; &amp;s)</argsstring>
        <name>Sphere_3</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>introduces a variable <computeroutput>c</computeroutput> of type <computeroutput><ref refid="classCGAL_1_1Sphere__3" kindref="compound">Sphere_3</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>It is initialized to the unique sphere which passes through the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>r</computeroutput> and <computeroutput>s</computeroutput>. The orientation of the sphere is the orientation of the point quadruple <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>r</computeroutput>, <computeroutput>s</computeroutput>. <simplesect kind="pre"><para><computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>r</computeroutput>, and <computeroutput>s</computeroutput> are not coplanar. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sphere_3.h" line="45" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sphere__3_1a6306f35aef828d87342ce5f40fce086f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Sphere_3&lt; Kernel &gt;::Sphere_3</definition>
        <argsstring>(const Point_3&lt; Kernel &gt; &amp;p, const Point_3&lt; Kernel &gt; &amp;q, const Point_3&lt; Kernel &gt; &amp;r, const Orientation &amp;o=COUNTERCLOCKWISE)</argsstring>
        <name>Sphere_3</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member">Orientation</ref> &amp;</type>
          <declname>o</declname>
          <defval><ref refid="group__kernel__enums_1ga39fcfbab0b0f0ce9139ad1613e21d60d" kindref="member">COUNTERCLOCKWISE</ref></defval>
        </param>
        <briefdescription>
<para>introduces a variable <computeroutput>c</computeroutput> of type <computeroutput><ref refid="classCGAL_1_1Sphere__3" kindref="compound">Sphere_3</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>It is initialized to the smallest sphere which passes through the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput>. The orientation of the sphere is <computeroutput>o</computeroutput>. <simplesect kind="pre"><para><computeroutput>o</computeroutput> is not <ref refid="group__kernel__enums_1ga56587f3c15032c9127a9fe81c038b0d7" kindref="member">COPLANAR</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sphere_3.h" line="57" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sphere__3_1a74ef3da6618b4c6d93ea59bff3db6291" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Sphere_3&lt; Kernel &gt;::Sphere_3</definition>
        <argsstring>(const Point_3&lt; Kernel &gt; &amp;p, const Point_3&lt; Kernel &gt; &amp;q, const Orientation &amp;o=COUNTERCLOCKWISE)</argsstring>
        <name>Sphere_3</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member">Orientation</ref> &amp;</type>
          <declname>o</declname>
          <defval><ref refid="group__kernel__enums_1ga39fcfbab0b0f0ce9139ad1613e21d60d" kindref="member">COUNTERCLOCKWISE</ref></defval>
        </param>
        <briefdescription>
<para>introduces a variable <computeroutput>c</computeroutput> of type <computeroutput><ref refid="classCGAL_1_1Sphere__3" kindref="compound">Sphere_3</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>It is initialized to the smallest sphere which passes through the points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. The orientation of the sphere is <computeroutput>o</computeroutput>. <simplesect kind="pre"><para><computeroutput>o</computeroutput> is not <ref refid="group__kernel__enums_1ga56587f3c15032c9127a9fe81c038b0d7" kindref="member">COPLANAR</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sphere_3.h" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sphere__3_1a9144992b5e0f92a500461b5ebed78e9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Sphere_3&lt; Kernel &gt;::Sphere_3</definition>
        <argsstring>(const Point_3&lt; Kernel &gt; &amp;center, const Orientation &amp;orientation=COUNTERCLOCKWISE)</argsstring>
        <name>Sphere_3</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>center</declname>
        </param>
        <param>
          <type>const <ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member">Orientation</ref> &amp;</type>
          <declname>orientation</declname>
          <defval><ref refid="group__kernel__enums_1ga39fcfbab0b0f0ce9139ad1613e21d60d" kindref="member">COUNTERCLOCKWISE</ref></defval>
        </param>
        <briefdescription>
<para>introduces a variable <computeroutput>c</computeroutput> of type <computeroutput><ref refid="classCGAL_1_1Sphere__3" kindref="compound">Sphere_3</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>It is initialized to the sphere with center <computeroutput>center</computeroutput>, squared radius zero and orientation <computeroutput>orientation</computeroutput>. <simplesect kind="pre"><para><computeroutput>orientation</computeroutput> <formula id="41">$ \neq$</formula> <ref refid="group__kernel__enums_1ga56587f3c15032c9127a9fe81c038b0d7" kindref="member">COPLANAR</ref>. </para></simplesect>
<simplesect kind="post"><para><computeroutput>c.is_degenerate()</computeroutput> = <computeroutput>true</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sphere_3.h" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sphere__3_1aa9b2577a2c9cb9bea94203c2864df711" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Sphere_3&lt; Kernel &gt;::Sphere_3</definition>
        <argsstring>(const Circle_3&lt; Kernel &gt; &amp;c)</argsstring>
        <name>Sphere_3</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Circle__3" kindref="compound">Circle_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>introduces a variable <computeroutput>c</computeroutput> of type <computeroutput><ref refid="classCGAL_1_1Sphere__3" kindref="compound">Sphere_3</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>It is initialized to the diametral sphere of the circle. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sphere_3.h" line="89" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Access Functions</header>
      <memberdef kind="function" id="classCGAL_1_1Sphere__3_1ab8cfead38345cc3f27593743023e1c3b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
        <definition>const Point_3&lt;Kernel&gt;&amp; CGAL::Sphere_3&lt; Kernel &gt;::center</definition>
        <argsstring>() const</argsstring>
        <name>center</name>
        <briefdescription>
<para>returns the center of <computeroutput>c</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sphere_3.h" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sphere__3_1a03c9ce3ea9c6afa81d3526443f7fee5e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref> const  &amp;</type>
        <definition>Kernel::FT const&amp; CGAL::Sphere_3&lt; Kernel &gt;::squared_radius</definition>
        <argsstring>() const</argsstring>
        <name>squared_radius</name>
        <briefdescription>
<para>returns the squared radius of <computeroutput>c</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sphere_3.h" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sphere__3_1ad2211a8660504791e1a3f3b07123de33" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member">Orientation</ref> const  &amp;</type>
        <definition>Orientation const&amp; CGAL::Sphere_3&lt; Kernel &gt;::orientation</definition>
        <argsstring>() const</argsstring>
        <name>orientation</name>
        <briefdescription>
<para>returns the orientation of <computeroutput>c</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sphere_3.h" line="112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sphere__3_1ac81c5170344e325414da020f269a022e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Sphere_3&lt; Kernel &gt;::operator==</definition>
        <argsstring>(const Sphere_3&lt; Kernel &gt; &amp;sphere2) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Sphere__3" kindref="compound">Sphere_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>sphere2</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff <computeroutput>c</computeroutput> and <computeroutput>sphere2</computeroutput> are equal, i.e. if they have the same center, same squared radius and same orientation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sphere_3.h" line="120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sphere__3_1a1eb1c79c67d3eec0c2c4fbb6edbbb151" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Sphere_3&lt; Kernel &gt;::operator!=</definition>
        <argsstring>(const Sphere_3&lt; Kernel &gt; &amp;sphere2) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Sphere__3" kindref="compound">Sphere_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>sphere2</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff <computeroutput>c</computeroutput> and <computeroutput>sphere2</computeroutput> are not equal. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sphere_3.h" line="126" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Predicates</header>
      <memberdef kind="function" id="classCGAL_1_1Sphere__3_1a50558a040bf482f33cfe72a279b1c28c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Sphere_3&lt; Kernel &gt;::is_degenerate</definition>
        <argsstring>() const</argsstring>
        <name>is_degenerate</name>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff <computeroutput>c</computeroutput> is degenerate, i.e. if <computeroutput>c</computeroutput> has squared radius zero. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sphere_3.h" line="137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sphere__3_1a84be404730bc31d1dff7b508b60d4e7f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1ga5006dd2552d97fa577d81bd819c0f979" kindref="member">Oriented_side</ref></type>
        <definition>Oriented_side CGAL::Sphere_3&lt; Kernel &gt;::oriented_side</definition>
        <argsstring>(const Point_3&lt; Kernel &gt; &amp;p) const</argsstring>
        <name>oriented_side</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>returns either the constant <ref refid="group__kernel__enums_1gga5006dd2552d97fa577d81bd819c0f979a45220491cf36139beffd09434aa31256" kindref="member">ON_ORIENTED_BOUNDARY</ref>, <ref refid="group__kernel__enums_1gga5006dd2552d97fa577d81bd819c0f979aec3846b620579589dcc30c8fe71cc7f0" kindref="member">ON_POSITIVE_SIDE</ref>, or <ref refid="group__kernel__enums_1gga5006dd2552d97fa577d81bd819c0f979ab906419672c7ae509b5e63158479ed85" kindref="member">ON_NEGATIVE_SIDE</ref>, iff <computeroutput>p</computeroutput> lies on the boundary, properly on the positive side, or properly on the negative side of <computeroutput>c</computeroutput>, resp. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sphere_3.h" line="148" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sphere__3_1a2d9e0d2c5935417158b9a01e9e3df81c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1gaf6030e89dadcc1f45369b0cdc5d9e111" kindref="member">Bounded_side</ref></type>
        <definition>Bounded_side CGAL::Sphere_3&lt; Kernel &gt;::bounded_side</definition>
        <argsstring>(const Point_3&lt; Kernel &gt; &amp;p) const</argsstring>
        <name>bounded_side</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>returns <ref refid="group__kernel__enums_1ggaf6030e89dadcc1f45369b0cdc5d9e111ad8333d35d4801c08b3a5ae9e94d7cabe" kindref="member">ON_BOUNDED_SIDE</ref>, <ref refid="group__kernel__enums_1ggaf6030e89dadcc1f45369b0cdc5d9e111a060193157c0875fb2e6445a648f3ac1f" kindref="member">ON_BOUNDARY</ref>, or <ref refid="group__kernel__enums_1ggaf6030e89dadcc1f45369b0cdc5d9e111a3a96e6da84164cc8300c9e130be23f71" kindref="member">ON_UNBOUNDED_SIDE</ref> iff <computeroutput>p</computeroutput> lies properly inside, on the boundary, or properly outside of <computeroutput>c</computeroutput>, resp. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sphere_3.h" line="158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sphere__3_1a2bb910c9c18714d140bba8f8438614a8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Sphere_3&lt; Kernel &gt;::has_on_positive_side</definition>
        <argsstring>(const Point_3&lt; Kernel &gt; &amp;p) const</argsstring>
        <name>has_on_positive_side</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sphere_3.h" line="163" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sphere__3_1a9b0d1558cb06b537f920ab9b564e6cac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Sphere_3&lt; Kernel &gt;::has_on_negative_side</definition>
        <argsstring>(const Point_3&lt; Kernel &gt; &amp;p) const</argsstring>
        <name>has_on_negative_side</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sphere_3.h" line="168" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sphere__3_1aa03e57f82d680c541ca9680b098dea4e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Sphere_3&lt; Kernel &gt;::has_on_boundary</definition>
        <argsstring>(const Point_3&lt; Kernel &gt; &amp;p) const</argsstring>
        <name>has_on_boundary</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sphere_3.h" line="173" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sphere__3_1a3cb3da4ac0d084f139736275ae8d2838" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Sphere_3&lt; Kernel &gt;::has_on_bounded_side</definition>
        <argsstring>(const Point_3&lt; Kernel &gt; &amp;p) const</argsstring>
        <name>has_on_bounded_side</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sphere_3.h" line="178" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sphere__3_1a15f7a6a22b0c5eb422c290a87c785229" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Sphere_3&lt; Kernel &gt;::has_on_unbounded_side</definition>
        <argsstring>(const Point_3&lt; Kernel &gt; &amp;p) const</argsstring>
        <name>has_on_unbounded_side</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sphere_3.h" line="183" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sphere__3_1af8267bffaad6c16d337c05c8a65f583b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Sphere_3&lt; Kernel &gt;::has_on</definition>
        <argsstring>(const Point_3&lt; Kernel &gt; &amp;p) const</argsstring>
        <name>has_on</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sphere_3.h" line="188" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sphere__3_1a2bb006a5140a1bfdc8e6026c6f4ac5a7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Sphere_3&lt; Kernel &gt;::has_on</definition>
        <argsstring>(const Circle_3&lt; Kernel &gt; &amp;p) const</argsstring>
        <name>has_on</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Circle__3" kindref="compound">Circle_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sphere_3.h" line="193" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Miscellaneous</header>
      <memberdef kind="function" id="classCGAL_1_1Sphere__3_1a3a8d42b6bd90a5e7b059cd8746628151" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Sphere__3" kindref="compound">Sphere_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>Sphere_3&lt;Kernel&gt; CGAL::Sphere_3&lt; Kernel &gt;::opposite</definition>
        <argsstring>() const</argsstring>
        <name>opposite</name>
        <briefdescription>
<para>returns the sphere with the same center and squared radius as <computeroutput>c</computeroutput> but with opposite orientation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sphere_3.h" line="205" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sphere__3_1ad34fc88c16adbc448cb9d5d3ebef0fe8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Sphere__3" kindref="compound">Sphere_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>Sphere_3&lt;Kernel&gt; CGAL::Sphere_3&lt; Kernel &gt;::orthogonal_transform</definition>
        <argsstring>(Aff_transformation_3&lt; Kernel &gt; const &amp;at) const</argsstring>
        <name>orthogonal_transform</name>
        <param>
          <type><ref refid="classCGAL_1_1Aff__transformation__3" kindref="compound">Aff_transformation_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; const &amp;</type>
          <declname>at</declname>
        </param>
        <briefdescription>
<para>returns the sphere obtained by applying <computeroutput>at</computeroutput> on <computeroutput>c</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>at</computeroutput> is an orthogonal transformation. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sphere_3.h" line="212" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sphere__3_1add19b579062be36f8cc5cd4a19fbfd0d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Bbox__3" kindref="compound">Bbox_3</ref></type>
        <definition>Bbox_3 CGAL::Sphere_3&lt; Kernel &gt;::bbox</definition>
        <argsstring>() const</argsstring>
        <name>bbox</name>
        <briefdescription>
<para>returns a bounding box containing <computeroutput>c</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sphere_3.h" line="219" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An object of type <computeroutput><ref refid="classCGAL_1_1Sphere__3" kindref="compound">Sphere_3</ref></computeroutput> is a sphere in the three-dimensional Euclidean space <formula id="33">$ \E^3$</formula>. </para>    </briefdescription>
    <detaileddescription>
<para>The sphere is oriented, i.e. its boundary has clockwise or counterclockwise orientation. The boundary splits <formula id="33">$ \E^3$</formula> into a positive and a negative side, where the positive side is to the left of the boundary. The boundary also splits <formula id="33">$ \E^3$</formula> into a bounded and an unbounded side. Note that the sphere can be degenerated, i.e. the squared radius may be zero.</para><para><xrefsect id="models_1_models000028"><xreftitle>Is Model Of</xreftitle><xrefdescription><para><computeroutput><ref refid="classKernel_1_1Sphere__3" kindref="compound">Kernel::Sphere_3</ref></computeroutput></para></xrefdescription></xrefsect></para>    </detaileddescription>
    <location file="CGAL/Sphere_3.h" line="18" column="1" bodyfile="CGAL/Sphere_3.h" bodystart="18" bodyend="223"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Sphere__3_1add19b579062be36f8cc5cd4a19fbfd0d" prot="public" virt="non-virtual"><scope>CGAL::Sphere_3</scope><name>bbox</name></member>
      <member refid="classCGAL_1_1Sphere__3_1a2d9e0d2c5935417158b9a01e9e3df81c" prot="public" virt="non-virtual"><scope>CGAL::Sphere_3</scope><name>bounded_side</name></member>
      <member refid="classCGAL_1_1Sphere__3_1ab8cfead38345cc3f27593743023e1c3b" prot="public" virt="non-virtual"><scope>CGAL::Sphere_3</scope><name>center</name></member>
      <member refid="classCGAL_1_1Sphere__3_1af8267bffaad6c16d337c05c8a65f583b" prot="public" virt="non-virtual"><scope>CGAL::Sphere_3</scope><name>has_on</name></member>
      <member refid="classCGAL_1_1Sphere__3_1a2bb006a5140a1bfdc8e6026c6f4ac5a7" prot="public" virt="non-virtual"><scope>CGAL::Sphere_3</scope><name>has_on</name></member>
      <member refid="classCGAL_1_1Sphere__3_1aa03e57f82d680c541ca9680b098dea4e" prot="public" virt="non-virtual"><scope>CGAL::Sphere_3</scope><name>has_on_boundary</name></member>
      <member refid="classCGAL_1_1Sphere__3_1a3cb3da4ac0d084f139736275ae8d2838" prot="public" virt="non-virtual"><scope>CGAL::Sphere_3</scope><name>has_on_bounded_side</name></member>
      <member refid="classCGAL_1_1Sphere__3_1a9b0d1558cb06b537f920ab9b564e6cac" prot="public" virt="non-virtual"><scope>CGAL::Sphere_3</scope><name>has_on_negative_side</name></member>
      <member refid="classCGAL_1_1Sphere__3_1a2bb910c9c18714d140bba8f8438614a8" prot="public" virt="non-virtual"><scope>CGAL::Sphere_3</scope><name>has_on_positive_side</name></member>
      <member refid="classCGAL_1_1Sphere__3_1a15f7a6a22b0c5eb422c290a87c785229" prot="public" virt="non-virtual"><scope>CGAL::Sphere_3</scope><name>has_on_unbounded_side</name></member>
      <member refid="classCGAL_1_1Sphere__3_1a50558a040bf482f33cfe72a279b1c28c" prot="public" virt="non-virtual"><scope>CGAL::Sphere_3</scope><name>is_degenerate</name></member>
      <member refid="classCGAL_1_1Sphere__3_1a1eb1c79c67d3eec0c2c4fbb6edbbb151" prot="public" virt="non-virtual"><scope>CGAL::Sphere_3</scope><name>operator!=</name></member>
      <member refid="classCGAL_1_1Sphere__3_1ac81c5170344e325414da020f269a022e" prot="public" virt="non-virtual"><scope>CGAL::Sphere_3</scope><name>operator==</name></member>
      <member refid="classCGAL_1_1Sphere__3_1a3a8d42b6bd90a5e7b059cd8746628151" prot="public" virt="non-virtual"><scope>CGAL::Sphere_3</scope><name>opposite</name></member>
      <member refid="classCGAL_1_1Sphere__3_1ad2211a8660504791e1a3f3b07123de33" prot="public" virt="non-virtual"><scope>CGAL::Sphere_3</scope><name>orientation</name></member>
      <member refid="classCGAL_1_1Sphere__3_1a84be404730bc31d1dff7b508b60d4e7f" prot="public" virt="non-virtual"><scope>CGAL::Sphere_3</scope><name>oriented_side</name></member>
      <member refid="classCGAL_1_1Sphere__3_1ad34fc88c16adbc448cb9d5d3ebef0fe8" prot="public" virt="non-virtual"><scope>CGAL::Sphere_3</scope><name>orthogonal_transform</name></member>
      <member refid="classCGAL_1_1Sphere__3_1afaa9b613520cfde8fbd53c643c9cf921" prot="public" virt="non-virtual"><scope>CGAL::Sphere_3</scope><name>Sphere_3</name></member>
      <member refid="classCGAL_1_1Sphere__3_1a258421fe590a1fc492e518657f936c3d" prot="public" virt="non-virtual"><scope>CGAL::Sphere_3</scope><name>Sphere_3</name></member>
      <member refid="classCGAL_1_1Sphere__3_1a6306f35aef828d87342ce5f40fce086f" prot="public" virt="non-virtual"><scope>CGAL::Sphere_3</scope><name>Sphere_3</name></member>
      <member refid="classCGAL_1_1Sphere__3_1a74ef3da6618b4c6d93ea59bff3db6291" prot="public" virt="non-virtual"><scope>CGAL::Sphere_3</scope><name>Sphere_3</name></member>
      <member refid="classCGAL_1_1Sphere__3_1a9144992b5e0f92a500461b5ebed78e9b" prot="public" virt="non-virtual"><scope>CGAL::Sphere_3</scope><name>Sphere_3</name></member>
      <member refid="classCGAL_1_1Sphere__3_1aa9b2577a2c9cb9bea94203c2864df711" prot="public" virt="non-virtual"><scope>CGAL::Sphere_3</scope><name>Sphere_3</name></member>
      <member refid="classCGAL_1_1Sphere__3_1a03c9ce3ea9c6afa81d3526443f7fee5e" prot="public" virt="non-virtual"><scope>CGAL::Sphere_3</scope><name>squared_radius</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
