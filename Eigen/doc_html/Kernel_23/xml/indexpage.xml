<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>User Manual</title>
    <detaileddescription>
<para><anchor id="index_1Chapter_2D_and_3D_Geometry_Kernel"/><anchor id="index_1chapterkernel23"/>  <simplesect kind="authors"><para>Herv<eacute/> Br<oumlaut/>nnimann, Andreas Fabri, Geert-Jan Giezeman, Susan Hert, Michael Hoffmann, Lutz Kettner, Sylvain Pion, and Stefan Schirra</para></simplesect>
</para><sect1 id="index_1kernel_intro">
<title>Introduction</title>
<para>CGAL, the <emphasis>Computational Geometry Algorithms Library</emphasis>, is written in C++ and consists of three major parts. The first part is the kernel, which consists of constant-size non-modifiable geometric primitive objects and operations on these objects. The objects are represented both as stand-alone classes that are parameterized by a representation class, which specifies the underlying number types used for calculations and as members of the kernel classes, which allows for more flexibility and adaptability of the kernel. The second part is a collection of basic geometric data structures and algorithms, which are parameterized by traits classes that define the interface between the data structure or algorithm and the primitives they use. In many cases, the kernel classes provided in CGAL can be used as traits classes for these data structures and algorithms. The third part of the library consists of non-geometric support facilities, such as circulators, random sources, I/O support for debugging and for interfacing CGAL to various visualization tools.</para><para>This part of the reference manual covers the kernel. The kernel contains objects of constant size, such as point, vector, direction, line, ray, segment, triangle, iso-oriented rectangle and tetrahedron. With each type comes a set of functions which can be applied to an object of this type. You will typically find access functions (e.g. to the coordinates of a point), tests of the position of a point relative to the object, a function returning the bounding box, the length, or the area of an object, and so on. The CGAL kernel further contains basic operations such as affine transformations, detection and computation of intersections, and distance computations.</para><sect2 id="index_1Kernel_23Robustness">
<title>Robustness</title>
<para>The correctness proof of nearly all geometric algorithms presented in theory papers assumes exact computation with real numbers. This leads to a fundamental problem with the implementation of geometric algorithms. Naively, often the exact real arithmetic is replaced by inexact floating-point arithmetic in the implementation. This often leads to acceptable results for many input data. However, even for the implementation of the simplest geometric algorithms this simplification occasionally does not work. Rounding errors introduced by an inaccurate arithmetic may lead to inconsistent decisions, causing unexpected failures for some correct input data. There are many approaches to this problem, one of them is to compute exactly (compute so accurate that all decisions made by the algorithm are exact) which is possible in many cases but more expensive than standard floating-point arithmetic. C. M. Hoffmann <ref refid="citelist_1CITEREF_h-gsm-89" kindref="member">[3]</ref>, <ref refid="citelist_1CITEREF_h-pargc-89" kindref="member">[2]</ref> illustrates some of the problems arising in the implementation of geometric algorithms and discusses some approaches to solve them. A more recent overview is given in <ref refid="citelist_1CITEREF_s-rpigc-00" kindref="member">[5]</ref>. The exact computation paradigm is discussed by Yap and Dub<eacute/> <ref refid="citelist_1CITEREF_yd-ecp-95" kindref="member">[6]</ref> and Yap <ref refid="citelist_1CITEREF_y-tegc-97" kindref="member">[7]</ref>.</para><para>In CGAL you can choose the underlying number types and arithmetic. You can use different types of arithmetic simultaneously and the choice can be easily changed, e.g. for testing. So you can choose between implementations with fast but occasionally inexact arithmetic and implementations guaranteeing exact computation and exact results. Of course you have to pay for the exactness in terms of execution time and storage space. See the dedicated chapter for more details on number types and their capabilities and performance.</para></sect2>
</sect1>
<sect1 id="index_1kernel_rep">
<title>Kernel Representations</title>
<para>Our object of study is the <formula id="128">$ d$</formula>-dimensional affine Euclidean space. Here we are mainly concerned with cases <formula id="129">$ d=2$</formula> and <formula id="130">$ d=3$</formula>. Objects in that space are sets of points. A common way to represent the points is the use of Cartesian coordinates, which assumes a reference frame (an origin and <formula id="128">$ d$</formula> orthogonal axes). In that framework, a point is represented by a <formula id="128">$ d$</formula>-tuple <formula id="131">$ (c_0,c_1,\ldots,c_{d-1})$</formula>, and so are vectors in the underlying linear space. Each point is represented uniquely by such Cartesian coordinates. Another way to represent points is by homogeneous coordinates. In that framework, a point is represented by a <formula id="132">$ (d+1)$</formula>-tuple <formula id="133">$ (h_0,h_1,\ldots,h_d)$</formula>. Via the formulae <formula id="134">$ c_i = h_i/h_d$</formula>, the corresponding point with Cartesian coordinates <formula id="131">$ (c_0,c_1,\ldots,c_{d-1})$</formula> can be computed. Note that homogeneous coordinates are not unique. For <formula id="135">$ \lambda\ne 0$</formula>, the tuples <formula id="133">$ (h_0,h_1,\ldots,h_d)$</formula> and <formula id="136">$ (\lambda\cdot h_0,\lambda\cdot h_1,\ldots,\lambda\cdot h_d)$</formula> represent the same point. For a point with Cartesian coordinates <formula id="131">$ (c_0,c_1,\ldots,c_{d-1})$</formula> a possible homogeneous representation is <formula id="137">$ (c_0,c_1,\ldots,c_{d-1},1)$</formula>. Homogeneous coordinates in fact allow to represent objects in a more general space, the projective space <formula id="138">$ \mathbb{P}^d$</formula>. In CGAL we do not compute in projective geometry. Rather, we use homogeneous coordinates to avoid division operations, since the additional coordinate can serve as a common denominator.</para><sect2 id="index_1Kernel_23GenericityThroughParameterization">
<title>Genericity Through Parameterization</title>
<para>Almost all the kernel objects (and the corresponding functions) are templates with a parameter that allows the user to choose the representation of the kernel objects. A type that is used as an argument for this parameter must fulfill certain requirements on syntax and semantics. The list of requirements defines an abstract kernel concept. For all kernel objects types, the types <computeroutput>CGAL::Type&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput> and <computeroutput>Kernel::Type</computeroutput> are identical.</para><para>CGAL offers four families of concrete models for the concept <ref refid="classKernel" kindref="compound">Kernel</ref>, two based on the Cartesian representation of points and two based on the homogeneous representation of points. The interface of the kernel objects is designed such that it works well with both Cartesian and homogeneous representation. For example, points in 2D have a constructor with three arguments as well (the three homogeneous coordinates of the point). The common interfaces parameterized with a kernel class allow one to develop code independent of the chosen representation. We said &quot;families&quot; of models, because both families are parameterized too. A user can choose the number type used to represent the coordinates.</para><para>For reasons that will become evident later, a kernel class provides two typenames for number types, namely <computeroutput><ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref></computeroutput> and <computeroutput><ref refid="classKernel_1aacd6ff704fc864440c40993a40210f6b" kindref="member">Kernel::RT</ref></computeroutput>. The type <computeroutput><ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref></computeroutput> must fulfill the requirements on what is called a <computeroutput><ref refid="classFieldNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref></computeroutput> in CGAL. This roughly means that <computeroutput><ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref></computeroutput> is a type for which operations <formula id="139">$ +$</formula>, <formula id="140">$ -$</formula>, <formula id="141">$ *$</formula> and <formula id="142">$ /$</formula> are defined with semantics (approximately) corresponding to those of a field in a mathematical sense. Note that, strictly speaking, the built-in type <computeroutput>int</computeroutput> does not fulfill the requirements on a field type, since <computeroutput>int</computeroutput>s correspond to elements of a ring rather than a field, especially operation <formula id="142">$ /$</formula> is not the inverse of <formula id="141">$ *$</formula>. The requirements on the type <computeroutput><ref refid="classKernel_1aacd6ff704fc864440c40993a40210f6b" kindref="member">Kernel::RT</ref></computeroutput> are weaker. This type must fulfill the requirements on what is called a <computeroutput><ref refid="classRingNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RingNumberType</ref></computeroutput> in CGAL. This roughly means that <computeroutput><ref refid="classKernel_1aacd6ff704fc864440c40993a40210f6b" kindref="member">Kernel::RT</ref></computeroutput> is a type for which operations <formula id="139">$ +$</formula>, <formula id="140">$ -$</formula>, <formula id="141">$ *$</formula> are defined with semantics (approximately) corresponding to those of a ring in a mathematical sense.</para></sect2>
<sect2 id="index_1Kernel_23CartesianKernels">
<title>Cartesian Kernels</title>
<para>With <computeroutput><ref refid="structCGAL_1_1Cartesian" kindref="compound">Cartesian</ref>&lt;<ref refid="classFieldNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref>&gt;</computeroutput> you can choose a Cartesian representation of coordinates. When you choose Cartesian representation you have to declare at the same time the type of the coordinates. A number type used with the <computeroutput><ref refid="structCGAL_1_1Cartesian" kindref="compound">Cartesian</ref></computeroutput> representation class should be a <ref refid="classFieldNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref> as described above. As mentioned above, the built-in type <computeroutput>int</computeroutput> is not a <ref refid="classFieldNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref>. However, for some computations with Cartesian representation, no division operation is needed, i.e., a <computeroutput><ref refid="classRingNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RingNumberType</ref></computeroutput> is sufficient in this case. With <computeroutput><ref refid="structCGAL_1_1Cartesian" kindref="compound">Cartesian</ref>&lt;<ref refid="classFieldNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref>&gt;</computeroutput>, both <ref refid="structCGAL_1_1Cartesian_1a8cb4bfb5620f0972f846f002db57f67e" kindref="member">Cartesian&lt;FieldNumberType&gt;::FT</ref> and <ref refid="structCGAL_1_1Cartesian_1a4669cacde64b5fe6f7a35f4844c58398" kindref="member">Cartesian&lt;FieldNumberType&gt;::RT</ref> are mapped to <computeroutput><ref refid="classFieldNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref></computeroutput>.</para><para><computeroutput><ref refid="structCGAL_1_1Cartesian" kindref="compound">Cartesian</ref>&lt;<ref refid="classFieldNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref>&gt;</computeroutput> uses reference counting internally to save copying costs. CGAL also provides <computeroutput><ref refid="structCGAL_1_1Simple__cartesian" kindref="compound">Simple_cartesian</ref>&lt;<ref refid="classFieldNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref>&gt;</computeroutput>, a kernel that uses Cartesian representation but no reference counting. Debugging is easier with <computeroutput><ref refid="structCGAL_1_1Simple__cartesian" kindref="compound">Simple_cartesian</ref>&lt;<ref refid="classFieldNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref>&gt;</computeroutput>, since the coordinates are stored within the class and hence direct access to the coordinates is possible. Depending on the algorithm, it can also be slightly more or less efficient than <computeroutput><ref refid="structCGAL_1_1Cartesian" kindref="compound">Cartesian</ref>&lt;<ref refid="classFieldNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref>&gt;</computeroutput>. Again, in <computeroutput><ref refid="structCGAL_1_1Simple__cartesian" kindref="compound">Simple_cartesian</ref>&lt;<ref refid="classFieldNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref>&gt;</computeroutput> both <ref refid="structCGAL_1_1Simple__cartesian_1a7c21b43a7da612194bd57c927f80ebc3" kindref="member">Simple_cartesian&lt;FieldNumberType&gt;::FT </ref> and <ref refid="structCGAL_1_1Simple__cartesian_1a33d4df5a291b37d25476b6f35c1d1bf9" kindref="member">Simple_cartesian&lt;FieldNumberType&gt;::RT </ref> are mapped to <computeroutput><ref refid="classFieldNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref></computeroutput>.</para></sect2>
<sect2 id="index_1Kernel_23HomogeneousKernels">
<title>Homogeneous Kernels</title>
<para>Homogeneous coordinates permit to avoid division operations in numerical computations, since the additional coordinate can serve as a common denominator. Avoiding divisions can be useful for exact geometric computation. With <computeroutput><ref refid="structCGAL_1_1Homogeneous" kindref="compound">Homogeneous</ref>&lt;<ref refid="classRingNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RingNumberType</ref>&gt;</computeroutput> you can choose a homogeneous representation for the coordinates of the kernel objects. As for the Cartesian representation, one has to declare the type used to store the coordinates. Since the homogeneous representation does not use divisions, the number type associated with a homogeneous representation class must be a model for the weaker concept <computeroutput><ref refid="classRingNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RingNumberType</ref></computeroutput> only. However, some operations provided by this kernel involve divisions, for example computing squared distances or Cartesian coordinates. To keep the requirements on the number type parameter of <computeroutput><ref refid="structCGAL_1_1Homogeneous" kindref="compound">Homogeneous</ref></computeroutput> low, the number type <computeroutput><ref refid="classCGAL_1_1Quotient" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">Quotient</ref>&lt;<ref refid="classRingNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RingNumberType</ref>&gt;</computeroutput> is used for operations that require divisions. This number type can be viewed as an adaptor which turns a <computeroutput><ref refid="classRingNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RingNumberType</ref></computeroutput> into a <computeroutput><ref refid="classFieldNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref></computeroutput>. It maintains numbers as quotients, i.e., a numerator and a denominator. With <computeroutput><ref refid="structCGAL_1_1Homogeneous" kindref="compound">Homogeneous</ref>&lt;<ref refid="classRingNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RingNumberType</ref>&gt;</computeroutput>, <ref refid="structCGAL_1_1Homogeneous_1a002a92b6c4048842b3bf528f3c4bacf7" kindref="member">Homogeneous&lt;RingNumberType&gt;::FT </ref> is equal to <computeroutput><ref refid="classCGAL_1_1Quotient" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">Quotient</ref>&lt;<ref refid="classRingNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RingNumberType</ref>&gt;</computeroutput>, while <ref refid="structCGAL_1_1Homogeneous_1a79110268c6cc705967095874abe53e6d" kindref="member">Homogeneous&lt;RingNumberType&gt;::RT</ref> is equal to <computeroutput><ref refid="classRingNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RingNumberType</ref></computeroutput>.</para><para><computeroutput><ref refid="structCGAL_1_1Homogeneous" kindref="compound">Homogeneous</ref>&lt;<ref refid="classRingNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RingNumberType</ref>&gt;</computeroutput> uses reference counting internally to save copying costs. CGAL also provides <computeroutput><ref refid="structCGAL_1_1Simple__homogeneous" kindref="compound">Simple_homogeneous</ref>&lt;<ref refid="classRingNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RingNumberType</ref>&gt;</computeroutput>, a kernel that uses homogeneous representation but no reference counting. Debugging is easier with <computeroutput><ref refid="structCGAL_1_1Simple__homogeneous" kindref="compound">Simple_homogeneous</ref>&lt;<ref refid="classRingNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RingNumberType</ref>&gt;</computeroutput>, since the coordinates are stored within the class and hence direct access to the coordinates is possible. Depending on the algorithm, it can also be slightly more or less efficient than <computeroutput><ref refid="structCGAL_1_1Homogeneous" kindref="compound">Homogeneous</ref>&lt;<ref refid="classRingNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RingNumberType</ref>&gt;</computeroutput>. Again, in <computeroutput><ref refid="structCGAL_1_1Simple__homogeneous" kindref="compound">Simple_homogeneous</ref>&lt;<ref refid="classRingNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RingNumberType</ref>&gt;</computeroutput> the type <ref refid="structCGAL_1_1Simple__homogeneous_1a3437428a4684ec9298cbf3b63f2fa560" kindref="member">Simple_homogeneous&lt;RingNumberType&gt;::FT </ref> is equal to <computeroutput><ref refid="classCGAL_1_1Quotient" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">Quotient</ref>&lt;<ref refid="classRingNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RingNumberType</ref>&gt;</computeroutput> while <ref refid="structCGAL_1_1Simple__homogeneous_1a7cd6934f5eef128a6368f9ec3bfee0ba" kindref="member">Simple_homogeneous&lt;RingNumberType&gt;::RT </ref> is equal to <computeroutput><ref refid="classRingNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RingNumberType</ref></computeroutput>.</para></sect2>
<sect2 id="index_1Kernel_23NamingConventions">
<title>Naming Conventions</title>
<para>The use of kernel classes not only avoids problems, it also makes all CGAL classes very uniform. They always consist of: <orderedlist>
<listitem>
<para>The <emphasis>capitalized base name</emphasis> of the geometric object, such as <computeroutput>Point</computeroutput>, <computeroutput>Segment</computeroutput>, or <computeroutput>Triangle</computeroutput>.</para><para></para></listitem>
<listitem>
<para>An <emphasis>underscore</emphasis> followed by the <emphasis>dimension</emphasis> of the object, for example <formula id="143">$ \_2$</formula>, <formula id="144">$ \_3$</formula>, or <formula id="145">$ \_d$</formula>.</para><para></para></listitem>
<listitem>
<para>A <emphasis>kernel class</emphasis> as parameter, which itself is parameterized with a number type, such as <computeroutput><ref refid="structCGAL_1_1Cartesian" kindref="compound">Cartesian</ref>&lt;double&gt;</computeroutput> or <computeroutput><ref refid="structCGAL_1_1Homogeneous" kindref="compound">Homogeneous</ref>&lt;<ref refid="classleda__integer" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">leda_integer</ref>&gt;</computeroutput>. </para></listitem>
</orderedlist>
</para></sect2>
<sect2 id="index_1Kernel_23KernelasaTraitsClass">
<title>Kernel as a Traits Class</title>
<para>Algorithms and data structures in the basic library of CGAL are parameterized by a traits class that subsumes the objects on which the algorithm or data structure operates as well as the operations to do so. For most of the algorithms and data structures in the basic library you can use a kernel as a traits class. For some algorithms you even do not have to specify the kernel; it is detected automatically using the types of the geometric objects passed to the algorithm. In some other cases, the algorithms or data structures needs more than is provided by the kernel concept. In these cases, a kernel can not be used as a traits class.</para></sect2>
<sect2 id="index_1Kernel_23ChoosingaKernelandPredefinedKernels">
<title>Choosing a Kernel and Predefined Kernels</title>
<para>If you start with integral Cartesian coordinates, many geometric computations will involve integral numerical values only. Especially, this is true for geometric computations that evaluate only predicates, which are tantamount to determinant computations. Examples are triangulation of point sets and convex hull computation. In this case, the Cartesian representation is probably the first choice, even with a ring type. You might use limited precision integer types like <computeroutput>int</computeroutput> or <computeroutput>long</computeroutput>, use <computeroutput>double</computeroutput> to present your integers (they have more bits in their mantissa than an <computeroutput>int</computeroutput> and overflow nicely), or an arbitrary precision integer type like the wrapper <computeroutput><ref refid="classCGAL_1_1Gmpz" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">Gmpz</ref></computeroutput> for the GMP integers, <computeroutput><ref refid="classleda__integer" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">leda_integer</ref></computeroutput>, or <computeroutput><ref refid="classCGAL_1_1MP__Float" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">MP_Float</ref></computeroutput>. Note, that unless you use an arbitrary precision ring type, incorrect results might arise due to overflow.</para><para>If new points are to be constructed, for example the intersection point of two lines, computation of Cartesian coordinates usually involves divisions. Hence, one needs to use a <computeroutput><ref refid="classFieldNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref></computeroutput> with Cartesian representation, or alternatively, switch to homogeneous representation. The type <computeroutput>double</computeroutput> is a - though imprecise - model for <computeroutput><ref refid="classFieldNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref></computeroutput>. You can also put any <computeroutput><ref refid="classRingNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RingNumberType</ref></computeroutput> into the <computeroutput><ref refid="classCGAL_1_1Quotient" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">Quotient</ref></computeroutput> adaptor to get a field type which then can be put into <computeroutput><ref refid="structCGAL_1_1Cartesian" kindref="compound">Cartesian</ref></computeroutput>. But using homogeneous representation on the <computeroutput><ref refid="classRingNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RingNumberType</ref></computeroutput> is usually the better option. Other valid <computeroutput><ref refid="classFieldNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref></computeroutput>s are <computeroutput><ref refid="classleda__rational" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">leda_rational</ref></computeroutput> and <computeroutput><ref refid="classleda__real" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">leda_real</ref></computeroutput>.</para><para>If it is crucial for you that the computation is reliable, the right choice is probably a number type that guarantees exact computation. The <computeroutput><ref refid="structCGAL_1_1Filtered__kernel" kindref="compound">Filtered_kernel</ref></computeroutput> provides a way to apply filtering techniques <ref refid="citelist_1CITEREF_cgal:bbp-iayed-01" kindref="member">[1]</ref> to achieve a kernel with exact and efficient predicates. Still other people will prefer the built-in type <computeroutput>double</computeroutput>, because they need speed and can live with approximate results, or even algorithms that, from time to time, crash or compute incorrect results due to accumulated rounding errors.</para><sect3 id="index_1Kernel_23PredefinedKernels">
<title>Predefined Kernels</title>
<para>For the user&apos;s convenience, CGAL provides 3 typedefs to generally useful kernels.</para><para><itemizedlist>
<listitem>
<para>They are all Cartesian kernels. </para></listitem>
<listitem>
<para>They all support constructions of points from <computeroutput>double</computeroutput> Cartesian coordinates. </para></listitem>
<listitem>
<para>All these 5 kernels provide exact geometric predicates. </para></listitem>
<listitem>
<para>They handle geometric constructions differently: <itemizedlist>
<listitem>
<para><computeroutput><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound">Exact_predicates_inexact_constructions_kernel</ref></computeroutput>: provides exact geometric predicates, but geometric constructions may be inexact due to round-off errors. It is however enough for many CGAL algorithms, and faster than the kernels with exact constructions below. </para></listitem>
<listitem>
<para><computeroutput><ref refid="classCGAL_1_1Exact__predicates__exact__constructions__kernel" kindref="compound">Exact_predicates_exact_constructions_kernel</ref></computeroutput>: provides exact geometric constructions, in addition to exact geometric predicates. </para></listitem>
<listitem>
<para><computeroutput><ref refid="classCGAL_1_1Exact__predicates__exact__constructions__kernel__with__sqrt" kindref="compound">Exact_predicates_exact_constructions_kernel_with_sqrt</ref></computeroutput>: same as <computeroutput><ref refid="classCGAL_1_1Exact__predicates__exact__constructions__kernel" kindref="compound">Exact_predicates_exact_constructions_kernel</ref></computeroutput>, but the number type is a model of concept <computeroutput><ref refid="classFieldWithSqrt" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">FieldWithSqrt</ref></computeroutput>. Currently it requires having either LEDA or <ref refid="namespaceCORE" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">CORE</ref> installed.. </para></listitem>
<listitem>
<para><computeroutput><ref refid="classCGAL_1_1Exact__predicates__exact__constructions__kernel__with__kth__root" kindref="compound">Exact_predicates_exact_constructions_kernel_with_kth_root</ref></computeroutput> same as <computeroutput><ref refid="classCGAL_1_1Exact__predicates__exact__constructions__kernel" kindref="compound">Exact_predicates_exact_constructions_kernel</ref></computeroutput>, but the number type is a model of concept <computeroutput><ref refid="classFieldWithKthRoot" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">FieldWithKthRoot</ref></computeroutput>. Currently it requires having either LEDA or <ref refid="namespaceCORE" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">CORE</ref> installed.. </para></listitem>
<listitem>
<para><computeroutput><ref refid="classCGAL_1_1Exact__predicates__exact__constructions__kernel__with__root__of" kindref="compound">Exact_predicates_exact_constructions_kernel_with_root_of</ref></computeroutput>: same as <computeroutput><ref refid="classCGAL_1_1Exact__predicates__exact__constructions__kernel" kindref="compound">Exact_predicates_exact_constructions_kernel</ref></computeroutput>, but the number type is a model of concept <computeroutput><ref refid="classFieldWithRootOf" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">FieldWithRootOf</ref></computeroutput>. Currently it requires having either LEDA or <ref refid="namespaceCORE" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">CORE</ref> installed.. </para></listitem>
</itemizedlist>
</para></listitem>
</itemizedlist>
</para></sect3>
</sect2>
</sect1>
<sect1 id="index_1Kernel_23Kernel">
<title>Kernel Geometry</title>
<sect2 id="index_1Kernel_23PointsandVectors">
<title>Points and Vectors</title>
<para>In CGAL we strictly distinguish between points, vectors and directions. A <emphasis>point</emphasis> is a point in the Euclidean space <formula id="146">$ \E^d$</formula>, a <emphasis>vector</emphasis> is the difference of two points <formula id="96">$ p_2$</formula>, <formula id="95">$ p_1$</formula> and denotes the direction and the distance from <formula id="95">$ p_1$</formula> to <formula id="96">$ p_2$</formula> in the vector space <formula id="147">$ \mathbb{R}^d$</formula>, and a <emphasis>direction</emphasis> is a vector where we forget about its length. They are different mathematical concepts. For example, they behave different under affine transformations and an addition of two points is meaningless in affine geometry. By putting them in different classes we not only get cleaner code, but also type checking by the compiler which avoids ambiguous expressions. Hence, it pays twice to make this distinction.</para><para>CGAL defines a symbolic constant <ref refid="group__kernel__enums_1ga9d272a8e3a8080b851741b6d3a44afdc" kindref="member">ORIGIN</ref> of type <computeroutput><ref refid="classCGAL_1_1Origin" kindref="compound">Origin</ref></computeroutput> which denotes the point at the origin. This constant is used in the conversion between points and vectors. Subtracting it from a point <formula id="107">$ p$</formula> results in the locus vector of <formula id="107">$ p$</formula>.</para><para><programlisting><codeline><highlight class="normal">Cartesian&lt;double&gt;::Point_2<sp/>p(1.0,<sp/>1.0),<sp/>q;</highlight></codeline>
<codeline><highlight class="normal">Cartesian&lt;double&gt;::Vector_2<sp/>v;</highlight></codeline>
<codeline><highlight class="normal">v<sp/>=<sp/>p<sp/>-<sp/><ref refid="group__kernel__enums_1ga9d272a8e3a8080b851741b6d3a44afdc" kindref="member">ORIGIN</ref>;</highlight></codeline>
<codeline><highlight class="normal">q<sp/>=<sp/>ORIGIN<sp/>+<sp/>v;<sp/></highlight></codeline>
<codeline><highlight class="normal">assert(<sp/>p<sp/>==<sp/>q<sp/>);</highlight></codeline>
</programlisting></para><para>In order to obtain the point corresponding to a vector <formula id="148">$ v$</formula> you simply have to add <formula id="148">$ v$</formula> to <ref refid="group__kernel__enums_1ga9d272a8e3a8080b851741b6d3a44afdc" kindref="member">ORIGIN</ref>. If you want to determine the point <formula id="108">$ q$</formula> in the middle between two points <formula id="95">$ p_1$</formula> and <formula id="96">$ p_2$</formula>, you can writeyou might call <computeroutput>midpoint(p_1,p_2)</computeroutput> instead.</para><para><programlisting><codeline><highlight class="normal">q<sp/>=<sp/>p_1<sp/>+<sp/>(p_2<sp/>-<sp/>p_1)<sp/>/<sp/>2.0;</highlight></codeline>
</programlisting></para><para>Note that these constructions do not involve any performance overhead for the conversion with the currently available representation classes.</para></sect2>
<sect2 id="index_1Kernel_23KernelObjects">
<title>Kernel Objects</title>
<para>Besides points (<computeroutput><ref refid="classKernel_1_1Point__2" kindref="compound">Kernel::Point_2</ref></computeroutput>, <computeroutput><ref refid="classKernel_1_1Point__3" kindref="compound">Kernel::Point_3</ref></computeroutput>), vectors (<computeroutput><ref refid="classKernel_1_1Vector__2" kindref="compound">Kernel::Vector_2</ref></computeroutput>, <computeroutput><ref refid="classKernel_1_1Vector__3" kindref="compound">Kernel::Vector_3</ref></computeroutput>), and directions (<computeroutput><ref refid="classKernel_1_1Direction__2" kindref="compound">Kernel::Direction_2</ref></computeroutput>, <computeroutput><ref refid="classKernel_1_1Direction__3" kindref="compound">Kernel::Direction_3</ref></computeroutput>), CGAL provides lines, rays, segments, planes, triangles, tetrahedra, iso-rectangles, iso-cuboids, circles and spheres.</para><para>Lines (<computeroutput><ref refid="classKernel_1_1Line__2" kindref="compound">Kernel::Line_2</ref></computeroutput>, <computeroutput><ref refid="classKernel_1_1Line__3" kindref="compound">Kernel::Line_3</ref></computeroutput>) in CGAL are oriented. In two-dimensional space, they induce a partition of the plane into a positive side and a negative side. Any two points on a line induce an orientation of this line. A ray (<computeroutput><ref refid="classKernel_1_1Ray__2" kindref="compound">Kernel::Ray_2</ref></computeroutput>, <computeroutput><ref refid="classKernel_1_1Ray__3" kindref="compound">Kernel::Ray_3</ref></computeroutput>) is semi-infinite interval on a line, and this line is oriented from the finite endpoint of this interval towards any other point in this interval. A segment (<computeroutput><ref refid="classKernel_1_1Segment__2" kindref="compound">Kernel::Segment_2</ref></computeroutput>, <computeroutput><ref refid="classKernel_1_1Segment__3" kindref="compound">Kernel::Segment_3</ref></computeroutput>) is a bounded interval on a directed line, and the endpoints are ordered so that they induce the same direction as that of the line.</para><para>Planes are affine subspaces of dimension two in <formula id="33">$ \E^3$</formula>, passing through three points, or a point and a line, ray, or segment. CGAL provides a correspondence between any plane in the ambient space <formula id="33">$ \E^3$</formula> and the embedding of <formula id="29">$ \E^2$</formula> in that space. Just like lines, planes are oriented and partition space into a positive side and a negative side. In CGAL, there are no special classes for half-spaces. Half-spaces in 2D and 3D are supposed to be represented by oriented lines and planes, respectively.</para><para>Concerning polygons and polyhedra, the kernel provides triangles, iso-oriented rectangles, iso-oriented cuboids and tetrahedra. More complex polygonsAny sequence of points can be seen as a (not necessary simple) polygon or polyline. This view is used frequently in the basic library as well. and polyhedra or polyhedral surfaces can be obtained from the basic library (<computeroutput><ref refid="classCGAL_1_1Polygon__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polygon.tag">Polygon_2</ref></computeroutput>, <computeroutput><ref refid="classCGAL_1_1Polyhedron__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polyhedron.tag">Polyhedron_3</ref></computeroutput>), so they are not part of the kernel. As with any Jordan curves, triangles, iso-oriented rectangles and circles separate the plane into two regions, one bounded and one unbounded.</para></sect2>
<sect2 id="index_1Kernel_23OrientationandRelativePosition">
<title>Orientation and Relative Position</title>
<para>Geometric objects in CGAL have member functions that test the position of a point relative to the object. Full dimensional objects and their boundaries are represented by the same type, e.g. half-spaces and hyperplanes are not distinguished, neither are balls and spheres and discs and circles. Such objects split the ambient space into two full-dimensional parts, a bounded part and an unbounded part (e.g. circles), or two unbounded parts (e.g. hyperplanes). By default these objects are oriented, i.e., one of the resulting parts is called the positive side, the other one is called the negative side. Both of these may be unbounded.</para><para>These objects have a member function <computeroutput>oriented_side()</computeroutput> that determines whether a test point is on the positive side, the negative side, or on the oriented boundary. These function returns a value of type <computeroutput>Oriented_side</computeroutput>.</para><para>Those objects that split the space in a bounded and an unbounded part, have a member function <computeroutput>bounded_side()</computeroutput> with return type <computeroutput>Bounded_side</computeroutput>.</para><para>If an object is lower dimensional, e.g. a triangle in three-dimensional space or a segment in two-dimensional space, there is only a test whether a point belongs to the object or not. This member function, which takes a point as an argument and returns a Boolean value, is called <computeroutput>has_on()</computeroutput>.</para></sect2>
</sect1>
<sect1 id="index_1Kernel_23Predicates">
<title>Predicates and Constructions</title>
<sect2 id="index_1Kernel_23Predicates_1">
<title>Predicates</title>
<para>Predicates are at the heart of a geometry kernel. They are basic units for the composition of geometric algorithms and encapsulate decisions. Hence their correctness is crucial for the control flow and hence for the correctness of an implementation of a geometric algorithm. CGAL uses the term predicate in a generalized sense. Not only components returning a Boolean value are called predicates but also components returning an enumeration type like a <computeroutput>Comparison_result</computeroutput> or an <computeroutput>Orientation</computeroutput>. We say components, because predicates are implemented both as functions and function objects (provided by a kernel class).</para><para>CGAL provides predicates for the orientation of point sets (<computeroutput><ref refid="group__PkgKernelDFunctions_1ga140039774b89a338321c36e14732b787" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">orientation()</ref></computeroutput>, <computeroutput><ref refid="group__left__turn__grp_1ga54cc2a847df7133bee7fd61c7b236dcc" kindref="member">left_turn()</ref></computeroutput>, <computeroutput><ref refid="group__right__turn__grp_1ga0ad6e42d5e16269b43122503521f447a" kindref="member">right_turn()</ref></computeroutput>, <computeroutput><ref refid="group__collinear__grp_1gadaa777c7b2f72b4321fe1ac3893efc3b" kindref="member">collinear()</ref></computeroutput>, <computeroutput><ref refid="group__coplanar__grp_1ga79b3b4bcb01bf81048486dfd59a22c63" kindref="member">coplanar()</ref></computeroutput>), for comparing points according to some given order, especially for comparing Cartesian coordinates (e.g. <computeroutput><ref refid="group__lexicographically__xy__smaller__grp_1gab4ac1479fab3f0e58debc845316a52e7" kindref="member">lexicographically_xy_smaller()</ref></computeroutput>), in-circle and in-sphere tests, and predicates to compare distances.</para></sect2>
<sect2 id="index_1Kernel_23Constructions">
<title>Constructions</title>
<para>Functions and function objects that generate objects that are neither of type <computeroutput>bool</computeroutput> nor enum types are called constructions. Constructions involve computation of new numerical values and may be imprecise due to rounding errors unless a kernel with an exact number type is used.</para><para>Affine transformations (<computeroutput>Kernel::Aff_transformation_2</computeroutput>, <computeroutput>Kernel::Aff_transformation_3</computeroutput>) allow to generate new object instances under arbitrary affine transformations. These transformations include translations, rotations (in 2D only) and scaling. Most of the geometric objects in a kernel have a member function <computeroutput>transform(Aff_transformation t)</computeroutput> which applies the transformation to the object instance.</para><para>CGAL also provides a set of functions that detect or compute the intersection between objects of the 2D kernel, and many objects in the 3D kernel, and functions to calculate their squared distance. Moreover, some member functions of kernel objects are constructions.</para><para>So there are routines that compute the square of the Euclidean distance, but no routines that compute the distance itself. Why? First of all, the two values can be derived from each other quite easily (by taking the square root or taking the square). So, supplying only the one and not the other is only a minor inconvenience for the user. Second, often either value can be used. This is for example the case when (squared) distances are compared. Third, the library wants to stimulate the use of the squared distance instead of the distance. The squared distance can be computed in more cases and the computation is cheaper. We do this by not providing the perhaps more natural routine, The problem of a distance routine is that it needs the <computeroutput>sqrt</computeroutput> operation. This has two drawbacks: <itemizedlist>
<listitem>
<para>The <computeroutput>sqrt</computeroutput> operation can be costly. Even if it is not very costly for a specific number type and platform, avoiding it is always cheaper. </para></listitem>
<listitem>
<para>There are number types on which no <computeroutput>sqrt</computeroutput> operation is defined, especially integer types and rationals. </para></listitem>
</itemizedlist>
</para></sect2>
<sect2 id="index_1Kernel_23VariantReturnValues">
<title>Intersections and Variant Return Types</title>
<para>Some functions, for example <ref refid="group__intersection__linear__grp" kindref="compound"><computeroutput>intersection()</computeroutput></ref>, can return different types of objects. To achieve this in a type-safe way CGAL uses return values of type <computeroutput>boost::optional&lt; boost::variant&lt; T... &gt; &gt;</computeroutput> were <computeroutput>T...</computeroutput> is a list of all possible resulting geometric objects. The exact result type of an intersection can be determined through the metafunction <computeroutput><ref refid="structCGAL_1_1cpp11_1_1result__of" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">cpp11::result_of</ref>&lt;<ref refid="classKernel_1_1Intersect__2" kindref="compound">Kernel::Intersect_2(Type1, Type2)</ref>&gt;</computeroutput> or <computeroutput><ref refid="structCGAL_1_1cpp11_1_1result__of" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">cpp11::result_of</ref>&lt;<ref refid="classKernel_1_1Intersect__3" kindref="compound">Kernel::Intersect_3(Type1, Type2)</ref>&gt;</computeroutput>, where <computeroutput>Type1</computeroutput> and <computeroutput>Type2</computeroutput> are the types of the objects used in the intersection computation.</para><para><heading level="2">Example </heading>
</para><para>In the following example, <computeroutput>result_of</computeroutput> is used to query the type of the return value for the intersection computation:</para><para><programlisting><codeline><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Cartesian&lt;double&gt;<sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Point_2<sp/>Point_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Segment_2<sp/>Segment_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Segment_2<sp/>segment_1,<sp/>segment_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::cin<sp/>&gt;&gt;<sp/>segment_1<sp/>&gt;&gt;<sp/>segment_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>C++11<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>auto<sp/>v<sp/>=<sp/>intersection(segment_1,<sp/>segment_2);</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>C++03<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="structCGAL_1_1cpp11_1_1result__of_1a0116f3bad73d2c51520c134dffbf1449" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">cpp11::result_of&lt;K::Intersect_2(Segment_2, Segment_2)&gt;::type</ref></highlight></codeline>
<codeline><highlight class="normal">v<sp/>=<sp/><ref refid="group__PkgKernelDFunctions_1ga0aa3e8b6bdf1bff509f8e2672ef194d1" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">intersection</ref>(segment_1,<sp/>segment_2);<sp/></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>not<sp/>empty<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point_2<sp/>*p<sp/>=<sp/>boost::get&lt;Point_2&gt;(&amp;*v)<sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>do<sp/>something<sp/>with<sp/>*p<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Segment_2<sp/>*s<sp/>=<sp/>boost::get&lt;Segment_2&gt;(&amp;*v);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>do<sp/>something<sp/>with<sp/>*s<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>intersection<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para></sect2>
<sect2 id="index_1Kernel_23ConstructivePredicates">
<title>Constructive Predicates</title>
<para>For testing where a point <computeroutput>p</computeroutput> lies with respect to a plane defined by three points <computeroutput>q</computeroutput>, <computeroutput>r</computeroutput> and <computeroutput>s</computeroutput>, one may be tempted to construct the plane <computeroutput><ref refid="classKernel_1_1Plane__3" kindref="compound">Kernel::Plane_3(q,r,s)</ref></computeroutput> and use the method <computeroutput>oriented_side(p)</computeroutput>. This may pay off if many tests with respect to the plane are made. Nevertheless, unless the number type is exact, the constructed plane is only approximated, and round-off errors may lead <computeroutput>oriented_side(p)</computeroutput> to return an orientation which is different from the real orientation of <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>r</computeroutput>, and <computeroutput>s</computeroutput>.</para><para>In CGAL, we provide predicates in which such geometric decisions are made directly with a reference to the input points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>r</computeroutput>, <computeroutput>s</computeroutput>, without an intermediary object like a plane. For the above test, the recommended way to get the result is to use <computeroutput>orientation(p,q,r,s)</computeroutput>. For exact number types, the situation is different. If several tests are to be made with the same plane, it pays off to construct the plane and to use <computeroutput>oriented_side(p)</computeroutput>.</para></sect2>
</sect1>
<sect1 id="index_1sectionextensiblekernel">
<title>Extensible Kernel</title>
<para>This manual section describe how users can plug user defined geometric classes in existing CGAL kernels. This is best illustrated by an example.</para><sect2 id="index_1Kernel_23Introduction">
<title>Introduction</title>
<para>CGAL defines the concept of a geometry kernel. Such a kernel provides types, construction objects and generalized predicates. Most implementations of Computational Geometry algorithms and data structures in the basic library of CGAL were done in a way that classes or functions can be parametrized with a geometric traits class.</para><para>In most cases this geometric traits class must be a model of the CGAL geometry kernel concept (but there are some exceptions).</para></sect2>
<sect2 id="index_1Kernel_23AnExtensiveExample">
<title>An Extensive Example</title>
<para>Assume we have the following point class, where the coordinates are stored in an array of <computeroutput>doubles</computeroutput>, where we have another data member <computeroutput>color</computeroutput>, which shows up in the constructor.</para><para><linebreak/>
<bold>File</bold> <ref refid="Kernel_23_2MyPointC2_8h-example" kindref="compound">Kernel_23/MyPointC2.h</ref> <programlisting><codeline><highlight class="preprocessor">#ifndef<sp/>MY_POINTC2_H</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MY_POINTC2_H</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Origin.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Bbox_2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MyPointC2<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vec[2];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MyPointC2()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>col(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*vec<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*(vec+1)<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MyPointC2(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>col(c)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*vec<sp/>=<sp/>x;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*(vec+1)<sp/>=<sp/>y;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>x()</highlight><highlight class="keyword"><sp/>const<sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*vec;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>y()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(vec+1);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;<sp/>x()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*vec;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>y()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(vec+1);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>color()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>col;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>color()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>col;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MyPointC2<sp/>&amp;p)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>*vec<sp/>==<sp/>*(p.vec)<sp/>)<sp/><sp/>&amp;&amp;<sp/>(<sp/>*(vec+1)<sp/>==<sp/>*(p.vec<sp/>+<sp/>1)<sp/>&amp;&amp;<sp/>(<sp/>col<sp/>==<sp/>p.col)<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MyPointC2<sp/>&amp;p)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>p);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>MY_POINTC2_H</highlight></codeline>
</programlisting></para><para>As said earlier the class is pretty minimalistic, for example it has no <computeroutput>bbox()</computeroutput> method. One might assume that a basic library algorithm which computes a bounding box (e.g, to compute the bounding box of a polygon), will not compile. Luckily it will, because it does not use of member functions of geometric objects, but it makes use of the functor <computeroutput><ref refid="classKernel_1a9e2c3a6f5add4668ef1001899189ff6b" kindref="member">Kernel::Construct_bbox_2</ref></computeroutput>.</para><para>To make the right thing happen with <computeroutput>MyPointC2</computeroutput> we have to provide the following functor.</para><para><linebreak/>
<bold>File</bold> <ref refid="Kernel_23_2MyConstruct_bbox_2_8h-example" kindref="compound">Kernel_23/MyConstruct_bbox_2.h</ref> <programlisting><codeline><highlight class="preprocessor">#ifndef<sp/>MYCONSTRUCT_BBOX_2_H</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MYCONSTRUCT_BBOX_2_H</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ConstructBbox_2&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MyConstruct_bbox_2<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ConstructBbox_2<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ConstructBbox_2::operator();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classCGAL_1_1Bbox__2" kindref="compound">CGAL::Bbox_2</ref><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MyPointC2&amp;<sp/>p)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Bbox__2" kindref="compound">CGAL::Bbox_2</ref>(p.x(),<sp/>p.y(),<sp/>p.x(),<sp/>p.y());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//MYCONSTRUCT_BBOX_2_H</highlight></codeline>
</programlisting></para><para>Things are similar for random access to the Cartesian coordinates of a point. As the coordinates are stored in an array of <computeroutput>doubles</computeroutput> we can use <computeroutput>double*</computeroutput> as random access iterator.</para><para><linebreak/>
<bold>File</bold> <ref refid="Kernel_23_2MyConstruct_coord_iterator_8h-example" kindref="compound">Kernel_23/MyConstruct_coord_iterator.h</ref> <programlisting><codeline><highlight class="preprocessor">#ifndef<sp/>MYCONSTRUCT_COORD_ITERATOR_H</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MYCONSTRUCT_COORD_ITERATOR_H</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MyConstruct_coord_iterator<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MyPointC2&amp;<sp/>p)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;p.x();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MyPointC2&amp;<sp/>p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>pyptr<sp/>=<sp/>&amp;p.y();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pyptr++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pyptr;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//MYCONSTRUCT_COORD_ITERATOR_H</highlight></codeline>
</programlisting></para><para>The last functor we have to provide is the one which constructs points. That is you are not forced to add the constructor with the <computeroutput><ref refid="classCGAL_1_1Origin" kindref="compound">Origin</ref></computeroutput> as parameter to your class, nor the constructor with homogeneous coordinates. The functor is a kind of glue layer between the CGAL algorithms and your class.</para><para><linebreak/>
<bold>File</bold> <ref refid="Kernel_23_2MyConstruct_point_2_8h-example" kindref="compound">Kernel_23/MyConstruct_point_2.h</ref> <programlisting><codeline><highlight class="preprocessor">#ifndef<sp/>MYCONSTRUCT_POINT_2_H</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MYCONSTRUCT_POINT_2_H</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OldK&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MyConstruct_point_2</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K::RT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RT;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K::Point_2<sp/><sp/><sp/><sp/>Point_2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K::Line_2<sp/><sp/><sp/><sp/><sp/>Line_2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Point_2::Rep<sp/><sp/>Rep;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Point_2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result_type;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>:<sp/>the<sp/>CGAL::Return_base_tag<sp/>is<sp/>really<sp/>internal<sp/>CGAL<sp/>stuff.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Unfortunately<sp/>it<sp/>is<sp/>needed<sp/>for<sp/>optimizing<sp/>away<sp/>copy-constructions,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>due<sp/>to<sp/>current<sp/>lack<sp/>of<sp/>delegating<sp/>constructors<sp/>in<sp/>the<sp/>C++<sp/>standard.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rep<sp/></highlight><highlight class="comment">//<sp/>Point_2</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>operator()(CGAL::Return_base_tag,<sp/><ref refid="classCGAL_1_1Origin" kindref="compound">CGAL::Origin</ref><sp/>o)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Rep(o);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rep<sp/></highlight><highlight class="comment">//<sp/>Point_2</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>operator()(CGAL::Return_base_tag,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RT&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RT&amp;<sp/>y)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Rep(x,<sp/>y);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rep<sp/></highlight><highlight class="comment">//<sp/>Point_2</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>operator()(CGAL::Return_base_tag,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RT&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RT&amp;<sp/>y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RT&amp;<sp/>w)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Rep(x,<sp/>y,<sp/>w);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Point_2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Origin" kindref="compound">CGAL::Origin</ref>&amp;)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MyPointC2(0,<sp/>0,<sp/>0);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Point_2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RT&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RT&amp;<sp/>y)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MyPointC2(x,<sp/>y,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point_2&amp;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point_2<sp/>&amp;<sp/>p)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Point_2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Line_2&amp;<sp/>l)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OldK::Construct_point_2<sp/>base_operator;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Point_2<sp/>p<sp/>=<sp/>base_operator(l);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Point_2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Line_2&amp;<sp/>l,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OldK::Construct_point_2<sp/>base_operator;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>base_operator(l,<sp/>i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>need<sp/>this<sp/>one,<sp/>as<sp/>such<sp/>a<sp/>functor<sp/>is<sp/>in<sp/>the<sp/>Filtered_kernel</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Point_2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RT&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RT&amp;<sp/>y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RT&amp;<sp/>w)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(w<sp/>!=<sp/>1){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MyPointC2(x/w,<sp/>y/w,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MyPointC2(x,y,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//MYCONSTRUCT_POINT_2_H</highlight></codeline>
</programlisting></para><para>Now we are ready to put the puzzle together. We won&apos;t explain it in detail, but you see that there are <computeroutput>typedefs</computeroutput> to the new point class and the functors. All the other types are inherited.</para><para><linebreak/>
<bold>File</bold> <ref refid="Kernel_23_2MyKernel_8h-example" kindref="compound">Kernel_23/MyKernel.h</ref> <programlisting><codeline><highlight class="preprocessor">#ifndef<sp/>MYKERNEL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MYKERNEL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Cartesian.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;MyPointC2.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;MySegmentC2.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;MyConstruct_bbox_2.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;MyConstruct_coord_iterator.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;MyConstruct_point_2.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>K_<sp/>is<sp/>the<sp/>new<sp/>kernel,<sp/>and<sp/>K_Base<sp/>is<sp/>the<sp/>old<sp/>kernel</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K_,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K_Base<sp/>&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MyCartesian_base</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>K_Base::template<sp/>Base&lt;K_&gt;::Type</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K_Base::template<sp/>Base&lt;K_&gt;::Type<sp/><sp/><sp/>OldK;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K_<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kernel;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>MyPointC2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point_2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>MySegmentC2&lt;Kernel&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Segment_2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>MyConstruct_point_2&lt;Kernel,<sp/>OldK&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Construct_point_2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Cartesian_const_iterator_2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>MyConstruct_coord_iterator<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Construct_cartesian_const_iterator_2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>MyConstruct_bbox_2&lt;typename<sp/>OldK::Construct_bbox_2&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Construct_bbox_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Construct_point_2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>construct_point_2_object()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Construct_point_2();<sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Construct_bbox_2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>construct_bbox_2_object()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Construct_bbox_2();<sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Construct_cartesian_const_iterator_2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>construct_cartesian_const_iterator_2_object()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Construct_cartesian_const_iterator_2();<sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Kernel2<sp/>&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Base<sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>MyCartesian_base&lt;Kernel2,<sp/>K_Base&gt;<sp/><sp/>Type;<sp/>};</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FT_<sp/>&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">MyKernel</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>CGAL::Type_equality_wrapper&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MyCartesian_base&lt;MyKernel&lt;FT_&gt;,<sp/>CGAL::Cartesian&lt;FT_&gt;<sp/>&gt;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MyKernel&lt;FT_&gt;<sp/>&gt;</highlight></codeline>
<codeline><highlight class="normal">{};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>MYKERNEL_H</highlight></codeline>
</programlisting></para><para>Finally, we give an example how this new kernel can be used. Predicates and constructions work with the new point, they can be a used to construct segments and triangles with, and data structures from the Basic Library, as the Delaunay triangulation work with them.</para><para>The kernel itself can be made robust by plugging it in the <computeroutput><ref refid="structCGAL_1_1Filtered__kernel" kindref="compound">Filtered_kernel</ref></computeroutput>.</para><para><linebreak/>
<bold>File</bold> <ref refid="Kernel_23_2MyKernel_8cpp-example" kindref="compound">Kernel_23/MyKernel.cpp</ref> <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/basic.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Filtered_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Delaunay_triangulation_2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/squared_distance_2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;MyKernel.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;MyPointC2_iostream.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>MyKernel&lt;double&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MK;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Filtered__kernel__adaptor" kindref="compound">CGAL::Filtered_kernel_adaptor&lt;MK&gt;</ref><sp/><sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Delaunay__triangulation__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_2.tag">CGAL::Delaunay_triangulation_2&lt;K&gt;</ref><sp/><sp/>Delaunay_triangulation_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Point_2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Segment_2<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Segment;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Ray_2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ray;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Line_2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Line;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Triangle_2<sp/><sp/><sp/><sp/><sp/><sp/>Triangle;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Iso_rectangle_2<sp/>Iso_rectangle;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RED=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BLACK=2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Point<sp/>a(0,0),<sp/>b(1,0),<sp/>c(1,1),<sp/>d(0,1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>a.color()=RED;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>b.color()=BLACK;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>d.color()=RED;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Delaunay_triangulation_2<sp/>dt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>dt.insert(a);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>K::Orientation_2<sp/><ref refid="group__PkgKernelDFunctions_1ga140039774b89a338321c36e14732b787" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">orientation</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgKernelDFunctions_1ga140039774b89a338321c36e14732b787" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">orientation</ref>(a,b,c);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Point<sp/>p(1,2),<sp/>q;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>p.color()<sp/>=<sp/>RED;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>q.color()<sp/>=<sp/>BLACK;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>p<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>K::Compute_squared_distance_2<sp/><ref refid="group__PkgKernelDFunctions_1ga433853179f3d0e0d2b7929723b584517" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">squared_distance</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;squared_distance(a,<sp/>b)<sp/>==<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="group__PkgKernelDFunctions_1ga433853179f3d0e0d2b7929723b584517" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">squared_distance</ref>(a,<sp/>b)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Segment<sp/>s1(p,q),<sp/>s2(a,<sp/>c);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>K::Construct_midpoint_2<sp/>construct_midpoint_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Point<sp/>mp<sp/>=<sp/>construct_midpoint_2(p,q);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;midpoint(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>p<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>q<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mp<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>assert(s1.source().color()<sp/>==<sp/>RED);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>K::Intersect_2<sp/><ref refid="group__PkgKernelDFunctions_1ga0aa3e8b6bdf1bff509f8e2672ef194d1" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">intersection</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">CGAL::cpp11::result_of&lt;K::Intersect_2(Segment, Segment)&gt;::type</ref><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>intersect<sp/>=<sp/><ref refid="group__PkgKernelDFunctions_1ga0aa3e8b6bdf1bff509f8e2672ef194d1" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">intersection</ref>(s1,<sp/>s2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>K::Construct_cartesian_const_iterator_2<sp/>construct_it;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>K::Cartesian_const_iterator_2<sp/><sp/>cit<sp/>=<sp/>construct_it(a);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>assert(*cit<sp/>==<sp/>a.x());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cit<sp/>=<sp/>construct_it(a,0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cit--;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>assert(*cit<sp/>==<sp/>a.y());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Line<sp/>l1(a,b),<sp/>l2(p,<sp/>q);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgKernelDFunctions_1ga0aa3e8b6bdf1bff509f8e2672ef194d1" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">intersection</ref>(l1,<sp/>l2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgKernelDFunctions_1ga0aa3e8b6bdf1bff509f8e2672ef194d1" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">intersection</ref>(s1,<sp/>l1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Ray<sp/>r1(d,b),<sp/>r2(d,c);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgKernelDFunctions_1ga0aa3e8b6bdf1bff509f8e2672ef194d1" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">intersection</ref>(r1,<sp/>r2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgKernelDFunctions_1ga0aa3e8b6bdf1bff509f8e2672ef194d1" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">intersection</ref>(r1,<sp/>l1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgKernelDFunctions_1ga433853179f3d0e0d2b7929723b584517" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">squared_distance</ref>(r1,<sp/>r2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgKernelDFunctions_1ga433853179f3d0e0d2b7929723b584517" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">squared_distance</ref>(r1,<sp/>l2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgKernelDFunctions_1ga433853179f3d0e0d2b7929723b584517" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">squared_distance</ref>(r1,<sp/>s2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Triangle<sp/>t1(a,b,c),<sp/>t2(a,c,d);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgKernelDFunctions_1ga0aa3e8b6bdf1bff509f8e2672ef194d1" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">intersection</ref>(t1,<sp/>t2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgKernelDFunctions_1ga0aa3e8b6bdf1bff509f8e2672ef194d1" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">intersection</ref>(t1,<sp/>l1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgKernelDFunctions_1ga0aa3e8b6bdf1bff509f8e2672ef194d1" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">intersection</ref>(t1,<sp/>s1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgKernelDFunctions_1ga0aa3e8b6bdf1bff509f8e2672ef194d1" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">intersection</ref>(t1,<sp/>r1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Iso_rectangle<sp/>i1(a,c),<sp/>i2(d,p);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgKernelDFunctions_1ga0aa3e8b6bdf1bff509f8e2672ef194d1" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">intersection</ref>(i1,<sp/>i2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgKernelDFunctions_1ga0aa3e8b6bdf1bff509f8e2672ef194d1" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">intersection</ref>(i1,<sp/>s1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgKernelDFunctions_1ga0aa3e8b6bdf1bff509f8e2672ef194d1" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">intersection</ref>(i1,<sp/>r1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgKernelDFunctions_1ga0aa3e8b6bdf1bff509f8e2672ef194d1" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">intersection</ref>(i1,<sp/>l1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>t1.orientation();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>s1.source()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>t1.bbox()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;done&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para></sect2>
<sect2 id="index_1Kernel_23Limitations">
<title>Limitations</title>
<para>The point class must have member functions <computeroutput>x()</computeroutput> and <computeroutput>y()</computeroutput> (and <computeroutput>z()</computeroutput> for the 3d point). We will probably introduce function objects that take care of coordinate access.</para><para>As we enforce type equality between <computeroutput>MyKernel::Point_2</computeroutput> and <computeroutput><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt;MyKernel&gt;</computeroutput>, the constructor with the color as third argument is not available.</para></sect2>
</sect1>
<sect1 id="index_1sectionprojectiontraits">
<title>Projection Traits Classes</title>
<para>It is sometimes useful to apply 2D algorithms to the projection of 3D points on a plane. Examples are triangulated terrains, which are points with elevation, or surface reconstruction from parallel slices, where one wants to check the simplicity or orientation of polygons.</para><para>For this purpose CGAL provides several projection traits classes, which are a model of traits class concepts of 2D triangulations, 2D polygon and 2D convex hull traits classes. The projection traits classes are listed in the &quot;Is Model Of&quot; sections of the concepts.</para></sect1>
<sect1 id="index_1Kernel_23Design">
<title>Design and Implementation History</title>
<para>At a meeting at Utrecht University in January 1995, Olivier Devillers, Andreas Fabri, Wolfgang Freiseisen, Geert-Jan Giezeman, Mark Overmars, Stefan Schirra, Otfried Schwarzkopf (now Otfried Cheong), and Sven Sch<oumlaut/>nherr discussed the foundations of the CGAL kernel. Many design and software engineering issues were addressed, e.g. naming conventions, coupling of classes (flat versus deep class hierarchy), memory allocation, programming conventions, mutability of atomic objects, points and vectors, storing additional information, orthogonality of operations on the kernel objects, viewing non-constant-size objects like polygons as dynamic data structures (and hence not as part of the (innermost) kernel).</para><para>The people attending the meeting delegated the compilation of a draft specification to Stefan Schirra. The resulting draft specification was intentionally modeled on CGAL&apos;s precursors C++gal and Plageo as well as on the geometric part of LEDA. The specification already featured coexistence of Cartesian and homogeneous representation of point/vector data and parameterization by number type(s). During the discussion of the draft a kernel design group was formed. The members of this group were Andreas Fabri, Geert-Jan Giezeman, Lutz Kettner, Stefan Schirra, and Sven Sch<oumlaut/>nherr. The work of the kernel design group led to significant changes and improvements of the original design, e.g. the strong separation between points and vectors. Probably the most important enhancement was the design of a common superstructure for the previously uncoupled Cartesian and homogeneous representations. One can say, that the kernel was designed by this group. The kernel was later revised based on suggestions by Herv<eacute/> Br<oumlaut/>nnimann, Bernd G<aumlaut/>rtner, Michael Hoffmann, and Lutz Kettner.</para><para>A first version of the kernel was internally made available at the beginning of the CGAL-project (esprit ltr iv project number 21957). Since then many more people contributed to the evolution of the kernel through discussions on the CGAL mailing lists. The implementation based on Cartesian representation was (initially) provided by Andreas Fabri, the homogeneous representation (initially) by Stefan Schirra. Intersection and distance computations were implemented by Geert-Jan Giezeman. Further work has been done by Susan Hert on the overall maintenance of the kernel. Philippe Guigue has provided efficient intersection tests for 3D triangles. Andreas Fabri, Michael Hoffmann and Sylvain Pion have improved the support for the extensibility and adaptability of the kernel. Pedro Machado Manh<atilde/>es de Castro and Monique Teillaud introduced 3D circles. In 2010, Pierre Alliez, St<eacute/>phane Tayeb and Camille Wormser added intersection constructions for 3D triangles and efficient intersection tests for bounding boxes.</para><sect2 id="index_1Kernel_23Acknowledgment">
<title>Acknowledgment</title>
<para>This work was supported by the Graduiertenkolleg &apos;Algorithmische Diskrete Mathematik&apos;, under grant DFG We 1265/2-1, and by ESPRIT IV Long Term Research Projects No. 21957 (CGAL) and No. 28155 (GALIA). </para></sect2>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
