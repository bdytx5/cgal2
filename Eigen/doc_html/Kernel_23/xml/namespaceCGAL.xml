<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespaceCGAL" kind="namespace" language="C++">
    <compoundname>CGAL</compoundname>
    <innerclass refid="classCGAL_1_1Aff__transformation__2" prot="public">CGAL::Aff_transformation_2</innerclass>
    <innerclass refid="classCGAL_1_1Aff__transformation__3" prot="public">CGAL::Aff_transformation_3</innerclass>
    <innerclass refid="classCGAL_1_1Aff__transformation__d" prot="public">CGAL::Aff_transformation_d</innerclass>
    <innerclass refid="structCGAL_1_1Algebraic__kernel__for__circles__2__2" prot="public">CGAL::Algebraic_kernel_for_circles_2_2</innerclass>
    <innerclass refid="structCGAL_1_1Algebraic__kernel__for__spheres__2__3" prot="public">CGAL::Algebraic_kernel_for_spheres_2_3</innerclass>
    <innerclass refid="classCGAL_1_1Algebraic__structure__traits" prot="public">CGAL::Algebraic_structure_traits</innerclass>
    <innerclass refid="structCGAL_1_1Ambient__dimension" prot="public">CGAL::Ambient_dimension</innerclass>
    <innerclass refid="classCGAL_1_1Bbox__2" prot="public">CGAL::Bbox_2</innerclass>
    <innerclass refid="classCGAL_1_1Bbox__3" prot="public">CGAL::Bbox_3</innerclass>
    <innerclass refid="structCGAL_1_1Boolean__tag" prot="public">CGAL::Boolean_tag</innerclass>
    <innerclass refid="structCGAL_1_1Cartesian" prot="public">CGAL::Cartesian</innerclass>
    <innerclass refid="classCGAL_1_1Cartesian__converter" prot="public">CGAL::Cartesian_converter</innerclass>
    <innerclass refid="classCGAL_1_1Cartesian__d" prot="public">CGAL::Cartesian_d</innerclass>
    <innerclass refid="structCGAL_1_1Cast__function__object" prot="public">CGAL::Cast_function_object</innerclass>
    <innerclass refid="classCGAL_1_1CC__safe__handle" prot="public">CGAL::CC_safe_handle</innerclass>
    <innerclass refid="classCGAL_1_1Circle__2" prot="public">CGAL::Circle_2</innerclass>
    <innerclass refid="classCGAL_1_1Circle__3" prot="public">CGAL::Circle_3</innerclass>
    <innerclass refid="classCGAL_1_1Circular__arc__2" prot="public">CGAL::Circular_arc_2</innerclass>
    <innerclass refid="classCGAL_1_1Circular__arc__3" prot="public">CGAL::Circular_arc_3</innerclass>
    <innerclass refid="classCGAL_1_1Circular__arc__point__2" prot="public">CGAL::Circular_arc_point_2</innerclass>
    <innerclass refid="classCGAL_1_1Circular__arc__point__3" prot="public">CGAL::Circular_arc_point_3</innerclass>
    <innerclass refid="structCGAL_1_1Circular__kernel__2" prot="public">CGAL::Circular_kernel_2</innerclass>
    <innerclass refid="structCGAL_1_1Coercion__traits" prot="public">CGAL::Coercion_traits</innerclass>
    <innerclass refid="structCGAL_1_1Compact" prot="public">CGAL::Compact</innerclass>
    <innerclass refid="classCGAL_1_1Compact__container" prot="public">CGAL::Compact_container</innerclass>
    <innerclass refid="classCGAL_1_1Compact__container__base" prot="public">CGAL::Compact_container_base</innerclass>
    <innerclass refid="structCGAL_1_1Compact__container__traits" prot="public">CGAL::Compact_container_traits</innerclass>
    <innerclass refid="classCGAL_1_1Compare__to__less" prot="public">CGAL::Compare_to_less</innerclass>
    <innerclass refid="classCGAL_1_1Concurrent__compact__container" prot="public">CGAL::Concurrent_compact_container</innerclass>
    <innerclass refid="structCGAL_1_1Concurrent__compact__container__traits" prot="public">CGAL::Concurrent_compact_container_traits</innerclass>
    <innerclass refid="classCGAL_1_1Const__oneset__iterator" prot="public">CGAL::Const_oneset_iterator</innerclass>
    <innerclass refid="classCGAL_1_1Constrained__Delaunay__triangulation__2" prot="public">CGAL::Constrained_Delaunay_triangulation_2</innerclass>
    <innerclass refid="classCGAL_1_1Constrained__triangulation__2" prot="public">CGAL::Constrained_triangulation_2</innerclass>
    <innerclass refid="classCGAL_1_1Constrained__triangulation__face__base__2" prot="public">CGAL::Constrained_triangulation_face_base_2</innerclass>
    <innerclass refid="classCGAL_1_1Constrained__triangulation__plus__2" prot="public">CGAL::Constrained_triangulation_plus_2</innerclass>
    <innerclass refid="structCGAL_1_1Construct__array" prot="public">CGAL::Construct_array</innerclass>
    <innerclass refid="classCGAL_1_1Convex__hull__constructive__traits__2" prot="public">CGAL::Convex_hull_constructive_traits_2</innerclass>
    <innerclass refid="classCGAL_1_1Convex__hull__traits__2" prot="public">CGAL::Convex_hull_traits_2</innerclass>
    <innerclass refid="classCGAL_1_1Counting__iterator" prot="public">CGAL::Counting_iterator</innerclass>
    <innerclass refid="classCGAL_1_1Creator__1" prot="public">CGAL::Creator_1</innerclass>
    <innerclass refid="classCGAL_1_1Creator__2" prot="public">CGAL::Creator_2</innerclass>
    <innerclass refid="classCGAL_1_1Creator__3" prot="public">CGAL::Creator_3</innerclass>
    <innerclass refid="classCGAL_1_1Creator__4" prot="public">CGAL::Creator_4</innerclass>
    <innerclass refid="classCGAL_1_1Creator__5" prot="public">CGAL::Creator_5</innerclass>
    <innerclass refid="classCGAL_1_1Creator__uniform__2" prot="public">CGAL::Creator_uniform_2</innerclass>
    <innerclass refid="classCGAL_1_1Creator__uniform__3" prot="public">CGAL::Creator_uniform_3</innerclass>
    <innerclass refid="classCGAL_1_1Creator__uniform__4" prot="public">CGAL::Creator_uniform_4</innerclass>
    <innerclass refid="classCGAL_1_1Creator__uniform__5" prot="public">CGAL::Creator_uniform_5</innerclass>
    <innerclass refid="classCGAL_1_1Creator__uniform__6" prot="public">CGAL::Creator_uniform_6</innerclass>
    <innerclass refid="classCGAL_1_1Creator__uniform__7" prot="public">CGAL::Creator_uniform_7</innerclass>
    <innerclass refid="classCGAL_1_1Creator__uniform__8" prot="public">CGAL::Creator_uniform_8</innerclass>
    <innerclass refid="classCGAL_1_1Creator__uniform__9" prot="public">CGAL::Creator_uniform_9</innerclass>
    <innerclass refid="classCGAL_1_1Creator__uniform__d" prot="public">CGAL::Creator_uniform_d</innerclass>
    <innerclass refid="structCGAL_1_1Default" prot="public">CGAL::Default</innerclass>
    <innerclass refid="classCGAL_1_1Delaunay__mesh__criteria__2" prot="public">CGAL::Delaunay_mesh_criteria_2</innerclass>
    <innerclass refid="classCGAL_1_1Delaunay__mesh__face__base__2" prot="public">CGAL::Delaunay_mesh_face_base_2</innerclass>
    <innerclass refid="classCGAL_1_1Delaunay__mesh__size__criteria__2" prot="public">CGAL::Delaunay_mesh_size_criteria_2</innerclass>
    <innerclass refid="classCGAL_1_1Delaunay__mesh__vertex__base__2" prot="public">CGAL::Delaunay_mesh_vertex_base_2</innerclass>
    <innerclass refid="classCGAL_1_1Delaunay__mesher__2" prot="public">CGAL::Delaunay_mesher_2</innerclass>
    <innerclass refid="classCGAL_1_1Delaunay__triangulation__2" prot="public">CGAL::Delaunay_triangulation_2</innerclass>
    <innerclass refid="structCGAL_1_1Dereference" prot="public">CGAL::Dereference</innerclass>
    <innerclass refid="structCGAL_1_1Dimension__tag" prot="public">CGAL::Dimension_tag</innerclass>
    <innerclass refid="classCGAL_1_1Direction__2" prot="public">CGAL::Direction_2</innerclass>
    <innerclass refid="classCGAL_1_1Direction__3" prot="public">CGAL::Direction_3</innerclass>
    <innerclass refid="classCGAL_1_1Direction__d" prot="public">CGAL::Direction_d</innerclass>
    <innerclass refid="classCGAL_1_1Dispatch__or__drop__output__iterator" prot="public">CGAL::Dispatch_or_drop_output_iterator</innerclass>
    <innerclass refid="classCGAL_1_1Dispatch__output__iterator" prot="public">CGAL::Dispatch_output_iterator</innerclass>
    <innerclass refid="structCGAL_1_1Dynamic__dimension__tag" prot="public">CGAL::Dynamic_dimension_tag</innerclass>
    <innerclass refid="structCGAL_1_1Emptyset__iterator" prot="public">CGAL::Emptyset_iterator</innerclass>
    <innerclass refid="structCGAL_1_1Epick__d" prot="public">CGAL::Epick_d</innerclass>
    <innerclass refid="structCGAL_1_1Euclidean__ring__tag" prot="public">CGAL::Euclidean_ring_tag</innerclass>
    <innerclass refid="classCGAL_1_1Exact__circular__kernel__2" prot="public">CGAL::Exact_circular_kernel_2</innerclass>
    <innerclass refid="structCGAL_1_1Exact__intersections__tag" prot="public">CGAL::Exact_intersections_tag</innerclass>
    <innerclass refid="classCGAL_1_1Exact__predicates__exact__constructions__kernel" prot="public">CGAL::Exact_predicates_exact_constructions_kernel</innerclass>
    <innerclass refid="classCGAL_1_1Exact__predicates__exact__constructions__kernel__with__kth__root" prot="public">CGAL::Exact_predicates_exact_constructions_kernel_with_kth_root</innerclass>
    <innerclass refid="classCGAL_1_1Exact__predicates__exact__constructions__kernel__with__root__of" prot="public">CGAL::Exact_predicates_exact_constructions_kernel_with_root_of</innerclass>
    <innerclass refid="classCGAL_1_1Exact__predicates__exact__constructions__kernel__with__sqrt" prot="public">CGAL::Exact_predicates_exact_constructions_kernel_with_sqrt</innerclass>
    <innerclass refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" prot="public">CGAL::Exact_predicates_inexact_constructions_kernel</innerclass>
    <innerclass refid="structCGAL_1_1Exact__predicates__tag" prot="public">CGAL::Exact_predicates_tag</innerclass>
    <innerclass refid="classCGAL_1_1Exact__spherical__kernel__3" prot="public">CGAL::Exact_spherical_kernel_3</innerclass>
    <innerclass refid="structCGAL_1_1Fast" prot="public">CGAL::Fast</innerclass>
    <innerclass refid="structCGAL_1_1Feature__dimension" prot="public">CGAL::Feature_dimension</innerclass>
    <innerclass refid="structCGAL_1_1Field__tag" prot="public">CGAL::Field_tag</innerclass>
    <innerclass refid="structCGAL_1_1Field__with__kth__root__tag" prot="public">CGAL::Field_with_kth_root_tag</innerclass>
    <innerclass refid="structCGAL_1_1Field__with__root__of__tag" prot="public">CGAL::Field_with_root_of_tag</innerclass>
    <innerclass refid="structCGAL_1_1Field__with__sqrt__tag" prot="public">CGAL::Field_with_sqrt_tag</innerclass>
    <innerclass refid="structCGAL_1_1Filter__iterator" prot="public">CGAL::Filter_iterator</innerclass>
    <innerclass refid="structCGAL_1_1Filtered__kernel" prot="public">CGAL::Filtered_kernel</innerclass>
    <innerclass refid="structCGAL_1_1Filtered__kernel__adaptor" prot="public">CGAL::Filtered_kernel_adaptor</innerclass>
    <innerclass refid="classCGAL_1_1Filtered__predicate" prot="public">CGAL::Filtered_predicate</innerclass>
    <innerclass refid="classCGAL_1_1Fourtuple" prot="public">CGAL::Fourtuple</innerclass>
    <innerclass refid="classCGAL_1_1Fraction__traits" prot="public">CGAL::Fraction_traits</innerclass>
    <innerclass refid="classCGAL_1_1General__polygon__with__holes__2" prot="public">CGAL::General_polygon_with_holes_2</innerclass>
    <innerclass refid="structCGAL_1_1Get__address" prot="public">CGAL::Get_address</innerclass>
    <innerclass refid="classCGAL_1_1Gmpfi" prot="public">CGAL::Gmpfi</innerclass>
    <innerclass refid="classCGAL_1_1Gmpfr" prot="public">CGAL::Gmpfr</innerclass>
    <innerclass refid="classCGAL_1_1Gmpq" prot="public">CGAL::Gmpq</innerclass>
    <innerclass refid="classCGAL_1_1Gmpz" prot="public">CGAL::Gmpz</innerclass>
    <innerclass refid="classCGAL_1_1Gmpzf" prot="public">CGAL::Gmpzf</innerclass>
    <innerclass refid="structCGAL_1_1Homogeneous" prot="public">CGAL::Homogeneous</innerclass>
    <innerclass refid="classCGAL_1_1Homogeneous__converter" prot="public">CGAL::Homogeneous_converter</innerclass>
    <innerclass refid="classCGAL_1_1Homogeneous__d" prot="public">CGAL::Homogeneous_d</innerclass>
    <innerclass refid="classCGAL_1_1Hyperplane__d" prot="public">CGAL::Hyperplane_d</innerclass>
    <innerclass refid="structCGAL_1_1Identity" prot="public">CGAL::Identity</innerclass>
    <innerclass refid="classCGAL_1_1Identity__transformation" prot="public">CGAL::Identity_transformation</innerclass>
    <innerclass refid="classCGAL_1_1In__place__list" prot="public">CGAL::In_place_list</innerclass>
    <innerclass refid="classCGAL_1_1In__place__list__base" prot="public">CGAL::In_place_list_base</innerclass>
    <innerclass refid="classCGAL_1_1Insert__iterator" prot="public">CGAL::Insert_iterator</innerclass>
    <innerclass refid="structCGAL_1_1Integral__domain__tag" prot="public">CGAL::Integral_domain_tag</innerclass>
    <innerclass refid="structCGAL_1_1Integral__domain__without__division__tag" prot="public">CGAL::Integral_domain_without_division_tag</innerclass>
    <innerclass refid="classCGAL_1_1Interval__nt" prot="public">CGAL::Interval_nt</innerclass>
    <innerclass refid="classCGAL_1_1Inverse__index" prot="public">CGAL::Inverse_index</innerclass>
    <innerclass refid="classCGAL_1_1Is__valid" prot="public">CGAL::Is_valid</innerclass>
    <innerclass refid="classCGAL_1_1Iso__box__d" prot="public">CGAL::Iso_box_d</innerclass>
    <innerclass refid="classCGAL_1_1Iso__cuboid__3" prot="public">CGAL::Iso_cuboid_3</innerclass>
    <innerclass refid="classCGAL_1_1Iso__rectangle__2" prot="public">CGAL::Iso_rectangle_2</innerclass>
    <innerclass refid="classCGAL_1_1Iterator__range" prot="public">CGAL::Iterator_range</innerclass>
    <innerclass refid="classCGAL_1_1Join__input__iterator__1" prot="public">CGAL::Join_input_iterator_1</innerclass>
    <innerclass refid="classCGAL_1_1Join__input__iterator__2" prot="public">CGAL::Join_input_iterator_2</innerclass>
    <innerclass refid="classCGAL_1_1Join__input__iterator__3" prot="public">CGAL::Join_input_iterator_3</innerclass>
    <innerclass refid="structCGAL_1_1Kernel__traits" prot="public">CGAL::Kernel_traits</innerclass>
    <innerclass refid="classCGAL_1_1Lazy__exact__nt" prot="public">CGAL::Lazy_exact_nt</innerclass>
    <innerclass refid="classCGAL_1_1Line__2" prot="public">CGAL::Line_2</innerclass>
    <innerclass refid="classCGAL_1_1Line__3" prot="public">CGAL::Line_3</innerclass>
    <innerclass refid="classCGAL_1_1Line__arc__2" prot="public">CGAL::Line_arc_2</innerclass>
    <innerclass refid="classCGAL_1_1Line__arc__3" prot="public">CGAL::Line_arc_3</innerclass>
    <innerclass refid="classCGAL_1_1Line__d" prot="public">CGAL::Line_d</innerclass>
    <innerclass refid="classCGAL_1_1Linear__algebraCd" prot="public">CGAL::Linear_algebraCd</innerclass>
    <innerclass refid="classCGAL_1_1Linear__algebraHd" prot="public">CGAL::Linear_algebraHd</innerclass>
    <innerclass refid="structCGAL_1_1Location__policy" prot="public">CGAL::Location_policy</innerclass>
    <innerclass refid="structCGAL_1_1Max" prot="public">CGAL::Max</innerclass>
    <innerclass refid="structCGAL_1_1Min" prot="public">CGAL::Min</innerclass>
    <innerclass refid="classCGAL_1_1MP__Float" prot="public">CGAL::MP_Float</innerclass>
    <innerclass refid="structCGAL_1_1Mpzf" prot="public">CGAL::Mpzf</innerclass>
    <innerclass refid="classCGAL_1_1Multiset" prot="public">CGAL::Multiset</innerclass>
    <innerclass refid="classCGAL_1_1N__step__adaptor" prot="public">CGAL::N_step_adaptor</innerclass>
    <innerclass refid="structCGAL_1_1No__intersection__tag" prot="public">CGAL::No_intersection_tag</innerclass>
    <innerclass refid="structCGAL_1_1NT__converter" prot="public">CGAL::NT_converter</innerclass>
    <innerclass refid="structCGAL_1_1Null__functor" prot="public">CGAL::Null_functor</innerclass>
    <innerclass refid="structCGAL_1_1Null__tag" prot="public">CGAL::Null_tag</innerclass>
    <innerclass refid="classCGAL_1_1Null__vector" prot="public">CGAL::Null_vector</innerclass>
    <innerclass refid="classCGAL_1_1Number__type__checker" prot="public">CGAL::Number_type_checker</innerclass>
    <innerclass refid="classCGAL_1_1Object" prot="public">CGAL::Object</innerclass>
    <innerclass refid="classCGAL_1_1Oneset__iterator" prot="public">CGAL::Oneset_iterator</innerclass>
    <innerclass refid="classCGAL_1_1Origin" prot="public">CGAL::Origin</innerclass>
    <innerclass refid="structCGAL_1_1Parallel__tag" prot="public">CGAL::Parallel_tag</innerclass>
    <innerclass refid="classCGAL_1_1Plane__3" prot="public">CGAL::Plane_3</innerclass>
    <innerclass refid="classCGAL_1_1Point__2" prot="public">CGAL::Point_2</innerclass>
    <innerclass refid="classCGAL_1_1Point__3" prot="public">CGAL::Point_3</innerclass>
    <innerclass refid="classCGAL_1_1Point__d" prot="public">CGAL::Point_d</innerclass>
    <innerclass refid="classCGAL_1_1Polygon__2" prot="public">CGAL::Polygon_2</innerclass>
    <innerclass refid="classCGAL_1_1Polygon__with__holes__2" prot="public">CGAL::Polygon_with_holes_2</innerclass>
    <innerclass refid="classCGAL_1_1Polyhedron__3" prot="public">CGAL::Polyhedron_3</innerclass>
    <innerclass refid="classCGAL_1_1Polyhedron__incremental__builder__3" prot="public">CGAL::Polyhedron_incremental_builder_3</innerclass>
    <innerclass refid="classCGAL_1_1Polyhedron__items__3" prot="public">CGAL::Polyhedron_items_3</innerclass>
    <innerclass refid="classCGAL_1_1Polyhedron__min__items__3" prot="public">CGAL::Polyhedron_min_items_3</innerclass>
    <innerclass refid="classCGAL_1_1Polyhedron__traits__3" prot="public">CGAL::Polyhedron_traits_3</innerclass>
    <innerclass refid="classCGAL_1_1Polyhedron__traits__with__normals__3" prot="public">CGAL::Polyhedron_traits_with_normals_3</innerclass>
    <innerclass refid="classCGAL_1_1Polynomial__1__2" prot="public">CGAL::Polynomial_1_2</innerclass>
    <innerclass refid="classCGAL_1_1Polynomial__1__3" prot="public">CGAL::Polynomial_1_3</innerclass>
    <innerclass refid="classCGAL_1_1Polynomial__for__circles__2__2" prot="public">CGAL::Polynomial_for_circles_2_2</innerclass>
    <innerclass refid="classCGAL_1_1Polynomial__for__spheres__2__3" prot="public">CGAL::Polynomial_for_spheres_2_3</innerclass>
    <innerclass refid="classCGAL_1_1Polynomials__for__lines__3" prot="public">CGAL::Polynomials_for_lines_3</innerclass>
    <innerclass refid="structCGAL_1_1Project__facet" prot="public">CGAL::Project_facet</innerclass>
    <innerclass refid="structCGAL_1_1Project__next" prot="public">CGAL::Project_next</innerclass>
    <innerclass refid="structCGAL_1_1Project__next__opposite" prot="public">CGAL::Project_next_opposite</innerclass>
    <innerclass refid="structCGAL_1_1Project__normal" prot="public">CGAL::Project_normal</innerclass>
    <innerclass refid="structCGAL_1_1Project__opposite__prev" prot="public">CGAL::Project_opposite_prev</innerclass>
    <innerclass refid="structCGAL_1_1Project__plane" prot="public">CGAL::Project_plane</innerclass>
    <innerclass refid="structCGAL_1_1Project__point" prot="public">CGAL::Project_point</innerclass>
    <innerclass refid="structCGAL_1_1Project__prev" prot="public">CGAL::Project_prev</innerclass>
    <innerclass refid="structCGAL_1_1Project__vertex" prot="public">CGAL::Project_vertex</innerclass>
    <innerclass refid="classCGAL_1_1Projection__traits__xy__3" prot="public">CGAL::Projection_traits_xy_3</innerclass>
    <innerclass refid="classCGAL_1_1Projection__traits__xz__3" prot="public">CGAL::Projection_traits_xz_3</innerclass>
    <innerclass refid="classCGAL_1_1Projection__traits__yz__3" prot="public">CGAL::Projection_traits_yz_3</innerclass>
    <innerclass refid="structCGAL_1_1Protect__FPU__rounding" prot="public">CGAL::Protect_FPU_rounding</innerclass>
    <innerclass refid="classCGAL_1_1Quadruple" prot="public">CGAL::Quadruple</innerclass>
    <innerclass refid="classCGAL_1_1Quotient" prot="public">CGAL::Quotient</innerclass>
    <innerclass refid="classCGAL_1_1Random__access__adaptor" prot="public">CGAL::Random_access_adaptor</innerclass>
    <innerclass refid="classCGAL_1_1Random__access__value__adaptor" prot="public">CGAL::Random_access_value_adaptor</innerclass>
    <innerclass refid="classCGAL_1_1Rational__traits" prot="public">CGAL::Rational_traits</innerclass>
    <innerclass refid="classCGAL_1_1Ray__2" prot="public">CGAL::Ray_2</innerclass>
    <innerclass refid="classCGAL_1_1Ray__3" prot="public">CGAL::Ray_3</innerclass>
    <innerclass refid="classCGAL_1_1Ray__d" prot="public">CGAL::Ray_d</innerclass>
    <innerclass refid="classCGAL_1_1Real__embeddable__traits" prot="public">CGAL::Real_embeddable_traits</innerclass>
    <innerclass refid="classCGAL_1_1Reflection" prot="public">CGAL::Reflection</innerclass>
    <innerclass refid="classCGAL_1_1Regular__triangulation__2" prot="public">CGAL::Regular_triangulation_2</innerclass>
    <innerclass refid="classCGAL_1_1Regular__triangulation__euclidean__traits__2" prot="public">CGAL::Regular_triangulation_euclidean_traits_2</innerclass>
    <innerclass refid="classCGAL_1_1Regular__triangulation__face__base__2" prot="public">CGAL::Regular_triangulation_face_base_2</innerclass>
    <innerclass refid="classCGAL_1_1Regular__triangulation__filtered__traits__2" prot="public">CGAL::Regular_triangulation_filtered_traits_2</innerclass>
    <innerclass refid="classCGAL_1_1Regular__triangulation__vertex__base__2" prot="public">CGAL::Regular_triangulation_vertex_base_2</innerclass>
    <innerclass refid="classCGAL_1_1Root__for__circles__2__2" prot="public">CGAL::Root_for_circles_2_2</innerclass>
    <innerclass refid="classCGAL_1_1Root__for__spheres__2__3" prot="public">CGAL::Root_for_spheres_2_3</innerclass>
    <innerclass refid="structCGAL_1_1Root__of__traits" prot="public">CGAL::Root_of_traits</innerclass>
    <innerclass refid="classCGAL_1_1Rotation" prot="public">CGAL::Rotation</innerclass>
    <innerclass refid="classCGAL_1_1Scaling" prot="public">CGAL::Scaling</innerclass>
    <innerclass refid="classCGAL_1_1Segment__2" prot="public">CGAL::Segment_2</innerclass>
    <innerclass refid="classCGAL_1_1Segment__3" prot="public">CGAL::Segment_3</innerclass>
    <innerclass refid="classCGAL_1_1Segment__d" prot="public">CGAL::Segment_d</innerclass>
    <innerclass refid="structCGAL_1_1Sequential__tag" prot="public">CGAL::Sequential_tag</innerclass>
    <innerclass refid="classCGAL_1_1Set__ieee__double__precision" prot="public">CGAL::Set_ieee_double_precision</innerclass>
    <innerclass refid="structCGAL_1_1Simple__cartesian" prot="public">CGAL::Simple_cartesian</innerclass>
    <innerclass refid="structCGAL_1_1Simple__homogeneous" prot="public">CGAL::Simple_homogeneous</innerclass>
    <innerclass refid="classCGAL_1_1Sixtuple" prot="public">CGAL::Sixtuple</innerclass>
    <innerclass refid="classCGAL_1_1Spatial__lock__grid__3" prot="public">CGAL::Spatial_lock_grid_3</innerclass>
    <innerclass refid="classCGAL_1_1Sphere__3" prot="public">CGAL::Sphere_3</innerclass>
    <innerclass refid="classCGAL_1_1Sphere__d" prot="public">CGAL::Sphere_d</innerclass>
    <innerclass refid="structCGAL_1_1Spherical__kernel__3" prot="public">CGAL::Spherical_kernel_3</innerclass>
    <innerclass refid="classCGAL_1_1Sqrt__extension" prot="public">CGAL::Sqrt_extension</innerclass>
    <innerclass refid="classCGAL_1_1Tetrahedron__3" prot="public">CGAL::Tetrahedron_3</innerclass>
    <innerclass refid="classCGAL_1_1Threetuple" prot="public">CGAL::Threetuple</innerclass>
    <innerclass refid="classCGAL_1_1Translation" prot="public">CGAL::Translation</innerclass>
    <innerclass refid="classCGAL_1_1Triangle__2" prot="public">CGAL::Triangle_2</innerclass>
    <innerclass refid="classCGAL_1_1Triangle__3" prot="public">CGAL::Triangle_3</innerclass>
    <innerclass refid="classCGAL_1_1Triangulation__2" prot="public">CGAL::Triangulation_2</innerclass>
    <innerclass refid="classCGAL_1_1Triangulation__conformer__2" prot="public">CGAL::Triangulation_conformer_2</innerclass>
    <innerclass refid="classCGAL_1_1Triangulation__cw__ccw__2" prot="public">CGAL::Triangulation_cw_ccw_2</innerclass>
    <innerclass refid="classCGAL_1_1Triangulation__euclidean__traits__2" prot="public">CGAL::Triangulation_euclidean_traits_2</innerclass>
    <innerclass refid="classCGAL_1_1Triangulation__face__base__2" prot="public">CGAL::Triangulation_face_base_2</innerclass>
    <innerclass refid="classCGAL_1_1Triangulation__face__base__with__info__2" prot="public">CGAL::Triangulation_face_base_with_info_2</innerclass>
    <innerclass refid="classCGAL_1_1Triangulation__hierarchy__2" prot="public">CGAL::Triangulation_hierarchy_2</innerclass>
    <innerclass refid="classCGAL_1_1Triangulation__hierarchy__vertex__base__2" prot="public">CGAL::Triangulation_hierarchy_vertex_base_2</innerclass>
    <innerclass refid="classCGAL_1_1Triangulation__vertex__base__2" prot="public">CGAL::Triangulation_vertex_base_2</innerclass>
    <innerclass refid="classCGAL_1_1Triangulation__vertex__base__with__info__2" prot="public">CGAL::Triangulation_vertex_base_with_info_2</innerclass>
    <innerclass refid="classCGAL_1_1Triple" prot="public">CGAL::Triple</innerclass>
    <innerclass refid="classCGAL_1_1Twotuple" prot="public">CGAL::Twotuple</innerclass>
    <innerclass refid="classCGAL_1_1Uncertain" prot="public">CGAL::Uncertain</innerclass>
    <innerclass refid="structCGAL_1_1Unique__factorization__domain__tag" prot="public">CGAL::Unique_factorization_domain_tag</innerclass>
    <innerclass refid="structCGAL_1_1value__type__traits" prot="public">CGAL::value_type_traits</innerclass>
    <innerclass refid="structCGAL_1_1value__type__traits_3_01std_1_1back__insert__iterator_3_01Container_01_4_01_4" prot="public">CGAL::value_type_traits&lt; std::back_insert_iterator&lt; Container &gt; &gt;</innerclass>
    <innerclass refid="structCGAL_1_1value__type__traits_3_01std_1_1front__insert__iterator_3_01Container_01_4_01_4" prot="public">CGAL::value_type_traits&lt; std::front_insert_iterator&lt; Container &gt; &gt;</innerclass>
    <innerclass refid="structCGAL_1_1value__type__traits_3_01std_1_1insert__iterator_3_01Container_01_4_01_4" prot="public">CGAL::value_type_traits&lt; std::insert_iterator&lt; Container &gt; &gt;</innerclass>
    <innerclass refid="classCGAL_1_1Vector__2" prot="public">CGAL::Vector_2</innerclass>
    <innerclass refid="classCGAL_1_1Vector__3" prot="public">CGAL::Vector_3</innerclass>
    <innerclass refid="classCGAL_1_1Vector__d" prot="public">CGAL::Vector_d</innerclass>
    <innerclass refid="classCGAL_1_1Weighted__point" prot="public">CGAL::Weighted_point</innerclass>
    <innerclass refid="classCGAL_1_1Weighted__point__2" prot="public">CGAL::Weighted_point_2</innerclass>
    <innerclass refid="classCGAL_1_1Weighted__point__3" prot="public">CGAL::Weighted_point_3</innerclass>
    <innernamespace refid="namespaceCGAL_1_1cpp11">CGAL::cpp11</innernamespace>
    <innernamespace refid="namespaceCGAL_1_1cpp98">CGAL::cpp98</innernamespace>
    <innernamespace refid="namespaceCGAL_1_1Mesh__2">CGAL::Mesh_2</innernamespace>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="group__kernel__conversion_1gaa9c1fb90410805f74709c0590714204c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="structCGAL_1_1Homogeneous" kindref="compound">Homogeneous</ref>&lt; RT &gt; &gt;</type>
        <definition>Point_2&lt; Homogeneous&lt;RT&gt; &gt; CGAL::cartesian_to_homogeneous</definition>
        <argsstring>(const Point_2&lt; Cartesian&lt; RT &gt; &gt; &amp;cp)</argsstring>
        <name>cartesian_to_homogeneous</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="structCGAL_1_1Cartesian" kindref="compound">Cartesian</ref>&lt; RT &gt; &gt; &amp;</type>
          <declname>cp</declname>
        </param>
        <briefdescription>
<para>Functions to convert between Cartesian and homogeneous kernels. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Cartesian" kindref="compound">CGAL::Cartesian</ref>&lt;<ref refid="classFieldNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref>&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Cartesian__converter" kindref="compound">CGAL::Cartesian_converter</ref>&lt;K1, K2, NTConverter&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Homogeneous" kindref="compound">CGAL::Homogeneous</ref>&lt;<ref refid="classRingNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RingNumberType</ref>&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Homogeneous__converter" kindref="compound">CGAL::Homogeneous_converter</ref>&lt;K1, K2, RTConverter, FTConverter&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Simple__cartesian" kindref="compound">CGAL::Simple_cartesian</ref>&lt;<ref refid="classFieldNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref>&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Simple__homogeneous" kindref="compound">CGAL::Simple_homogeneous</ref>&lt;<ref refid="classRingNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RingNumberType</ref>&gt;</computeroutput></para></simplesect>
converts 2D point <computeroutput>cp</computeroutput> with Cartesian representation into a 2D point with homogeneous representation with the same number type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/cartesian_homogeneous_conversion.h" line="27" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__conversion_1gab81227f04c2c79e0b5f97889a63c1e6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="structCGAL_1_1Homogeneous" kindref="compound">Homogeneous</ref>&lt; RT &gt; &gt;</type>
        <definition>Point_3&lt; Homogeneous&lt;RT&gt; &gt; CGAL::cartesian_to_homogeneous</definition>
        <argsstring>(const Point_3&lt; Cartesian&lt; RT &gt; &gt; &amp;cp)</argsstring>
        <name>cartesian_to_homogeneous</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="structCGAL_1_1Cartesian" kindref="compound">Cartesian</ref>&lt; RT &gt; &gt; &amp;</type>
          <declname>cp</declname>
        </param>
        <briefdescription>
<para>converts 3D point <computeroutput>cp</computeroutput> with Cartesian representation into a 3D point with homogeneous representation with the same number type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/cartesian_homogeneous_conversion.h" line="37" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__conversion_1ga1864bfa55d11d6f8f46fb628e162d07c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="structCGAL_1_1Cartesian" kindref="compound">Cartesian</ref>&lt; FT &gt; &gt;</type>
        <definition>Point_2&lt; Cartesian&lt;FT&gt; &gt; CGAL::homogeneous_to_cartesian</definition>
        <argsstring>(const Point_2&lt; Homogeneous&lt; FT &gt; &gt; &amp;hp)</argsstring>
        <name>homogeneous_to_cartesian</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="structCGAL_1_1Homogeneous" kindref="compound">Homogeneous</ref>&lt; FT &gt; &gt; &amp;</type>
          <declname>hp</declname>
        </param>
        <briefdescription>
<para>converts 2D point <computeroutput>hp</computeroutput> with homogeneous representation into a 2D point with Cartesian representation with the same number type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/cartesian_homogeneous_conversion.h" line="48" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__conversion_1ga48e6005d027d752ca7ef34becfacfc83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="structCGAL_1_1Cartesian" kindref="compound">Cartesian</ref>&lt; FT &gt; &gt;</type>
        <definition>Point_3&lt; Cartesian&lt;FT&gt; &gt; CGAL::homogeneous_to_cartesian</definition>
        <argsstring>(const Point_3&lt; Homogeneous&lt; FT &gt; &gt; &amp;hp)</argsstring>
        <name>homogeneous_to_cartesian</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="structCGAL_1_1Homogeneous" kindref="compound">Homogeneous</ref>&lt; FT &gt; &gt; &amp;</type>
          <declname>hp</declname>
        </param>
        <briefdescription>
<para>converts 3D point <computeroutput>hp</computeroutput> with homogeneous representation into a 3D point with Cartesian representation with the same number type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/cartesian_homogeneous_conversion.h" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__conversion_1ga9a1c820a9840b3c72eec5a391f73eecc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="structCGAL_1_1Cartesian" kindref="compound">Cartesian</ref>&lt; <ref refid="classCGAL_1_1Quotient" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">Quotient</ref>&lt; RT &gt; &gt; &gt;</type>
        <definition>Point_2&lt; Cartesian&lt;Quotient&lt;RT&gt; &gt; &gt; CGAL::homogeneous_to_quotient_cartesian</definition>
        <argsstring>(const Point_2&lt; Homogeneous&lt; RT &gt; &gt; &amp;hp)</argsstring>
        <name>homogeneous_to_quotient_cartesian</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="structCGAL_1_1Homogeneous" kindref="compound">Homogeneous</ref>&lt; RT &gt; &gt; &amp;</type>
          <declname>hp</declname>
        </param>
        <briefdescription>
<para>converts the 2D point <computeroutput>hp</computeroutput> with homogeneous representation with number type <computeroutput>RT</computeroutput> into a 2D point with Cartesian representation with number type <computeroutput><ref refid="classCGAL_1_1Quotient" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">Quotient</ref>&lt;RT&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/cartesian_homogeneous_conversion.h" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__conversion_1gaceb47c53d4859e9da61add4ee2eac8d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="structCGAL_1_1Cartesian" kindref="compound">Cartesian</ref>&lt; <ref refid="classCGAL_1_1Quotient" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">Quotient</ref>&lt; RT &gt; &gt; &gt;</type>
        <definition>Point_3&lt; Cartesian&lt;Quotient&lt;RT&gt; &gt; &gt; CGAL::homogeneous_to_quotient_cartesian</definition>
        <argsstring>(const Point_3&lt; Homogeneous&lt; RT &gt; &gt; &amp;hp)</argsstring>
        <name>homogeneous_to_quotient_cartesian</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="structCGAL_1_1Homogeneous" kindref="compound">Homogeneous</ref>&lt; RT &gt; &gt; &amp;</type>
          <declname>hp</declname>
        </param>
        <briefdescription>
<para>converts the 3D point <computeroutput>hp</computeroutput> with homogeneous representation with number type <computeroutput>RT</computeroutput> into a 3D point with Cartesian representation with number type <computeroutput><ref refid="classCGAL_1_1Quotient" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">Quotient</ref>&lt;RT&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/cartesian_homogeneous_conversion.h" line="79" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__conversion_1ga0e3d0e6dab63837b88363faff099caa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="structCGAL_1_1Homogeneous" kindref="compound">Homogeneous</ref>&lt; RT &gt; &gt;</type>
        <definition>Point_2&lt; Homogeneous&lt;RT&gt; &gt; CGAL::quotient_cartesian_to_homogeneous</definition>
        <argsstring>(const Point_2&lt; Cartesian&lt; Quotient&lt; RT &gt; &gt; &gt; &amp;cp)</argsstring>
        <name>quotient_cartesian_to_homogeneous</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="structCGAL_1_1Cartesian" kindref="compound">Cartesian</ref>&lt; <ref refid="classCGAL_1_1Quotient" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">Quotient</ref>&lt; RT &gt; &gt; &gt; &amp;</type>
          <declname>cp</declname>
        </param>
        <briefdescription>
<para>converts 2D point <computeroutput>cp</computeroutput> with Cartesian representation with number type <computeroutput><ref refid="classCGAL_1_1Quotient" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">Quotient</ref>&lt;RT&gt;</computeroutput> into a 2D point with homogeneous representation with number type <computeroutput>RT</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/cartesian_homogeneous_conversion.h" line="90" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__conversion_1gab4b1307d79397377723dd80642371f56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="structCGAL_1_1Homogeneous" kindref="compound">Homogeneous</ref>&lt; RT &gt; &gt;</type>
        <definition>Point_3&lt; Homogeneous&lt;RT&gt; &gt; CGAL::quotient_cartesian_to_homogeneous</definition>
        <argsstring>(const Point_3&lt; Cartesian&lt; Quotient&lt; RT &gt; &gt; &gt; &amp;cp)</argsstring>
        <name>quotient_cartesian_to_homogeneous</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="structCGAL_1_1Cartesian" kindref="compound">Cartesian</ref>&lt; <ref refid="classCGAL_1_1Quotient" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">Quotient</ref>&lt; RT &gt; &gt; &gt; &amp;</type>
          <declname>cp</declname>
        </param>
        <briefdescription>
<para>converts 3D point <computeroutput>cp</computeroutput> with Cartesian representation with number type <computeroutput><ref refid="classCGAL_1_1Quotient" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">Quotient</ref>&lt;RT&gt;</computeroutput> into a 3D point with homogeneous representation with number type <computeroutput>RT</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/cartesian_homogeneous_conversion.h" line="102" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="group__do__intersect__circular__grp_1ga23e2d6b82fd69230e033a1cabeb50c94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::do_intersect</definition>
        <argsstring>(Type1&lt; CircularKernel &gt; obj1, Type2&lt; CircularKernel &gt; obj2)</argsstring>
        <name>do_intersect</name>
        <param>
          <type>Type1&lt; <ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref> &gt;</type>
          <declname>obj1</declname>
        </param>
        <param>
          <type>Type2&lt; <ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref> &gt;</type>
          <declname>obj2</declname>
        </param>
        <briefdescription>
<para>checks whether <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput> intersect. </para>        </briefdescription>
        <detaileddescription>
<para>See Chapter <ref refid="index_1Chapter_2D_Circular_Geometry_Kernel" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">Chapter_2D_Circular_Geometry_Kernel</ref> for details on a circular kernel instantiation.</para><para>When using a circular kernel, in addition to the function overloads documented <ref refid="group__do__intersect__linear__grp" kindref="compound">here</ref>, the following function overloads are also available.</para><para>Two objects <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput> intersect if there is a point <computeroutput>p</computeroutput> that is part of both <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput>. The intersection region of those two objects is defined as the set of all points <computeroutput>p</computeroutput> that are part of both <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput>. Note that while for a polygon we consider the enclosed domain, for an object of type <computeroutput><ref refid="classCGAL_1_1Circle__2" kindref="compound">Circle_2</ref></computeroutput> only the curve is considered.</para><para><computeroutput>Type1</computeroutput> and <computeroutput>Type2</computeroutput> can be any of the following:</para><para><itemizedlist>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Line__2" kindref="compound">Line_2</ref>&lt;<ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref>&gt;</computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Circle__2" kindref="compound">Circle_2</ref>&lt;<ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref>&gt;</computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Line__arc__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">Line_arc_2</ref>&lt;<ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref>&gt;</computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Circular__arc__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">Circular_arc_2</ref>&lt;<ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref>&gt;</computeroutput></para></listitem></itemizedlist>
</para><para>An example illustrating this is presented in Chapter <ref refid="index_1Chapter_2D_Circular_Geometry_Kernel" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">Chapter_2D_Circular_Geometry_Kernel</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Circular_kernel_intersections.h" line="34" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="group__intersection__circular__grp_1ga45cfe651177ee2011c12d055a893fbc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type1</type>
          </param>
          <param>
            <type>typename Type2</type>
          </param>
          <param>
            <type>typename <ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::intersection</definition>
        <argsstring>(const Type1 &amp;obj1, const Type2 &amp;obj2, OutputIterator intersections)</argsstring>
        <name>intersection</name>
        <param>
          <type>const Type1 &amp;</type>
          <declname>obj1</declname>
        </param>
        <param>
          <type>const Type2 &amp;</type>
          <declname>obj2</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>intersections</declname>
        </param>
        <briefdescription>
<para>Constructs the intersection elements between the two input objects and stores them in the <ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref> in lexicographic order, where both, <computeroutput>Type1</computeroutput> and <computeroutput>Type2</computeroutput>, can be either. </para>        </briefdescription>
        <detaileddescription>
<para>See Chapter <ref refid="index_1Chapter_2D_Circular_Geometry_Kernel" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">Chapter_2D_Circular_Geometry_Kernel</ref> for details on a circular kernel instantiation.</para><para>When using a circular kernel, in addition to the function overloads documented <ref refid="group__intersection__linear__grp" kindref="compound">here</ref>, the following function overloads are also available.</para><para>The iterator versions of those functions can be used in conjunction with <computeroutput><ref refid="classCGAL_1_1Dispatch__output__iterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Dispatch_output_iterator</ref></computeroutput>.</para><para>Since both the number of intersections, if any, and their types, depend on the arguments, the function expects an output iterator on <computeroutput><ref refid="structCGAL_1_1cpp11_1_1result__of" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">cpp11::result_of</ref>&lt;K::Intersect_2(Type1, Type2)&gt;::type</computeroutput>, as presented below.</para><para><itemizedlist>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Line__2" kindref="compound">Line_2</ref>&lt;<ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref>&gt;</computeroutput> or</para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Line__arc__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">Line_arc_2</ref>&lt;<ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref>&gt;</computeroutput> or</para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Circle__2" kindref="compound">Circle_2</ref>&lt;<ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref>&gt;</computeroutput> or</para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Circular__arc__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">Circular_arc_2</ref>&lt;<ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref>&gt;</computeroutput></para></listitem></itemizedlist>
</para><para>Depending on the types <computeroutput>Type1</computeroutput> and <computeroutput>Type2</computeroutput>, these elements can be assigned to</para><para><itemizedlist>
<listitem><para><computeroutput>std::pair&lt;<ref refid="classCGAL_1_1Circular__arc__point__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">Circular_arc_point_2</ref>&lt;<ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref>&gt;, unsigned&gt;</computeroutput>, where the unsigned integer is the multiplicity of the corresponding intersection point between <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput>,</para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Circular__arc__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">Circular_arc_2</ref>&lt;<ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref>&gt;</computeroutput> in case of an overlap of two circular arcs,</para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Line__arc__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">Line_arc_2</ref>&lt;<ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref>&gt;</computeroutput> in case of an overlap of two line segments or</para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Line__2" kindref="compound">Line_2</ref>&lt;<ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref>&gt;</computeroutput> or <computeroutput><ref refid="classCGAL_1_1Circle__2" kindref="compound">Circle_2</ref>&lt;<ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref>&gt;</computeroutput> in case of two equal input lines or circles. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Circular_kernel_intersections.h" line="83" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>With the 2D Circular Kernel</header>
      <description><para>See <ref refid="index_1Chapter_2D_Circular_Geometry_Kernel" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">2D Circular Geometry Kernel</ref>.</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;CGAL/global_functions_circular_kernel_2.h&gt;</highlight></codeline>
</programlisting> </para></description>
      <memberdef kind="function" id="group__compare__y__at__x__grp_1ga31c617e3d8655fb3578f0bc9682f18e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_y_at_x</definition>
        <argsstring>(const CGAL::Circular_arc_point_2&lt; CircularKernel &gt; &amp;p, const CGAL::Circular_arc_2&lt; CircularKernel &gt; &amp;a)</argsstring>
        <name>compare_y_at_x</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Circular__arc__point__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CGAL::Circular_arc_point_2</ref>&lt; <ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Circular__arc__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CGAL::Circular_arc_2</ref>&lt; <ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref> &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Same as above, for a point and a circular arc. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1344" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__y__at__x__grp_1gae97031deffe68932300f80df4e2ff259" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_y_at_x</definition>
        <argsstring>(const CGAL::Circular_arc_point_2&lt; CircularKernel &gt; &amp;p, const CGAL::Line_arc_2&lt; CircularKernel &gt; &amp;a)</argsstring>
        <name>compare_y_at_x</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Circular__arc__point__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CGAL::Circular_arc_point_2</ref>&lt; <ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__arc__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CGAL::Line_arc_2</ref>&lt; <ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref> &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Same as above, for a point and a line segment. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1350" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="group__do__intersect__spherical__grp_1ga89d510f4f086dc2a46466351116898c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::do_intersect</definition>
        <argsstring>(Type1&lt; SphericalKernel &gt; obj1, Type2&lt; SphericalKernel &gt; obj2)</argsstring>
        <name>do_intersect</name>
        <param>
          <type>Type1&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt;</type>
          <declname>obj1</declname>
        </param>
        <param>
          <type>Type2&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt;</type>
          <declname>obj2</declname>
        </param>
        <briefdescription>
<para>checks whether <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput> intersect. </para>        </briefdescription>
        <detaileddescription>
<para>See Chapter <ref refid="index_1Chapter_3D_Spherical_Geometry_Kernel" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">Chapter_3D_Spherical_Geometry_Kernel</ref> for details on a spherical kernel instantiation.</para><para>When using a spherical kernel, in addition to the function overloads documented <ref refid="group__do__intersect__linear__grp" kindref="compound">here</ref>, the following function overloads are also available.</para><para>Two objects <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput> intersect if there is a point <computeroutput>p</computeroutput> that is part of both <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput>. The intersection region of those two objects is defined as the set of all points <computeroutput>p</computeroutput> that are part of both <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput>. Note that while for a polygon we consider the enclosed domain, for an object of type <computeroutput><ref refid="classCGAL_1_1Circle__3" kindref="compound">Circle_3</ref></computeroutput> or <computeroutput><ref refid="classCGAL_1_1Sphere__3" kindref="compound">Sphere_3</ref></computeroutput> only the curve or the surface is considered.</para><para><computeroutput>Type1</computeroutput> and <computeroutput>Type2</computeroutput> can be any of the following:</para><para><itemizedlist>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Line__3" kindref="compound">Line_3</ref>&lt;<ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref>&gt;</computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Circle__3" kindref="compound">Circle_3</ref>&lt;<ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref>&gt;</computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>&lt;<ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref>&gt;</computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Sphere__3" kindref="compound">Sphere_3</ref>&lt;<ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref>&gt;</computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Line__arc__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">Line_arc_3</ref>&lt;<ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref>&gt;</computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Circular__arc__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">Circular_arc_3</ref>&lt;<ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref>&gt;</computeroutput></para></listitem></itemizedlist>
</para><para>An example illustrating this is presented in Chapter <ref refid="index_1Chapter_3D_Spherical_Geometry_Kernel" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">Chapter_3D_Spherical_Geometry_Kernel</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Spherical_kernel_intersections.h" line="35" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__do__intersect__spherical__grp_1ga020f0d63c70182b733b1997b506f445d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::do_intersect</definition>
        <argsstring>(Type1&lt; SphericalKernel &gt; obj1, Type2&lt; SphericalKernel &gt; obj2, Type3&lt; SphericalKernel &gt; obj3)</argsstring>
        <name>do_intersect</name>
        <param>
          <type>Type1&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt;</type>
          <declname>obj1</declname>
        </param>
        <param>
          <type>Type2&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt;</type>
          <declname>obj2</declname>
        </param>
        <param>
          <type>Type3&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt;</type>
          <declname>obj3</declname>
        </param>
        <briefdescription>
<para>checks whether <computeroutput>obj1</computeroutput>, <computeroutput>obj2</computeroutput> and <computeroutput>obj3</computeroutput> intersect. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>Type1</computeroutput>, <computeroutput>Type2</computeroutput> and <computeroutput>Type3</computeroutput> can be:</para><para><itemizedlist>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Sphere__3" kindref="compound">Sphere_3</ref>&lt;<ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref>&gt;</computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>&lt;<ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref>&gt;</computeroutput> </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Spherical_kernel_intersections.h" line="45" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="group__intersection__spherical__grp_1gaf48415042b58e0d2fa6467f0af013d95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SphericalType1</type>
          </param>
          <param>
            <type>typename SphericalType1</type>
          </param>
          <param>
            <type>typename <ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::intersection</definition>
        <argsstring>(const SphericalType1 &amp;obj1, const SphericalType2 &amp;obj2, OutputIterator intersections)</argsstring>
        <name>intersection</name>
        <param>
          <type>const SphericalType1 &amp;</type>
          <declname>obj1</declname>
        </param>
        <param>
          <type>const SphericalType2 &amp;</type>
          <declname>obj2</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>intersections</declname>
        </param>
        <briefdescription>
<para>Copies in the output iterator the intersection elements between the two objects. </para>        </briefdescription>
        <detaileddescription>
<para>See Chapter <ref refid="index_1Chapter_3D_Spherical_Geometry_Kernel" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">Chapter_3D_Spherical_Geometry_Kernel</ref> for details on a spherical kernel instantiation.</para><para>When using a spherical kernel, in addition to the function overloads documented <ref refid="group__intersection__linear__grp" kindref="compound">here</ref>, the following function overloads are also available.</para><para>The iterator versions of those functions can be used in conjunction with <computeroutput><ref refid="classCGAL_1_1Dispatch__output__iterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Dispatch_output_iterator</ref></computeroutput>.</para><para>Since both the number of intersections, if any, and their types, depend on the arguments, the function expects an output iterator on <computeroutput><ref refid="structCGAL_1_1cpp11_1_1result__of" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">cpp11::result_of</ref>&lt;<ref refid="classKernel_1_1Intersect__3" kindref="compound">Kernel::Intersect_3(Type1, Type2)</ref>&gt;::type</computeroutput>, as presented below.</para><para><computeroutput>intersections</computeroutput> iterates on elements of type <computeroutput>result_of&lt; Intersect_3(SphericalType1, SphericalType2) &gt;</computeroutput>, in lexicographic order, when this ordering is defined on the computed objects,</para><para>where <computeroutput>SphericalType1</computeroutput> and <computeroutput>SphericalType2</computeroutput> can both be one of:</para><para><itemizedlist>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Sphere__3" kindref="compound">Sphere_3</ref>&lt;<ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref>&gt;</computeroutput>,</para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>&lt;<ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref>&gt;</computeroutput>,</para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Line__3" kindref="compound">Line_3</ref>&lt;<ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref>&gt;</computeroutput>,</para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Circle__3" kindref="compound">Circle_3</ref>&lt;<ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref>&gt;</computeroutput>,</para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Line__arc__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">Line_arc_3</ref>&lt;<ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref>&gt;</computeroutput> or</para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Circular__arc__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">Circular_arc_3</ref>&lt;<ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref>&gt;</computeroutput>,</para></listitem></itemizedlist>
</para><para>and depending on the types <computeroutput>SphericalType1</computeroutput> and <computeroutput>SphericalType2</computeroutput>, the computed type can be</para><para><itemizedlist>
<listitem><para><computeroutput>std::pair&lt;<ref refid="classCGAL_1_1Circular__arc__point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">Circular_arc_point_3</ref>&lt;<ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref>&gt;, unsigned&gt;</computeroutput>, where the unsigned integer is the multiplicity of the corresponding intersection point between <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput>,</para></listitem><listitem><para><computeroutput>SphericalType1</computeroutput>, when <computeroutput>SphericalType1</computeroutput> and <computeroutput>SphericalType2</computeroutput> are equal, and if the two objets <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput> are equal,</para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Line__3" kindref="compound">Line_3</ref>&lt;<ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref>&gt;</computeroutput> or <computeroutput><ref refid="classCGAL_1_1Circle__3" kindref="compound">Circle_3</ref>&lt;<ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref>&gt;</computeroutput> when <computeroutput>SphericalType1</computeroutput> and <computeroutput>SphericalType2</computeroutput> are two-dimensional objets intersecting along a curve (2 planes, or 2 spheres, or one plane and one sphere),</para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Circular__arc__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">Circular_arc_3</ref>&lt;<ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref>&gt;</computeroutput> in case of an overlap of two circular arcs or</para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Line__arc__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">Line_arc_3</ref>&lt;<ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref>&gt;</computeroutput> in case of an overlap of two line segments. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Spherical_kernel_intersections.h" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__intersection__spherical__grp_1gaf918dcdeaa3bc4da0c5582fb4f38fdef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type1</type>
          </param>
          <param>
            <type>typename Type2</type>
          </param>
          <param>
            <type>typename Type3</type>
          </param>
          <param>
            <type>typename <ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::intersection</definition>
        <argsstring>(const Type1 &amp;obj1, const Type2 &amp;obj2, const Type3 &amp;obj3, OutputIterator intersections)</argsstring>
        <name>intersection</name>
        <param>
          <type>const Type1 &amp;</type>
          <declname>obj1</declname>
        </param>
        <param>
          <type>const Type2 &amp;</type>
          <declname>obj2</declname>
        </param>
        <param>
          <type>const Type3 &amp;</type>
          <declname>obj3</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>intersections</declname>
        </param>
        <briefdescription>
<para>Copies in the output iterator the intersection elements between the three objects. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>intersections</computeroutput> iterates on elements of type <computeroutput>boost::variant&lt; <ref refid="classCGAL_1_1Circle__3" kindref="compound">Circle_3</ref>, <ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>, <ref refid="classCGAL_1_1Sphere__3" kindref="compound">Sphere_3</ref>, std::pair&lt; <ref refid="classCGAL_1_1Circular__arc__point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">Circular_arc_point_3</ref>, unsigned &gt; &gt;</computeroutput>, in lexicographic order when this ordering is defined on the computed objects</para><para>where <computeroutput>Type1</computeroutput>, <computeroutput>Type2</computeroutput> and <computeroutput>Type3</computeroutput> can be either</para><para><itemizedlist>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Sphere__3" kindref="compound">Sphere_3</ref>&lt;<ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref>&gt;</computeroutput> or</para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>&lt;<ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref>&gt;</computeroutput></para></listitem></itemizedlist>
</para><para>and depending of these types, the computed return value</para><para><itemizedlist>
<listitem><para><computeroutput>std::pair&lt;<ref refid="classCGAL_1_1Circular__arc__point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">Circular_arc_point_3</ref>&lt;<ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref>&gt;, unsigned&gt;</computeroutput>, where the unsigned integer is the multiplicity of the corresponding intersection point,</para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Circle__3" kindref="compound">Circle_3</ref>&lt;<ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref>&gt;</computeroutput> or</para></listitem><listitem><para><computeroutput>Type1</computeroutput>, when <computeroutput>Type1</computeroutput>, <computeroutput>Type2</computeroutput> and <computeroutput>Type3</computeroutput> are equal, and if the three objets <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput> and <computeroutput>obj3</computeroutput> are equal. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Spherical_kernel_intersections.h" line="131" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__PkgMesh2Enum_1gab9fe60482a45120b3c061a8a4ec9018d" prot="public" static="no">
        <name>Mesh_optimization_return_code</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="enum" id="group__PkgSphericalKernel3GeometricClasses_1ga60d9863f63464a769af1e95c50d3f89a" prot="public" static="no">
        <name>Circle_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="enum" id="group__PkgStlExtensionAssertions_1gac5eee7bb7edcc41dd3251042c5934dee" prot="public" static="no">
        <name>Failure_behaviour</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="enum" id="group__kernel__enums_1ga8be07b00890ca29c0653be379113e8b0" prot="public" static="no">
        <name>Angle</name>
        <enumvalue id="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0a38f38441f2d7af7e7d848bff2bf49ec2" prot="public">
          <name>OBTUSE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0a03813b78e3d21e482f0a763b25dfa1b6" prot="public">
          <name>RIGHT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0ace2a11071ccbc32967b0792e5bb7377b" prot="public">
          <name>ACUTE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__angle__grp" kindref="compound">CGAL::angle()</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/enum.h" line="42" column="1" bodyfile="CGAL/enum.h" bodystart="42" bodyend="42"/>
      </memberdef>
      <memberdef kind="enum" id="group__kernel__enums_1gaf6030e89dadcc1f45369b0cdc5d9e111" prot="public" static="no">
        <name>Bounded_side</name>
        <enumvalue id="group__kernel__enums_1ggaf6030e89dadcc1f45369b0cdc5d9e111a3a96e6da84164cc8300c9e130be23f71" prot="public">
          <name>ON_UNBOUNDED_SIDE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__kernel__enums_1ggaf6030e89dadcc1f45369b0cdc5d9e111a060193157c0875fb2e6445a648f3ac1f" prot="public">
          <name>ON_BOUNDARY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__kernel__enums_1ggaf6030e89dadcc1f45369b0cdc5d9e111ad8333d35d4801c08b3a5ae9e94d7cabe" prot="public">
          <name>ON_BOUNDED_SIDE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__kernel__enums_1ga30e66263975bfc9a72730cba0c25367c" kindref="member">CGAL::opposite(const Bounded_side&amp; o)</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/enum.h" line="48" column="1" bodyfile="CGAL/enum.h" bodystart="48" bodyend="48"/>
      </memberdef>
      <memberdef kind="enum" id="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" prot="public" static="no">
        <name>Comparison_result</name>
        <enumvalue id="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab925c6b1ff8cd0bdea7f31fe18d3c38b" prot="public">
          <name>SMALLER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469a5f224784e56ca565837a5d6d268fe078" prot="public">
          <name>EQUAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab25bdbfd193e9ea35187a4f46e7d6fcd" prot="public">
          <name>LARGER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/enum.h" line="53" column="1" bodyfile="CGAL/enum.h" bodystart="53" bodyend="53"/>
      </memberdef>
      <memberdef kind="enum" id="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" prot="public" static="no">
        <name>Sign</name>
        <enumvalue id="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a3aef56502334293e3ad25e166d74bb2a" prot="public">
          <name>NEGATIVE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a15dcf7100dd2016acdd8172e81a7cb09" prot="public">
          <name>ZERO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a963eefff16725de743f4022f4e23fc0d" prot="public">
          <name>POSITIVE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__kernel__enums_1ga1147c0cf556939e71279546b38f2a1c5" kindref="member">CGAL::Orientation</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/enum.h" line="59" column="1" bodyfile="CGAL/enum.h" bodystart="59" bodyend="59"/>
      </memberdef>
      <memberdef kind="enum" id="group__kernel__enums_1ga5006dd2552d97fa577d81bd819c0f979" prot="public" static="no">
        <name>Oriented_side</name>
        <enumvalue id="group__kernel__enums_1gga5006dd2552d97fa577d81bd819c0f979ab906419672c7ae509b5e63158479ed85" prot="public">
          <name>ON_NEGATIVE_SIDE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__kernel__enums_1gga5006dd2552d97fa577d81bd819c0f979a45220491cf36139beffd09434aa31256" prot="public">
          <name>ON_ORIENTED_BOUNDARY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__kernel__enums_1gga5006dd2552d97fa577d81bd819c0f979aec3846b620579589dcc30c8fe71cc7f0" prot="public">
          <name>ON_POSITIVE_SIDE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/enum.h" line="75" column="1" bodyfile="CGAL/enum.h" bodystart="75" bodyend="75"/>
      </memberdef>
      <memberdef kind="enum" id="group__kernel__enums_1ga69d3e68aa488b8927506333b04400bdf" prot="public" static="no">
        <name>Box_parameter_space_2</name>
        <enumvalue id="group__kernel__enums_1gga69d3e68aa488b8927506333b04400bdfaea36d4831df16606dc880b9adb4a593b" prot="public">
          <name>LEFT_BOUNDARY</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__kernel__enums_1gga69d3e68aa488b8927506333b04400bdfa901615b6b6191a8b2c741fec08e749e2" prot="public">
          <name>RIGHT_BOUNDARY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__kernel__enums_1gga69d3e68aa488b8927506333b04400bdfa43ed149452c8f36052b6b337a841a6ad" prot="public">
          <name>BOTTOM_BOUNDARY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__kernel__enums_1gga69d3e68aa488b8927506333b04400bdfaa7c683e90e1420cf6ff2f7eacf933f07" prot="public">
          <name>TOP_BOUNDARY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__kernel__enums_1gga69d3e68aa488b8927506333b04400bdfae50ce8454203d2d01d268379e26bc729" prot="public">
          <name>INTERIOR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__kernel__enums_1gga69d3e68aa488b8927506333b04400bdfaab13aed2fa346ef0e65f069589d7aa32" prot="public">
          <name>EXTERIOR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/enum.h" line="129" column="1" bodyfile="CGAL/enum.h" bodystart="128" bodyend="136"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__nt__cgal_1ga2e3fce8233225177f57d66e7ed00880f" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Interval__nt" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">Interval_nt</ref>&lt; false &gt;</type>
        <definition>typedef Interval_nt&lt; false &gt; CGAL::Interval_nt_advanced</definition>
        <argsstring></argsstring>
        <name>Interval_nt_advanced</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag" line="1" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__nt__cgal_1gae96d924c796bfc4e781d28f81df43c52" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Exact_integer</definition>
        <argsstring></argsstring>
        <name>Exact_integer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag" line="1" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__nt__cgal_1ga0849ff44771b19582218ebdfa5614f64" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Exact_rational</definition>
        <argsstring></argsstring>
        <name>Exact_rational</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag" line="1" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__PkgStlExtensionUtilities_1ga96bf435aef680d59e1bcb722239222dd" prot="public" static="no">
        <type><ref refid="structCGAL_1_1Location__policy" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Location_policy</ref>&lt; <ref refid="structCGAL_1_1Compact" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Compact</ref> &gt;</type>
        <definition>typedef Location_policy&lt; Compact &gt; CGAL::Compact_location</definition>
        <argsstring></argsstring>
        <name>Compact_location</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag" line="1" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__PkgStlExtensionUtilities_1ga8f61a2b71f265bad92d78ae606afc830" prot="public" static="no">
        <type><ref refid="structCGAL_1_1Location__policy" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Location_policy</ref>&lt; <ref refid="structCGAL_1_1Fast" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Fast</ref> &gt;</type>
        <definition>typedef Location_policy&lt; Fast &gt; CGAL::Fast_location</definition>
        <argsstring></argsstring>
        <name>Fast_location</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag" line="1" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__PkgStlExtensionUtilities_1ga89d5ecf1540b2ec0a2bf5dd003e186d0" prot="public" static="no">
        <type><ref refid="structCGAL_1_1Boolean__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::Boolean_tag</ref>&lt; false &gt;</type>
        <definition>typedef CGAL::Boolean_tag&lt; false &gt; CGAL::Tag_false</definition>
        <argsstring></argsstring>
        <name>Tag_false</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag" line="1" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__PkgStlExtensionUtilities_1gab3e2296107b5d26c32c8183028a217f1" prot="public" static="no">
        <type><ref refid="structCGAL_1_1Boolean__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::Boolean_tag</ref>&lt; true &gt;</type>
        <definition>typedef CGAL::Boolean_tag&lt; true &gt; CGAL::Tag_true</definition>
        <argsstring></argsstring>
        <name>Tag_true</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag" line="1" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__PkgStlExtensionAssertions_1ga22c85e11e31ba1f9954022947822983d" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* CGAL::Failure_function)(const char *type, const char *expression, const char *file, int line, const char *explanation)</definition>
        <argsstring>)(const char *type, const char *expression, const char *file, int line, const char *explanation)</argsstring>
        <name>Failure_function</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag" line="1" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__kernel__enums_1ga1147c0cf556939e71279546b38f2a1c5" prot="public" static="no">
        <type><ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member">Sign</ref></type>
        <definition>typedef Sign CGAL::Orientation</definition>
        <argsstring></argsstring>
        <name>Orientation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__kernel__enums_1ga803e5969acd01d45aec5acaee6f82883" kindref="member">CGAL::LEFT_TURN</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__kernel__enums_1ga1f9d8cac74201e22d484b10384fe3bf9" kindref="member">CGAL::RIGHT_TURN</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__kernel__enums_1ga84f760a315c4f27cb4059db8a3a1159e" kindref="member">CGAL::COLLINEAR</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__kernel__enums_1ga5aa0906f2432d414090dd8723c10f304" kindref="member">CGAL::CLOCKWISE</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__kernel__enums_1ga39fcfbab0b0f0ce9139ad1613e21d60d" kindref="member">CGAL::COUNTERCLOCKWISE</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__kernel__enums_1ga56587f3c15032c9127a9fe81c038b0d7" kindref="member">CGAL::COPLANAR</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/enum.h" line="70" column="1" bodyfile="CGAL/enum.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__PkgMesh2Enum_1ggab9fe60482a45120b3c061a8a4ec9018da700b34635bba84023202ffb43ea072d6" prot="public" static="no" mutable="no">
        <type></type>
        <definition>CGAL::BOUND_REACHED</definition>
        <argsstring></argsstring>
        <name>BOUND_REACHED</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_2.tag" line="1" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="group__PkgMesh2Enum_1ggab9fe60482a45120b3c061a8a4ec9018dae51c3b06e2ee9b31f5b812cc86cbd229" prot="public" static="no" mutable="no">
        <type></type>
        <definition>CGAL::TIME_LIMIT_REACHED</definition>
        <argsstring></argsstring>
        <name>TIME_LIMIT_REACHED</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_2.tag" line="1" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="group__PkgMesh2Enum_1ggab9fe60482a45120b3c061a8a4ec9018da9c7c2f09314491da054f3f5d7d7ab3b9" prot="public" static="no" mutable="no">
        <type></type>
        <definition>CGAL::CANT_IMPROVE_ANYMORE</definition>
        <argsstring></argsstring>
        <name>CANT_IMPROVE_ANYMORE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_2.tag" line="1" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="group__PkgMesh2Enum_1ggab9fe60482a45120b3c061a8a4ec9018da19d4b9484d2ed90e8fec7e1194d25df2" prot="public" static="no" mutable="no">
        <type></type>
        <definition>CGAL::CONVERGENCE_REACHED</definition>
        <argsstring></argsstring>
        <name>CONVERGENCE_REACHED</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_2.tag" line="1" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="group__PkgMesh2Enum_1ggab9fe60482a45120b3c061a8a4ec9018da058b57a483e13d1ed274217b75ca0afc" prot="public" static="no" mutable="no">
        <type></type>
        <definition>CGAL::MAX_ITERATION_NUMBER_REACHED</definition>
        <argsstring></argsstring>
        <name>MAX_ITERATION_NUMBER_REACHED</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_2.tag" line="1" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="group__PkgMesh2Enum_1ggab9fe60482a45120b3c061a8a4ec9018dab191e538b64f19bb21b00eadae3934b7" prot="public" static="no" mutable="no">
        <type></type>
        <definition>CGAL::ALL_VERTICES_FROZEN</definition>
        <argsstring></argsstring>
        <name>ALL_VERTICES_FROZEN</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_2.tag" line="1" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="group__PkgSphericalKernel3GeometricClasses_1gga60d9863f63464a769af1e95c50d3f89aad2142aea5a2f6926c204b9ee37b87179" prot="public" static="no" mutable="no">
        <type></type>
        <definition>CGAL::NORMAL</definition>
        <argsstring></argsstring>
        <name>NORMAL</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag" line="1" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="group__PkgSphericalKernel3GeometricClasses_1gga60d9863f63464a769af1e95c50d3f89aa48994a117466d01e9a326034d470a11b" prot="public" static="no" mutable="no">
        <type></type>
        <definition>CGAL::THREADED</definition>
        <argsstring></argsstring>
        <name>THREADED</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag" line="1" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="group__PkgSphericalKernel3GeometricClasses_1gga60d9863f63464a769af1e95c50d3f89aa11447bc1ee397063449f296895407812" prot="public" static="no" mutable="no">
        <type></type>
        <definition>CGAL::POLAR</definition>
        <argsstring></argsstring>
        <name>POLAR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag" line="1" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="group__PkgSphericalKernel3GeometricClasses_1gga60d9863f63464a769af1e95c50d3f89aa0fbce70875b278844c5541f3561ee8fd" prot="public" static="no" mutable="no">
        <type></type>
        <definition>CGAL::BIPOLAR</definition>
        <argsstring></argsstring>
        <name>BIPOLAR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag" line="1" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="group__PkgStlExtensionAssertions_1ggac5eee7bb7edcc41dd3251042c5934deeafd47edae67791f804b5f1b616f2782ff" prot="public" static="no" mutable="no">
        <type></type>
        <definition>CGAL::ABORT</definition>
        <argsstring></argsstring>
        <name>ABORT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag" line="1" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="group__PkgStlExtensionAssertions_1ggac5eee7bb7edcc41dd3251042c5934deea03e7a9436476c257881f8ce46db26f7d" prot="public" static="no" mutable="no">
        <type></type>
        <definition>CGAL::EXIT</definition>
        <argsstring></argsstring>
        <name>EXIT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag" line="1" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="group__PkgStlExtensionAssertions_1ggac5eee7bb7edcc41dd3251042c5934deeaf7034bd0320b9bca60e23c0be889d728" prot="public" static="no" mutable="no">
        <type></type>
        <definition>CGAL::EXIT_WITH_SUCCESS</definition>
        <argsstring></argsstring>
        <name>EXIT_WITH_SUCCESS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag" line="1" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="group__PkgStlExtensionAssertions_1ggac5eee7bb7edcc41dd3251042c5934deea697442e04c769afa5f8506d7dd378ed4" prot="public" static="no" mutable="no">
        <type></type>
        <definition>CGAL::CONTINUE</definition>
        <argsstring></argsstring>
        <name>CONTINUE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag" line="1" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="group__PkgStlExtensionAssertions_1ggac5eee7bb7edcc41dd3251042c5934deea47ef91f2d5d0efcdc748c65519d3532d" prot="public" static="no" mutable="no">
        <type></type>
        <definition>CGAL::THROW_EXCEPTION</definition>
        <argsstring></argsstring>
        <name>THROW_EXCEPTION</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag" line="1" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="group__kernel__enums_1ga5aa0906f2432d414090dd8723c10f304" prot="public" static="no" mutable="no">
        <type>const <ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member">CGAL::Orientation</ref></type>
        <definition>const CGAL::Orientation CGAL::CLOCKWISE</definition>
        <argsstring></argsstring>
        <name>CLOCKWISE</name>
        <initializer>= <ref refid="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a3aef56502334293e3ad25e166d74bb2a" kindref="member">NEGATIVE</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__kernel__enums_1ga39fcfbab0b0f0ce9139ad1613e21d60d" kindref="member">CGAL::COUNTERCLOCKWISE</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/enum.h" line="82" column="1" bodyfile="CGAL/enum.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__kernel__enums_1ga39fcfbab0b0f0ce9139ad1613e21d60d" prot="public" static="no" mutable="no">
        <type>const <ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member">CGAL::Orientation</ref></type>
        <definition>const CGAL::Orientation CGAL::COUNTERCLOCKWISE</definition>
        <argsstring></argsstring>
        <name>COUNTERCLOCKWISE</name>
        <initializer>= <ref refid="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a963eefff16725de743f4022f4e23fc0d" kindref="member">POSITIVE</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__kernel__enums_1ga5aa0906f2432d414090dd8723c10f304" kindref="member">CGAL::CLOCKWISE</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/enum.h" line="88" column="1" bodyfile="CGAL/enum.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__kernel__enums_1ga84f760a315c4f27cb4059db8a3a1159e" prot="public" static="no" mutable="no">
        <type>const <ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member">CGAL::Orientation</ref></type>
        <definition>const CGAL::Orientation CGAL::COLLINEAR</definition>
        <argsstring></argsstring>
        <name>COLLINEAR</name>
        <initializer>= <ref refid="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a15dcf7100dd2016acdd8172e81a7cb09" kindref="member">ZERO</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__kernel__enums_1ga803e5969acd01d45aec5acaee6f82883" kindref="member">CGAL::LEFT_TURN</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__kernel__enums_1ga1f9d8cac74201e22d484b10384fe3bf9" kindref="member">CGAL::RIGHT_TURN</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/enum.h" line="95" column="1" bodyfile="CGAL/enum.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__kernel__enums_1ga803e5969acd01d45aec5acaee6f82883" prot="public" static="no" mutable="no">
        <type>const <ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member">CGAL::Orientation</ref></type>
        <definition>const CGAL::Orientation CGAL::LEFT_TURN</definition>
        <argsstring></argsstring>
        <name>LEFT_TURN</name>
        <initializer>= <ref refid="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a963eefff16725de743f4022f4e23fc0d" kindref="member">POSITIVE</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__kernel__enums_1ga84f760a315c4f27cb4059db8a3a1159e" kindref="member">CGAL::COLLINEAR</ref></computeroutput></para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__kernel__enums_1ga1f9d8cac74201e22d484b10384fe3bf9" kindref="member">CGAL::RIGHT_TURN</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/enum.h" line="104" column="1" bodyfile="CGAL/enum.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__kernel__enums_1ga1f9d8cac74201e22d484b10384fe3bf9" prot="public" static="no" mutable="no">
        <type>const <ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member">CGAL::Orientation</ref></type>
        <definition>const CGAL::Orientation CGAL::RIGHT_TURN</definition>
        <argsstring></argsstring>
        <name>RIGHT_TURN</name>
        <initializer>= <ref refid="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a3aef56502334293e3ad25e166d74bb2a" kindref="member">NEGATIVE</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__kernel__enums_1ga84f760a315c4f27cb4059db8a3a1159e" kindref="member">CGAL::COLLINEAR</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__kernel__enums_1ga803e5969acd01d45aec5acaee6f82883" kindref="member">CGAL::LEFT_TURN</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/enum.h" line="113" column="1" bodyfile="CGAL/enum.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__kernel__enums_1ga56587f3c15032c9127a9fe81c038b0d7" prot="public" static="no" mutable="no">
        <type>const <ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member">CGAL::Orientation</ref></type>
        <definition>const CGAL::Orientation CGAL::COPLANAR</definition>
        <argsstring></argsstring>
        <name>COPLANAR</name>
        <initializer>= <ref refid="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a15dcf7100dd2016acdd8172e81a7cb09" kindref="member">ZERO</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/enum.h" line="118" column="1" bodyfile="CGAL/enum.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__kernel__enums_1ga84ae121de5d53cc92dc2f3ee763a0440" prot="public" static="no" mutable="no">
        <type>const <ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member">CGAL::Orientation</ref></type>
        <definition>const CGAL::Orientation CGAL::DEGENERATE</definition>
        <argsstring></argsstring>
        <name>DEGENERATE</name>
        <initializer>= <ref refid="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a15dcf7100dd2016acdd8172e81a7cb09" kindref="member">ZERO</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/enum.h" line="123" column="1" bodyfile="CGAL/enum.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__kernel__enums_1ga4a98ec6bd9dfd8fe8c46fea553b5d238" prot="public" static="no" mutable="no">
        <type>const <ref refid="classCGAL_1_1Null__vector" kindref="compound">CGAL::Null_vector</ref></type>
        <definition>const CGAL::Null_vector CGAL::NULL_VECTOR</definition>
        <argsstring></argsstring>
        <name>NULL_VECTOR</name>
        <briefdescription>
<para>A symbolic constant used to construct zero length vectors. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Vector__2" kindref="compound">CGAL::Vector_2</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/enum.h" line="147" column="1" bodyfile="CGAL/enum.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__kernel__enums_1ga9d272a8e3a8080b851741b6d3a44afdc" prot="public" static="no" mutable="no">
        <type>const <ref refid="classCGAL_1_1Origin" kindref="compound">CGAL::Origin</ref></type>
        <definition>const Origin CGAL::ORIGIN</definition>
        <argsstring></argsstring>
        <name>ORIGIN</name>
        <briefdescription>
<para>A symbolic constant which denotes the point at the origin. </para>        </briefdescription>
        <detaileddescription>
<para>This constant is used in the conversion between points and vectors.</para><para><bold>Example</bold><linebreak/>
</para><para><programlisting><codeline><highlight class="normal">Point_2&lt;<sp/>Cartesian&lt;Exact_NT&gt;<sp/>&gt;<sp/><sp/>p(1.0,<sp/>1.0),<sp/>q;</highlight></codeline>
<codeline><highlight class="normal">Vector2&lt;<sp/>Cartesian&lt;Exact_NT&gt;<sp/>&gt;<sp/><sp/>v;</highlight></codeline>
<codeline><highlight class="normal">v<sp/>=<sp/>p<sp/>-<sp/>ORIGIN;</highlight></codeline>
<codeline><highlight class="normal">q<sp/>=<sp/>ORIGIN<sp/>+<sp/>v;<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">assert(<sp/>p<sp/>==<sp/>q<sp/>);</highlight></codeline>
</programlisting></para><para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/enum.h" line="169" column="1" bodyfile="CGAL/enum.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgKernelDFunctions_1ga8a25cedf1a9f5d645c511825bc6a1129" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Point__d" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">Point_d</ref>&lt; R &gt;</type>
        <definition>Point_d&lt; R &gt; CGAL::center_of_sphere</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last)</argsstring>
        <name>center_of_sphere</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgKernelDFunctions_1ga9366f250d18454d6d7a2cb2b7239505c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Point__d" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">Point_d</ref>&lt; R &gt;</type>
        <definition>Point_d&lt; R &gt; CGAL::lift_to_paraboloid</definition>
        <argsstring>(const Point_d&lt; R &gt; &amp;p)</argsstring>
        <name>lift_to_paraboloid</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__d" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">Point_d</ref>&lt; R &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgKernelDFunctions_1gaea9ec4e90b5d5722d09b561a3985e67e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::linear_base</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last, OutputIterator result)</argsstring>
        <name>linear_base</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>last</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgKernelDFunctions_1gae4e9a14c7792c8da1c6a98bd0b378937" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Point__d" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">Point_d</ref>&lt; R &gt;</type>
        <definition>Point_d&lt; R &gt; CGAL::midpoint</definition>
        <argsstring>(const Point_d&lt; R &gt; &amp;p, const Point_d&lt; R &gt; &amp;q)</argsstring>
        <name>midpoint</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__d" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">Point_d</ref>&lt; R &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__d" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">Point_d</ref>&lt; R &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgKernelDFunctions_1gaadc6f06918d9dc10b15a27fdea3e0052" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Point__d" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">Point_d</ref>&lt; R &gt;</type>
        <definition>Point_d&lt; R &gt; CGAL::project_along_d_axis</definition>
        <argsstring>(const Point_d&lt; R &gt; &amp;p)</argsstring>
        <name>project_along_d_axis</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__d" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">Point_d</ref>&lt; R &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgKernelDFunctions_1ga433853179f3d0e0d2b7929723b584517" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FT</type>
        <definition>FT CGAL::squared_distance</definition>
        <argsstring>(Point_d&lt; R &gt; p, Point_d&lt; R &gt; q)</argsstring>
        <name>squared_distance</name>
        <param>
          <type><ref refid="classCGAL_1_1Point__d" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">Point_d</ref>&lt; R &gt;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Point__d" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">Point_d</ref>&lt; R &gt;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgKernelDFunctions_1gaeb24896ff93503dab57f64b3b6934274" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::do_intersect</definition>
        <argsstring>(Type1&lt; R &gt; obj1, Type2&lt; R &gt; obj2)</argsstring>
        <name>do_intersect</name>
        <param>
          <type>Type1&lt; R &gt;</type>
          <declname>obj1</declname>
        </param>
        <param>
          <type>Type2&lt; R &gt;</type>
          <declname>obj2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgKernelDFunctions_1ga0aa3e8b6bdf1bff509f8e2672ef194d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structCGAL_1_1cpp11_1_1result__of" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">cpp11::result_of</ref>&lt; R::Intersect_d(Type1&lt; R &gt;, Type2&lt; R &gt;)&gt;::type</type>
        <definition>cpp11::result_of&lt; R::Intersect_d(Type1&lt; R &gt;, Type2&lt; R &gt;)&gt;::type CGAL::intersection</definition>
        <argsstring>(Type1&lt; R &gt; f1, Type2&lt; R &gt; f2)</argsstring>
        <name>intersection</name>
        <param>
          <type>Type1&lt; R &gt;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>Type2&lt; R &gt;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgKernelDFunctions_1gaaca9c7ee1de7b5694c527a2cb0d2bd99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::affinely_independent</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last)</argsstring>
        <name>affinely_independent</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgKernelDFunctions_1ga469edbb6a719b355da3eb8a78ad93daf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CGAL::affine_rank</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last)</argsstring>
        <name>affine_rank</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgKernelDFunctions_1ga7acf561e832f554032b13a756355fc51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_lexicographically</definition>
        <argsstring>(const Point_d&lt; R &gt; &amp;p, const Point_d&lt; R &gt; &amp;q)</argsstring>
        <name>compare_lexicographically</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__d" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">Point_d</ref>&lt; R &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__d" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">Point_d</ref>&lt; R &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgKernelDFunctions_1ga19451c489a0e60d4be0a7d4f5462962d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::contained_in_affine_hull</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last, const Point_d&lt; R &gt; &amp;p)</argsstring>
        <name>contained_in_affine_hull</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>last</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__d" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">Point_d</ref>&lt; R &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgKernelDFunctions_1gaefd117396ced79cbf0399fb3efc0d212" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::contained_in_linear_hull</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last, const Vector_d&lt; R &gt; &amp;v)</argsstring>
        <name>contained_in_linear_hull</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>last</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__d" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">Vector_d</ref>&lt; R &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgKernelDFunctions_1ga47799f4718eeab7474e370943b5b9b6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::contained_in_simplex</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last, const Point_d&lt; R &gt; &amp;p)</argsstring>
        <name>contained_in_simplex</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>last</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__d" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">Point_d</ref>&lt; R &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgKernelDFunctions_1gaaf434c87ede524fe801cac1e1ffa6d5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::lexicographically_smaller</definition>
        <argsstring>(const Point_d&lt; R &gt; &amp;p, const Point_d&lt; R &gt; &amp;q)</argsstring>
        <name>lexicographically_smaller</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__d" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">Point_d</ref>&lt; R &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__d" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">Point_d</ref>&lt; R &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgKernelDFunctions_1ga38de0c7326c1028d17ff6ca0df227f6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::lexicographically_smaller_or_equal</definition>
        <argsstring>(const Point_d&lt; R &gt; &amp;p, const Point_d&lt; R &gt; &amp;q)</argsstring>
        <name>lexicographically_smaller_or_equal</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__d" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">Point_d</ref>&lt; R &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__d" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">Point_d</ref>&lt; R &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgKernelDFunctions_1gaa40d2aab33098605820a8961ebda7f98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::linearly_independent</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last)</argsstring>
        <name>linearly_independent</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgKernelDFunctions_1ga51ab7291fd4679a33bec5dd2cd1d5b97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CGAL::linear_rank</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last)</argsstring>
        <name>linear_rank</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgKernelDFunctions_1ga140039774b89a338321c36e14732b787" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member">Orientation</ref></type>
        <definition>Orientation CGAL::orientation</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last)</argsstring>
        <name>orientation</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgKernelDFunctions_1gaec9abb52ce5001e58964d2d57e5b0e3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1gaf6030e89dadcc1f45369b0cdc5d9e111" kindref="member">Bounded_side</ref></type>
        <definition>Bounded_side CGAL::side_of_bounded_sphere</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last, const Point_d&lt; R &gt; &amp;p)</argsstring>
        <name>side_of_bounded_sphere</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>last</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__d" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">Point_d</ref>&lt; R &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgKernelDFunctions_1gac43086d90c589b90f54f2e5532dcc01b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1ga5006dd2552d97fa577d81bd819c0f979" kindref="member">Oriented_side</ref></type>
        <definition>Oriented_side CGAL::side_of_oriented_sphere</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last, const Point_d&lt; R &gt; &amp;p)</argsstring>
        <name>side_of_oriented_sphere</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>last</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__d" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">Point_d</ref>&lt; R &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull2Functions_1ga53e842c0b8490653535c00ab81bb0939" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::ch_akl_toussaint</definition>
        <argsstring>(ForwardIterator first, ForwardIterator beyond, OutputIterator result, const Traits &amp;ch_traits=Default_traits())</argsstring>
        <name>ch_akl_toussaint</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>beyond</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>result</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull2Functions_1gac13b4efbc337c7a8d5ad418521edcd4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::ch_bykat</definition>
        <argsstring>(InputIterator first, InputIterator beyond, OutputIterator result, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>ch_bykat</name>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>beyond</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>result</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull2Functions_1gab9c9511b024795495dd6154ebf19c29c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::ch_eddy</definition>
        <argsstring>(InputIterator first, InputIterator beyond, OutputIterator result, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>ch_eddy</name>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>beyond</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>result</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull2Functions_1gaeccc6dda2f9d3096c94a7ff84cc91a85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::ch_graham_andrew</definition>
        <argsstring>(InputIterator first, InputIterator beyond, OutputIterator result, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>ch_graham_andrew</name>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>beyond</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>result</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull2Subsequence_1gafa026d25f9fee686e7a58af0ff365f86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::ch_graham_andrew_scan</definition>
        <argsstring>(BidirectionalIterator first, BidirectionalIterator beyond, OutputIterator result, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>ch_graham_andrew_scan</name>
        <param>
          <type><ref refid="classBidirectionalIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">BidirectionalIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classBidirectionalIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">BidirectionalIterator</ref></type>
          <declname>beyond</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>result</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull2Functions_1ga99d0534bf096ae28a10b6844b21e7867" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::ch_jarvis</definition>
        <argsstring>(InputIterator first, InputIterator beyond, OutputIterator result, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>ch_jarvis</name>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>beyond</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>result</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull2Subsequence_1gae9e0919cb50981d1f31ac242a2c4ba9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::ch_jarvis_march</definition>
        <argsstring>(ForwardIterator first, ForwardIterator beyond, const Traits::Point_2 &amp;start_p, const Traits::Point_2 &amp;stop_p, OutputIterator result, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>ch_jarvis_march</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>const Traits::Point_2 &amp;</type>
          <declname>start_p</declname>
        </param>
        <param>
          <type>const Traits::Point_2 &amp;</type>
          <declname>stop_p</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>result</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull2Functions_1ga3bba4c83b7ac3cb9183191ea78828a65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::ch_melkman</definition>
        <argsstring>(InputIterator first, InputIterator last, OutputIterator result, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>ch_melkman</name>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>last</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>result</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull2Extreme_1gac07127d740ecc491b3dc0e797c9c3252" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::ch_e_point</definition>
        <argsstring>(ForwardIterator first, ForwardIterator beyond, ForwardIterator &amp;e, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>ch_e_point</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>beyond</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull2Extreme_1gab42b74243ff79e49f4574ddfdcdb4ed7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::ch_n_point</definition>
        <argsstring>(ForwardIterator first, ForwardIterator beyond, ForwardIterator &amp;n, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>ch_n_point</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>beyond</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref> &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull2Extreme_1ga119d3f2f171cdf2d07d3a643efade08f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::ch_ns_point</definition>
        <argsstring>(ForwardIterator first, ForwardIterator beyond, ForwardIterator &amp;n, ForwardIterator &amp;s, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>ch_ns_point</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>beyond</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref> &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull2Extreme_1ga3dbd516d18c626d354734f534aa8f740" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::ch_nswe_point</definition>
        <argsstring>(ForwardIterator first, ForwardIterator beyond, ForwardIterator &amp;n, ForwardIterator &amp;s, ForwardIterator &amp;w, ForwardIterator &amp;e, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>ch_nswe_point</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>beyond</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref> &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull2Extreme_1gaab5a7ddae1354e025e003610d6e3cf10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::ch_s_point</definition>
        <argsstring>(ForwardIterator first, ForwardIterator beyond, ForwardIterator &amp;s, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>ch_s_point</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>beyond</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull2Extreme_1gadf9445fc0581869a195c27ca2685c3c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::ch_we_point</definition>
        <argsstring>(ForwardIterator first, ForwardIterator beyond, ForwardIterator &amp;w, ForwardIterator &amp;e, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>ch_we_point</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>beyond</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull2Extreme_1ga9add6eb0d67dacb52918da2c73e88c0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::ch_w_point</definition>
        <argsstring>(ForwardIterator first, ForwardIterator beyond, ForwardIterator &amp;w, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>ch_w_point</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>beyond</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull2Functions_1ga8241d43969ff61cb9be46811c2e9e176" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::convex_hull_2</definition>
        <argsstring>(InputIterator first, InputIterator beyond, OutputIterator result, const Traits &amp;ch_traits)</argsstring>
        <name>convex_hull_2</name>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>beyond</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>result</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull2Functions_1ga25d29704043d928065a240d80c4e6078" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::convex_hull_2</definition>
        <argsstring>(InputIterator first, InputIterator beyond, OutputIterator result)</argsstring>
        <name>convex_hull_2</name>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>beyond</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull2Subsequence_1gaf6e4baad67192f0cc3da273cda717297" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::lower_hull_points_2</definition>
        <argsstring>(InputIterator first, InputIterator beyond, OutputIterator result, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>lower_hull_points_2</name>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>beyond</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>result</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull2Subsequence_1ga1abc268fbd7b3edfc61af2efff6f3e93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::upper_hull_points_2</definition>
        <argsstring>(InputIterator first, InputIterator beyond, OutputIterator result, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>upper_hull_points_2</name>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>beyond</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>result</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull2Convexity_1gaf212d4568dfb6a39831c5f4ea1257b65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::is_ccw_strongly_convex_2</definition>
        <argsstring>(ForwardIterator first, ForwardIterator beyond, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>is_ccw_strongly_convex_2</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull2Convexity_1ga19dcfbe04c6933232236f27e4fecf592" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::is_cw_strongly_convex_2</definition>
        <argsstring>(ForwardIterator first, ForwardIterator beyond, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>is_cw_strongly_convex_2</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgDrawTriangulation2_1ga5b2aa57d37e1b52c7f4a3a879fd40dfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::draw</definition>
        <argsstring>(const T2 &amp;at2)</argsstring>
        <name>draw</name>
        <param>
          <type>const T2 &amp;</type>
          <declname>at2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgMesh2Functions_1gafd0e61cd3bf931e55298ad9b1523f9a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::refine_Delaunay_mesh_2</definition>
        <argsstring>(CDT &amp;t, const Criteria &amp;criteria=Criteria())</argsstring>
        <name>refine_Delaunay_mesh_2</name>
        <param>
          <type>CDT &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const Criteria &amp;</type>
          <declname>criteria</declname>
          <defval>Criteria()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgMesh2Functions_1ga55c3e585b93a0fd91c6094d4763f9c01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::refine_Delaunay_mesh_2</definition>
        <argsstring>(CDT &amp;t, InputIterator begin, InputIterator end, const Criteria &amp;criteria=Criteria(), bool mark=false)</argsstring>
        <name>refine_Delaunay_mesh_2</name>
        <param>
          <type>CDT &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>begin</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>end</declname>
        </param>
        <param>
          <type>const Criteria &amp;</type>
          <declname>criteria</declname>
          <defval>Criteria()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>mark</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgMesh2Functions_1ga5903d196ab84ecf1c1596c8892f7a6d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__PkgMesh2Enum_1gab9fe60482a45120b3c061a8a4ec9018d" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_2.tag">CGAL::Mesh_optimization_return_code</ref></type>
        <definition>CGAL::Mesh_optimization_return_code CGAL::lloyd_optimize_mesh_2</definition>
        <argsstring>(CDT &amp;cdt, double parameters::time_limit=0, std::size_t parameters::max_iteration_number=0, double parameters::convergence=0.001, double parameters::freeze_bound=0.001, PointIterator parameters::seeds_begin=PointIterator(), PointIterator parameters::seeds_end=PointIterator(), bool parameters::mark=false)</argsstring>
        <name>lloyd_optimize_mesh_2</name>
        <param>
          <type>CDT &amp;</type>
          <declname>cdt</declname>
        </param>
        <param>
          <type>double parameters::time_limit</type>
          <defval>0</defval>
        </param>
        <param>
          <type>std::size_t parameters::max_iteration_number</type>
          <defval>0</defval>
        </param>
        <param>
          <type>double parameters::convergence</type>
          <defval>0.001</defval>
        </param>
        <param>
          <type>double parameters::freeze_bound</type>
          <defval>0.001</defval>
        </param>
        <param>
          <type>PointIterator parameters::seeds_begin</type>
          <defval>PointIterator()</defval>
        </param>
        <param>
          <type>PointIterator parameters::seeds_end</type>
          <defval>PointIterator()</defval>
        </param>
        <param>
          <type>bool parameters::mark</type>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgMesh2Functions_1gafbe2b6b96e7c8ce9a2816d50cd9bfacf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::make_conforming_Delaunay_2</definition>
        <argsstring>(CDT &amp;t)</argsstring>
        <name>make_conforming_Delaunay_2</name>
        <param>
          <type>CDT &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgMesh2Functions_1ga05bf108ffbea1545b99a8b899ec5e2dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::make_conforming_Gabriel_2</definition>
        <argsstring>(CDT &amp;t)</argsstring>
        <name>make_conforming_Gabriel_2</name>
        <param>
          <type>CDT &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceCGAL_1a47f0ae53dc4a6e546cf85257048a5512" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::is_finite</definition>
        <argsstring>(double x)</argsstring>
        <name>is_finite</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceCGAL_1a565f1b98f0d166db4a117ebf3bec0ea6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::is_finite</definition>
        <argsstring>(float x)</argsstring>
        <name>is_finite</name>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceCGAL_1a4b32f8f9b95fc15d00f5bee8f5c83e25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::is_finite</definition>
        <argsstring>(long double x)</argsstring>
        <name>is_finite</name>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__nt__ralgebraic_1ga7b3b3eb35124b0c46373c88e324a7a95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::compute_roots_of_2</definition>
        <argsstring>(const RT &amp;a, const RT &amp;b, const RT &amp;c, OutputIterator oit)</argsstring>
        <name>compute_roots_of_2</name>
        <param>
          <type>const RT &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const RT &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const RT &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>oit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__nt__ralgebraic_1ga4cb90aeebfe5ff7cf7eef83ae2f09918" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structCGAL_1_1Root__of__traits" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">Root_of_traits</ref>&lt; RT &gt;::Root_of_2</type>
        <definition>Root_of_traits&lt; RT &gt;::Root_of_2 CGAL::make_root_of_2</definition>
        <argsstring>(const RT &amp;a, const RT &amp;b, const RT &amp;c, bool s)</argsstring>
        <name>make_root_of_2</name>
        <param>
          <type>const RT &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const RT &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const RT &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__nt__ralgebraic_1ga9f5fc25b40d694cc581931db4a1f8245" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structCGAL_1_1Root__of__traits" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">Root_of_traits</ref>&lt; RT &gt;::Root_of_2</type>
        <definition>Root_of_traits&lt; RT &gt;::Root_of_2 CGAL::make_root_of_2</definition>
        <argsstring>(RT alpha, RT beta, RT gamma)</argsstring>
        <name>make_root_of_2</name>
        <param>
          <type>RT</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>RT</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>RT</type>
          <declname>gamma</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__nt__ralgebraic_1ga65dbf48e30821c7445bc50480e3c5242" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structCGAL_1_1Root__of__traits" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">Root_of_traits</ref>&lt; RT &gt;::Root_of_2</type>
        <definition>Root_of_traits&lt; RT &gt;::Root_of_2 CGAL::make_sqrt</definition>
        <argsstring>(const RT &amp;x)</argsstring>
        <name>make_sqrt</name>
        <param>
          <type>const RT &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__nt__rrational_1ga17858fbeefd20878349736beb169df97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Rational</type>
        <definition>Rational CGAL::simplest_rational_in_interval</definition>
        <argsstring>(double d1, double d2)</argsstring>
        <name>simplest_rational_in_interval</name>
        <param>
          <type>double</type>
          <declname>d1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>d2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__nt__rrational_1gaac65e38f22218d07ff294d8bf72790a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Rational</type>
        <definition>Rational CGAL::to_rational</definition>
        <argsstring>(double d)</argsstring>
        <name>to_rational</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__nt__util_1ga06ee6c8472c94e9f14d6fc94b6b7079b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::is_valid</definition>
        <argsstring>(const T &amp;x)</argsstring>
        <name>is_valid</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__nt__util_1gad7dbfa919e255b52f36ea1512a92cb78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T CGAL::max</definition>
        <argsstring>(const T &amp;x, const T &amp;y)</argsstring>
        <name>max</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__nt__util_1gab0ad1dbf97e8a81da183514138f583e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T CGAL::min</definition>
        <argsstring>(const T &amp;x, const T &amp;y)</argsstring>
        <name>min</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgAlgebraicFoundations_1ga1d5106cf8be16adb4c4dc8b1ec3a5a92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NT</type>
        <definition>NT CGAL::abs</definition>
        <argsstring>(const NT &amp;x)</argsstring>
        <name>abs</name>
        <param>
          <type>const NT &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgAlgebraicFoundations_1ga0397c01d0ea2364b92e98141e221e9bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>result_type</type>
        <definition>result_type CGAL::compare</definition>
        <argsstring>(const NT &amp;x, const NT &amp;y)</argsstring>
        <name>compare</name>
        <param>
          <type>const NT &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const NT &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgAlgebraicFoundations_1gae246e686f794e878361621e6d4898b5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>result_type</type>
        <definition>result_type CGAL::div</definition>
        <argsstring>(const NT1 &amp;x, const NT2 &amp;y)</argsstring>
        <name>div</name>
        <param>
          <type>const NT1 &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const NT2 &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgAlgebraicFoundations_1ga3445213fb9bc055253f5c346ce1693f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::div_mod</definition>
        <argsstring>(const NT1 &amp;x, const NT2 &amp;y, result_type &amp;q, result_type &amp;r)</argsstring>
        <name>div_mod</name>
        <param>
          <type>const NT1 &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const NT2 &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>result_type &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>result_type &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgAlgebraicFoundations_1gade2b63594fb6827c33c0dcd73b4c7cfe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>result_type</type>
        <definition>result_type CGAL::gcd</definition>
        <argsstring>(const NT1 &amp;x, const NT2 &amp;y)</argsstring>
        <name>gcd</name>
        <param>
          <type>const NT1 &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const NT2 &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgAlgebraicFoundations_1ga59e55b9e023c50ddb15c89fae4b68387" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>result_type</type>
        <definition>result_type CGAL::integral_division</definition>
        <argsstring>(const NT1 &amp;x, const NT2 &amp;y)</argsstring>
        <name>integral_division</name>
        <param>
          <type>const NT1 &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const NT2 &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgAlgebraicFoundations_1ga3152b245b3c1c2fccd78e1dc27942598" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NT</type>
        <definition>NT CGAL::inverse</definition>
        <argsstring>(const NT &amp;x)</argsstring>
        <name>inverse</name>
        <param>
          <type>const NT &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgAlgebraicFoundations_1gab752a78af2e16a42c5bd8c09fafeb585" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>result_type</type>
        <definition>result_type CGAL::is_negative</definition>
        <argsstring>(const NT &amp;x)</argsstring>
        <name>is_negative</name>
        <param>
          <type>const NT &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgAlgebraicFoundations_1gab57640546cf6cf7e56d37a652927a6f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>result_type</type>
        <definition>result_type CGAL::is_one</definition>
        <argsstring>(const NT &amp;x)</argsstring>
        <name>is_one</name>
        <param>
          <type>const NT &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgAlgebraicFoundations_1gabbfc28149479e41f56111ffe692c07d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>result_type</type>
        <definition>result_type CGAL::is_positive</definition>
        <argsstring>(const NT &amp;x)</argsstring>
        <name>is_positive</name>
        <param>
          <type>const NT &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgAlgebraicFoundations_1ga9e2d81a5ae3384b07b0f5848e8ae7bfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>result_type</type>
        <definition>result_type CGAL::is_square</definition>
        <argsstring>(const NT &amp;x)</argsstring>
        <name>is_square</name>
        <param>
          <type>const NT &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgAlgebraicFoundations_1ga890f40c3e1aa8708d1e1fb72fdfd7834" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>result_type</type>
        <definition>result_type CGAL::is_square</definition>
        <argsstring>(const NT &amp;x, NT &amp;y)</argsstring>
        <name>is_square</name>
        <param>
          <type>const NT &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>NT &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgAlgebraicFoundations_1ga997aad1528e7e744e54a807caa2be56e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>result_type</type>
        <definition>result_type CGAL::is_zero</definition>
        <argsstring>(const NT &amp;x)</argsstring>
        <name>is_zero</name>
        <param>
          <type>const NT &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgAlgebraicFoundations_1gabac14fc6cb4f556c19958b60f3305b9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NT</type>
        <definition>NT CGAL::kth_root</definition>
        <argsstring>(int k, const NT &amp;x)</argsstring>
        <name>kth_root</name>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const NT &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgAlgebraicFoundations_1gac6bc445c0fc83ed997549ce869b7bae7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>result_type</type>
        <definition>result_type CGAL::mod</definition>
        <argsstring>(const NT1 &amp;x, const NT2 &amp;y)</argsstring>
        <name>mod</name>
        <param>
          <type>const NT1 &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const NT2 &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgAlgebraicFoundations_1ga975ad8b8b91cd67463c6c2be863d16a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NT</type>
        <definition>NT CGAL::root_of</definition>
        <argsstring>(int k, InputIterator begin, InputIterator end)</argsstring>
        <name>root_of</name>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>begin</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgAlgebraicFoundations_1gaf3d75d272a29458960987a8f248ec636" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>result_type</type>
        <definition>result_type CGAL::sign</definition>
        <argsstring>(const NT &amp;x)</argsstring>
        <name>sign</name>
        <param>
          <type>const NT &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgAlgebraicFoundations_1ga5339b0f11fdc9babbc5ca0b33f4a982c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::simplify</definition>
        <argsstring>(const NT &amp;x)</argsstring>
        <name>simplify</name>
        <param>
          <type>const NT &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgAlgebraicFoundations_1gab922269072ee9ee99ba8c541418b2e11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NT</type>
        <definition>NT CGAL::sqrt</definition>
        <argsstring>(const NT &amp;x)</argsstring>
        <name>sqrt</name>
        <param>
          <type>const NT &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgAlgebraicFoundations_1ga07001b5ddc5c43096c811c91a306be9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NT</type>
        <definition>NT CGAL::square</definition>
        <argsstring>(const NT &amp;x)</argsstring>
        <name>square</name>
        <param>
          <type>const NT &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgAlgebraicFoundations_1ga1f1bcd74fce34fd532445590bbda5cd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double CGAL::to_double</definition>
        <argsstring>(const NT &amp;x)</argsstring>
        <name>to_double</name>
        <param>
          <type>const NT &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgAlgebraicFoundations_1gac30124cb713e69f02816e2b91c655fa6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; double, double &gt;</type>
        <definition>std::pair&lt; double, double &gt; CGAL::to_interval</definition>
        <argsstring>(const NT &amp;x)</argsstring>
        <name>to_interval</name>
        <param>
          <type>const NT &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgAlgebraicFoundations_1ga46969193a368780228dd0855cdc424b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NT</type>
        <definition>NT CGAL::unit_part</definition>
        <argsstring>(const NT &amp;x)</argsstring>
        <name>unit_part</name>
        <param>
          <type>const NT &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgCircularKernel2GeometricFunctions_1ga05d5658be13df0510fb72d1ed8080ef6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::has_in_x_range</definition>
        <argsstring>(const Circular_arc_2&lt; CircularKernel &gt; &amp;ca, const Circular_arc_point_2&lt; CircularKernel &gt; &amp;p)</argsstring>
        <name>has_in_x_range</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Circular__arc__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">Circular_arc_2</ref>&lt; <ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref> &gt; &amp;</type>
          <declname>ca</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Circular__arc__point__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">Circular_arc_point_2</ref>&lt; <ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgCircularKernel2GeometricFunctions_1ga3c7c39fc6297b55d21cc70a7cbea3ac4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::has_in_x_range</definition>
        <argsstring>(const Line_arc_2&lt; CircularKernel &gt; &amp;ca, const Circular_arc_point_2&lt; CircularKernel &gt; &amp;p)</argsstring>
        <name>has_in_x_range</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__arc__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">Line_arc_2</ref>&lt; <ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref> &gt; &amp;</type>
          <declname>ca</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Circular__arc__point__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">Circular_arc_point_2</ref>&lt; <ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgCircularKernel2GeometricFunctions_1gabd31562a8fe7b14d0bb475a5f4b80810" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::has_on</definition>
        <argsstring>(const Circle_2&lt; CircularKernel &gt; &amp;c, const Circular_arc_point_2&lt; CircularKernel &gt; &amp;p)</argsstring>
        <name>has_on</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Circle__2" kindref="compound">Circle_2</ref>&lt; <ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref> &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Circular__arc__point__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">Circular_arc_point_2</ref>&lt; <ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgCircularKernel2GeometricFunctions_1ga20791b9a88e184491fe836fb3780f8dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::make_x_monotone</definition>
        <argsstring>(const Circular_arc_2&lt; CircularKernel &gt; &amp;ca, OutputIterator res)</argsstring>
        <name>make_x_monotone</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Circular__arc__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">Circular_arc_2</ref>&lt; <ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref> &gt; &amp;</type>
          <declname>ca</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgCircularKernel2GeometricFunctions_1ga62bc8c54f9bf7de2c39cdb5ed15f0c8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::make_xy_monotone</definition>
        <argsstring>(const Circular_arc_2&lt; CircularKernel &gt; &amp;ca, OutputIterator res)</argsstring>
        <name>make_xy_monotone</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Circular__arc__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">Circular_arc_2</ref>&lt; <ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref> &gt; &amp;</type>
          <declname>ca</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgCircularKernel2GeometricFunctions_1gac6ca408fcb999bb95fd8bbdada45333c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Circular__arc__point__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">Circular_arc_point_2</ref>&lt; <ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref> &gt;</type>
        <definition>Circular_arc_point_2&lt; CircularKernel &gt; CGAL::x_extremal_point</definition>
        <argsstring>(const Circle_2&lt; CircularKernel &gt; &amp;c, bool b)</argsstring>
        <name>x_extremal_point</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Circle__2" kindref="compound">Circle_2</ref>&lt; <ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref> &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgCircularKernel2GeometricFunctions_1ga1841fa96dec33f66c30e30b8e7888179" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::x_extremal_points</definition>
        <argsstring>(const Circle_2&lt; CircularKernel &gt; &amp;c, OutputIterator res)</argsstring>
        <name>x_extremal_points</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Circle__2" kindref="compound">Circle_2</ref>&lt; <ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref> &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgCircularKernel2GeometricFunctions_1ga39b4a3c207e8e8beef23170dbcf693ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Circular__arc__point__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">Circular_arc_point_2</ref>&lt; <ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref> &gt;</type>
        <definition>Circular_arc_point_2&lt; CircularKernel &gt; CGAL::y_extremal_point</definition>
        <argsstring>(const Circle_2&lt; CircularKernel &gt; &amp;c, bool b)</argsstring>
        <name>y_extremal_point</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Circle__2" kindref="compound">Circle_2</ref>&lt; <ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref> &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgCircularKernel2GeometricFunctions_1ga265e0f6cc6a737bd128e2ffcf74d5c7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::y_extremal_points</definition>
        <argsstring>(const Circle_2&lt; CircularKernel &gt; &amp;c, OutputIterator res)</argsstring>
        <name>y_extremal_points</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Circle__2" kindref="compound">Circle_2</ref>&lt; <ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref> &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgCircularKernel2GeometricFunctions_1ga79015ad57cb6c04656416d3e1ce47afd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">CGAL::Comparison_result</ref></type>
        <definition>CGAL::Comparison_result CGAL::compare_y_to_right</definition>
        <argsstring>(const Circular_arc_2&lt; CircularKernel &gt; &amp;ca1, const Circular_arc_2&lt; CircularKernel &gt; &amp;ca2, Circular_arc_point_2&lt; CircularKernel &gt; &amp;p)</argsstring>
        <name>compare_y_to_right</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Circular__arc__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">Circular_arc_2</ref>&lt; <ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref> &gt; &amp;</type>
          <declname>ca1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Circular__arc__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">Circular_arc_2</ref>&lt; <ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref> &gt; &amp;</type>
          <declname>ca2</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Circular__arc__point__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">Circular_arc_point_2</ref>&lt; <ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSphericalKernel3GeometricFunctions_1ga5ed8dc739aa2e6a4b580f15544ea78d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__PkgSphericalKernel3GeometricClasses_1ga60d9863f63464a769af1e95c50d3f89a" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">CGAL::Circle_type</ref></type>
        <definition>CGAL::Circle_type CGAL::classify</definition>
        <argsstring>(const CGAL::Circle_3&lt; SphericalKernel &gt; &amp;c, const CGAL::Sphere_3&lt; SphericalKernel &gt; &amp;sphere)</argsstring>
        <name>classify</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Circle__3" kindref="compound">CGAL::Circle_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Sphere__3" kindref="compound">CGAL::Sphere_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>sphere</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSphericalKernel3GeometricFunctions_1gae9ea6981dc8be3a68b0673151ed7f19b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_theta</definition>
        <argsstring>(const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;p, const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;q, const CGAL::Sphere_3&lt; SphericalKernel &gt; &amp;sphere)</argsstring>
        <name>compare_theta</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Circular__arc__point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">CGAL::Circular_arc_point_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Circular__arc__point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">CGAL::Circular_arc_point_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Sphere__3" kindref="compound">CGAL::Sphere_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>sphere</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSphericalKernel3GeometricFunctions_1gada112d1362feadb0774f9843bf3a964d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_theta</definition>
        <argsstring>(const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;p, const CGAL::Vector_3&lt; SphericalKernel &gt; &amp;m, const CGAL::Sphere_3&lt; SphericalKernel &gt; &amp;sphere)</argsstring>
        <name>compare_theta</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Circular__arc__point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">CGAL::Circular_arc_point_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Sphere__3" kindref="compound">CGAL::Sphere_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>sphere</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSphericalKernel3GeometricFunctions_1ga55f65165999cdf2a420010c558dd3363" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_theta</definition>
        <argsstring>(const CGAL::Vector_3&lt; SphericalKernel &gt; &amp;m, const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;p, const CGAL::Sphere_3&lt; SphericalKernel &gt; &amp;sphere)</argsstring>
        <name>compare_theta</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Circular__arc__point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">CGAL::Circular_arc_point_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Sphere__3" kindref="compound">CGAL::Sphere_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>sphere</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSphericalKernel3GeometricFunctions_1ga6026c8a61d8dab5890ac0718f7f2be34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::compare_theta_z</definition>
        <argsstring>(const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;p, const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;q, const CGAL::Sphere_3&lt; SphericalKernel &gt; &amp;sphere)</argsstring>
        <name>compare_theta_z</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Circular__arc__point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">CGAL::Circular_arc_point_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Circular__arc__point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">CGAL::Circular_arc_point_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Sphere__3" kindref="compound">CGAL::Sphere_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>sphere</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSphericalKernel3GeometricFunctions_1gaf713bd5c16d2590e6b6cffd61ffcccf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::is_theta_monotone</definition>
        <argsstring>(const CGAL::Circular_arc_3&lt; SphericalKernel &gt; &amp;a, const CGAL::Sphere_3&lt; SphericalKernel &gt; &amp;sphere)</argsstring>
        <name>is_theta_monotone</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Circular__arc__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">CGAL::Circular_arc_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Sphere__3" kindref="compound">CGAL::Sphere_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>sphere</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSphericalKernel3GeometricFunctions_1ga71e6d51a5a357ab440fad354f381e0c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Circular__arc__point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">CGAL::Circular_arc_point_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt;</type>
        <definition>CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; CGAL::theta_extremal_point</definition>
        <argsstring>(const CGAL::Circle_3&lt; SphericalKernel &gt; &amp;c, const CGAL::Sphere_3&lt; SphericalKernel &gt; sphere, bool b)</argsstring>
        <name>theta_extremal_point</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Circle__3" kindref="compound">CGAL::Circle_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Sphere__3" kindref="compound">CGAL::Sphere_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt;</type>
          <declname>sphere</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSphericalKernel3GeometricFunctions_1gafd5abb1f2ccbe293a18bf5f777fc6b70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::theta_extremal_points</definition>
        <argsstring>(const CGAL::Circle_3&lt; SphericalKernel &gt; &amp;c, const CGAL::Sphere_3&lt; SphericalKernel &gt; &amp;sphere, OutputIterator res)</argsstring>
        <name>theta_extremal_points</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Circle__3" kindref="compound">CGAL::Circle_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Sphere__3" kindref="compound">CGAL::Sphere_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>sphere</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSphericalKernel3GeometricFunctions_1gacd0145f2caf5a1b26a66c25c2deb3183" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Circular__arc__point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">CGAL::Circular_arc_point_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt;</type>
        <definition>CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; CGAL::x_extremal_point</definition>
        <argsstring>(const CGAL::Sphere_3&lt; SphericalKernel &gt; &amp;c, bool b)</argsstring>
        <name>x_extremal_point</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Sphere__3" kindref="compound">CGAL::Sphere_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSphericalKernel3GeometricFunctions_1ga007e419315351ecf77813f273c431e10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Circular__arc__point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">CGAL::Circular_arc_point_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt;</type>
        <definition>CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; CGAL::x_extremal_point</definition>
        <argsstring>(const CGAL::Circle_3&lt; SphericalKernel &gt; &amp;c, bool b)</argsstring>
        <name>x_extremal_point</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Circle__3" kindref="compound">CGAL::Circle_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSphericalKernel3GeometricFunctions_1ga6e4482edda36bec9e081ebb1273b25d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::x_extremal_points</definition>
        <argsstring>(const CGAL::Sphere_3&lt; SphericalKernel &gt; &amp;c, OutputIterator res)</argsstring>
        <name>x_extremal_points</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Sphere__3" kindref="compound">CGAL::Sphere_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSphericalKernel3GeometricFunctions_1ga549516ac49b531a201670f277780eb18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::x_extremal_points</definition>
        <argsstring>(const CGAL::Circle_3&lt; SphericalKernel &gt; &amp;c, OutputIterator res)</argsstring>
        <name>x_extremal_points</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Circle__3" kindref="compound">CGAL::Circle_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSphericalKernel3GeometricFunctions_1ga010aafd08b2bfbaa90e36abe035b69a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Circular__arc__point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">CGAL::Circular_arc_point_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt;</type>
        <definition>CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; CGAL::y_extremal_point</definition>
        <argsstring>(const CGAL::Sphere_3&lt; SphericalKernel &gt; &amp;c, bool b)</argsstring>
        <name>y_extremal_point</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Sphere__3" kindref="compound">CGAL::Sphere_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSphericalKernel3GeometricFunctions_1gaf624a21c07fb6c4cf6d2603f15305755" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Circular__arc__point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">CGAL::Circular_arc_point_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt;</type>
        <definition>CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; CGAL::y_extremal_point</definition>
        <argsstring>(const CGAL::Circle_3&lt; SphericalKernel &gt; &amp;c, bool b)</argsstring>
        <name>y_extremal_point</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Circle__3" kindref="compound">CGAL::Circle_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSphericalKernel3GeometricFunctions_1ga76970dff1c164fd5f0f7b91e02b89224" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::y_extremal_points</definition>
        <argsstring>(const CGAL::Sphere_3&lt; SphericalKernel &gt; &amp;c, OutputIterator res)</argsstring>
        <name>y_extremal_points</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Sphere__3" kindref="compound">CGAL::Sphere_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSphericalKernel3GeometricFunctions_1ga1eb673edb125e06c3b27247dc0a83d43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::y_extremal_points</definition>
        <argsstring>(const CGAL::Circle_3&lt; SphericalKernel &gt; &amp;c, OutputIterator res)</argsstring>
        <name>y_extremal_points</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Circle__3" kindref="compound">CGAL::Circle_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSphericalKernel3GeometricFunctions_1gaabf2bf998055ceca19e702ed7ea885b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Circular__arc__point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">CGAL::Circular_arc_point_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt;</type>
        <definition>CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; CGAL::z_extremal_point</definition>
        <argsstring>(const CGAL::Sphere_3&lt; SphericalKernel &gt; &amp;c, bool b)</argsstring>
        <name>z_extremal_point</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Sphere__3" kindref="compound">CGAL::Sphere_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSphericalKernel3GeometricFunctions_1ga3fc13466de731ba1c1e5ba2b9bddcc8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Circular__arc__point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">CGAL::Circular_arc_point_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt;</type>
        <definition>CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; CGAL::z_extremal_point</definition>
        <argsstring>(const CGAL::Circle_3&lt; SphericalKernel &gt; &amp;c, bool b)</argsstring>
        <name>z_extremal_point</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Circle__3" kindref="compound">CGAL::Circle_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSphericalKernel3GeometricFunctions_1ga8d84b40c3da126979e9db38d2e68528e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::z_extremal_points</definition>
        <argsstring>(const CGAL::Sphere_3&lt; SphericalKernel &gt; &amp;c, OutputIterator res)</argsstring>
        <name>z_extremal_points</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Sphere__3" kindref="compound">CGAL::Sphere_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSphericalKernel3GeometricFunctions_1gaf17c0ec1ddf6ce50beae2c2bd80e1d53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::z_extremal_points</definition>
        <argsstring>(const CGAL::Circle_3&lt; SphericalKernel &gt; &amp;c, OutputIterator res)</argsstring>
        <name>z_extremal_points</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Circle__3" kindref="compound">CGAL::Circle_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__STLAlgos_1gacb8df77d1d07b9cfff3fdd2f5d9c4fda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::copy_n</definition>
        <argsstring>(InputIterator first, Size n, OutputIterator result)</argsstring>
        <name>copy_n</name>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type>Size</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__STLAlgos_1gab7b9c20885fa91f21f014d849a07e9c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; <ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref>, <ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref> &gt;</type>
        <definition>std::pair&lt; ForwardIterator, ForwardIterator &gt; CGAL::min_max_element</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last)</argsstring>
        <name>min_max_element</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__STLAlgos_1gaf404b198e27ef4018bc5185c9e7da751" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; <ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref>, <ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref> &gt;</type>
        <definition>std::pair&lt; ForwardIterator, ForwardIterator &gt; CGAL::min_max_element</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last, CompareMin comp_min, CompareMax comp_max)</argsstring>
        <name>min_max_element</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>last</declname>
        </param>
        <param>
          <type>CompareMin</type>
          <declname>comp_min</declname>
        </param>
        <param>
          <type>CompareMax</type>
          <declname>comp_max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__STLAlgos_1ga6c5d40930db429775066babac7c35d7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBidirectionalIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">BidirectionalIterator</ref></type>
        <definition>BidirectionalIterator CGAL::predecessor</definition>
        <argsstring>(BidirectionalIterator it)</argsstring>
        <name>predecessor</name>
        <param>
          <type><ref refid="classBidirectionalIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">BidirectionalIterator</ref></type>
          <declname>it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__STLAlgos_1gaeda33e3a2c07e29ca0f6d209182ced7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
        <definition>ForwardIterator CGAL::successor</definition>
        <argsstring>(ForwardIterator it)</argsstring>
        <name>successor</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__CompactContainer_1ga041244256532c067edf94bd31141558d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1CC__safe__handle" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CC_safe_handle</ref>&lt; CC_iterator &gt;</type>
        <definition>CC_safe_handle&lt; CC_iterator &gt; CGAL::make_cc_safe_handle</definition>
        <argsstring>(CC_iterator iterator)</argsstring>
        <name>make_cc_safe_handle</name>
        <param>
          <type>CC_iterator</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__projectionobjects_1gaa343b4e41668290985efff5def93ca7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Compare__to__less" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Compare_to_less</ref>&lt; F &gt;</type>
        <definition>Compare_to_less&lt; F &gt; CGAL::compare_to_less</definition>
        <argsstring>(const F &amp;f)</argsstring>
        <name>compare_to_less</name>
        <param>
          <type>const F &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceCGAL_1a266177f3e138c748f9906f7abb76320b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Iterator__range" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Iterator_range</ref>&lt; T &gt;</type>
        <definition>Iterator_range&lt; T &gt; CGAL::make_range</definition>
        <argsstring>(const T &amp;b, const T &amp;e)</argsstring>
        <name>make_range</name>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceCGAL_1a20aeec74989e860c5f20c11a844aad53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T CGAL::range_begin</definition>
        <argsstring>(Iterator_range&lt; T &gt; &amp;x)</argsstring>
        <name>range_begin</name>
        <param>
          <type><ref refid="classCGAL_1_1Iterator__range" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Iterator_range</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceCGAL_1acd0d74e5e80884f3c33b663e1e576435" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T CGAL::range_end</definition>
        <argsstring>(Iterator_range&lt; T &gt; &amp;x)</argsstring>
        <name>range_end</name>
        <param>
          <type><ref refid="classCGAL_1_1Iterator__range" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Iterator_range</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceCGAL_1af0be841eaa3070123a308353961d2695" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T CGAL::range_begin</definition>
        <argsstring>(const Iterator_range&lt; T &gt; &amp;x)</argsstring>
        <name>range_begin</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Iterator__range" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Iterator_range</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceCGAL_1a97c1af46c1e40a2f68495e0947e681b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T CGAL::range_end</definition>
        <argsstring>(const Iterator_range&lt; T &gt; &amp;x)</argsstring>
        <name>range_end</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Iterator__range" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Iterator_range</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStlExtensionAssertions_1gaf17f67aed4fb6c658ec7cb3f96f9d838" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__PkgStlExtensionAssertions_1ga22c85e11e31ba1f9954022947822983d" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Failure_function</ref></type>
        <definition>Failure_function CGAL::set_error_handler</definition>
        <argsstring>(Failure_function handler)</argsstring>
        <name>set_error_handler</name>
        <param>
          <type><ref refid="group__PkgStlExtensionAssertions_1ga22c85e11e31ba1f9954022947822983d" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Failure_function</ref></type>
          <declname>handler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStlExtensionAssertions_1ga7bf05b83505d915fb23cb23337b34c3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__PkgStlExtensionAssertions_1ga22c85e11e31ba1f9954022947822983d" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Failure_function</ref></type>
        <definition>Failure_function CGAL::set_warning_handler</definition>
        <argsstring>(Failure_function handler)</argsstring>
        <name>set_warning_handler</name>
        <param>
          <type><ref refid="group__PkgStlExtensionAssertions_1ga22c85e11e31ba1f9954022947822983d" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Failure_function</ref></type>
          <declname>handler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStlExtensionAssertions_1ga57511207f5935f17b3264e2d03124027" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__PkgStlExtensionAssertions_1gac5eee7bb7edcc41dd3251042c5934dee" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Failure_behaviour</ref></type>
        <definition>Failure_behaviour CGAL::set_error_behaviour</definition>
        <argsstring>(Failure_behaviour eb)</argsstring>
        <name>set_error_behaviour</name>
        <param>
          <type><ref refid="group__PkgStlExtensionAssertions_1gac5eee7bb7edcc41dd3251042c5934dee" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Failure_behaviour</ref></type>
          <declname>eb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStlExtensionAssertions_1gaeb4e85bca7bfc12e7fd086bf36a39a77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__PkgStlExtensionAssertions_1gac5eee7bb7edcc41dd3251042c5934dee" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Failure_behaviour</ref></type>
        <definition>Failure_behaviour CGAL::set_warning_behaviour</definition>
        <argsstring>(Failure_behaviour eb)</argsstring>
        <name>set_warning_behaviour</name>
        <param>
          <type><ref refid="group__PkgStlExtensionAssertions_1gac5eee7bb7edcc41dd3251042c5934dee" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Failure_behaviour</ref></type>
          <declname>eb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgDrawPolyhedron_1ga3ca458ed11c9fb052476b00227d93584" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::draw</definition>
        <argsstring>(const POLY &amp;apoly)</argsstring>
        <name>draw</name>
        <param>
          <type>const POLY &amp;</type>
          <declname>apoly</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__enums_1gac3993cbddb0f5186b19ad7ef8338a89e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T CGAL::enum_cast</definition>
        <argsstring>(const U &amp;u)</argsstring>
        <name>enum_cast</name>
        <param>
          <type>const U &amp;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
<para>converts between the various enums provided by the CGAL kernel. </para>        </briefdescription>
        <detaileddescription>
<para>The conversion preserves the order of the values.</para><para><simplesect kind="see"><para><computeroutput><ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member">CGAL::Sign</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">CGAL::Comparison_result</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__kernel__enums_1ga1147c0cf556939e71279546b38f2a1c5" kindref="member">CGAL::Orientation</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__kernel__enums_1ga5006dd2552d97fa577d81bd819c0f979" kindref="member">CGAL::Oriented_side</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__kernel__enums_1gaf6030e89dadcc1f45369b0cdc5d9e111" kindref="member">CGAL::Bounded_side</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__kernel__enums_1ga8be07b00890ca29c0653be379113e8b0" kindref="member">CGAL::Angle</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Uncertain" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::Uncertain</ref>&lt;T&gt;</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/enum.h" line="18" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__enums_1gad0a8110cb95f76bac65649bfe58c650b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1ga5006dd2552d97fa577d81bd819c0f979" kindref="member">Oriented_side</ref></type>
        <definition>Oriented_side CGAL::opposite</definition>
        <argsstring>(const Oriented_side &amp;o)</argsstring>
        <name>opposite</name>
        <param>
          <type>const <ref refid="group__kernel__enums_1ga5006dd2552d97fa577d81bd819c0f979" kindref="member">Oriented_side</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>returns the opposite side (for example <computeroutput><ref refid="group__kernel__enums_1gga5006dd2552d97fa577d81bd819c0f979aec3846b620579589dcc30c8fe71cc7f0" kindref="member">CGAL::ON_POSITIVE_SIDE</ref></computeroutput> if <computeroutput>o</computeroutput>==<computeroutput><ref refid="group__kernel__enums_1gga5006dd2552d97fa577d81bd819c0f979ab906419672c7ae509b5e63158479ed85" kindref="member">CGAL::ON_NEGATIVE_SIDE</ref></computeroutput>), or <computeroutput><ref refid="group__kernel__enums_1gga5006dd2552d97fa577d81bd819c0f979a45220491cf36139beffd09434aa31256" kindref="member">CGAL::ON_ORIENTED_BOUNDARY</ref></computeroutput> if <computeroutput>o</computeroutput>==<computeroutput><ref refid="group__kernel__enums_1gga5006dd2552d97fa577d81bd819c0f979a45220491cf36139beffd09434aa31256" kindref="member">CGAL::ON_ORIENTED_BOUNDARY</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/enum.h" line="27" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__enums_1ga30e66263975bfc9a72730cba0c25367c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1gaf6030e89dadcc1f45369b0cdc5d9e111" kindref="member">Bounded_side</ref></type>
        <definition>Bounded_side CGAL::opposite</definition>
        <argsstring>(const Bounded_side &amp;o)</argsstring>
        <name>opposite</name>
        <param>
          <type>const <ref refid="group__kernel__enums_1gaf6030e89dadcc1f45369b0cdc5d9e111" kindref="member">Bounded_side</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>returns the opposite side (for example <computeroutput><ref refid="group__kernel__enums_1ggaf6030e89dadcc1f45369b0cdc5d9e111ad8333d35d4801c08b3a5ae9e94d7cabe" kindref="member">CGAL::ON_BOUNDED_SIDE</ref></computeroutput> if <computeroutput>o</computeroutput>==<computeroutput><ref refid="group__kernel__enums_1ggaf6030e89dadcc1f45369b0cdc5d9e111a3a96e6da84164cc8300c9e130be23f71" kindref="member">CGAL::ON_UNBOUNDED_SIDE</ref></computeroutput>), or returns <computeroutput><ref refid="group__kernel__enums_1ggaf6030e89dadcc1f45369b0cdc5d9e111a060193157c0875fb2e6445a648f3ac1f" kindref="member">CGAL::ON_BOUNDARY</ref></computeroutput> if <computeroutput>o</computeroutput>==<computeroutput><ref refid="group__kernel__enums_1ggaf6030e89dadcc1f45369b0cdc5d9e111a060193157c0875fb2e6445a648f3ac1f" kindref="member">CGAL::ON_BOUNDARY</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/enum.h" line="36" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__do__intersect__linear__grp_1ga9514a218a097ac392d21775368d3dd0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::do_intersect</definition>
        <argsstring>(Type1&lt; Kernel &gt; obj1, Type2&lt; Kernel &gt; obj2)</argsstring>
        <name>do_intersect</name>
        <param>
          <type>Type1&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
          <declname>obj1</declname>
        </param>
        <param>
          <type>Type2&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
          <declname>obj2</declname>
        </param>
        <briefdescription>
<para>checks whether <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput> intersect. </para>        </briefdescription>
        <detaileddescription>
<para>Two objects <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput> intersect if there is a point <computeroutput>p</computeroutput> that is part of both <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput>. The intersection region of those two objects is defined as the set of all points <computeroutput>p</computeroutput> that are part of both <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput>. Note that for objects like triangles and polygons that enclose a bounded region, this region is part of the object.</para><para>The types <computeroutput>Type1</computeroutput> and <computeroutput>Type2</computeroutput> can be any of the following:</para><para><itemizedlist>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Line__2" kindref="compound">Line_2</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Ray__2" kindref="compound">Ray_2</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Triangle__2" kindref="compound">Triangle_2</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Iso__rectangle__2" kindref="compound">Iso_rectangle_2</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput></para></listitem></itemizedlist>
</para><para>Also, <computeroutput>Type1</computeroutput> and <computeroutput>Type2</computeroutput> can be both of type</para><para><itemizedlist>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Line__2" kindref="compound">Line_2</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Circle__2" kindref="compound">Circle_2</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput></para></listitem></itemizedlist>
</para><para>In three-dimensional space, the types <computeroutput>Type1</computeroutput> and <computeroutput>Type2</computeroutput> can be any of the following:</para><para><itemizedlist>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Line__3" kindref="compound">Line_3</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Ray__3" kindref="compound">Ray_3</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Triangle__3" kindref="compound">Triangle_3</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput>.</para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Bbox__3" kindref="compound">Bbox_3</ref></computeroutput>.</para></listitem></itemizedlist>
</para><para>Also, <computeroutput>Type1</computeroutput> and <computeroutput>Type2</computeroutput> can be respectively of types</para><para><itemizedlist>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Triangle__3" kindref="compound">Triangle_3</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput> and <computeroutput><ref refid="classCGAL_1_1Tetrahedron__3" kindref="compound">Tetrahedron_3</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput> and <computeroutput><ref refid="classCGAL_1_1Sphere__3" kindref="compound">Sphere_3</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput> (or the contrary)</para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Sphere__3" kindref="compound">Sphere_3</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput> and <computeroutput><ref refid="classCGAL_1_1Sphere__3" kindref="compound">Sphere_3</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Line__3" kindref="compound">Line_3</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput> and <computeroutput><ref refid="classCGAL_1_1Iso__cuboid__3" kindref="compound">Iso_cuboid_3</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Ray__3" kindref="compound">Ray_3</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput> and <computeroutput><ref refid="classCGAL_1_1Iso__cuboid__3" kindref="compound">Iso_cuboid_3</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput> and <computeroutput><ref refid="classCGAL_1_1Iso__cuboid__3" kindref="compound">Iso_cuboid_3</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Iso__cuboid__3" kindref="compound">Iso_cuboid_3</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput> and <computeroutput><ref refid="classCGAL_1_1Iso__cuboid__3" kindref="compound">Iso_cuboid_3</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput>. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/intersections.h" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__intersection__linear__grp_1gab77f3cd98c4c4ff7acff59c98ab88ff0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="structCGAL_1_1cpp11_1_1result__of" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">cpp11::result_of</ref>&lt; Kernel::Intersect_23(Type1, Type2)&gt;::type</type>
        <definition>cpp11::result_of&lt;Kernel::Intersect_23(Type1, Type2)&gt;::type CGAL::intersection</definition>
        <argsstring>(Type1&lt; Kernel &gt; obj1, Type2&lt; Kernel &gt; obj2)</argsstring>
        <name>intersection</name>
        <param>
          <type>Type1&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
          <declname>obj1</declname>
        </param>
        <param>
          <type>Type2&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
          <declname>obj2</declname>
        </param>
        <briefdescription>
<para>Two objects <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput> intersect if there is a point <computeroutput>p</computeroutput> that is part of both <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The intersection region of those two objects is defined as the set of all points <computeroutput>p</computeroutput> that are part of both <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput>. Note that for objects like triangles and polygons that enclose a bounded region, this region is considered part of the object. If a segment lies completely inside a triangle, then those two objects intersect and the intersection region is the complete segment.</para><para>Here, <computeroutput>Intersect_23</computeroutput> means either <computeroutput>Intersect_2</computeroutput> or <computeroutput>Intersect_3</computeroutput>, depending on the arguments.</para><para>The following tables give the possible values for <computeroutput>Type1</computeroutput> and <computeroutput>Type2</computeroutput>.</para><para><bold>2D Intersections</bold><linebreak/>
</para><para>The return type can be obtained through <computeroutput><ref refid="structCGAL_1_1cpp11_1_1result__of" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::cpp11::result_of</ref>&lt;<ref refid="classKernel_1_1Intersect__2" kindref="compound">Kernel::Intersect_2(A, B)</ref>&gt;::type</computeroutput>. It is equivalent to <computeroutput>boost::optional&lt; boost::variant&lt; T... &gt; &gt;</computeroutput>, the last column in the table providing the template parameter pack.</para><para> <table rows="16" cols="3"><row>
<entry thead="yes"><para>Type1  </para></entry><entry thead="yes"><para>Type2  </para></entry><entry thead="yes"><para>Return Type: <computeroutput>T...</computeroutput>   </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Iso__rectangle__2" kindref="compound">Iso_rectangle_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Iso__rectangle__2" kindref="compound">Iso_rectangle_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Iso__rectangle__2" kindref="compound">Iso_rectangle_2</ref> </para><para></para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Iso__rectangle__2" kindref="compound">Iso_rectangle_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Line__2" kindref="compound">Line_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>, or <ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Iso__rectangle__2" kindref="compound">Iso_rectangle_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Ray__2" kindref="compound">Ray_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>, or <ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Iso__rectangle__2" kindref="compound">Iso_rectangle_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>, or <ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Iso__rectangle__2" kindref="compound">Iso_rectangle_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Triangle__2" kindref="compound">Triangle_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>, or <ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>, or <ref refid="classCGAL_1_1Triangle__2" kindref="compound">Triangle_2</ref>, or std::vector&lt;<ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&gt;  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Line__2" kindref="compound">Line_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Line__2" kindref="compound">Line_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>, or <ref refid="classCGAL_1_1Line__2" kindref="compound">Line_2</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Line__2" kindref="compound">Line_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Ray__2" kindref="compound">Ray_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>, or <ref refid="classCGAL_1_1Ray__2" kindref="compound">Ray_2</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Line__2" kindref="compound">Line_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>, or <ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Line__2" kindref="compound">Line_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Triangle__2" kindref="compound">Triangle_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>, or <ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Ray__2" kindref="compound">Ray_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Ray__2" kindref="compound">Ray_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>, or <ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>, or <ref refid="classCGAL_1_1Ray__2" kindref="compound">Ray_2</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Ray__2" kindref="compound">Ray_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>, or <ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Ray__2" kindref="compound">Ray_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Triangle__2" kindref="compound">Triangle_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>, or <ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>, or <ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Triangle__2" kindref="compound">Triangle_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>, or <ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Triangle__2" kindref="compound">Triangle_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Triangle__2" kindref="compound">Triangle_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>, or <ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>, or <ref refid="classCGAL_1_1Triangle__2" kindref="compound">Triangle_2</ref>, or std::vector&lt;<ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&gt;  </para></entry></row>
</table>
</para><para><bold>3D Intersections</bold><linebreak/>
</para><para>The return type can be obtained through <computeroutput><ref refid="structCGAL_1_1cpp11_1_1result__of" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::cpp11::result_of</ref>&lt;<ref refid="classKernel_1_1Intersect__3" kindref="compound">Kernel::Intersect_3(A, B)</ref>&gt;::type</computeroutput>. It is equivalent to <computeroutput>boost::optional&lt; boost::variant&lt; T... &gt; &gt;</computeroutput>, the last column in the table providing the template parameter pack.</para><para> <table rows="18" cols="3"><row>
<entry thead="yes"><para>Type1  </para></entry><entry thead="yes"><para>Type2  </para></entry><entry thead="yes"><para>Return Type: <computeroutput>T...</computeroutput>   </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Line__3" kindref="compound">Line_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Line__3" kindref="compound">Line_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Line__3" kindref="compound">Line_3</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Line__3" kindref="compound">Line_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Line__3" kindref="compound">Line_3</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Line__3" kindref="compound">Line_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Ray__3" kindref="compound">Ray_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Ray__3" kindref="compound">Ray_3</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Line__3" kindref="compound">Line_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Line__3" kindref="compound">Line_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Triangle__3" kindref="compound">Triangle_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Line__3" kindref="compound">Line_3</ref>, or <ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Ray__3" kindref="compound">Ray_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Ray__3" kindref="compound">Ray_3</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Sphere__3" kindref="compound">Sphere_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Circle__3" kindref="compound">Circle_3</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Triangle__3" kindref="compound">Triangle_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>, or <ref refid="classCGAL_1_1Triangle__3" kindref="compound">Triangle_3</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Ray__3" kindref="compound">Ray_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Ray__3" kindref="compound">Ray_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Ray__3" kindref="compound">Ray_3</ref>, or <ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Ray__3" kindref="compound">Ray_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Ray__3" kindref="compound">Ray_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Triangle__3" kindref="compound">Triangle_3</ref>  p </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Triangle__3" kindref="compound">Triangle_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Sphere__3" kindref="compound">Sphere_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Sphere__3" kindref="compound">Sphere_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Circle__3" kindref="compound">Circle_3</ref>, or <ref refid="classCGAL_1_1Sphere__3" kindref="compound">Sphere_3</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Triangle__3" kindref="compound">Triangle_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Triangle__3" kindref="compound">Triangle_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>, or <ref refid="classCGAL_1_1Triangle__3" kindref="compound">Triangle_3</ref>, or std::vector &lt; <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref> &gt;  </para></entry></row>
</table>
</para><para><bold>Examples</bold><linebreak/>
</para><para>The following examples demonstrate the most common use of <computeroutput><ref refid="group__PkgKernelDFunctions_1ga0aa3e8b6bdf1bff509f8e2672ef194d1" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">intersection()</ref></computeroutput> functions with the 2D and 3D Linear Kernel.</para><para>In the first two examples we intersect a segment and a line. The result type can be obtained with <computeroutput><ref refid="structCGAL_1_1cpp11_1_1result__of" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::cpp11::result_of</ref></computeroutput>. It looks simpler if you use a C++ compiler which supports <computeroutput>auto</computeroutput>, but you must anyways know that the result type is a <computeroutput>boost::optional&lt;boost::variant&lt;..&gt; &gt;</computeroutput>, in order to unpack the point or segment.</para><para><ulink url="http://www.boost.org/libs/optional/"><computeroutput>boost::optional</computeroutput></ulink> comes in as there might be no intersection. <ulink url="http://www.boost.org/libs/variant/"><computeroutput>boost::variant</computeroutput></ulink> comes in as, if there is an intersection, it is either a point or a segment.</para><para>As explained in the boost manual pages for <ulink url="http://www.boost.org/libs/variant/"><computeroutput>boost::variant</computeroutput></ulink>, there are two ways to access the variants. The first examples uses <computeroutput>boost::get</computeroutput>.</para><para><linebreak/>
<bold>File</bold> <ref refid="Kernel_23_2intersection_get_8cpp-example" kindref="compound">Kernel_23/intersection_get.cpp</ref> <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_exact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/intersections.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Exact__predicates__exact__constructions__kernel" kindref="compound">CGAL::Exact_predicates_exact_constructions_kernel</ref><sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Point_2<sp/>Point_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Segment_2<sp/>Segment_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Line_2<sp/>Line_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Intersect_2<sp/>Intersect_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Segment_2<sp/>seg(Point_2(0,0),<sp/>Point_2(2,2));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Line_2<sp/>lin(1,-1,0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">CGAL::cpp11::result_of&lt;Intersect_2(Segment_2, Line_2)&gt;::type</ref></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="group__PkgKernelDFunctions_1ga0aa3e8b6bdf1bff509f8e2672ef194d1" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">intersection</ref>(seg,<sp/>lin);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Segment_2*<sp/>s<sp/>=<sp/>boost::get&lt;Segment_2&gt;(&amp;*result))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>*s<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point_2*<sp/>p<sp/>=<sp/>boost::get&lt;Point_2<sp/>&gt;(&amp;*result);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>*p<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>The second example uses <computeroutput>boost::apply_visitor</computeroutput>.</para><para><linebreak/>
<bold>File</bold> <ref refid="Kernel_23_2intersection_visitor_8cpp-example" kindref="compound">Kernel_23/intersection_visitor.cpp</ref> <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_exact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/intersections.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Exact__predicates__exact__constructions__kernel" kindref="compound">CGAL::Exact_predicates_exact_constructions_kernel</ref><sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Point_2<sp/>Point_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Segment_2<sp/>Segment_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Line_2<sp/>Line_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Intersect_2<sp/>Intersect_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Intersection_visitor<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>result_type;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point_2&amp;<sp/>p)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>p<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Segment_2&amp;<sp/>s)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>s<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Segment_2<sp/>seg(Point_2(0,0),<sp/>Point_2(1,1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Line_2<sp/>lin(1,-1,0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>C++11<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>auto<sp/>result<sp/>=<sp/>intersection(seg,<sp/>lin);</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>without<sp/>C++11</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">CGAL::cpp11::result_of&lt;Intersect_2(Segment_2, Line_2)&gt;::type</ref></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="group__PkgKernelDFunctions_1ga0aa3e8b6bdf1bff509f8e2672ef194d1" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">intersection</ref>(seg,<sp/>lin);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result)<sp/>{<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>boost::apply_visitor(Intersection_visitor(),<sp/>*result);<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>intersection</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>A third example shows the use of the intersection function as a plain function call and with <computeroutput><ref refid="classCGAL_1_1Dispatch__output__iterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Dispatch_output_iterator</ref></computeroutput>, combined with a standard library algorithm.</para><para><linebreak/>
<bold>File</bold> <ref refid="Kernel_23_2intersections_8cpp-example" kindref="compound">Kernel_23/intersections.cpp</ref> <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_exact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/iterator.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/point_generators_2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/bind.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Exact__predicates__exact__constructions__kernel" kindref="compound">CGAL::Exact_predicates_exact_constructions_kernel</ref><sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Point_2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Segment_2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Segment;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Creator__uniform__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::Creator_uniform_2&lt;double,Point&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pt_creator;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CGAL::Random_points_on_segment_2&lt;Point,Pt_creator&gt;<sp/>P1;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CGAL::Random_points_on_circle_2&lt;Point,Pt_creator&gt;<sp/><sp/>P2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Creator__uniform__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::Creator_uniform_2&lt; Point, Segment&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Seg_creator;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Join__input__iterator__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::Join_input_iterator_2&lt; P1, P2, Seg_creator&gt;</ref><sp/><sp/>Seg_iterator;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Intersector{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">CGAL::cpp11::result_of&lt;K::Intersect_2(Segment,Segment)&gt;::type</ref><sp/>result_type;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Segment&amp;<sp/>s;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>K::Intersect_2<sp/>intersect;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Intersector(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Segment&amp;<sp/>seg):<sp/>s(seg)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>result_type</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>operator()<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Segment&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>intersect(s,<sp/>other);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;Segment&gt;<sp/>input;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Prepare<sp/>point<sp/>generator<sp/>for<sp/>the<sp/>horizontal<sp/>segment,<sp/>length<sp/>200.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>P1<sp/>p1(<sp/>Point(-100,0),<sp/>Point(100,0));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Prepare<sp/>point<sp/>generator<sp/>for<sp/>random<sp/>points<sp/>on<sp/>circle,<sp/>radius<sp/>250.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>P2<sp/>p2(<sp/>250);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>segments.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Seg_iterator<sp/>g(<sp/>p1,<sp/>p2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__STLAlgos_1gadba21cc5c30a79519438dfe0f9264255" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::cpp11::copy_n</ref>(<sp/>g,<sp/>200,<sp/>std::back_inserter(input));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>splitting<sp/>results<sp/>with<sp/>Dispatch_output_iterator</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;Point&gt;<sp/>points;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;Segment&gt;<sp/>segments;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Dispatch__output__iterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::Dispatch_output_iterator</ref>&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CGAL::cpp11::tuple&lt;Point,Segment&gt;,<sp/>CGAL::cpp11::tuple&lt;<sp/>std::back_insert_iterator&lt;std::vector&lt;Point&gt;<sp/>&gt;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::back_insert_iterator&lt;std::vector&lt;Segment&gt;<sp/>&gt;<sp/>&gt;<sp/>&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Dispatcher;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Dispatcher<sp/>disp<sp/>=<sp/>CGAL::dispatch_output&lt;Point,Segment&gt;(<sp/>std::back_inserter(points),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::back_inserter(segments)<sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>intersects<sp/>the<sp/>first<sp/>segment<sp/>of<sp/>input<sp/>with<sp/>all<sp/>other<sp/>segments</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>resulting<sp/>points<sp/>or<sp/>segments<sp/>are<sp/>written<sp/>in<sp/>the<sp/>vectors<sp/>with<sp/>the<sp/>same<sp/>names</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::transform(<sp/>input.begin(),<sp/>input.end(),<sp/>disp,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Intersector(input.front())<sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Point<sp/>intersections:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>points.size()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Segment<sp/>intersections:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>segments.size()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/intersections.h" line="353" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__intersection__linear__grp_1ga2992434e63396425b548089239de2d3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>boost::optional&lt; boost::variant&lt; <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, <ref refid="classCGAL_1_1Line__3" kindref="compound">Line_3</ref>, <ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref> &gt; &gt;</type>
        <definition>boost::optional&lt; boost::variant&lt; Point_3, Line_3, Plane_3 &gt; &gt; CGAL::intersection</definition>
        <argsstring>(const Plane_3&lt; Kernel &gt; &amp;pl1, const Plane_3&lt; Kernel &gt; &amp;pl2, const Plane_3&lt; Kernel &gt; &amp;pl3)</argsstring>
        <name>intersection</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>pl1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>pl2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>pl3</declname>
        </param>
        <briefdescription>
<para>returns the intersection of 3 planes, which can be a point, a line, a plane, or empty. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/intersections.h" line="361" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__angle__grp_1ga529057989da53e549b38c5a88e82967b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga8be07b00890ca29c0653be379113e8b0" kindref="member">Angle</ref></type>
        <definition>Angle CGAL::angle</definition>
        <argsstring>(const CGAL::Vector_2&lt; Kernel &gt; &amp;u, const CGAL::Vector_2&lt; Kernel &gt; &amp;v)</argsstring>
        <name>angle</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__2" kindref="compound">CGAL::Vector_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__2" kindref="compound">CGAL::Vector_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput><ref refid="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0a38f38441f2d7af7e7d848bff2bf49ec2" kindref="member">CGAL::OBTUSE</ref></computeroutput>, <computeroutput><ref refid="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0a03813b78e3d21e482f0a763b25dfa1b6" kindref="member">CGAL::RIGHT</ref></computeroutput> or <computeroutput><ref refid="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0ace2a11071ccbc32967b0792e5bb7377b" kindref="member">CGAL::ACUTE</ref></computeroutput> depending on the angle formed by the two vectors <computeroutput>u</computeroutput> and <computeroutput>v</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="14" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__angle__grp_1gaacaa68822ff84b1be59d3c84b8fed9c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga8be07b00890ca29c0653be379113e8b0" kindref="member">Angle</ref></type>
        <definition>Angle CGAL::angle</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r)</argsstring>
        <name>angle</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput><ref refid="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0a38f38441f2d7af7e7d848bff2bf49ec2" kindref="member">CGAL::OBTUSE</ref></computeroutput>, <computeroutput><ref refid="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0a03813b78e3d21e482f0a763b25dfa1b6" kindref="member">CGAL::RIGHT</ref></computeroutput> or <computeroutput><ref refid="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0ace2a11071ccbc32967b0792e5bb7377b" kindref="member">CGAL::ACUTE</ref></computeroutput> depending on the angle formed by the three points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>r</computeroutput> (<computeroutput>q</computeroutput> being the vertex of the angle). </para>        </briefdescription>
        <detaileddescription>
<para>The returned value is the same as <computeroutput>angle(p - q, r - q)</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="24" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__angle__grp_1gaf3848756a6457f983b39bca5f34fb989" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga8be07b00890ca29c0653be379113e8b0" kindref="member">Angle</ref></type>
        <definition>Angle CGAL::angle</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r, const CGAL::Point_2&lt; Kernel &gt; &amp;s)</argsstring>
        <name>angle</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput><ref refid="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0a38f38441f2d7af7e7d848bff2bf49ec2" kindref="member">CGAL::OBTUSE</ref></computeroutput>, <computeroutput><ref refid="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0a03813b78e3d21e482f0a763b25dfa1b6" kindref="member">CGAL::RIGHT</ref></computeroutput> or <computeroutput><ref refid="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0ace2a11071ccbc32967b0792e5bb7377b" kindref="member">CGAL::ACUTE</ref></computeroutput> depending on the angle formed by the two vectors <computeroutput>pq</computeroutput>, <computeroutput>rs</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The returned value is the same as <computeroutput>angle(q - p, s - r)</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="35" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__angle__grp_1ga81888c6eb0e8066905d73a9868362e7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga8be07b00890ca29c0653be379113e8b0" kindref="member">Angle</ref></type>
        <definition>Angle CGAL::angle</definition>
        <argsstring>(const CGAL::Vector_3&lt; Kernel &gt; &amp;u, const CGAL::Vector_3&lt; Kernel &gt; &amp;v)</argsstring>
        <name>angle</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns <ref refid="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0a38f38441f2d7af7e7d848bff2bf49ec2" kindref="member">CGAL::OBTUSE</ref>, <ref refid="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0a03813b78e3d21e482f0a763b25dfa1b6" kindref="member">CGAL::RIGHT</ref> or <ref refid="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0ace2a11071ccbc32967b0792e5bb7377b" kindref="member">CGAL::ACUTE</ref> depending on the angle formed by the two vectors <computeroutput>u</computeroutput> and <computeroutput>v</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="45" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__angle__grp_1ga7c42d769e84f19b342c1577caec9eeba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga8be07b00890ca29c0653be379113e8b0" kindref="member">Angle</ref></type>
        <definition>Angle CGAL::angle</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r)</argsstring>
        <name>angle</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput><ref refid="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0a38f38441f2d7af7e7d848bff2bf49ec2" kindref="member">CGAL::OBTUSE</ref></computeroutput>, <computeroutput><ref refid="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0a03813b78e3d21e482f0a763b25dfa1b6" kindref="member">CGAL::RIGHT</ref></computeroutput> or <computeroutput><ref refid="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0ace2a11071ccbc32967b0792e5bb7377b" kindref="member">CGAL::ACUTE</ref></computeroutput> depending on the angle formed by the three points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>r</computeroutput> (<computeroutput>q</computeroutput> being the vertex of the angle). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="55" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__angle__grp_1ga3675cad77d9399fdeca6f0ea463d931c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga8be07b00890ca29c0653be379113e8b0" kindref="member">Angle</ref></type>
        <definition>Angle CGAL::angle</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r, const CGAL::Point_3&lt; Kernel &gt; &amp;s)</argsstring>
        <name>angle</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>returns <ref refid="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0a38f38441f2d7af7e7d848bff2bf49ec2" kindref="member">CGAL::OBTUSE</ref>, <ref refid="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0a03813b78e3d21e482f0a763b25dfa1b6" kindref="member">CGAL::RIGHT</ref> or <ref refid="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0ace2a11071ccbc32967b0792e5bb7377b" kindref="member">CGAL::ACUTE</ref> depending on the angle formed by the two vectors <computeroutput>pq</computeroutput>, <computeroutput>rs</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The returned value is the same as <computeroutput>angle(q - p, s - r)</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__angle__grp_1ga0e57f7e44fa891f84673d7251277cc79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga8be07b00890ca29c0653be379113e8b0" kindref="member">Angle</ref></type>
        <definition>Angle CGAL::angle</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r, const CGAL::Vector_3&lt; Kernel &gt; &amp;v)</argsstring>
        <name>angle</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns <ref refid="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0a38f38441f2d7af7e7d848bff2bf49ec2" kindref="member">CGAL::OBTUSE</ref>, <ref refid="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0a03813b78e3d21e482f0a763b25dfa1b6" kindref="member">CGAL::RIGHT</ref> or <ref refid="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0ace2a11071ccbc32967b0792e5bb7377b" kindref="member">CGAL::ACUTE</ref> depending on the angle formed by the normal of the triangle <computeroutput>pqr</computeroutput> and the vector <computeroutput>v</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__angle__grp_1gadc7ae25da46f18af4db99f6871f97b5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref></type>
        <definition>Kernel::FT CGAL::approximate_dihedral_angle</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r, const CGAL::Point_3&lt; Kernel &gt; &amp;s)</argsstring>
        <name>approximate_dihedral_angle</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>returns an approximation of the signed dihedral angle in the tetrahedron <computeroutput>pqrs</computeroutput> of edge <computeroutput>pq</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The sign is negative if <computeroutput>orientation(p,q,r,s)</computeroutput> is <computeroutput><ref refid="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a3aef56502334293e3ad25e166d74bb2a" kindref="member">CGAL::NEGATIVE</ref></computeroutput> and positive otherwise. The angle is given in degrees. <simplesect kind="pre"><para><computeroutput>p,q,r</computeroutput> and <computeroutput>p,q,s</computeroutput> are not collinear. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="90" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__area__grp_1gad5b975e731751609655f88d287f7385a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref></type>
        <definition>Kernel::FT CGAL::area</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r)</argsstring>
        <name>area</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>returns the signed area of the triangle defined by the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput> and <computeroutput>r</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="109" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__are__ordered__along__line__grp_1gad0595dca20e967b66057c84f4bc9bcf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::are_ordered_along_line</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r)</argsstring>
        <name>are_ordered_along_line</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff the three points are collinear and <computeroutput>q</computeroutput> lies between <computeroutput>p</computeroutput> and <computeroutput>r</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Note that <computeroutput>true</computeroutput> is returned, if <computeroutput>q==p</computeroutput> or <computeroutput>q==r</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="130" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__are__ordered__along__line__grp_1ga5a56ab0987fbf02e7e03be7ebaebe26a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::are_ordered_along_line</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r)</argsstring>
        <name>are_ordered_along_line</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff the three points are collinear and <computeroutput>q</computeroutput> lies between <computeroutput>p</computeroutput> and <computeroutput>r</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Note that <computeroutput>true</computeroutput> is returned, if <computeroutput>q==p</computeroutput> or <computeroutput>q==r</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="141" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__are__strictly__ordered__along__line__grp_1ga69aafc78b2d382efc95c186e4d5119ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::are_strictly_ordered_along_line</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r)</argsstring>
        <name>are_strictly_ordered_along_line</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff the three points are collinear and <computeroutput>q</computeroutput> lies strictly between <computeroutput>p</computeroutput> and <computeroutput>r</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Note that <computeroutput>false</computeroutput> is returned, if <computeroutput>q==p</computeroutput> or <computeroutput>q==r</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="162" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__are__strictly__ordered__along__line__grp_1ga6171a3fb098250d290f33e84399268c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::are_strictly_ordered_along_line</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r)</argsstring>
        <name>are_strictly_ordered_along_line</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff the three points are collinear and <computeroutput>q</computeroutput> lies strictly between <computeroutput>p</computeroutput> and <computeroutput>r</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Note that <computeroutput>false</computeroutput> is returned, if <computeroutput>q==p</computeroutput> or <computeroutput>q==r</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="173" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__barycenter__grp_1ga43dafb654e67589a55dcf5b13092966b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_2&lt;Kernel&gt; CGAL::barycenter</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p1, const Kernel::FT &amp;w1, const CGAL::Point_2&lt; Kernel &gt; &amp;p2)</argsstring>
        <name>barycenter</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref> &amp;</type>
          <declname>w1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>compute the barycenter of the points <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> with corresponding weights <computeroutput>w1</computeroutput> and <computeroutput>1-w1</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="190" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__barycenter__grp_1gadd9f34ad5ecb5573a2fab5be63e8142a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_2&lt;Kernel&gt; CGAL::barycenter</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p1, const Kernel::FT &amp;w1, const CGAL::Point_2&lt; Kernel &gt; &amp;p2, const Kernel::FT &amp;w2)</argsstring>
        <name>barycenter</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref> &amp;</type>
          <declname>w1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const <ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref> &amp;</type>
          <declname>w2</declname>
        </param>
        <briefdescription>
<para>compute the barycenter of the points <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> with corresponding weights <computeroutput>w1</computeroutput> and <computeroutput>w2</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>w1+w2 != 0</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="199" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__barycenter__grp_1ga6f68fc3ba84a93604e9f2379b08f06fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_2&lt;Kernel&gt; CGAL::barycenter</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p1, const Kernel::FT &amp;w1, const CGAL::Point_2&lt; Kernel &gt; &amp;p2, const Kernel::FT &amp;w2, const CGAL::Point_2&lt; Kernel &gt; &amp;p3)</argsstring>
        <name>barycenter</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref> &amp;</type>
          <declname>w1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const <ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref> &amp;</type>
          <declname>w2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
<para>compute the barycenter of the points <computeroutput>p1</computeroutput>, <computeroutput>p2</computeroutput> and <computeroutput>p3</computeroutput> with corresponding weights <computeroutput>w1</computeroutput>, <computeroutput>w2</computeroutput> and <computeroutput>1-w1-w2</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="208" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__barycenter__grp_1gaba272ae31932514c824bad5a90350d32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_2&lt;Kernel&gt; CGAL::barycenter</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p1, const Kernel::FT &amp;w1, const CGAL::Point_2&lt; Kernel &gt; &amp;p2, const Kernel::FT &amp;w2, const CGAL::Point_2&lt; Kernel &gt; &amp;p3, const Kernel::FT &amp;w3)</argsstring>
        <name>barycenter</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref> &amp;</type>
          <declname>w1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const <ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref> &amp;</type>
          <declname>w2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p3</declname>
        </param>
        <param>
          <type>const <ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref> &amp;</type>
          <declname>w3</declname>
        </param>
        <briefdescription>
<para>compute the barycenter of the points <computeroutput>p1</computeroutput>, <computeroutput>p2</computeroutput> and <computeroutput>p3</computeroutput> with corresponding weights <computeroutput>w1</computeroutput>, <computeroutput>w2</computeroutput> and <computeroutput>w3</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>w1+w2+w3 != 0</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="218" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__barycenter__grp_1ga224f0d73b9799df1f5601f69b15c136a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_2&lt;Kernel&gt; CGAL::barycenter</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p1, const Kernel::FT &amp;w1, const CGAL::Point_2&lt; Kernel &gt; &amp;p2, const Kernel::FT &amp;w2, const CGAL::Point_2&lt; Kernel &gt; &amp;p3, const Kernel::FT &amp;w3, const CGAL::Point_2&lt; Kernel &gt; &amp;p4)</argsstring>
        <name>barycenter</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref> &amp;</type>
          <declname>w1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const <ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref> &amp;</type>
          <declname>w2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p3</declname>
        </param>
        <param>
          <type>const <ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref> &amp;</type>
          <declname>w3</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p4</declname>
        </param>
        <briefdescription>
<para>compute the barycenter of the points <computeroutput>p1</computeroutput>, <computeroutput>p2</computeroutput>, <computeroutput>p3</computeroutput> and <computeroutput>p4</computeroutput> with corresponding weights <computeroutput>w1</computeroutput>, <computeroutput>w2</computeroutput>, <computeroutput>w3</computeroutput> and <computeroutput>1-w1-w2-w3</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="228" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__barycenter__grp_1ga6b9c728e11f45799acd3b3ed90680908" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_2&lt;Kernel&gt; CGAL::barycenter</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p1, const Kernel::FT &amp;w1, const CGAL::Point_2&lt; Kernel &gt; &amp;p2, const Kernel::FT &amp;w2, const CGAL::Point_2&lt; Kernel &gt; &amp;p3, const Kernel::FT &amp;w3, const CGAL::Point_2&lt; Kernel &gt; &amp;p4, const Kernel::FT &amp;w4)</argsstring>
        <name>barycenter</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref> &amp;</type>
          <declname>w1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const <ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref> &amp;</type>
          <declname>w2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p3</declname>
        </param>
        <param>
          <type>const <ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref> &amp;</type>
          <declname>w3</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p4</declname>
        </param>
        <param>
          <type>const <ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref> &amp;</type>
          <declname>w4</declname>
        </param>
        <briefdescription>
<para>compute the barycenter of the points <computeroutput>p1</computeroutput>, <computeroutput>p2</computeroutput>, <computeroutput>p3</computeroutput> and <computeroutput>p4</computeroutput> with corresponding weights <computeroutput>w1</computeroutput>, <computeroutput>w2</computeroutput>, <computeroutput>w3</computeroutput> and <computeroutput>w4</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>w1+w2+w3+w4 != 0</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="239" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__barycenter__grp_1gaa9d152f7425b1a2a29eee08b313eebfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_3&lt;Kernel&gt; CGAL::barycenter</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p1, const Kernel::FT &amp;w1, const CGAL::Point_3&lt; Kernel &gt; &amp;p2)</argsstring>
        <name>barycenter</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref> &amp;</type>
          <declname>w1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>compute the barycenter of the points <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> with corresponding weights <computeroutput>w1</computeroutput> and <computeroutput>1-w1</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="250" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__barycenter__grp_1gaa9cc438af09c522295e17c1efb341e44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_3&lt;Kernel&gt; CGAL::barycenter</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p1, const Kernel::FT &amp;w1, const CGAL::Point_3&lt; Kernel &gt; &amp;p2, const Kernel::FT &amp;w2)</argsstring>
        <name>barycenter</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref> &amp;</type>
          <declname>w1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const <ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref> &amp;</type>
          <declname>w2</declname>
        </param>
        <briefdescription>
<para>compute the barycenter of the points <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> with corresponding weights <computeroutput>w1</computeroutput> and <computeroutput>w2</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>w1+w2 != 0</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="259" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__barycenter__grp_1ga2cb3731a1798367ccdab76efc3578bde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_3&lt;Kernel&gt; CGAL::barycenter</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p1, const Kernel::FT &amp;w1, const CGAL::Point_3&lt; Kernel &gt; &amp;p2, const Kernel::FT &amp;w2, const CGAL::Point_3&lt; Kernel &gt; &amp;p3)</argsstring>
        <name>barycenter</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref> &amp;</type>
          <declname>w1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const <ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref> &amp;</type>
          <declname>w2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
<para>compute the barycenter of the points <computeroutput>p1</computeroutput>, <computeroutput>p2</computeroutput> and <computeroutput>p3</computeroutput> with corresponding weights <computeroutput>w1</computeroutput>, <computeroutput>w2</computeroutput> and <computeroutput>1-w1-w2</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="268" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__barycenter__grp_1ga4ceb07bf28afc3ed8267739b8c812d36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_3&lt;Kernel&gt; CGAL::barycenter</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p1, const Kernel::FT &amp;w1, const CGAL::Point_3&lt; Kernel &gt; &amp;p2, const Kernel::FT &amp;w2, const CGAL::Point_3&lt; Kernel &gt; &amp;p3, const Kernel::FT &amp;w3)</argsstring>
        <name>barycenter</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref> &amp;</type>
          <declname>w1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const <ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref> &amp;</type>
          <declname>w2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p3</declname>
        </param>
        <param>
          <type>const <ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref> &amp;</type>
          <declname>w3</declname>
        </param>
        <briefdescription>
<para>compute the barycenter of the points <computeroutput>p1</computeroutput>, <computeroutput>p2</computeroutput> and <computeroutput>p3</computeroutput> with corresponding weights <computeroutput>w1</computeroutput>, <computeroutput>w2</computeroutput> and <computeroutput>w3</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>w1+w2+w3 != 0</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="278" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__barycenter__grp_1gaea7ed616eb64df13d5fd89c8c20b3b38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_3&lt;Kernel&gt; CGAL::barycenter</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p1, const Kernel::FT &amp;w1, const CGAL::Point_3&lt; Kernel &gt; &amp;p2, const Kernel::FT &amp;w2, const CGAL::Point_3&lt; Kernel &gt; &amp;p3, const Kernel::FT &amp;w3, const CGAL::Point_3&lt; Kernel &gt; &amp;p4)</argsstring>
        <name>barycenter</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref> &amp;</type>
          <declname>w1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const <ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref> &amp;</type>
          <declname>w2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p3</declname>
        </param>
        <param>
          <type>const <ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref> &amp;</type>
          <declname>w3</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p4</declname>
        </param>
        <briefdescription>
<para>compute the barycenter of the points <computeroutput>p1</computeroutput>, <computeroutput>p2</computeroutput>, <computeroutput>p3</computeroutput> and <computeroutput>p4</computeroutput> with corresponding weights <computeroutput>w1</computeroutput>, <computeroutput>w2</computeroutput>, <computeroutput>w3</computeroutput> and <computeroutput>1-w1-w2-w3</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="288" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__barycenter__grp_1ga2927bae7081f70efc111f60b18f1bc07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_3&lt;Kernel&gt; CGAL::barycenter</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p1, const Kernel::FT &amp;w1, const CGAL::Point_3&lt; Kernel &gt; &amp;p2, const Kernel::FT &amp;w2, const CGAL::Point_3&lt; Kernel &gt; &amp;p3, const Kernel::FT &amp;w3, const CGAL::Point_3&lt; Kernel &gt; &amp;p4, const Kernel::FT &amp;w4)</argsstring>
        <name>barycenter</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref> &amp;</type>
          <declname>w1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const <ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref> &amp;</type>
          <declname>w2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p3</declname>
        </param>
        <param>
          <type>const <ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref> &amp;</type>
          <declname>w3</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p4</declname>
        </param>
        <param>
          <type>const <ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref> &amp;</type>
          <declname>w4</declname>
        </param>
        <briefdescription>
<para>compute the barycenter of the points <computeroutput>p1</computeroutput>, <computeroutput>p2</computeroutput>, <computeroutput>p3</computeroutput> and <computeroutput>p4</computeroutput> with corresponding weights <computeroutput>w1</computeroutput>, <computeroutput>w2</computeroutput>, <computeroutput>w3</computeroutput> and <computeroutput>w4</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>w1+w2+w3+w4 != 0</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="299" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__bisector__grp_1ga2ba217aec13a36b8171d110feda3a058" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Line_2&lt;Kernel&gt; CGAL::bisector</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q)</argsstring>
        <name>bisector</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>constructs the bisector line of the two points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The bisector is oriented in such a way that <computeroutput>p</computeroutput> lies on its positive side. <simplesect kind="pre"><para><computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> are not equal. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="316" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__bisector__grp_1gaf9a5b5ad26e76e31f1329a065b900e09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Line_2&lt;Kernel&gt; CGAL::bisector</definition>
        <argsstring>(const CGAL::Line_2&lt; Kernel &gt; &amp;l1, const CGAL::Line_2&lt; Kernel &gt; &amp;l2)</argsstring>
        <name>bisector</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l2</declname>
        </param>
        <briefdescription>
<para>constructs the bisector of the two lines <computeroutput>l1</computeroutput> and <computeroutput>l2</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>In the general case, the bisector has the direction of the vector which is the sum of the normalized directions of the two lines, and which passes through the intersection of <computeroutput>l1</computeroutput> and <computeroutput>l2</computeroutput>. If <computeroutput>l1</computeroutput> and <computeroutput>l2</computeroutput> are parallel, then the bisector is defined as the line which has the same direction as <computeroutput>l1</computeroutput>, and which is at the same distance from <computeroutput>l1</computeroutput> and <computeroutput>l2</computeroutput>. This function requires that <computeroutput><ref refid="classKernel_1aacd6ff704fc864440c40993a40210f6b" kindref="member">Kernel::RT</ref></computeroutput> supports the <computeroutput><ref refid="group__PkgAlgebraicFoundations_1gab922269072ee9ee99ba8c541418b2e11" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">sqrt()</ref></computeroutput> operation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="331" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__bisector__grp_1ga6e7add7040ad1df3b508897829e9ce50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Plane__3" kindref="compound">CGAL::Plane_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Plane_3&lt;Kernel&gt; CGAL::bisector</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q)</argsstring>
        <name>bisector</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>constructs the bisector plane of the two points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The bisector is oriented in such a way that <computeroutput>p</computeroutput> lies on its positive side. <simplesect kind="pre"><para><computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> are not equal. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="340" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__bisector__grp_1ga91e1bf69d26ea0be12d0762fc37a6895" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Plane__3" kindref="compound">CGAL::Plane_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Plane_3&lt;Kernel&gt; CGAL::bisector</definition>
        <argsstring>(const CGAL::Plane_3&lt; Kernel &gt; &amp;h1, const CGAL::Plane_3&lt; Kernel &gt; &amp;h2)</argsstring>
        <name>bisector</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Plane__3" kindref="compound">CGAL::Plane_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Plane__3" kindref="compound">CGAL::Plane_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
<para>constructs the bisector of the two planes <computeroutput>h1</computeroutput> and <computeroutput>h2</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>In the general case, the bisector has a normal vector which has the same direction as the sum of the normalized normal vectors of the two planes, and passes through the intersection of <computeroutput>h1</computeroutput> and <computeroutput>h2</computeroutput>. If <computeroutput>h1</computeroutput> and <computeroutput>h2</computeroutput> are parallel, then the bisector is defined as the plane which has the same oriented normal vector as <computeroutput>l1</computeroutput>, and which is at the same distance from <computeroutput>h1</computeroutput> and <computeroutput>h2</computeroutput>. This function requires that <computeroutput><ref refid="classKernel_1aacd6ff704fc864440c40993a40210f6b" kindref="member">Kernel::RT</ref></computeroutput> supports the <computeroutput><ref refid="group__PkgAlgebraicFoundations_1gab922269072ee9ee99ba8c541418b2e11" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">sqrt()</ref></computeroutput> operation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="355" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__centroid__grp_1gacc395064255dfefdb1420309db234210" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_2&lt;Kernel&gt; CGAL::centroid</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r)</argsstring>
        <name>centroid</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>compute the centroid of the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="370" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__centroid__grp_1ga532d0ed8199f6167f4fce06169c1d8e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_2&lt;Kernel&gt; CGAL::centroid</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r, const CGAL::Point_2&lt; Kernel &gt; &amp;s)</argsstring>
        <name>centroid</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>compute the centroid of the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>r</computeroutput>, and <computeroutput>s</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="379" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__centroid__grp_1gad6c0550ff2fe03737ce3b8243a8adb6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_2&lt;Kernel&gt; CGAL::centroid</definition>
        <argsstring>(const CGAL::Triangle_2&lt; Kernel &gt; &amp;t)</argsstring>
        <name>centroid</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangle__2" kindref="compound">CGAL::Triangle_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>compute the centroid of the triangle <computeroutput>t</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="389" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__centroid__grp_1ga01619a969a94506e337aef50dfc0dabb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_3&lt;Kernel&gt; CGAL::centroid</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r)</argsstring>
        <name>centroid</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>compute the centroid of the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="396" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__centroid__grp_1gaec3fbaf7c2206359403b1615574163ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_3&lt;Kernel&gt; CGAL::centroid</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r, const CGAL::Point_3&lt; Kernel &gt; &amp;s)</argsstring>
        <name>centroid</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>compute the centroid of the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>r</computeroutput>, and <computeroutput>s</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="405" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__centroid__grp_1ga477725ba996cde0d713d592822850c15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_3&lt;Kernel&gt; CGAL::centroid</definition>
        <argsstring>(const CGAL::Triangle_3&lt; Kernel &gt; &amp;t)</argsstring>
        <name>centroid</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangle__3" kindref="compound">CGAL::Triangle_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>compute the centroid of the triangle <computeroutput>t</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="415" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__centroid__grp_1ga6e15955bebce4befa3e98b1746b8302c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_3&lt;Kernel&gt; CGAL::centroid</definition>
        <argsstring>(const CGAL::Tetrahedron_3&lt; Kernel &gt; &amp;t)</argsstring>
        <name>centroid</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Tetrahedron__3" kindref="compound">CGAL::Tetrahedron_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>compute the centroid of the tetrahedron <computeroutput>t</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="422" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__circumcenter__grp_1ga977ec1ce268576daafeda45819864e4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_2&lt;Kernel&gt; CGAL::circumcenter</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q)</argsstring>
        <name>circumcenter</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>compute the center of the smallest circle passing through the points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Note: this is the same as <computeroutput>CGAL::midpoint(p, q)</computeroutput> but is provided for homogeneity. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="437" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__circumcenter__grp_1gaa3fcd6cd44b06a5ff811e2da2932a7d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_2&lt;Kernel&gt; CGAL::circumcenter</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r)</argsstring>
        <name>circumcenter</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>compute the center of the circle passing through the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput> are not collinear. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="446" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__circumcenter__grp_1ga3ff247b94646ce199ddcbd8d7140282e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_2&lt;Kernel&gt; CGAL::circumcenter</definition>
        <argsstring>(const CGAL::Triangle_2&lt; Kernel &gt; &amp;t)</argsstring>
        <name>circumcenter</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangle__2" kindref="compound">CGAL::Triangle_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>compute the center of the circle passing through the vertices of <computeroutput>t</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>t</computeroutput> is not degenerate. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="456" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__circumcenter__grp_1ga28cd9d1fe189254953cbc573ad3bcc22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_3&lt;Kernel&gt; CGAL::circumcenter</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q)</argsstring>
        <name>circumcenter</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>compute the center of the smallest sphere passing through the points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Note: this is the same as <computeroutput>CGAL::midpoint(p, q)</computeroutput> but is provided for homogeneity. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="465" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__circumcenter__grp_1gae0e5e34d41071b2dc23de6992b73c214" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_3&lt;Kernel&gt; CGAL::circumcenter</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r)</argsstring>
        <name>circumcenter</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>compute the center of the circle passing through the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput> are not collinear. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="474" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__circumcenter__grp_1ga0372938fd1843c89b75d4e603d494695" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_3&lt;Kernel&gt; CGAL::circumcenter</definition>
        <argsstring>(const CGAL::Triangle_3&lt; Kernel &gt; &amp;t)</argsstring>
        <name>circumcenter</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangle__3" kindref="compound">CGAL::Triangle_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>compute the center of the circle passing through the vertices of <computeroutput>t</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>t</computeroutput> is not degenerate. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="484" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__circumcenter__grp_1gaf3f728fdb8878f994c76e83bbf795fb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_3&lt;Kernel&gt; CGAL::circumcenter</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r, const CGAL::Point_3&lt; Kernel &gt; &amp;s)</argsstring>
        <name>circumcenter</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>compute the center of the sphere passing through the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>r</computeroutput>, and <computeroutput>s</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>r</computeroutput>, and <computeroutput>s</computeroutput> are not coplanar. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="492" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__circumcenter__grp_1ga4069c71ac0085c3ce8003879032ffe46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_3&lt;Kernel&gt; CGAL::circumcenter</definition>
        <argsstring>(const CGAL::Tetrahedron_3&lt; Kernel &gt; &amp;t)</argsstring>
        <name>circumcenter</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Tetrahedron__3" kindref="compound">CGAL::Tetrahedron_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>compute the center of the sphere passing through the vertices of <computeroutput>t</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>t</computeroutput> is not degenerate. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="503" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__collinear__are__ordered__along__line__grp_1ga62c50e1ef3fb7e4533720373827fd4c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::collinear_are_ordered_along_line</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r)</argsstring>
        <name>collinear_are_ordered_along_line</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff <computeroutput>q</computeroutput> lies between <computeroutput>p</computeroutput> and <computeroutput>r</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>p, q</computeroutput> and <computeroutput>r</computeroutput> are collinear. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="519" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__collinear__are__ordered__along__line__grp_1ga4ea9e9123c81b5cc398fd942140599e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::collinear_are_ordered_along_line</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r)</argsstring>
        <name>collinear_are_ordered_along_line</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff <computeroutput>q</computeroutput> lies between <computeroutput>p</computeroutput> and <computeroutput>r</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>p, q</computeroutput> and <computeroutput>r</computeroutput> are collinear. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="528" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__collinear__are__strictly__ordered__along__line__grp_1ga9d8636d66af954605ce632590b3b705d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::collinear_are_strictly_ordered_along_line</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r)</argsstring>
        <name>collinear_are_strictly_ordered_along_line</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff <computeroutput>q</computeroutput> lies strictly between <computeroutput>p</computeroutput> and <computeroutput>r</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>p, q</computeroutput> and <computeroutput>r</computeroutput> are collinear. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="546" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__collinear__are__strictly__ordered__along__line__grp_1gafb68a13a9bffce3ffd211e875994839d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::collinear_are_strictly_ordered_along_line</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r)</argsstring>
        <name>collinear_are_strictly_ordered_along_line</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff <computeroutput>q</computeroutput> lies strictly between <computeroutput>p</computeroutput> and <computeroutput>r</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>p, q</computeroutput> and <computeroutput>r</computeroutput> are collinear. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="555" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__collinear__grp_1gadaa777c7b2f72b4321fe1ac3893efc3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::collinear</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r)</argsstring>
        <name>collinear</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput> are collinear. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="573" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__collinear__grp_1gaf22e6010f55de63a8aff0dd2c7b12bd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::collinear</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r)</argsstring>
        <name>collinear</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput> are collinear. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="581" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__dihedral__angle__grp_1ga9a70a34f86fe41a55b760967694f43a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_dihedral_angle</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;a1, const CGAL::Point_3&lt; Kernel &gt; &amp;b1, const CGAL::Point_3&lt; Kernel &gt; &amp;c1, const CGAL::Point_3&lt; Kernel &gt; &amp;d1, const Kernel::FT &amp;cosine)</argsstring>
        <name>compare_dihedral_angle</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>a1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>b1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>d1</declname>
        </param>
        <param>
          <type>const <ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref> &amp;</type>
          <declname>cosine</declname>
        </param>
        <briefdescription>
<para>compares the dihedral angles <formula id="59">$ \theta_1$</formula> and <formula id="60">$ \theta_2$</formula>, where <formula id="59">$ \theta_1$</formula> is the dihedral angle, in <formula id="61">$ [0, \pi]$</formula>, of the tetrahedron <computeroutput>(a1, b1, c1, d1)</computeroutput> at the edge <computeroutput>(a1, b1)</computeroutput>, and <formula id="60">$ \theta_2$</formula> is the angle in <formula id="61">$ [0, \pi]$</formula> such that <formula id="62">$ cos(\theta_2) = cosine$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>The result is the same as <computeroutput>compare_dihedral_angle(b1-a1, c1-a1, d1-a1, cosine)</computeroutput>. <simplesect kind="pre"><para><computeroutput>a1</computeroutput>, <computeroutput>b1</computeroutput>, <computeroutput>c1</computeroutput> are not collinear, and <computeroutput>a1</computeroutput>, <computeroutput>b1</computeroutput>, <computeroutput>d1</computeroutput> are not collinear. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="602" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__dihedral__angle__grp_1ga52404107d79baa56301bfc8199134228" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_dihedral_angle</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;a1, const CGAL::Point_3&lt; Kernel &gt; &amp;b1, const CGAL::Point_3&lt; Kernel &gt; &amp;c1, const CGAL::Point_3&lt; Kernel &gt; &amp;d1, const CGAL::Point_3&lt; Kernel &gt; &amp;a2, const CGAL::Point_3&lt; Kernel &gt; &amp;b2, const CGAL::Point_3&lt; Kernel &gt; &amp;c2, const CGAL::Point_3&lt; Kernel &gt; &amp;d2)</argsstring>
        <name>compare_dihedral_angle</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>a1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>b1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>d1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>a2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>b2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>c2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>d2</declname>
        </param>
        <briefdescription>
<para>compares the dihedral angles <formula id="59">$ \theta_1$</formula> and <formula id="60">$ \theta_2$</formula>, where <formula id="63">$ \theta_i$</formula> is the dihedral angle in the tetrahedron <computeroutput>(a_i, b_i, c_i, d_i)</computeroutput> at the edge <computeroutput>(a_i, b_i)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>These two angles are computed in <formula id="61">$ [0, \pi]$</formula>. The result is the same as <computeroutput>compare_dihedral_angle(b1-a1, c1-a1, d1-a1, b2-a2, c2-a2, d2-a2)</computeroutput>. <simplesect kind="pre"><para>For <formula id="64">$ i \in\{1,2\}$</formula>, <computeroutput>a_i</computeroutput>, <computeroutput>b_i</computeroutput>, <computeroutput>c_i</computeroutput> are not collinear, and <computeroutput>a_i</computeroutput>, <computeroutput>b_i</computeroutput>, <computeroutput>d_i</computeroutput> are not collinear. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="617" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__dihedral__angle__grp_1ga3f9c8a8863ab1411fc6484163fae4d0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_dihedral_angle</definition>
        <argsstring>(const CGAL::Vector_3&lt; Kernel &gt; &amp;u1, const CGAL::Vector_3&lt; Kernel &gt; &amp;v1, const CGAL::Vector_3&lt; Kernel &gt; &amp;w1, const Kernel::FT &amp;cosine)</argsstring>
        <name>compare_dihedral_angle</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>u1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>w1</declname>
        </param>
        <param>
          <type>const <ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref> &amp;</type>
          <declname>cosine</declname>
        </param>
        <briefdescription>
<para>compares the dihedral angles <formula id="59">$ \theta_1$</formula> and <formula id="60">$ \theta_2$</formula>, where <formula id="59">$ \theta_1$</formula> is the dihedral angle, in <formula id="61">$ [0, \pi]$</formula>, between the vectorial planes defined by <computeroutput>(u_1, v_1)</computeroutput> and <computeroutput>(u_1, w_1)</computeroutput>, and <formula id="60">$ \theta_2$</formula> is the angle in <formula id="61">$ [0, \pi]$</formula> such that <formula id="62">$ cos(\theta_2) = cosine$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>u_1</computeroutput> and <computeroutput>v_1</computeroutput> are not collinear, and <computeroutput>u_1</computeroutput> and <computeroutput>w_1</computeroutput> are not collinear. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="636" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__dihedral__angle__grp_1ga7cb035f021001289b2da2be5bf799c31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_dihedral_angle</definition>
        <argsstring>(const CGAL::Vector_3&lt; Kernel &gt; &amp;u1, const CGAL::Vector_3&lt; Kernel &gt; &amp;v1, const CGAL::Vector_3&lt; Kernel &gt; &amp;w1, const CGAL::Vector_3&lt; Kernel &gt; &amp;u2, const CGAL::Vector_3&lt; Kernel &gt; &amp;v2, const CGAL::Vector_3&lt; Kernel &gt; &amp;w2)</argsstring>
        <name>compare_dihedral_angle</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>u1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>w1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>u2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>w2</declname>
        </param>
        <briefdescription>
<para>compares the dihedral angles <formula id="59">$ \theta_1$</formula> and <formula id="60">$ \theta_2$</formula>, where <formula id="63">$ \theta_i$</formula> is the dihedral angle between the vectorial planes defined by <computeroutput>(u_i, v_i)</computeroutput> and <computeroutput>(u_i, w_i)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>These two angles are computed in <formula id="61">$ [0, \pi]$</formula>. <simplesect kind="pre"><para>For <formula id="64">$ i \in\{1,2\}$</formula>, <computeroutput>u_i</computeroutput> and <computeroutput>v_i</computeroutput> are not collinear, and <computeroutput>u_i</computeroutput> and <computeroutput>w_i</computeroutput> are not collinear. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="650" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__distance__to__point__grp_1ga51e8ac85edc4e7c4beb6a9d139f5c853" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_distance_to_point</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r)</argsstring>
        <name>compare_distance_to_point</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>compares the distances of points <computeroutput>q</computeroutput> and <computeroutput>r</computeroutput> to point <computeroutput>p</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>returns <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab925c6b1ff8cd0bdea7f31fe18d3c38b" kindref="member">CGAL::SMALLER</ref></computeroutput>, iff <computeroutput>q</computeroutput> is closer to <computeroutput>p</computeroutput> than <computeroutput>r</computeroutput>, <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab25bdbfd193e9ea35187a4f46e7d6fcd" kindref="member">CGAL::LARGER</ref></computeroutput>, iff <computeroutput>r</computeroutput> is closer to <computeroutput>p</computeroutput> than <computeroutput>q</computeroutput>, and <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469a5f224784e56ca565837a5d6d268fe078" kindref="member">CGAL::EQUAL</ref></computeroutput> otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="682" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__distance__to__point__grp_1ga7a005824ca304dd1f5278474f4843dd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_distance_to_point</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r)</argsstring>
        <name>compare_distance_to_point</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>compares the distances of points <computeroutput>q</computeroutput> and <computeroutput>r</computeroutput> to point <computeroutput>p</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>returns <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab925c6b1ff8cd0bdea7f31fe18d3c38b" kindref="member">CGAL::SMALLER</ref></computeroutput>, iff <computeroutput>q</computeroutput> is closer to <computeroutput>p</computeroutput> than <computeroutput>r</computeroutput>, <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab25bdbfd193e9ea35187a4f46e7d6fcd" kindref="member">CGAL::LARGER</ref></computeroutput>, iff <computeroutput>r</computeroutput> is closer to <computeroutput>p</computeroutput> than <computeroutput>q</computeroutput>, and <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469a5f224784e56ca565837a5d6d268fe078" kindref="member">CGAL::EQUAL</ref></computeroutput> otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="696" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__lexicographically__linear__grp_1ga241d6b0c51b2ec9ee8b7a4e04e7dd562" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_lexicographically</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q)</argsstring>
        <name>compare_lexicographically</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Compares the <ref refid="structCGAL_1_1Cartesian" kindref="compound">Cartesian</ref> coordinates of points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> lexicographically in <formula id="65">$ xy$</formula> order: first <formula id="49">$ x$</formula>-coordinates are compared, if they are equal, <formula id="55">$ y$</formula>-coordinates are compared. </para>        </briefdescription>
        <detaileddescription>
<para>This is the same function as <computeroutput>compare_xy</computeroutput> and exists for compatibility with <computeroutput><ref refid="classCGAL_1_1Point__d" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">Point_d</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="716" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__lexicographically__linear__grp_1gaf90bdb2a89d1e09ecf3a9e8f97671711" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_lexicographically</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q)</argsstring>
        <name>compare_lexicographically</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Compares the <ref refid="structCGAL_1_1Cartesian" kindref="compound">Cartesian</ref> coordinates of points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> lexicographically in <formula id="57">$ xyz$</formula> order: first <formula id="49">$ x$</formula>-coordinates are compared, if they are equal, <formula id="55">$ y$</formula>-coordinates are compared, and if both <formula id="49">$ x$</formula>- and <formula id="55">$ y$</formula>- coordinate are equal, <formula id="56">$ z$</formula>-coordinates are compared. </para>        </briefdescription>
        <detaileddescription>
<para>This is the same function as <computeroutput>compare_xyz</computeroutput> and exists for compatibility with <computeroutput><ref refid="classCGAL_1_1Point__d" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">Point_d</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="727" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__signed__distance__to__line__grp_1gaf3dbb38f621e8d62944cd1869a97f8df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_signed_distance_to_line</definition>
        <argsstring>(const CGAL::Line_2&lt; Kernel &gt; &amp;l, const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q)</argsstring>
        <name>compare_signed_distance_to_line</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab25bdbfd193e9ea35187a4f46e7d6fcd" kindref="member">CGAL::LARGER</ref></computeroutput> iff the signed distance of <computeroutput>p</computeroutput> and <computeroutput>l</computeroutput> is larger than the signed distance of <computeroutput>q</computeroutput> and <computeroutput>l</computeroutput>, <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab925c6b1ff8cd0bdea7f31fe18d3c38b" kindref="member">CGAL::SMALLER</ref></computeroutput>, iff it is smaller, and <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469a5f224784e56ca565837a5d6d268fe078" kindref="member">CGAL::EQUAL</ref></computeroutput> iff both are equal. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="753" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__signed__distance__to__line__grp_1ga9f9eaaab84172968cf94e094a13df26c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_signed_distance_to_line</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r, const CGAL::Point_2&lt; Kernel &gt; &amp;s)</argsstring>
        <name>compare_signed_distance_to_line</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab25bdbfd193e9ea35187a4f46e7d6fcd" kindref="member">CGAL::LARGER</ref></computeroutput> iff the signed distance of <computeroutput>r</computeroutput> and <computeroutput>l</computeroutput> is larger than the signed distance of <computeroutput>s</computeroutput> and <computeroutput>l</computeroutput>, <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab925c6b1ff8cd0bdea7f31fe18d3c38b" kindref="member">CGAL::SMALLER</ref></computeroutput>, iff it is smaller, and <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469a5f224784e56ca565837a5d6d268fe078" kindref="member">CGAL::EQUAL</ref></computeroutput> iff both are equal, where <computeroutput>l</computeroutput> is the directed line through <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="767" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__signed__distance__to__plane__grp_1gaa505cef98a05358ff85487d674cc0394" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_signed_distance_to_plane</definition>
        <argsstring>(const CGAL::Plane_3&lt; Kernel &gt; &amp;h, const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q)</argsstring>
        <name>compare_signed_distance_to_plane</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Plane__3" kindref="compound">CGAL::Plane_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab25bdbfd193e9ea35187a4f46e7d6fcd" kindref="member">CGAL::LARGER</ref></computeroutput> iff the signed distance of <computeroutput>p</computeroutput> and <computeroutput>h</computeroutput> is larger than the signed distance of <computeroutput>q</computeroutput> and <computeroutput>h</computeroutput>, <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab925c6b1ff8cd0bdea7f31fe18d3c38b" kindref="member">CGAL::SMALLER</ref></computeroutput>, iff it is smaller, and <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469a5f224784e56ca565837a5d6d268fe078" kindref="member">CGAL::EQUAL</ref></computeroutput> iff both are equal. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="795" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__signed__distance__to__plane__grp_1ga63052c3cbbf565aec4bc58dd511e71d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_signed_distance_to_plane</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r, const CGAL::Point_3&lt; Kernel &gt; &amp;s, const CGAL::Point_3&lt; Kernel &gt; &amp;t)</argsstring>
        <name>compare_signed_distance_to_plane</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab25bdbfd193e9ea35187a4f46e7d6fcd" kindref="member">CGAL::LARGER</ref></computeroutput> iff the signed distance of <computeroutput>s</computeroutput> and <computeroutput>h</computeroutput> is larger than the signed distance of <computeroutput>t</computeroutput> and <computeroutput>h</computeroutput>, <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab925c6b1ff8cd0bdea7f31fe18d3c38b" kindref="member">CGAL::SMALLER</ref></computeroutput>, iff it is smaller, and <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469a5f224784e56ca565837a5d6d268fe078" kindref="member">CGAL::EQUAL</ref></computeroutput> iff both are equal, where <computeroutput>h</computeroutput> is the oriented plane through <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput> and <computeroutput>r</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="810" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__slopes__grp_1ga9d7f9afebfb7635c676fa7bcf3ac3185" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_slope</definition>
        <argsstring>(const CGAL::Line_2&lt; Kernel &gt; &amp;l1, const CGAL::Line_2&lt; Kernel &gt; &amp;l2)</argsstring>
        <name>compare_slope</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l2</declname>
        </param>
        <briefdescription>
<para>compares the slopes of the lines <computeroutput>l1</computeroutput> and <computeroutput>l2</computeroutput> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="828" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__slopes__grp_1gad1aefd6d41881734885cb77c37af4e0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_slope</definition>
        <argsstring>(const CGAL::Segment_2&lt; Kernel &gt; &amp;s1, const CGAL::Segment_2&lt; Kernel &gt; &amp;s2)</argsstring>
        <name>compare_slope</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Segment__2" kindref="compound">CGAL::Segment_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Segment__2" kindref="compound">CGAL::Segment_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
<para>compares the slopes of the segments <computeroutput>s1</computeroutput> and <computeroutput>s2</computeroutput>, where the slope is the variation of the <computeroutput>y</computeroutput>-coordinate from the left to the right endpoint of the segments. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="837" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__slopes__grp_1gad4ad60324fe765d0ed26f56f3e2bf81e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_slope</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r, const CGAL::Point_3&lt; Kernel &gt; &amp;s)</argsstring>
        <name>compare_slope</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>compares the slopes of the segments <computeroutput>(p,q)</computeroutput> and <computeroutput>(r,s)</computeroutput>, where the slope is the variation of the <computeroutput>z</computeroutput>-coordinate from the first to the second point of the segment divided by the length of the segment. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="846" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__squared__distance__grp_1ga8dbd662fc129db51e5344c2105191b6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_squared_distance</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const typename Kernel::FT &amp;d2)</argsstring>
        <name>compare_squared_distance</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const typename <ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref> &amp;</type>
          <declname>d2</declname>
        </param>
        <briefdescription>
<para>compares the squared distance of points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> to <computeroutput>d2</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="871" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__squared__distance__grp_1ga75555e2894e9c943e725483a054d5cbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_squared_distance</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const typename Kernel::FT &amp;d2)</argsstring>
        <name>compare_squared_distance</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const typename <ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref> &amp;</type>
          <declname>d2</declname>
        </param>
        <briefdescription>
<para>compares the squared distance of points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> to <computeroutput>d2</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="881" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__squared__radius__grp_1gaeb1716519cb30cbb97fc798e0cd00ec6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_squared_radius</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const typename Kernel::FT &amp;sr)</argsstring>
        <name>compare_squared_radius</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const typename <ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref> &amp;</type>
          <declname>sr</declname>
        </param>
        <briefdescription>
<para>compares the squared radius of the sphere of radius 0 centered at <computeroutput>p</computeroutput> to <computeroutput>sr</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>This returns the opposite sign of <computeroutput>sr</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="898" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__squared__radius__grp_1ga3d71c0c80b5c2a89b49289e1d587fdd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_squared_radius</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const typename Kernel::FT &amp;sr)</argsstring>
        <name>compare_squared_radius</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const typename <ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref> &amp;</type>
          <declname>sr</declname>
        </param>
        <briefdescription>
<para>compares the squared radius of the sphere defined by the points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> to <computeroutput>sr</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="907" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__squared__radius__grp_1ga0fa5f4a04f1c7f04f3c43a4d521019ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_squared_radius</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r, const typename Kernel::FT &amp;sr)</argsstring>
        <name>compare_squared_radius</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const typename <ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref> &amp;</type>
          <declname>sr</declname>
        </param>
        <briefdescription>
<para>compares the squared radius of the sphere defined by the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput> to <computeroutput>sr</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="917" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__squared__radius__grp_1ga811f58ab0215115643da5fe16f37cfa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_squared_radius</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r, const CGAL::Point_3&lt; Kernel &gt; &amp;s, const typename Kernel::FT &amp;sr)</argsstring>
        <name>compare_squared_radius</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const typename <ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref> &amp;</type>
          <declname>sr</declname>
        </param>
        <briefdescription>
<para>compares the squared radius of the sphere defined by the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>r</computeroutput>, and <computeroutput>r</computeroutput> to <computeroutput>sr</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="928" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__x__linear__grp_1gade38745038a708e76421e624dc448f0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_x</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q)</argsstring>
        <name>compare_x</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="49">$ x$</formula>-coordinates of <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="966" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__x__linear__grp_1ga274dc815852583262e54dfb35d601268" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_x</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q)</argsstring>
        <name>compare_x</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="49">$ x$</formula>-coordinates of <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="972" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__x__linear__grp_1gae502ab2980aac4e37c4dd08108400618" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_x</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Line_2&lt; Kernel &gt; &amp;l1, const CGAL::Line_2&lt; Kernel &gt; &amp;l2)</argsstring>
        <name>compare_x</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l2</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="49">$ x$</formula>-coordinates of <computeroutput>p</computeroutput> and the intersection of lines <computeroutput>l1</computeroutput> and <computeroutput>l2</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>See Figure <ref refid="group__compare__x__linear__grp_1figcompare_x" kindref="member">figcompare_x</ref> (a). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="979" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__x__linear__grp_1gadd405f29b1f84e3d5ceceee2632ee536" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_x</definition>
        <argsstring>(const CGAL::Line_2&lt; Kernel &gt; &amp;l, const CGAL::Line_2&lt; Kernel &gt; &amp;h1, const CGAL::Line_2&lt; Kernel &gt; &amp;h2)</argsstring>
        <name>compare_x</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="49">$ x$</formula>-coordinates of the intersection of line <computeroutput>l</computeroutput> with line <computeroutput>h1</computeroutput> and with line <computeroutput>h2</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>See Figure <ref refid="group__compare__x__linear__grp_1figcompare_x" kindref="member">figcompare_x</ref> (b). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="990" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__x__linear__grp_1ga84301a123a63ed4e1de35d2c19367808" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_x</definition>
        <argsstring>(const CGAL::Line_2&lt; Kernel &gt; &amp;l1, const CGAL::Line_2&lt; Kernel &gt; &amp;l2, const CGAL::Line_2&lt; Kernel &gt; &amp;h1, const CGAL::Line_2&lt; Kernel &gt; &amp;h2)</argsstring>
        <name>compare_x</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="49">$ x$</formula>-coordinates of the intersection of lines <computeroutput>l1</computeroutput> and <computeroutput>l2</computeroutput> and the intersection of lines <computeroutput>h1</computeroutput> and <computeroutput>h2</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>See Figure <ref refid="group__compare__x__linear__grp_1figcompare_x" kindref="member">figcompare_x</ref> (c). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1000" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__x__circular__grp_1ga02958df52814f2ff41a48f98a0550159" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_x</definition>
        <argsstring>(const CGAL::Circular_arc_point_2&lt; CircularKernel &gt; &amp;p, const CGAL::Circular_arc_point_2&lt; CircularKernel &gt; &amp;q)</argsstring>
        <name>compare_x</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Circular__arc__point__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CGAL::Circular_arc_point_2</ref>&lt; <ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Circular__arc__point__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CGAL::Circular_arc_point_2</ref>&lt; <ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="49">$ x$</formula>-coordinates of <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1023" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__x__circular__grp_1ga5829822afcc60c83ead02c83dc74ce0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_x</definition>
        <argsstring>(const CGAL::Circular_arc_point_2&lt; CircularKernel &gt; &amp;p, const CGAL::Point_2&lt; CircularKernel &gt; &amp;q)</argsstring>
        <name>compare_x</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Circular__arc__point__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CGAL::Circular_arc_point_2</ref>&lt; <ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="49">$ x$</formula>-coordinates of <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1030" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__x__spherical__grp_1ga8e7a74c1584c377bc410425b01da2970" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_x</definition>
        <argsstring>(const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;p, const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;q)</argsstring>
        <name>compare_x</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Circular__arc__point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">CGAL::Circular_arc_point_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Circular__arc__point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">CGAL::Circular_arc_point_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="49">$ x$</formula>-coordinates of <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1051" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__x__spherical__grp_1gaf7039fd589b194b40d9da5aab435cc26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_x</definition>
        <argsstring>(const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;p, const CGAL::Point_3&lt; SphericalKernel &gt; &amp;q)</argsstring>
        <name>compare_x</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Circular__arc__point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">CGAL::Circular_arc_point_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="49">$ x$</formula>-coordinates of <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1059" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__xy__linear__grp_1ga99c5707cdcbc126783a194696aad388b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_xy</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q)</argsstring>
        <name>compare_xy</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Compares the <ref refid="structCGAL_1_1Cartesian" kindref="compound">Cartesian</ref> coordinates of points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> lexicographically in <formula id="65">$ xy$</formula> order: first <formula id="49">$ x$</formula>-coordinates are compared, if they are equal, <formula id="55">$ y$</formula>-coordinates are compared. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1096" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__xy__linear__grp_1ga6979ac7902358ad28cb66fcd9ad96791" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_xy</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q)</argsstring>
        <name>compare_xy</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Compares the <ref refid="structCGAL_1_1Cartesian" kindref="compound">Cartesian</ref> coordinates of points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> lexicographically in <formula id="65">$ xy$</formula> order: first <formula id="49">$ x$</formula>-coordinates are compared, if they are equal, <formula id="55">$ y$</formula>-coordinates are compared. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__xy__circular__grp_1gad4c4b6140a494db45913be987acebcc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_xy</definition>
        <argsstring>(const CGAL::Circular_arc_point_2&lt; CircularKernel &gt; &amp;p, const CGAL::Circular_arc_point_2&lt; CircularKernel &gt; &amp;q)</argsstring>
        <name>compare_xy</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Circular__arc__point__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CGAL::Circular_arc_point_2</ref>&lt; <ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Circular__arc__point__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CGAL::Circular_arc_point_2</ref>&lt; <ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Compares the <formula id="49">$ x$</formula> and <formula id="55">$ y$</formula> <ref refid="structCGAL_1_1Cartesian" kindref="compound">Cartesian</ref> coordinates of points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> lexicographically. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__xy__circular__grp_1gadf28eba2f31263cd46f7d35d866e7ffa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_xy</definition>
        <argsstring>(const CGAL::Circular_arc_point_2&lt; CircularKernel &gt; &amp;p, const CGAL::Point_2&lt; CircularKernel &gt; &amp;q)</argsstring>
        <name>compare_xy</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Circular__arc__point__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CGAL::Circular_arc_point_2</ref>&lt; <ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Compares the <formula id="49">$ x$</formula> and <formula id="55">$ y$</formula> <ref refid="structCGAL_1_1Cartesian" kindref="compound">Cartesian</ref> coordinates of points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> lexicographically. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1136" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__xy__spherical__grp_1ga59723f2273da0d3ae98d287ebf3c0fbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_xy</definition>
        <argsstring>(const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;p, const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;q)</argsstring>
        <name>compare_xy</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Circular__arc__point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">CGAL::Circular_arc_point_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Circular__arc__point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">CGAL::Circular_arc_point_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Compares the <formula id="49">$ x$</formula> and <formula id="55">$ y$</formula> <ref refid="structCGAL_1_1Cartesian" kindref="compound">Cartesian</ref> coordinates of points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> lexicographically. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1159" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__xy__spherical__grp_1ga5d43db96cb7dc2c89331153d88243785" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_xy</definition>
        <argsstring>(const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;p, const CGAL::Point_3&lt; SphericalKernel &gt; &amp;q)</argsstring>
        <name>compare_xy</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Circular__arc__point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">CGAL::Circular_arc_point_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Compares the <formula id="49">$ x$</formula> and <formula id="55">$ y$</formula> <ref refid="structCGAL_1_1Cartesian" kindref="compound">Cartesian</ref> coordinates of points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> lexicographically. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1168" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__x__at__y__grp_1gab87cbd18f319eb74f150b989f1cc98a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_x_at_y</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Line_2&lt; Kernel &gt; &amp;h)</argsstring>
        <name>compare_x_at_y</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="49">$ x$</formula>-coordinates of <computeroutput>p</computeroutput> and the horizontal projection of <computeroutput>p</computeroutput> on <computeroutput>h</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>See Figure <ref refid="group__compare__x__at__y__grp_1figcomparexaty" kindref="member">figcomparexaty</ref> (a). <simplesect kind="pre"><para><computeroutput>h</computeroutput> is not horizontal. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1198" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__x__at__y__grp_1ga7f3809c29b2e82721b7340c8c4da2c8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_x_at_y</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Line_2&lt; Kernel &gt; &amp;h1, const CGAL::Line_2&lt; Kernel &gt; &amp;h2)</argsstring>
        <name>compare_x_at_y</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
<para>This function compares the <formula id="49">$ x$</formula>-coordinates of the horizontal projection of <computeroutput>p</computeroutput> on <computeroutput>h1</computeroutput> and on <computeroutput>h2</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>See Figure <ref refid="group__compare__x__at__y__grp_1figcomparexaty" kindref="member">figcomparexaty</ref> (b). <simplesect kind="pre"><para><computeroutput>h1</computeroutput> and <computeroutput>h2</computeroutput> are not horizontal. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1208" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__x__at__y__grp_1ga4deab4f857e9a869266482ce37a65862" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_x_at_y</definition>
        <argsstring>(const CGAL::Line_2&lt; Kernel &gt; &amp;l1, const CGAL::Line_2&lt; Kernel &gt; &amp;l2, const CGAL::Line_2&lt; Kernel &gt; &amp;h)</argsstring>
        <name>compare_x_at_y</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>Let <computeroutput>p</computeroutput> be the intersection of lines <computeroutput>l1</computeroutput> and <computeroutput>l2</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>This function compares the <formula id="49">$ x$</formula>-coordinates of <computeroutput>p</computeroutput> and the horizontal projection of <computeroutput>p</computeroutput> on <computeroutput>h</computeroutput>. See Figure <ref refid="group__compare__x__at__y__grp_1figcomparexaty" kindref="member">figcomparexaty</ref> (c). <simplesect kind="pre"><para><computeroutput>l1</computeroutput> and <computeroutput>l2</computeroutput> intersect and are not horizontal; <computeroutput>h</computeroutput> is not horizontal. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1220" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__x__at__y__grp_1gabf322237fb2e50bb9df33127869c74a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_x_at_y</definition>
        <argsstring>(const CGAL::Line_2&lt; Kernel &gt; &amp;l1, const CGAL::Line_2&lt; Kernel &gt; &amp;l2, const CGAL::Line_2&lt; Kernel &gt; &amp;h1, const CGAL::Line_2&lt; Kernel &gt; &amp;h2)</argsstring>
        <name>compare_x_at_y</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
<para>Let <computeroutput>p</computeroutput> be the intersection of lines <computeroutput>l1</computeroutput> and <computeroutput>l2</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>This function compares the <formula id="49">$ x$</formula>-coordinates of the horizontal projection of <computeroutput>p</computeroutput> on <computeroutput>h1</computeroutput> and on <computeroutput>h2</computeroutput> See Figure <ref refid="group__compare__x__at__y__grp_1figcomparexaty" kindref="member">figcomparexaty</ref> (d). <simplesect kind="pre"><para><computeroutput>l1</computeroutput> and <computeroutput>l2</computeroutput> intersect and are not horizontal; <computeroutput>h1</computeroutput> and <computeroutput>h2</computeroutput> are not horizontal. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1232" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__y__at__x__grp_1ga0570b8a2164c4f3923053d63b24b4f0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_y_at_x</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Line_2&lt; Kernel &gt; &amp;h)</argsstring>
        <name>compare_y_at_x</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="55">$ y$</formula>-coordinates of <computeroutput>p</computeroutput> and the vertical projection of <computeroutput>p</computeroutput> on <computeroutput>h</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>See Figure <ref refid="group__compare__y__at__x__grp_1figcompareyatx" kindref="member">figcompareyatx</ref> (d).</para><para><simplesect kind="pre"><para><computeroutput>h</computeroutput> is not vertical. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1265" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__y__at__x__grp_1ga7b7f2a9e506760f69854b5dce9ab275c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_y_at_x</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Line_2&lt; Kernel &gt; &amp;h1, const CGAL::Line_2&lt; Kernel &gt; &amp;h2)</argsstring>
        <name>compare_y_at_x</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="55">$ y$</formula>-coordinates of the vertical projection of <computeroutput>p</computeroutput> on <computeroutput>h1</computeroutput> and on <computeroutput>h2</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>See Figure <ref refid="group__compare__y__at__x__grp_1figcompareyatx" kindref="member">figcompareyatx</ref> (e).</para><para><simplesect kind="pre"><para><computeroutput>h1</computeroutput> and <computeroutput>h2</computeroutput> are not vertical. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1276" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__y__at__x__grp_1gaf2f8b7114e12573f676e8e0302e54500" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_y_at_x</definition>
        <argsstring>(const CGAL::Line_2&lt; Kernel &gt; &amp;l1, const CGAL::Line_2&lt; Kernel &gt; &amp;l2, const CGAL::Line_2&lt; Kernel &gt; &amp;h)</argsstring>
        <name>compare_y_at_x</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>Let <computeroutput>p</computeroutput> be the <computeroutput>intersection</computeroutput> of lines <computeroutput>l1</computeroutput> and <computeroutput>l2</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>This function compares the <formula id="55">$ y$</formula>-coordinates of <computeroutput>p</computeroutput> and the vertical projection of <computeroutput>p</computeroutput> on <computeroutput>h</computeroutput> See Figure <ref refid="group__compare__y__at__x__grp_1figcompareyatx" kindref="member">figcompareyatx</ref> (f).</para><para><simplesect kind="pre"><para><computeroutput>l1</computeroutput>, <computeroutput>l2</computeroutput> intersect and <computeroutput>h</computeroutput> is not vertical. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1290" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__y__at__x__grp_1gaff3351d5c7507c74b3e48e8b1e4c3a71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_y_at_x</definition>
        <argsstring>(const CGAL::Line_2&lt; Kernel &gt; &amp;l1, const CGAL::Line_2&lt; Kernel &gt; &amp;l2, const CGAL::Line_2&lt; Kernel &gt; &amp;h1, const CGAL::Line_2&lt; Kernel &gt; &amp;h2)</argsstring>
        <name>compare_y_at_x</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
<para>Let <computeroutput>p</computeroutput> be the <computeroutput>intersection</computeroutput> of lines <computeroutput>l1</computeroutput> and <computeroutput>l2</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>This function compares the <formula id="55">$ y$</formula>-coordinates of the vertical projection of <computeroutput>p</computeroutput> on <computeroutput>h1</computeroutput> and on <computeroutput>h2</computeroutput>. See Figure <ref refid="group__compare__y__at__x__grp_1figcompareyatx" kindref="member">figcompareyatx</ref> (g). <simplesect kind="pre"><para><computeroutput>l1</computeroutput> and <computeroutput>l2</computeroutput> intersect; <computeroutput>h1</computeroutput> and <computeroutput>h2</computeroutput> are not vertical. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1302" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__y__at__x__grp_1ga05b0ffd47157a5f59142243b13961edf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_y_at_x</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Segment_2&lt; Kernel &gt; &amp;s)</argsstring>
        <name>compare_y_at_x</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Segment__2" kindref="compound">CGAL::Segment_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="55">$ y$</formula>-coordinates of <computeroutput>p</computeroutput> and the vertical projection of <computeroutput>p</computeroutput> on <computeroutput>s</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>s</computeroutput> is vertical, then return <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469a5f224784e56ca565837a5d6d268fe078" kindref="member">CGAL::EQUAL</ref></computeroutput> when <computeroutput>p</computeroutput> lies on <computeroutput>s</computeroutput>, <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab925c6b1ff8cd0bdea7f31fe18d3c38b" kindref="member">CGAL::SMALLER</ref></computeroutput> when <computeroutput>p</computeroutput> lies under {s}, and <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab25bdbfd193e9ea35187a4f46e7d6fcd" kindref="member">CGAL::LARGER</ref></computeroutput> otherwise. <simplesect kind="pre"><para><computeroutput>p</computeroutput> is within the x range of <computeroutput>s</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1315" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__y__at__x__grp_1ga93fab9114bbea4402fc7c26825347fa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_y_at_x</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Segment_2&lt; Kernel &gt; &amp;s1, const CGAL::Segment_2&lt; Kernel &gt; &amp;s2)</argsstring>
        <name>compare_y_at_x</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Segment__2" kindref="compound">CGAL::Segment_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Segment__2" kindref="compound">CGAL::Segment_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="55">$ y$</formula>-coordinates of the vertical projection of <computeroutput>p</computeroutput> on <computeroutput>s1</computeroutput> and on <computeroutput>s2</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>s1</computeroutput> or <computeroutput>s2</computeroutput> is vertical, then return <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469a5f224784e56ca565837a5d6d268fe078" kindref="member">CGAL::EQUAL</ref></computeroutput> if they intersect, otherwise return <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab925c6b1ff8cd0bdea7f31fe18d3c38b" kindref="member">CGAL::SMALLER</ref></computeroutput> if <computeroutput>s1</computeroutput> lies below <computeroutput>s2</computeroutput>, and return <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab25bdbfd193e9ea35187a4f46e7d6fcd" kindref="member">CGAL::LARGER</ref></computeroutput> otherwise. <simplesect kind="pre"><para><computeroutput>p</computeroutput> is within the x range of <computeroutput>s1</computeroutput> and <computeroutput>s2</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1327" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compary__y__linear__grp_1ga62a44c9df055aa0ae83ea84455152f8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_y</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q)</argsstring>
        <name>compare_y</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>compares <ref refid="structCGAL_1_1Cartesian" kindref="compound">Cartesian</ref> <formula id="55">$ y$</formula>-coordinates of <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1390" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compary__y__linear__grp_1gae1e416199adc1805b06c7ea9389829f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_y</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q)</argsstring>
        <name>compare_y</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>compares <ref refid="structCGAL_1_1Cartesian" kindref="compound">Cartesian</ref> <formula id="55">$ y$</formula>-coordinates of <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1396" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compary__y__linear__grp_1ga07e78831d6ed3f5b614d5608ce5c9b60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_y</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Line_2&lt; Kernel &gt; &amp;l1, const CGAL::Line_2&lt; Kernel &gt; &amp;l2)</argsstring>
        <name>compare_y</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l2</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="55">$ y$</formula>-coordinates of <computeroutput>p</computeroutput> and the intersection of lines <computeroutput>l1</computeroutput> and <computeroutput>l2</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>See Figure <ref refid="group__compary__y__linear__grp_1figcompare13" kindref="member">figcompare13</ref> (a). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1405" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compary__y__linear__grp_1ga9768badf93898701d6f95101bd9befc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_y</definition>
        <argsstring>(const CGAL::Line_2&lt; Kernel &gt; &amp;l, const CGAL::Line_2&lt; Kernel &gt; &amp;h1, const CGAL::Line_2&lt; Kernel &gt; &amp;h2)</argsstring>
        <name>compare_y</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="55">$ y$</formula>-coordinates of the intersection of line <computeroutput>l</computeroutput> with line <computeroutput>h1</computeroutput> and with line <computeroutput>h2</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>See Figure <ref refid="group__compary__y__linear__grp_1figcompare13" kindref="member">figcompare13</ref> (b). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1415" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compary__y__linear__grp_1ga942435b4ff4a3ed0907b3c745e1c377f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_y</definition>
        <argsstring>(const CGAL::Line_2&lt; Kernel &gt; &amp;l1, const CGAL::Line_2&lt; Kernel &gt; &amp;l2, const CGAL::Line_2&lt; Kernel &gt; &amp;h1, const CGAL::Line_2&lt; Kernel &gt; &amp;h2)</argsstring>
        <name>compare_y</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="55">$ y$</formula>-coordinates of the intersection of lines <computeroutput>l1</computeroutput> and <computeroutput>l2</computeroutput> and the intersection of lines <computeroutput>h1</computeroutput> and <computeroutput>h2</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>See Figure <ref refid="group__compary__y__linear__grp_1figcompare13" kindref="member">figcompare13</ref> (c). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1424" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__y__circular__grp_1ga37138f9ce1d4a565f4c73c30c3c68e81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_y</definition>
        <argsstring>(const CGAL::Circular_arc_point_2&lt; CircularKernel &gt; &amp;p, const CGAL::Circular_arc_point_2&lt; CircularKernel &gt; &amp;q)</argsstring>
        <name>compare_y</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Circular__arc__point__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CGAL::Circular_arc_point_2</ref>&lt; <ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Circular__arc__point__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CGAL::Circular_arc_point_2</ref>&lt; <ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="55">$ y$</formula>-coordinates of <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1446" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__y__circular__grp_1gaac34b0fd69305ef5b845bcf1f3246bcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_y</definition>
        <argsstring>(const CGAL::Circular_arc_point_2&lt; CircularKernel &gt; &amp;p, const CGAL::Point_2&lt; CircularKernel &gt; &amp;q)</argsstring>
        <name>compare_y</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Circular__arc__point__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CGAL::Circular_arc_point_2</ref>&lt; <ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classCircularKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_2.tag">CircularKernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="55">$ y$</formula>-coordinates of <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1453" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__y__spherical__grp_1ga369f42a99f1823358d3d295e26875e3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_y</definition>
        <argsstring>(const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;p, const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;q)</argsstring>
        <name>compare_y</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Circular__arc__point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">CGAL::Circular_arc_point_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Circular__arc__point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">CGAL::Circular_arc_point_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="55">$ y$</formula>-coordinates of <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1473" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__y__spherical__grp_1gaa91ade50fb9ca7e99a7b4a23b92b497e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_y</definition>
        <argsstring>(const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;p, const CGAL::Point_3&lt; SphericalKernel &gt; &amp;q)</argsstring>
        <name>compare_y</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Circular__arc__point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">CGAL::Circular_arc_point_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="55">$ y$</formula>-coordinates of <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1480" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__xyz__linear__grp_1ga85c912016468489da1decfb7a85264f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_xyz</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q)</argsstring>
        <name>compare_xyz</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Compares the <ref refid="structCGAL_1_1Cartesian" kindref="compound">Cartesian</ref> coordinates of points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> lexicographically in <formula id="57">$ xyz$</formula> order: first <formula id="49">$ x$</formula>-coordinates are compared, if they are equal, <formula id="55">$ y$</formula>-coordinates are compared, and if both <formula id="49">$ x$</formula>- and <formula id="55">$ y$</formula>- coordinate are equal, <formula id="56">$ z$</formula>-coordinates are compared. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1517" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__xyz__spherical__grp_1ga7e3a1f8a22e0bd774570d2fea9810e2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_xyz</definition>
        <argsstring>(const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;p, const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;q)</argsstring>
        <name>compare_xyz</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Circular__arc__point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">CGAL::Circular_arc_point_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Circular__arc__point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">CGAL::Circular_arc_point_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Compares the <ref refid="structCGAL_1_1Cartesian" kindref="compound">Cartesian</ref> coordinates of points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> lexicographically. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1536" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__xyz__spherical__grp_1ga850572d69328843cf26f9363bd3bc272" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_xyz</definition>
        <argsstring>(const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;p, const CGAL::Point_3&lt; SphericalKernel &gt; &amp;q)</argsstring>
        <name>compare_xyz</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Circular__arc__point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">CGAL::Circular_arc_point_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Compares the <ref refid="structCGAL_1_1Cartesian" kindref="compound">Cartesian</ref> coordinates of points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> lexicographically. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1544" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__z__linear__grp_1ga369456c72206d97ab114cd9f2e7f4af3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_z</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q)</argsstring>
        <name>compare_z</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="56">$ z$</formula>-coordinates of <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1577" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__z__spherical__grp_1gaf616ffb0fcc52773f71743c29e842dc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_z</definition>
        <argsstring>(const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;p, const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;q)</argsstring>
        <name>compare_z</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Circular__arc__point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">CGAL::Circular_arc_point_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Circular__arc__point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">CGAL::Circular_arc_point_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="56">$ z$</formula>-coordinates of <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1604" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__z__spherical__grp_1gab46d0e224d7010de3ee0b2150e0b7fe0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_z</definition>
        <argsstring>(const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;p, const CGAL::Point_3&lt; SphericalKernel &gt; &amp;q)</argsstring>
        <name>compare_z</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Circular__arc__point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">CGAL::Circular_arc_point_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classSphericalKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circular_kernel_3.tag">SphericalKernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="56">$ z$</formula>-coordinates of <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1611" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__yx__grp_1gaed9bd83a324097061c5b3825ed663258" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_yx</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q)</argsstring>
        <name>compare_yx</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Compares the <ref refid="structCGAL_1_1Cartesian" kindref="compound">Cartesian</ref> coordinates of points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> lexicographically in <formula id="66">$ yx$</formula> order: first <formula id="55">$ y$</formula>-coordinates are compared, if they are equal, <formula id="49">$ x$</formula>-coordinates are compared. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1634" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__coplanar__grp_1ga79b3b4bcb01bf81048486dfd59a22c63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::coplanar</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r, const CGAL::Point_3&lt; Kernel &gt; &amp;s)</argsstring>
        <name>coplanar</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, if <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>r</computeroutput>, and <computeroutput>s</computeroutput> are coplanar. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1649" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__coplanar__orientation__grp_1gaf6fa77ad91160fdbe406db839e87f543" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member">Orientation</ref></type>
        <definition>Orientation CGAL::coplanar_orientation</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r, const CGAL::Point_3&lt; Kernel &gt; &amp;s)</argsstring>
        <name>coplanar_orientation</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Let <computeroutput>P</computeroutput> be the plane defined by the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Note that the order defines the orientation of <computeroutput>P</computeroutput>. The function computes the orientation of points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>s</computeroutput> in <computeroutput>P</computeroutput>: Iff <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>s</computeroutput> are collinear, <computeroutput><ref refid="group__kernel__enums_1ga84f760a315c4f27cb4059db8a3a1159e" kindref="member">CGAL::COLLINEAR</ref></computeroutput> is returned. Iff <computeroutput>P</computeroutput> and the plane defined by <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>s</computeroutput> have the same orientation, <computeroutput><ref refid="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a963eefff16725de743f4022f4e23fc0d" kindref="member">CGAL::POSITIVE</ref></computeroutput> is returned; otherwise <computeroutput><ref refid="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a3aef56502334293e3ad25e166d74bb2a" kindref="member">CGAL::NEGATIVE</ref></computeroutput> is returned. <simplesect kind="pre"><para><computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>r</computeroutput>, and <computeroutput>s</computeroutput> are coplanar and <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput> are not collinear. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1674" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__coplanar__orientation__grp_1gae6eea9e4c75a610511866cf3eb4ae139" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member">Orientation</ref></type>
        <definition>Orientation CGAL::coplanar_orientation</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r)</argsstring>
        <name>coplanar_orientation</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>If <computeroutput>p,q,r</computeroutput> are collinear, then <computeroutput><ref refid="group__kernel__enums_1ga84f760a315c4f27cb4059db8a3a1159e" kindref="member">CGAL::COLLINEAR</ref></computeroutput> is returned. </para>        </briefdescription>
        <detaileddescription>
<para>If not, then <computeroutput>p,q,r</computeroutput> define a plane <computeroutput>p</computeroutput>. The return value in this case is either <computeroutput><ref refid="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a963eefff16725de743f4022f4e23fc0d" kindref="member">CGAL::POSITIVE</ref></computeroutput> or <computeroutput><ref refid="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a3aef56502334293e3ad25e166d74bb2a" kindref="member">CGAL::NEGATIVE</ref></computeroutput>, but we don&apos;t specify it explicitly. However, we guarantee that all calls to this predicate over 3 points in <computeroutput>p</computeroutput> will return a coherent orientation if considered a 2D orientation in <computeroutput>p</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1687" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__coplanar__side__of__bounded__circle__grp_1gab02e2952353223cde67697df3ac84ec5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1gaf6030e89dadcc1f45369b0cdc5d9e111" kindref="member">Bounded_side</ref></type>
        <definition>Bounded_side CGAL::coplanar_side_of_bounded_circle</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r, const CGAL::Point_3&lt; Kernel &gt; &amp;s)</argsstring>
        <name>coplanar_side_of_bounded_circle</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>returns the bounded side of the circle defined by <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput> on which <computeroutput>s</computeroutput> lies. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>r</computeroutput>, and <computeroutput>s</computeroutput> are coplanar and <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput> are not collinear. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1707" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__cross__product__grp_1gaee9589212473a6db9bfbef33b0cd2eea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Vector_3&lt;Kernel&gt; CGAL::cross_product</definition>
        <argsstring>(const CGAL::Vector_3&lt; Kernel &gt; &amp;u, const CGAL::Vector_3&lt; Kernel &gt; &amp;v)</argsstring>
        <name>cross_product</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns the cross product of <computeroutput>u</computeroutput> and <computeroutput>v</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1723" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__determinant__grp_1ga43b04b357a2c01b2e0f1f5775fc5ebb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref></type>
        <definition>Kernel::FT CGAL::determinant</definition>
        <argsstring>(const CGAL::Vector_2&lt; Kernel &gt; &amp;v, const CGAL::Vector_2&lt; Kernel &gt; &amp;w)</argsstring>
        <name>determinant</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__2" kindref="compound">CGAL::Vector_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__2" kindref="compound">CGAL::Vector_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>returns the determinant of <computeroutput>v</computeroutput> and <computeroutput>w</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1740" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__determinant__grp_1ga607a85e1ce137513fa2904ff63290401" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref></type>
        <definition>Kernel::FT CGAL::determinant</definition>
        <argsstring>(const CGAL::Vector_3&lt; Kernel &gt; &amp;u, const CGAL::Vector_3&lt; Kernel &gt; &amp;v, const CGAL::Vector_3&lt; Kernel &gt; &amp;w)</argsstring>
        <name>determinant</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>returns the determinant of <computeroutput>u</computeroutput>, <computeroutput>v</computeroutput> and <computeroutput>w</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1747" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__equidistant__line__grp_1ga20d16e7607aed82b93665dc2db658136" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Line__3" kindref="compound">CGAL::Line_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Line_3&lt;Kernel&gt; CGAL::equidistant_line</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r)</argsstring>
        <name>equidistant_line</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>constructs the line which is at the same distance from the three points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput> and <computeroutput>r</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>p</computeroutput>, <computeroutput>q</computeroutput> and <computeroutput>r</computeroutput> are not collinear. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1776" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__has__larger__distance__to__point__grp_1ga1c6f2c3521bc70d4f8ed8eb88762a07e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::has_larger_distance_to_point</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r)</argsstring>
        <name>has_larger_distance_to_point</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff the distance between <computeroutput>q</computeroutput> and <computeroutput>p</computeroutput> is larger than the distance between <computeroutput>r</computeroutput> and <computeroutput>p</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1801" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__has__larger__distance__to__point__grp_1ga8c05b8e965b22c75873c4ba0c9e0b9ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::has_larger_distance_to_point</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r)</argsstring>
        <name>has_larger_distance_to_point</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff the distance between <computeroutput>q</computeroutput> and <computeroutput>p</computeroutput> is larger than the distance between <computeroutput>r</computeroutput> and <computeroutput>p</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1812" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__has__larger__signed__distance__to__line__grp_1ga6b3cb9555a8bea981e8283bd456d123c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::has_larger_signed_distance_to_line</definition>
        <argsstring>(const CGAL::Line_2&lt; Kernel &gt; &amp;l, const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q)</argsstring>
        <name>has_larger_signed_distance_to_line</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff the signed distance of <computeroutput>p</computeroutput> and <computeroutput>l</computeroutput> is larger than the signed distance of <computeroutput>q</computeroutput> and <computeroutput>l</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1838" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__has__larger__signed__distance__to__line__grp_1ga9d810a2961d0c785e970893920085d5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::has_larger_signed_distance_to_line</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r, const CGAL::Point_2&lt; Kernel &gt; &amp;s)</argsstring>
        <name>has_larger_signed_distance_to_line</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff the signed distance of <computeroutput>r</computeroutput> and <computeroutput>l</computeroutput> is larger than the signed distance of <computeroutput>s</computeroutput> and <computeroutput>l</computeroutput>, where <computeroutput>l</computeroutput> is the directed line through points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1850" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__has__larger__signed__distance__to__plane__grp_1ga645bab7e870b124eb8ab9fe93ef47dfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::has_larger_signed_distance_to_plane</definition>
        <argsstring>(const CGAL::Plane_3&lt; Kernel &gt; &amp;h, const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q)</argsstring>
        <name>has_larger_signed_distance_to_plane</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Plane__3" kindref="compound">CGAL::Plane_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff the signed distance of <computeroutput>p</computeroutput> and <computeroutput>h</computeroutput> is larger than the signed distance of <computeroutput>q</computeroutput> and <computeroutput>h</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1877" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__has__larger__signed__distance__to__plane__grp_1ga44f687b45a7ea420a2b84d7a55a46b3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::has_larger_signed_distance_to_plane</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r, const CGAL::Point_3&lt; Kernel &gt; &amp;s, const CGAL::Point_3&lt; Kernel &gt; &amp;t)</argsstring>
        <name>has_larger_signed_distance_to_plane</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff the signed distance of <computeroutput>s</computeroutput> and <computeroutput>h</computeroutput> is larger than the signed distance of <computeroutput>t</computeroutput> and <computeroutput>h</computeroutput>, where <computeroutput>h</computeroutput> is the oriented plane through <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput> and <computeroutput>r</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1889" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__has__smaller__distance__to__point__grp_1gaced5841787740fba7ee44a531284a128" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::has_smaller_distance_to_point</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r)</argsstring>
        <name>has_smaller_distance_to_point</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff the distance between <computeroutput>q</computeroutput> and <computeroutput>p</computeroutput> is smaller than the distance between <computeroutput>r</computeroutput> and <computeroutput>p</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1916" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__has__smaller__distance__to__point__grp_1ga8c3c1514f7cebaee0645e47a476538d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::has_smaller_distance_to_point</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r)</argsstring>
        <name>has_smaller_distance_to_point</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff the distance between <computeroutput>q</computeroutput> and <computeroutput>p</computeroutput> is smaller than the distance between <computeroutput>r</computeroutput> and <computeroutput>p</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1927" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__has__smaller__signed__distance__to__line__grp_1gae507fea54d14e701c56de815d9730444" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::has_smaller_signed_distance_to_line</definition>
        <argsstring>(const CGAL::Line_2&lt; Kernel &gt; &amp;l, const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q)</argsstring>
        <name>has_smaller_signed_distance_to_line</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff the signed distance of <computeroutput>p</computeroutput> and <computeroutput>l</computeroutput> is smaller than the signed distance of <computeroutput>q</computeroutput> and <computeroutput>l</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1952" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__has__smaller__signed__distance__to__line__grp_1ga70ddaf8025c685beda7d33f61c3b36c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::has_smaller_signed_distance_to_line</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r, const CGAL::Point_2&lt; Kernel &gt; &amp;s)</argsstring>
        <name>has_smaller_signed_distance_to_line</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff the signed distance of <computeroutput>r</computeroutput> and <computeroutput>l</computeroutput> is smaller than the signed distance of <computeroutput>s</computeroutput> and <computeroutput>l</computeroutput>, where <computeroutput>l</computeroutput> is the oriented line through <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1964" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__has__smaller__signed__distance__to__plane__grp_1ga4c2f5b7428e8753d023e75e99bff1ce6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::has_smaller_signed_distance_to_plane</definition>
        <argsstring>(const CGAL::Plane_3&lt; Kernel &gt; &amp;h, const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q)</argsstring>
        <name>has_smaller_signed_distance_to_plane</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Plane__3" kindref="compound">CGAL::Plane_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff the signed distance of <computeroutput>p</computeroutput> and <computeroutput>h</computeroutput> is smaller than the signed distance of <computeroutput>q</computeroutput> and <computeroutput>h</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1990" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__has__smaller__signed__distance__to__plane__grp_1gacadf351cba0ccd154a2943dbb8b0e8c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::has_smaller_signed_distance_to_plane</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r, const CGAL::Point_3&lt; Kernel &gt; &amp;s, const CGAL::Point_3&lt; Kernel &gt; &amp;t)</argsstring>
        <name>has_smaller_signed_distance_to_plane</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff the signed distance of <computeroutput>p</computeroutput> and <computeroutput>h</computeroutput> is smaller than the signed distance of <computeroutput>q</computeroutput> and <computeroutput>h</computeroutput>, where <computeroutput>h</computeroutput> is the oriented plane through <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput> and <computeroutput>r</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2002" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__l__infinity__distance__grp_1ga9e1407df1c6b4f23019b2e97cd4a390a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref></type>
        <definition>Kernel::FT CGAL::l_infinity_distance</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q)</argsstring>
        <name>l_infinity_distance</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>returns the distance between <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> in the L-infinity metric. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2032" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__l__infinity__distance__grp_1gaf9f6d0f4e1243856dac35c168f6508c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref></type>
        <definition>Kernel::FT CGAL::l_infinity_distance</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q)</argsstring>
        <name>l_infinity_distance</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>returns the distance between <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> in the L-infinity metric. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2039" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__left__turn__grp_1ga54cc2a847df7133bee7fd61c7b236dcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::left_turn</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r)</argsstring>
        <name>left_turn</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput> form a left turn. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2056" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lexicographically__xy__larger__grp_1ga0cf066e4d5572a493c7c9f9ff58c19a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::lexicographically_xy_larger</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q)</argsstring>
        <name>lexicographically_xy_larger</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff <computeroutput>p</computeroutput> is lexicographically larger than <computeroutput>q</computeroutput> with respect to <formula id="65">$ xy$</formula> order. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2077" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lexicographically__xy__larger__or__equal__grp_1gad643d05f3cce01489b600ac5377e950e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::lexicographically_xy_larger_or_equal</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q)</argsstring>
        <name>lexicographically_xy_larger_or_equal</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff <computeroutput>p</computeroutput> is lexicographically not smaller than <computeroutput>q</computeroutput> with respect to <formula id="65">$ xy$</formula> order. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2099" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lexicographically__xy__smaller__grp_1gab4ac1479fab3f0e58debc845316a52e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::lexicographically_xy_smaller</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q)</argsstring>
        <name>lexicographically_xy_smaller</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff <computeroutput>p</computeroutput> is lexicographically smaller than <computeroutput>q</computeroutput> with respect to <formula id="65">$ xy$</formula> order. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2119" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lexicographically__xy__smaller__or__equal__grp_1ga44153edeb60da6f895ce5342f277f630" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::lexicographically_xy_smaller_or_equal</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q)</argsstring>
        <name>lexicographically_xy_smaller_or_equal</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff <computeroutput>p</computeroutput> is lexicographically not larger than <computeroutput>q</computeroutput> with respect to <formula id="65">$ xy$</formula> order. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2140" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lexicographically__xyz__smaller__grp_1ga8bf93a0885a3a693c401cd229a52c633" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::lexicographically_xyz_smaller</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q)</argsstring>
        <name>lexicographically_xyz_smaller</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff <computeroutput>p</computeroutput> is lexicographically smaller than <computeroutput>q</computeroutput> with respect to <formula id="57">$ xyz$</formula> order. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lexicographically__xyz__smaller__or__equal__grp_1ga4ca673bb805f17d7f3b597e94108a113" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::lexicographically_xyz_smaller_or_equal</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q)</argsstring>
        <name>lexicographically_xyz_smaller_or_equal</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff <computeroutput>p</computeroutput> is lexicographically not larger than <computeroutput>q</computeroutput> with respect to <formula id="57">$ xyz$</formula> order. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2176" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__max__vertex__grp_1ga524ef741dc9c17ed04248f2ec856a2c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_2&lt;Kernel&gt; CGAL::max_vertex</definition>
        <argsstring>(const CGAL::Iso_rectangle_2&lt; Kernel &gt; &amp;ir)</argsstring>
        <name>max_vertex</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Iso__rectangle__2" kindref="compound">CGAL::Iso_rectangle_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>computes the vertex with the lexicographically largest coordinates of the iso rectangle <computeroutput>ir</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2189" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__max__vertex__grp_1gab73385fc8321ef1c83402d812c862c25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_3&lt;Kernel&gt; CGAL::max_vertex</definition>
        <argsstring>(const CGAL::Iso_cuboid_3&lt; Kernel &gt; &amp;ic)</argsstring>
        <name>max_vertex</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Iso__cuboid__3" kindref="compound">CGAL::Iso_cuboid_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>ic</declname>
        </param>
        <briefdescription>
<para>computes the vertex with the lexicographically largest coordinates of the iso cuboid <computeroutput>ic</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2195" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__midpoint__grp_1ga6b9f14a470dfaacbfa833177762e4460" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_2&lt;Kernel&gt; CGAL::midpoint</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q)</argsstring>
        <name>midpoint</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>computes the midpoint of the segment <computeroutput>pq</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2207" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__midpoint__grp_1gad21dd777e2bba3851ec056c922e12153" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_3&lt;Kernel&gt; CGAL::midpoint</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q)</argsstring>
        <name>midpoint</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>computes the midpoint of the segment <computeroutput>pq</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2214" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__min__vertex__grp_1ga046f661a4784c473991b092c686d84c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_2&lt;Kernel&gt; CGAL::min_vertex</definition>
        <argsstring>(const CGAL::Iso_rectangle_2&lt; Kernel &gt; &amp;ir)</argsstring>
        <name>min_vertex</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Iso__rectangle__2" kindref="compound">CGAL::Iso_rectangle_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>computes the vertex with the lexicographically smallest coordinates of the iso rectangle <computeroutput>ir</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2226" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__min__vertex__grp_1ga84641a77a57ae2dbbcd9a7a8b4553575" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_3&lt;Kernel&gt; CGAL::min_vertex</definition>
        <argsstring>(const CGAL::Iso_cuboid_3&lt; Kernel &gt; &amp;ic)</argsstring>
        <name>min_vertex</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Iso__cuboid__3" kindref="compound">CGAL::Iso_cuboid_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>ic</declname>
        </param>
        <briefdescription>
<para>computes the vertex with the lexicographically smallest coordinates of the iso cuboid <computeroutput>ic</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2232" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__normal__grp_1ga49a712e57564602ad468a3888784e971" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Vector_3&lt;Kernel&gt; CGAL::normal</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r)</argsstring>
        <name>normal</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>computes the normal vector for the vectors <computeroutput>q-p</computeroutput> and <computeroutput>r-p</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput> must not be collinear. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2245" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__orientation__grp_1ga91d9866cfde916ba70e5dbc596176d9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member">Orientation</ref></type>
        <definition>Orientation CGAL::orientation</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r)</argsstring>
        <name>orientation</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput><ref refid="group__kernel__enums_1ga803e5969acd01d45aec5acaee6f82883" kindref="member">CGAL::LEFT_TURN</ref></computeroutput>, if <computeroutput>r</computeroutput> lies to the left of the oriented line <computeroutput>l</computeroutput> defined by <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>, returns <computeroutput><ref refid="group__kernel__enums_1ga1f9d8cac74201e22d484b10384fe3bf9" kindref="member">CGAL::RIGHT_TURN</ref></computeroutput> if <computeroutput>r</computeroutput> lies to the right of <computeroutput>l</computeroutput>, and returns <computeroutput><ref refid="group__kernel__enums_1ga84f760a315c4f27cb4059db8a3a1159e" kindref="member">CGAL::COLLINEAR</ref></computeroutput> if <computeroutput>r</computeroutput> lies on <computeroutput>l</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2264" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__orientation__grp_1gaecb33819c6e8259cec78c457a7650383" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member">Orientation</ref></type>
        <definition>Orientation CGAL::orientation</definition>
        <argsstring>(const CGAL::Vector_2&lt; Kernel &gt; &amp;u, const CGAL::Vector_2&lt; Kernel &gt; &amp;v)</argsstring>
        <name>orientation</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__2" kindref="compound">CGAL::Vector_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__2" kindref="compound">CGAL::Vector_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput><ref refid="group__kernel__enums_1ga803e5969acd01d45aec5acaee6f82883" kindref="member">CGAL::LEFT_TURN</ref></computeroutput> if <computeroutput>u</computeroutput> and <computeroutput>v</computeroutput> form a left turn, returns <computeroutput><ref refid="group__kernel__enums_1ga1f9d8cac74201e22d484b10384fe3bf9" kindref="member">CGAL::RIGHT_TURN</ref></computeroutput> if <computeroutput>u</computeroutput> and <computeroutput>v</computeroutput> form a right turn, and returns <computeroutput><ref refid="group__kernel__enums_1ga84f760a315c4f27cb4059db8a3a1159e" kindref="member">CGAL::COLLINEAR</ref></computeroutput> if <computeroutput>u</computeroutput> and <computeroutput>v</computeroutput> are collinear. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2274" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__orientation__grp_1ga0a65d09ea2af5f9bcfececb9aba9ca35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member">Orientation</ref></type>
        <definition>Orientation CGAL::orientation</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r, const CGAL::Point_3&lt; Kernel &gt; &amp;s)</argsstring>
        <name>orientation</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput><ref refid="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a963eefff16725de743f4022f4e23fc0d" kindref="member">CGAL::POSITIVE</ref></computeroutput>, if <computeroutput>s</computeroutput> lies on the positive side of the oriented plane <computeroutput>h</computeroutput> defined by <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput>, returns <computeroutput><ref refid="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a3aef56502334293e3ad25e166d74bb2a" kindref="member">CGAL::NEGATIVE</ref></computeroutput> if <computeroutput>s</computeroutput> lies on the negative side of <computeroutput>h</computeroutput>, and returns <computeroutput><ref refid="group__kernel__enums_1ga56587f3c15032c9127a9fe81c038b0d7" kindref="member">CGAL::COPLANAR</ref></computeroutput> if <computeroutput>s</computeroutput> lies on <computeroutput>h</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2284" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__orientation__grp_1ga565faf2582847419e36f177af821011e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member">Orientation</ref></type>
        <definition>Orientation CGAL::orientation</definition>
        <argsstring>(const CGAL::Vector_3&lt; Kernel &gt; &amp;u, const CGAL::Vector_3&lt; Kernel &gt; &amp;v, const CGAL::Vector_3&lt; Kernel &gt; &amp;w)</argsstring>
        <name>orientation</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput><ref refid="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a3aef56502334293e3ad25e166d74bb2a" kindref="member">CGAL::NEGATIVE</ref></computeroutput> if <computeroutput>u</computeroutput>, <computeroutput>v</computeroutput> and <computeroutput>w</computeroutput> are negatively oriented, <computeroutput><ref refid="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a963eefff16725de743f4022f4e23fc0d" kindref="member">CGAL::POSITIVE</ref></computeroutput> if <computeroutput>u</computeroutput>, <computeroutput>v</computeroutput> and <computeroutput>w</computeroutput> are positively oriented, and <computeroutput><ref refid="group__kernel__enums_1ga56587f3c15032c9127a9fe81c038b0d7" kindref="member">CGAL::COPLANAR</ref></computeroutput> if <computeroutput>u</computeroutput>, <computeroutput>v</computeroutput> and <computeroutput>w</computeroutput> are coplanar. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2295" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__orthogonal__vector__grp_1ga7e2553fd4f2427fccd2bf44f27a1fae6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Vector_3&lt;Kernel&gt; CGAL::orthogonal_vector</definition>
        <argsstring>(const CGAL::Plane_3&lt; Kernel &gt; &amp;p)</argsstring>
        <name>orthogonal_vector</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Plane__3" kindref="compound">CGAL::Plane_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>computes an orthogonal vector of the plane <computeroutput>p</computeroutput>, which is directed to the positive side of this plane. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2313" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__orthogonal__vector__grp_1gae05160c74577f411299a86e8357bada8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Vector_3&lt;Kernel&gt; CGAL::orthogonal_vector</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r)</argsstring>
        <name>orthogonal_vector</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>computes an orthogonal vector of the plane defined by <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput> and <computeroutput>r</computeroutput>, which is directed to the positive side of this plane. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2320" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__parallel__grp_1gaf8b045ed5b2d7e892f6371ff6093ce5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::parallel</definition>
        <argsstring>(const CGAL::Line_2&lt; Kernel &gt; &amp;l1, const CGAL::Line_2&lt; Kernel &gt; &amp;l2)</argsstring>
        <name>parallel</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l2</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, if <computeroutput>l1</computeroutput> and <computeroutput>l2</computeroutput> are parallel or if one of those (or both) is degenerate. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2337" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__parallel__grp_1ga40204dc3851914ada523ba7a02033ba2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::parallel</definition>
        <argsstring>(const CGAL::Ray_2&lt; Kernel &gt; &amp;r1, const CGAL::Ray_2&lt; Kernel &gt; &amp;r2)</argsstring>
        <name>parallel</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Ray__2" kindref="compound">CGAL::Ray_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Ray__2" kindref="compound">CGAL::Ray_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, if <computeroutput>r1</computeroutput> and <computeroutput>r2</computeroutput> are parallel or if one of those (or both) is degenerate. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2345" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__parallel__grp_1gae0d355e2a6bfdabee4f756eb8ba6b99c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::parallel</definition>
        <argsstring>(const CGAL::Segment_2&lt; Kernel &gt; &amp;s1, const CGAL::Segment_2&lt; Kernel &gt; &amp;s2)</argsstring>
        <name>parallel</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Segment__2" kindref="compound">CGAL::Segment_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Segment__2" kindref="compound">CGAL::Segment_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, if <computeroutput>s1</computeroutput> and <computeroutput>s2</computeroutput> are parallel or if one of those (or both) is degenerate. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2353" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__parallel__grp_1gaeb6bfe961d6a3c29470b828000437695" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::parallel</definition>
        <argsstring>(const CGAL::Line_3&lt; Kernel &gt; &amp;l1, const CGAL::Line_3&lt; Kernel &gt; &amp;l2)</argsstring>
        <name>parallel</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__3" kindref="compound">CGAL::Line_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__3" kindref="compound">CGAL::Line_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l2</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, if <computeroutput>l1</computeroutput> and <computeroutput>l2</computeroutput> are parallel or if one of those (or both) is degenerate. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2361" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__parallel__grp_1ga55cbad9fbbb52748d75a1272184207b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::parallel</definition>
        <argsstring>(const CGAL::Plane_3&lt; Kernel &gt; &amp;h1, const CGAL::Plane_3&lt; Kernel &gt; &amp;h2)</argsstring>
        <name>parallel</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Plane__3" kindref="compound">CGAL::Plane_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Plane__3" kindref="compound">CGAL::Plane_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, if <computeroutput>h1</computeroutput> and <computeroutput>h2</computeroutput> are parallel or if one of those (or both) is degenerate. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2369" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__parallel__grp_1gae16f0e8fffcdff942d0a2e8a8fda7d9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::parallel</definition>
        <argsstring>(const CGAL::Ray_3&lt; Kernel &gt; &amp;r1, const CGAL::Ray_3&lt; Kernel &gt; &amp;r2)</argsstring>
        <name>parallel</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Ray__3" kindref="compound">CGAL::Ray_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Ray__3" kindref="compound">CGAL::Ray_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, if <computeroutput>r1</computeroutput> and <computeroutput>r2</computeroutput> are parallel or if one of those (or both) is degenerate. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2377" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__parallel__grp_1ga99661a71ebf67dc44fdbd2011177ae01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::parallel</definition>
        <argsstring>(const CGAL::Segment_3&lt; Kernel &gt; &amp;s1, const CGAL::Segment_3&lt; Kernel &gt; &amp;s2)</argsstring>
        <name>parallel</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Segment__3" kindref="compound">CGAL::Segment_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Segment__3" kindref="compound">CGAL::Segment_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, if <computeroutput>s1</computeroutput> and <computeroutput>s2</computeroutput> are parallel or if one of those (or both) is degenerate. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2385" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__radical__plane__grp_1gae3ea9d8391c125440efbdc2de99d4022" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Plane__3" kindref="compound">CGAL::Plane_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Plane_3&lt;Kernel&gt; CGAL::radical_plane</definition>
        <argsstring>(const CGAL::Sphere_3&lt; Kernel &gt; &amp;s1, const CGAL::Sphere_3&lt; Kernel &gt; &amp;s2)</argsstring>
        <name>radical_plane</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Sphere__3" kindref="compound">CGAL::Sphere_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Sphere__3" kindref="compound">CGAL::Sphere_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
<para>returns the radical plane of the two spheres. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>s1 and s2 are not cocentric. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2397" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__radical__line__grp_1gaa8507239e46eb08ceb5fce591c670e92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Line_2&lt;Kernel&gt; CGAL::radical_line</definition>
        <argsstring>(const CGAL::Circle_2&lt; Kernel &gt; &amp;c1, const CGAL::Circle_2&lt; Kernel &gt; &amp;c2)</argsstring>
        <name>radical_line</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Circle__2" kindref="compound">CGAL::Circle_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Circle__2" kindref="compound">CGAL::Circle_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
<para>returns the radical line of the two circles. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>c1</computeroutput> and <computeroutput>c2</computeroutput> are not cocentric. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2412" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__right__turn__grp_1ga0ad6e42d5e16269b43122503521f447a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::right_turn</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r)</argsstring>
        <name>right_turn</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput> form a right turn. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2434" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__scalar__product__grp_1gacab514ee2b6517d8a0b0fe4cc0a28295" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref></type>
        <definition>Kernel::FT CGAL::scalar_product</definition>
        <argsstring>(const CGAL::Vector_2&lt; Kernel &gt; &amp;u, const CGAL::Vector_2&lt; Kernel &gt; &amp;v)</argsstring>
        <name>scalar_product</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__2" kindref="compound">CGAL::Vector_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__2" kindref="compound">CGAL::Vector_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns the scalar product of <computeroutput>u</computeroutput> and <computeroutput>v</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2450" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__scalar__product__grp_1ga4f960db92fe46468f8ba3377f69f64bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref></type>
        <definition>Kernel::FT CGAL::scalar_product</definition>
        <argsstring>(const CGAL::Vector_3&lt; Kernel &gt; &amp;u, const CGAL::Vector_3&lt; Kernel &gt; &amp;v)</argsstring>
        <name>scalar_product</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns the scalar product of <computeroutput>u</computeroutput> and <computeroutput>v</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2457" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__side__of__bounded__circle__grp_1ga0e5c29a7810ca3cc1d92e3854ee9bf00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1gaf6030e89dadcc1f45369b0cdc5d9e111" kindref="member">Bounded_side</ref></type>
        <definition>Bounded_side CGAL::side_of_bounded_circle</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r, const CGAL::Point_2&lt; Kernel &gt; &amp;t)</argsstring>
        <name>side_of_bounded_circle</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>returns the relative position of point <computeroutput>t</computeroutput> to the circle defined by <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput> and <computeroutput>r</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The order of the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput> and <computeroutput>r</computeroutput> does not matter. <simplesect kind="pre"><para><computeroutput>p, q</computeroutput> and <computeroutput>r</computeroutput> are not collinear. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2475" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__side__of__bounded__circle__grp_1ga1a28c423cc75775dd0799f80700506c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1gaf6030e89dadcc1f45369b0cdc5d9e111" kindref="member">Bounded_side</ref></type>
        <definition>Bounded_side CGAL::side_of_bounded_circle</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;t)</argsstring>
        <name>side_of_bounded_circle</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>returns the position of the point <computeroutput>t</computeroutput> relative to the circle that has <computeroutput>pq</computeroutput> as its diameter. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2486" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__side__of__bounded__sphere__grp_1gac0b860dea5e5b831e810ed5a25fad802" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1gaf6030e89dadcc1f45369b0cdc5d9e111" kindref="member">Bounded_side</ref></type>
        <definition>Bounded_side CGAL::side_of_bounded_sphere</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r, const CGAL::Point_3&lt; Kernel &gt; &amp;s, const CGAL::Point_3&lt; Kernel &gt; &amp;t)</argsstring>
        <name>side_of_bounded_sphere</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>returns the relative position of point <computeroutput>t</computeroutput> to the sphere defined by <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>r</computeroutput>, and <computeroutput>s</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The order of the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>r</computeroutput>, and <computeroutput>s</computeroutput> does not matter. <simplesect kind="pre"><para><computeroutput>p, q, r</computeroutput> and <computeroutput>s</computeroutput> are not coplanar. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2508" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__side__of__bounded__sphere__grp_1gaa23c2a763ef75f120f43ee5db09f7fbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1gaf6030e89dadcc1f45369b0cdc5d9e111" kindref="member">Bounded_side</ref></type>
        <definition>Bounded_side CGAL::side_of_bounded_sphere</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r, const CGAL::Point_3&lt; Kernel &gt; &amp;t)</argsstring>
        <name>side_of_bounded_sphere</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>returns the position of the point <computeroutput>t</computeroutput> relative to the sphere passing through <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput> and whose center is in the plane defined by these three points. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2521" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__side__of__bounded__sphere__grp_1ga5e7dc3dd99618777cdef9d6a823822fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1gaf6030e89dadcc1f45369b0cdc5d9e111" kindref="member">Bounded_side</ref></type>
        <definition>Bounded_side CGAL::side_of_bounded_sphere</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;t)</argsstring>
        <name>side_of_bounded_sphere</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>returns the position of the point <computeroutput>t</computeroutput> relative to the sphere that has <computeroutput>pq</computeroutput> as its diameter. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2532" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__side__of__oriented__circle__grp_1gaa1ff7e181e3ba191d405fe716e02ba38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga5006dd2552d97fa577d81bd819c0f979" kindref="member">Oriented_side</ref></type>
        <definition>Oriented_side CGAL::side_of_oriented_circle</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r, const CGAL::Point_2&lt; Kernel &gt; &amp;test)</argsstring>
        <name>side_of_oriented_circle</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>test</declname>
        </param>
        <briefdescription>
<para>returns the relative position of point <computeroutput>test</computeroutput> to the oriented circle defined by <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput> and <computeroutput>r</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The order of the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput> and <computeroutput>r</computeroutput> is important, since it determines the orientation of the implicitly constructed circle.</para><para>If <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput> and <computeroutput>r</computeroutput> are collinear, the circle degenerates in a line. <computeroutput><ref refid="group__kernel__enums_1gga5006dd2552d97fa577d81bd819c0f979a45220491cf36139beffd09434aa31256" kindref="member">CGAL::ON_ORIENTED_BOUNDARY</ref></computeroutput> is returned if <computeroutput>test</computeroutput> is also collinear or if two points are identical, otherwise, <computeroutput>side_of_oriented_circle(r, q, test, p)</computeroutput> is returned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2559" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__side__of__oriented__sphere__grp_1ga3b3afd1f878c2269e34bbd4e49a85317" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga5006dd2552d97fa577d81bd819c0f979" kindref="member">Oriented_side</ref></type>
        <definition>Oriented_side CGAL::side_of_oriented_sphere</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r, const CGAL::Point_3&lt; Kernel &gt; &amp;s, const CGAL::Point_3&lt; Kernel &gt; &amp;test)</argsstring>
        <name>side_of_oriented_sphere</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>test</declname>
        </param>
        <briefdescription>
<para>returns the relative position of point <computeroutput>test</computeroutput> to the oriented sphere defined by <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>r</computeroutput> and <computeroutput>s</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The order of the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>r</computeroutput>, and <computeroutput>s</computeroutput> is important, since it determines the orientation of the implicitly constructed sphere. If the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>r</computeroutput> and <computeroutput>s</computeroutput> are positive oriented, positive side is the bounded interior of the sphere.</para><para>In case of degeneracies, <computeroutput><ref refid="group__kernel__enums_1gga5006dd2552d97fa577d81bd819c0f979a45220491cf36139beffd09434aa31256" kindref="member">CGAL::ON_ORIENTED_BOUNDARY</ref></computeroutput> is returned if all points are coplanar. Otherwise, there is a cyclic permutation of the five points that puts four non coplanar points first, it is used to answer the predicate: e.g. <computeroutput>CGAL::side_of_oriented_sphere(q, r, s, test, p)</computeroutput> is returned if <computeroutput>q</computeroutput>, <computeroutput>r</computeroutput>, <computeroutput>s</computeroutput>, and <computeroutput>test</computeroutput> are non coplanar. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2589" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__squared__area__grp_1ga4a78403d9db87ffea0efec851fea117c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref></type>
        <definition>Kernel::FT CGAL::squared_area</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r)</argsstring>
        <name>squared_area</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>returns the squared area of the triangle defined by the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput> and <computeroutput>r</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2608" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__squared__radius__grp_1ga3145805e8a5b1bac1b103c3bbb52d1a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>FT</type>
        <definition>FT CGAL::squared_radius</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r)</argsstring>
        <name>squared_radius</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>compute the squared radius of the circle passing through the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput> are not collinear. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2633" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__squared__radius__grp_1gaba7777a559d3fbd8adcbe4a4dd983ea4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>FT</type>
        <definition>FT CGAL::squared_radius</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q)</argsstring>
        <name>squared_radius</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>compute the squared radius of the smallest circle passing through <computeroutput>p</computeroutput>, and <computeroutput>q</computeroutput>, i.e. one fourth of the squared distance between <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2643" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__squared__radius__grp_1gab253118245ae039b575d17bfe9ab42c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>FT</type>
        <definition>FT CGAL::squared_radius</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p)</argsstring>
        <name>squared_radius</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>compute the squared radius of the smallest circle passing through <computeroutput>p</computeroutput>, i.e. <formula id="67">$ 0$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2652" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__squared__radius__grp_1gab3c9f8a3d059e67d623e1e1e36ed3896" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>FT</type>
        <definition>FT CGAL::squared_radius</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r, const CGAL::Point_3&lt; Kernel &gt; &amp;s)</argsstring>
        <name>squared_radius</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>compute the squared radius of the sphere passing through the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>r</computeroutput> and <computeroutput>s</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>r</computeroutput> and <computeroutput>s</computeroutput> are not coplanar. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2660" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__squared__radius__grp_1ga5967e2435b1310bd11faed446e0c8184" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>FT</type>
        <definition>FT CGAL::squared_radius</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r)</argsstring>
        <name>squared_radius</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>compute the squared radius of the sphere passing through the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput> and whose center is in the same plane as those three points. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2671" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__squared__radius__grp_1gabb7bff11b3e660e7817ff903db61f28c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>FT</type>
        <definition>FT CGAL::squared_radius</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q)</argsstring>
        <name>squared_radius</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>compute the squared radius of the smallest circle passing through <computeroutput>p</computeroutput>, and <computeroutput>q</computeroutput>, i.e. one fourth of the squared distance between <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2681" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__squared__radius__grp_1ga35e79cbee82e910f786783e6b35fed4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>FT</type>
        <definition>FT CGAL::squared_radius</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p)</argsstring>
        <name>squared_radius</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>compute the squared radius of the smallest circle passing through <computeroutput>p</computeroutput>, i.e. <formula id="67">$ 0$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2690" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__unit__normal__grp_1gaeb8231145ba0cdde8e28fc4f983f23ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Vector_3&lt;Kernel&gt; CGAL::unit_normal</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r)</argsstring>
        <name>unit_normal</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>computes the unit normal vector for the vectors <computeroutput>q-p</computeroutput> and <computeroutput>r-p</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput> must not be collinear. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2702" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__volume__grp_1ga4ba6790576ca34b8421e120ec7562d9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref></type>
        <definition>Kernel::FT CGAL::volume</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p0, const CGAL::Point_3&lt; Kernel &gt; &amp;p1, const CGAL::Point_3&lt; Kernel &gt; &amp;p2, const CGAL::Point_3&lt; Kernel &gt; &amp;p3)</argsstring>
        <name>volume</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
<para>Computes the signed volume of the tetrahedron defined by the four points <computeroutput>p0</computeroutput>, <computeroutput>p1</computeroutput>, <computeroutput>p2</computeroutput> and <computeroutput>p3</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2718" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__x__equal__grp_1gab4f8fb5007b5a620bfb127f2ba322bf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::x_equal</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q)</argsstring>
        <name>x_equal</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> have the same <computeroutput>x</computeroutput>-coordinate. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2737" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__x__equal__grp_1ga7517cf957b48bad706d7a871de9d0927" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::x_equal</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q)</argsstring>
        <name>x_equal</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> have the same <computeroutput>x</computeroutput>-coordinate. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2745" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__y__equal__grp_1ga9d8eace6afac8a35cacd81966adbc51d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::y_equal</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q)</argsstring>
        <name>y_equal</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> have the same <computeroutput>y</computeroutput>-coordinate. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2765" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__y__equal__grp_1gacc77baaaac56b1344fd43f6082f4a11a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::y_equal</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q)</argsstring>
        <name>y_equal</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> have the same <computeroutput>y</computeroutput>-coordinate. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2773" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__z__equal__grp_1ga70c2660284fdacf56fa7f399895ec9e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::z_equal</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q)</argsstring>
        <name>z_equal</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> have the same <computeroutput>z</computeroutput>-coordinate. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2792" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__rational__rotation__approximation__grp_1gac7990dcba1e282368c6140c0afae456b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classRingNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RingNumberType</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::rational_rotation_approximation</definition>
        <argsstring>(const RingNumberType &amp;dirx, const RingNumberType &amp;diry, RingNumberType &amp;sin_num, RingNumberType &amp;cos_num, RingNumberType &amp;denom, const RingNumberType &amp;eps_num, const RingNumberType &amp;eps_den)</argsstring>
        <name>rational_rotation_approximation</name>
        <param>
          <type>const <ref refid="classRingNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RingNumberType</ref> &amp;</type>
          <declname>dirx</declname>
        </param>
        <param>
          <type>const <ref refid="classRingNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RingNumberType</ref> &amp;</type>
          <declname>diry</declname>
        </param>
        <param>
          <type><ref refid="classRingNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RingNumberType</ref> &amp;</type>
          <declname>sin_num</declname>
        </param>
        <param>
          <type><ref refid="classRingNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RingNumberType</ref> &amp;</type>
          <declname>cos_num</declname>
        </param>
        <param>
          <type><ref refid="classRingNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RingNumberType</ref> &amp;</type>
          <declname>denom</declname>
        </param>
        <param>
          <type>const <ref refid="classRingNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RingNumberType</ref> &amp;</type>
          <declname>eps_num</declname>
        </param>
        <param>
          <type>const <ref refid="classRingNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RingNumberType</ref> &amp;</type>
          <declname>eps_den</declname>
        </param>
        <briefdescription>
<para>computes integers <computeroutput>sin_num</computeroutput>, <computeroutput>cos_num</computeroutput> and <computeroutput>denom</computeroutput>, such that <computeroutput>sin_num</computeroutput>/<computeroutput>denom</computeroutput> approximates the sine of direction <formula id="87">$ ($</formula><computeroutput>dirx</computeroutput>,<computeroutput>diry</computeroutput> <formula id="88">$ )$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>The difference between the sine and the approximating rational is bounded by <computeroutput>eps_num</computeroutput>/<computeroutput>eps_den</computeroutput>. <simplesect kind="pre"><para><computeroutput>eps_num</computeroutput> <formula id="89">$ \neq0$</formula>.</para></simplesect>
<bold>Implementation</bold><linebreak/>
</para><para>The approximation is based on Farey sequences as described in the rational rotation method presented by Canny and Ressler at the 8th SoCG 1992. We use a slower version which needs no division operation in the approximation.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Aff__transformation__2" kindref="compound">CGAL::Aff_transformation_2</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/rational_rotation.h" line="23" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__squared__distance__grp_1ga1ff73525660a052564d33fbdd61a4f71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref></type>
        <definition>Kernel::FT CGAL::squared_distance</definition>
        <argsstring>(Type1&lt; Kernel &gt; obj1, Type2&lt; Kernel &gt; obj2)</argsstring>
        <name>squared_distance</name>
        <param>
          <type>Type1&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
          <declname>obj1</declname>
        </param>
        <param>
          <type>Type2&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
          <declname>obj2</declname>
        </param>
        <briefdescription>
<para>computes the square of the Euclidean distance between two geometric objects. </para>        </briefdescription>
        <detaileddescription>
<para>For arbitrary geometric objects <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput> the squared distance is defined as the minimal <computeroutput>squared_distance(p1, p2)</computeroutput>, where <computeroutput>p1</computeroutput> is a point of <computeroutput>obj1</computeroutput> and <computeroutput>p2</computeroutput> is a point of <computeroutput>obj2</computeroutput>. Note that for objects that have an inside (a bounded region), this inside is part of the object. So, the squared distance from a point inside is zero, not the squared distance to the closest point on the boundary.</para><para>In 2D, the types <computeroutput>Type1</computeroutput> and <computeroutput>Type2</computeroutput> can be any of the following:</para><para><itemizedlist>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref></computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Line__2" kindref="compound">Line_2</ref></computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Ray__2" kindref="compound">Ray_2</ref></computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref></computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Triangle__2" kindref="compound">Triangle_2</ref></computeroutput></para></listitem></itemizedlist>
</para><para>as well as any combination of <computeroutput><ref refid="classKernel_1_1Point__2" kindref="compound">Kernel::Point_2</ref></computeroutput> and <computeroutput><ref refid="classKernel_1a0840945f50320f998ee74f212ecaf082" kindref="member">Kernel::Weighted_point_2</ref></computeroutput></para><para>In 3D, the types <computeroutput>Type1</computeroutput> and <computeroutput>Type2</computeroutput> can be any of the following:</para><para><itemizedlist>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref></computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Line__3" kindref="compound">Line_3</ref></computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Ray__3" kindref="compound">Ray_3</ref></computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref></computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref></computeroutput></para></listitem></itemizedlist>
</para><para>as well as combinations <computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref></computeroutput>/<computeroutput><ref refid="classCGAL_1_1Triangle__3" kindref="compound">Triangle_3</ref></computeroutput>, and <computeroutput><ref refid="classCGAL_1_1Weighted__point__3" kindref="compound">Weighted_point_3</ref></computeroutput>/<computeroutput><ref refid="classCGAL_1_1Triangle__3" kindref="compound">Triangle_3</ref></computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="group__compare__distance__to__point__grp" kindref="compound">CGAL::compare_distance_to_point()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__compare__signed__distance__to__line__grp" kindref="compound">CGAL::compare_signed_distance_to_line()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__compare__signed__distance__to__plane__grp" kindref="compound">CGAL::compare_signed_distance_to_plane()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__has__larger__distance__to__point__grp" kindref="compound">CGAL::has_larger_distance_to_point()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__has__larger__signed__distance__to__line__grp" kindref="compound">CGAL::has_larger_signed_distance_to_line()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__has__larger__signed__distance__to__plane__grp" kindref="compound">CGAL::has_larger_signed_distance_to_plane()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__has__smaller__distance__to__point__grp" kindref="compound">CGAL::has_smaller_distance_to_point()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__has__smaller__signed__distance__to__line__grp" kindref="compound">CGAL::has_smaller_signed_distance_to_line()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__has__smaller__signed__distance__to__plane__grp" kindref="compound">CGAL::has_smaller_signed_distance_to_plane()</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/squared_distance_2.h" line="56" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag" line="1" column="1"/>
  </compounddef>
</doxygen>
