<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Triangle__2" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Triangle_2</compoundname>
    <includes local="no">CGAL/Triangle_2.h</includes>
    <templateparamlist>
      <param>
        <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Triangle__2_1a6c9fa0e2f187c134c1033319c5f72000" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Triangle_2&lt; Kernel &gt;::Triangle_2</definition>
        <argsstring>(const Point_2&lt; Kernel &gt; &amp;p, const Point_2&lt; Kernel &gt; &amp;q, const Point_2&lt; Kernel &gt; &amp;r)</argsstring>
        <name>Triangle_2</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>introduces a triangle <computeroutput>t</computeroutput> with vertices <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput> and <computeroutput>r</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangle_2.h" line="29" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <memberdef kind="function" id="classCGAL_1_1Triangle__2_1aebbc4383c268eb4bd75a4ce52638723b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangle_2&lt; Kernel &gt;::operator==</definition>
        <argsstring>(const Triangle_2&lt; Kernel &gt; &amp;t2) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangle__2" kindref="compound">Triangle_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>t2</declname>
        </param>
        <briefdescription>
<para>Test for equality: two triangles are equal, iff there exists a cyclic permutation of the vertices of <formula id="98">$ t2$</formula>, such that they are equal to the vertices of <computeroutput>t</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangle_2.h" line="43" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangle__2_1a89ff6d4f721c249facc58e1cb140d381" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangle_2&lt; Kernel &gt;::operator!=</definition>
        <argsstring>(const Triangle_2&lt; Kernel &gt; &amp;t2) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangle__2" kindref="compound">Triangle_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>t2</declname>
        </param>
        <briefdescription>
<para>Test for inequality. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangle_2.h" line="48" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangle__2_1ad4de326e06b24e54c9cf32f9b4ac6471" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>Point_2&lt;Kernel&gt; CGAL::Triangle_2&lt; Kernel &gt;::vertex</definition>
        <argsstring>(int i) const</argsstring>
        <name>vertex</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>returns the i&apos;th vertex modulo 3 of <computeroutput>t</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangle_2.h" line="53" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangle__2_1aaaa773f13f31d32288d88eec4f820279" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>Point_2&lt;Kernel&gt; CGAL::Triangle_2&lt; Kernel &gt;::operator[]</definition>
        <argsstring>(int i) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>vertex(i)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangle_2.h" line="58" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Predicates</header>
      <description><para>For convenience we provide the following Boolean functions: </para></description>
      <memberdef kind="function" id="classCGAL_1_1Triangle__2_1abfa6da3f544b54ad9426931c0753cadd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangle_2&lt; Kernel &gt;::is_degenerate</definition>
        <argsstring>() const</argsstring>
        <name>is_degenerate</name>
        <briefdescription>
<para>triangle <computeroutput>t</computeroutput> is degenerate, if the vertices are collinear. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangle_2.h" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangle__2_1aa6c914c344bf35d8e050e414290b2982" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member">Orientation</ref></type>
        <definition>Orientation CGAL::Triangle_2&lt; Kernel &gt;::orientation</definition>
        <argsstring>() const</argsstring>
        <name>orientation</name>
        <briefdescription>
<para>returns the orientation of <computeroutput>t</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangle_2.h" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangle__2_1a9de6da17bccacaf931b143fb5fbb9519" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1ga5006dd2552d97fa577d81bd819c0f979" kindref="member">Oriented_side</ref></type>
        <definition>Oriented_side CGAL::Triangle_2&lt; Kernel &gt;::oriented_side</definition>
        <argsstring>(const Point_2&lt; Kernel &gt; &amp;p) const</argsstring>
        <name>oriented_side</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>ON_ORIENTED_BOUNDARY</computeroutput>, or <computeroutput>POSITIVE_SIDE</computeroutput>, or the constant <computeroutput>ON_NEGATIVE_SIDE</computeroutput>, determined by the position of point <computeroutput>p</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>t</computeroutput> is not degenerate. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangle_2.h" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangle__2_1a7b36552b5871f681c5f6951bae6ba4dc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1gaf6030e89dadcc1f45369b0cdc5d9e111" kindref="member">Bounded_side</ref></type>
        <definition>Bounded_side CGAL::Triangle_2&lt; Kernel &gt;::bounded_side</definition>
        <argsstring>(const Point_2&lt; Kernel &gt; &amp;p) const</argsstring>
        <name>bounded_side</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>returns the constant <computeroutput>ON_BOUNDARY</computeroutput>, <computeroutput>ON_BOUNDED_SIDE</computeroutput>, or else <computeroutput>ON_UNBOUNDED_SIDE</computeroutput>, depending on where point <computeroutput>p</computeroutput> is. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>t</computeroutput> is not degenerate. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangle_2.h" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangle__2_1a96ebb284cd80d0def177bb246b4bc080" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangle_2&lt; Kernel &gt;::has_on_positive_side</definition>
        <argsstring>(const Point_2&lt; Kernel &gt; &amp;p) const</argsstring>
        <name>has_on_positive_side</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangle_2.h" line="99" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangle__2_1a7ca9e360f931325422efe2b8c81ac7a9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangle_2&lt; Kernel &gt;::has_on_negative_side</definition>
        <argsstring>(const Point_2&lt; Kernel &gt; &amp;p) const</argsstring>
        <name>has_on_negative_side</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangle_2.h" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangle__2_1a80edbf8b7a35ea8de4d4970dd00cfd07" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangle_2&lt; Kernel &gt;::has_on_boundary</definition>
        <argsstring>(const Point_2&lt; Kernel &gt; &amp;p) const</argsstring>
        <name>has_on_boundary</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangle_2.h" line="109" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangle__2_1a689c5d18cc163a6fdb0f784e2c8d8411" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangle_2&lt; Kernel &gt;::has_on_bounded_side</definition>
        <argsstring>(const Point_2&lt; Kernel &gt; &amp;p) const</argsstring>
        <name>has_on_bounded_side</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangle_2.h" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangle__2_1a678929daef4a04fe117c1f4c8beb2674" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangle_2&lt; Kernel &gt;::has_on_unbounded_side</definition>
        <argsstring>(const Point_2&lt; Kernel &gt; &amp;p) const</argsstring>
        <name>has_on_unbounded_side</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>t</computeroutput> is not degenerate. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangle_2.h" line="119" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Miscellaneous</header>
      <memberdef kind="function" id="classCGAL_1_1Triangle__2_1a802a564c6b996b944e044221683fe2d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangle__2" kindref="compound">Triangle_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>Triangle_2&lt;Kernel&gt; CGAL::Triangle_2&lt; Kernel &gt;::opposite</definition>
        <argsstring>()</argsstring>
        <name>opposite</name>
        <briefdescription>
<para>returns a triangle where the boundary is oriented the other way round (this flips the positive and the negative side, but not the bounded and unbounded side). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangle_2.h" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangle__2_1a31f10543a657d7ee5824a8352d2b5a11" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classKernel_1a55e83f5a9f8ca43588b02ae8256a8fbd" kindref="member">Kernel::FT</ref></type>
        <definition>Kernel::FT CGAL::Triangle_2&lt; Kernel &gt;::area</definition>
        <argsstring>() const</argsstring>
        <name>area</name>
        <briefdescription>
<para>returns the signed area of <computeroutput>t</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangle_2.h" line="136" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangle__2_1a1d5c5512d0ed411cf3b4c0d2b9bac1fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Bbox__2" kindref="compound">Bbox_2</ref></type>
        <definition>Bbox_2 CGAL::Triangle_2&lt; Kernel &gt;::bbox</definition>
        <argsstring>() const</argsstring>
        <name>bbox</name>
        <briefdescription>
<para>returns a bounding box containing <computeroutput>t</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangle_2.h" line="141" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangle__2_1a22d44a32e0ef8d97cacbe600fe6d35ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangle__2" kindref="compound">Triangle_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>Triangle_2&lt;Kernel&gt; CGAL::Triangle_2&lt; Kernel &gt;::transform</definition>
        <argsstring>(const Aff_transformation_2&lt; Kernel &gt; &amp;at) const</argsstring>
        <name>transform</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Aff__transformation__2" kindref="compound">Aff_transformation_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>at</declname>
        </param>
        <briefdescription>
<para>returns the triangle obtained by applying <formula id="44">$ at$</formula> on the three vertices of <computeroutput>t</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangle_2.h" line="147" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An object <computeroutput>t</computeroutput> of the class <computeroutput><ref refid="classCGAL_1_1Triangle__2" kindref="compound">Triangle_2</ref></computeroutput> is a triangle in the two-dimensional Euclidean plane <formula id="29">$ \E^2$</formula>. </para>    </briefdescription>
    <detaileddescription>
<para>Triangle <computeroutput>t</computeroutput> is oriented, i.e., its boundary has clockwise or counterclockwise orientation. We call the side to the left of the boundary the positive side and the side to the right of the boundary the negative side.</para><para>The boundary of a triangle splits the plane in two open regions, a bounded one and an unbounded one.</para><para><xrefsect id="models_1_models000030"><xreftitle>Is Model Of</xreftitle><xrefdescription><para><computeroutput><ref refid="classKernel_1_1Triangle__2" kindref="compound">Kernel::Triangle_2</ref></computeroutput></para></xrefdescription></xrefsect></para>    </detaileddescription>
    <location file="CGAL/Triangle_2.h" line="20" column="1" bodyfile="CGAL/Triangle_2.h" bodystart="20" bodyend="151"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Triangle__2_1a31f10543a657d7ee5824a8352d2b5a11" prot="public" virt="non-virtual"><scope>CGAL::Triangle_2</scope><name>area</name></member>
      <member refid="classCGAL_1_1Triangle__2_1a1d5c5512d0ed411cf3b4c0d2b9bac1fe" prot="public" virt="non-virtual"><scope>CGAL::Triangle_2</scope><name>bbox</name></member>
      <member refid="classCGAL_1_1Triangle__2_1a7b36552b5871f681c5f6951bae6ba4dc" prot="public" virt="non-virtual"><scope>CGAL::Triangle_2</scope><name>bounded_side</name></member>
      <member refid="classCGAL_1_1Triangle__2_1a80edbf8b7a35ea8de4d4970dd00cfd07" prot="public" virt="non-virtual"><scope>CGAL::Triangle_2</scope><name>has_on_boundary</name></member>
      <member refid="classCGAL_1_1Triangle__2_1a689c5d18cc163a6fdb0f784e2c8d8411" prot="public" virt="non-virtual"><scope>CGAL::Triangle_2</scope><name>has_on_bounded_side</name></member>
      <member refid="classCGAL_1_1Triangle__2_1a7ca9e360f931325422efe2b8c81ac7a9" prot="public" virt="non-virtual"><scope>CGAL::Triangle_2</scope><name>has_on_negative_side</name></member>
      <member refid="classCGAL_1_1Triangle__2_1a96ebb284cd80d0def177bb246b4bc080" prot="public" virt="non-virtual"><scope>CGAL::Triangle_2</scope><name>has_on_positive_side</name></member>
      <member refid="classCGAL_1_1Triangle__2_1a678929daef4a04fe117c1f4c8beb2674" prot="public" virt="non-virtual"><scope>CGAL::Triangle_2</scope><name>has_on_unbounded_side</name></member>
      <member refid="classCGAL_1_1Triangle__2_1abfa6da3f544b54ad9426931c0753cadd" prot="public" virt="non-virtual"><scope>CGAL::Triangle_2</scope><name>is_degenerate</name></member>
      <member refid="classCGAL_1_1Triangle__2_1a89ff6d4f721c249facc58e1cb140d381" prot="public" virt="non-virtual"><scope>CGAL::Triangle_2</scope><name>operator!=</name></member>
      <member refid="classCGAL_1_1Triangle__2_1aebbc4383c268eb4bd75a4ce52638723b" prot="public" virt="non-virtual"><scope>CGAL::Triangle_2</scope><name>operator==</name></member>
      <member refid="classCGAL_1_1Triangle__2_1aaaa773f13f31d32288d88eec4f820279" prot="public" virt="non-virtual"><scope>CGAL::Triangle_2</scope><name>operator[]</name></member>
      <member refid="classCGAL_1_1Triangle__2_1a802a564c6b996b944e044221683fe2d0" prot="public" virt="non-virtual"><scope>CGAL::Triangle_2</scope><name>opposite</name></member>
      <member refid="classCGAL_1_1Triangle__2_1aa6c914c344bf35d8e050e414290b2982" prot="public" virt="non-virtual"><scope>CGAL::Triangle_2</scope><name>orientation</name></member>
      <member refid="classCGAL_1_1Triangle__2_1a9de6da17bccacaf931b143fb5fbb9519" prot="public" virt="non-virtual"><scope>CGAL::Triangle_2</scope><name>oriented_side</name></member>
      <member refid="classCGAL_1_1Triangle__2_1a22d44a32e0ef8d97cacbe600fe6d35ad" prot="public" virt="non-virtual"><scope>CGAL::Triangle_2</scope><name>transform</name></member>
      <member refid="classCGAL_1_1Triangle__2_1a6c9fa0e2f187c134c1033319c5f72000" prot="public" virt="non-virtual"><scope>CGAL::Triangle_2</scope><name>Triangle_2</name></member>
      <member refid="classCGAL_1_1Triangle__2_1ad4de326e06b24e54c9cf32f9b4ac6471" prot="public" virt="non-virtual"><scope>CGAL::Triangle_2</scope><name>vertex</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
