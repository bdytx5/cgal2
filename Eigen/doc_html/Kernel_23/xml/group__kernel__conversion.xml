<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__kernel__conversion" kind="group">
    <compoundname>kernel_conversion</compoundname>
    <title>Cartesian/Homogenous Conversion</title>
    <innerclass refid="classCGAL_1_1Cartesian__converter" prot="public">CGAL::Cartesian_converter</innerclass>
    <innerclass refid="classCGAL_1_1Homogeneous__converter" prot="public">CGAL::Homogeneous_converter</innerclass>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="group__kernel__conversion_1gaa9c1fb90410805f74709c0590714204c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RT</type>
          </param>
        </templateparamlist>
        <type>Point_2&lt; Homogeneous&lt; RT &gt; &gt;</type>
        <definition>Point_2&lt; Homogeneous&lt;RT&gt; &gt; CGAL::cartesian_to_homogeneous</definition>
        <argsstring>(const Point_2&lt; Cartesian&lt; RT &gt; &gt; &amp;cp)</argsstring>
        <name>cartesian_to_homogeneous</name>
        <param>
          <type>const Point_2&lt; Cartesian&lt; RT &gt; &gt; &amp;</type>
          <declname>cp</declname>
        </param>
        <briefdescription>
<para>Functions to convert between Cartesian and homogeneous kernels. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Cartesian" kindref="compound">CGAL::Cartesian</ref>&lt;<ref refid="classFieldNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref>&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Cartesian__converter" kindref="compound">CGAL::Cartesian_converter</ref>&lt;K1, K2, NTConverter&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Homogeneous" kindref="compound">CGAL::Homogeneous</ref>&lt;<ref refid="classRingNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RingNumberType</ref>&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Homogeneous__converter" kindref="compound">CGAL::Homogeneous_converter</ref>&lt;K1, K2, RTConverter, FTConverter&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Simple__cartesian" kindref="compound">CGAL::Simple_cartesian</ref>&lt;<ref refid="classFieldNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref>&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Simple__homogeneous" kindref="compound">CGAL::Simple_homogeneous</ref>&lt;<ref refid="classRingNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RingNumberType</ref>&gt;</computeroutput></para></simplesect>
converts 2D point <computeroutput>cp</computeroutput> with Cartesian representation into a 2D point with homogeneous representation with the same number type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/cartesian_homogeneous_conversion.h" line="27" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__conversion_1gab81227f04c2c79e0b5f97889a63c1e6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RT</type>
          </param>
        </templateparamlist>
        <type>Point_3&lt; Homogeneous&lt; RT &gt; &gt;</type>
        <definition>Point_3&lt; Homogeneous&lt;RT&gt; &gt; CGAL::cartesian_to_homogeneous</definition>
        <argsstring>(const Point_3&lt; Cartesian&lt; RT &gt; &gt; &amp;cp)</argsstring>
        <name>cartesian_to_homogeneous</name>
        <param>
          <type>const Point_3&lt; Cartesian&lt; RT &gt; &gt; &amp;</type>
          <declname>cp</declname>
        </param>
        <briefdescription>
<para>converts 3D point <computeroutput>cp</computeroutput> with Cartesian representation into a 3D point with homogeneous representation with the same number type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/cartesian_homogeneous_conversion.h" line="37" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__conversion_1ga1864bfa55d11d6f8f46fb628e162d07c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FT</type>
          </param>
        </templateparamlist>
        <type>Point_2&lt; Cartesian&lt; FT &gt; &gt;</type>
        <definition>Point_2&lt; Cartesian&lt;FT&gt; &gt; CGAL::homogeneous_to_cartesian</definition>
        <argsstring>(const Point_2&lt; Homogeneous&lt; FT &gt; &gt; &amp;hp)</argsstring>
        <name>homogeneous_to_cartesian</name>
        <param>
          <type>const Point_2&lt; Homogeneous&lt; FT &gt; &gt; &amp;</type>
          <declname>hp</declname>
        </param>
        <briefdescription>
<para>converts 2D point <computeroutput>hp</computeroutput> with homogeneous representation into a 2D point with Cartesian representation with the same number type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/cartesian_homogeneous_conversion.h" line="48" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__conversion_1ga48e6005d027d752ca7ef34becfacfc83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FT</type>
          </param>
        </templateparamlist>
        <type>Point_3&lt; Cartesian&lt; FT &gt; &gt;</type>
        <definition>Point_3&lt; Cartesian&lt;FT&gt; &gt; CGAL::homogeneous_to_cartesian</definition>
        <argsstring>(const Point_3&lt; Homogeneous&lt; FT &gt; &gt; &amp;hp)</argsstring>
        <name>homogeneous_to_cartesian</name>
        <param>
          <type>const Point_3&lt; Homogeneous&lt; FT &gt; &gt; &amp;</type>
          <declname>hp</declname>
        </param>
        <briefdescription>
<para>converts 3D point <computeroutput>hp</computeroutput> with homogeneous representation into a 3D point with Cartesian representation with the same number type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/cartesian_homogeneous_conversion.h" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__conversion_1ga9a1c820a9840b3c72eec5a391f73eecc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RT</type>
          </param>
        </templateparamlist>
        <type>Point_2&lt; Cartesian&lt; Quotient&lt; RT &gt; &gt; &gt;</type>
        <definition>Point_2&lt; Cartesian&lt;Quotient&lt;RT&gt; &gt; &gt; CGAL::homogeneous_to_quotient_cartesian</definition>
        <argsstring>(const Point_2&lt; Homogeneous&lt; RT &gt; &gt; &amp;hp)</argsstring>
        <name>homogeneous_to_quotient_cartesian</name>
        <param>
          <type>const Point_2&lt; Homogeneous&lt; RT &gt; &gt; &amp;</type>
          <declname>hp</declname>
        </param>
        <briefdescription>
<para>converts the 2D point <computeroutput>hp</computeroutput> with homogeneous representation with number type <computeroutput>RT</computeroutput> into a 2D point with Cartesian representation with number type <computeroutput><ref refid="classCGAL_1_1Quotient" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">Quotient</ref>&lt;RT&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/cartesian_homogeneous_conversion.h" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__conversion_1gaceb47c53d4859e9da61add4ee2eac8d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RT</type>
          </param>
        </templateparamlist>
        <type>Point_3&lt; Cartesian&lt; Quotient&lt; RT &gt; &gt; &gt;</type>
        <definition>Point_3&lt; Cartesian&lt;Quotient&lt;RT&gt; &gt; &gt; CGAL::homogeneous_to_quotient_cartesian</definition>
        <argsstring>(const Point_3&lt; Homogeneous&lt; RT &gt; &gt; &amp;hp)</argsstring>
        <name>homogeneous_to_quotient_cartesian</name>
        <param>
          <type>const Point_3&lt; Homogeneous&lt; RT &gt; &gt; &amp;</type>
          <declname>hp</declname>
        </param>
        <briefdescription>
<para>converts the 3D point <computeroutput>hp</computeroutput> with homogeneous representation with number type <computeroutput>RT</computeroutput> into a 3D point with Cartesian representation with number type <computeroutput><ref refid="classCGAL_1_1Quotient" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">Quotient</ref>&lt;RT&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/cartesian_homogeneous_conversion.h" line="79" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__conversion_1ga0e3d0e6dab63837b88363faff099caa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RT</type>
          </param>
        </templateparamlist>
        <type>Point_2&lt; Homogeneous&lt; RT &gt; &gt;</type>
        <definition>Point_2&lt; Homogeneous&lt;RT&gt; &gt; CGAL::quotient_cartesian_to_homogeneous</definition>
        <argsstring>(const Point_2&lt; Cartesian&lt; Quotient&lt; RT &gt; &gt; &gt; &amp;cp)</argsstring>
        <name>quotient_cartesian_to_homogeneous</name>
        <param>
          <type>const Point_2&lt; Cartesian&lt; Quotient&lt; RT &gt; &gt; &gt; &amp;</type>
          <declname>cp</declname>
        </param>
        <briefdescription>
<para>converts 2D point <computeroutput>cp</computeroutput> with Cartesian representation with number type <computeroutput><ref refid="classCGAL_1_1Quotient" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">Quotient</ref>&lt;RT&gt;</computeroutput> into a 2D point with homogeneous representation with number type <computeroutput>RT</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/cartesian_homogeneous_conversion.h" line="90" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__conversion_1gab4b1307d79397377723dd80642371f56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RT</type>
          </param>
        </templateparamlist>
        <type>Point_3&lt; Homogeneous&lt; RT &gt; &gt;</type>
        <definition>Point_3&lt; Homogeneous&lt;RT&gt; &gt; CGAL::quotient_cartesian_to_homogeneous</definition>
        <argsstring>(const Point_3&lt; Cartesian&lt; Quotient&lt; RT &gt; &gt; &gt; &amp;cp)</argsstring>
        <name>quotient_cartesian_to_homogeneous</name>
        <param>
          <type>const Point_3&lt; Cartesian&lt; Quotient&lt; RT &gt; &gt; &gt; &amp;</type>
          <declname>cp</declname>
        </param>
        <briefdescription>
<para>converts 3D point <computeroutput>cp</computeroutput> with Cartesian representation with number type <computeroutput><ref refid="classCGAL_1_1Quotient" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">Quotient</ref>&lt;RT&gt;</computeroutput> into a 3D point with homogeneous representation with number type <computeroutput>RT</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/cartesian_homogeneous_conversion.h" line="102" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
