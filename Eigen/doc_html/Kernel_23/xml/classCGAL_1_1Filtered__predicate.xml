<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Filtered__predicate" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Filtered_predicate</compoundname>
    <includes local="no">CGAL/Filtered_predicate.h</includes>
    <templateparamlist>
      <param>
        <type>typename EP</type>
      </param>
      <param>
        <type>typename FP</type>
      </param>
      <param>
        <type>typename C2E</type>
      </param>
      <param>
        <type>typename C2F</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classCGAL_1_1Filtered__predicate_1a00994ff1203ba65f07f287fdad8a84d0" prot="public" static="no">
        <type>FP::result_type</type>
        <definition>typedef FP::result_type CGAL::Filtered_predicate&lt; EP, FP, C2E, C2F &gt;::result_type</definition>
        <argsstring></argsstring>
        <name>result_type</name>
        <briefdescription>
<para>The return type of the function operators. </para>        </briefdescription>
        <detaileddescription>
<para>It must also be the same type as <computeroutput>EP::result_type</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Filtered_predicate.h" line="47" column="1" bodyfile="CGAL/Filtered_predicate.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Filtered__predicate_1aceeaaa1be5fc314c422d527f69fca2b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Filtered_predicate&lt; EP, FP, C2E, C2F &gt;::Filtered_predicate</definition>
        <argsstring>()</argsstring>
        <name>Filtered_predicate</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Filtered_predicate.h" line="47" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <description><para>Similar function operators are defined for up to 7 arguments. </para></description>
      <memberdef kind="function" id="classCGAL_1_1Filtered__predicate_1ac4fe559526034a23b5980ab93906f5b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class A1</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Filtered__predicate_1a00994ff1203ba65f07f287fdad8a84d0" kindref="member">result_type</ref></type>
        <definition>result_type CGAL::Filtered_predicate&lt; EP, FP, C2E, C2F &gt;::operator()</definition>
        <argsstring>(A1 a1)</argsstring>
        <name>operator()</name>
        <param>
          <type>A1</type>
          <declname>a1</declname>
        </param>
        <briefdescription>
<para>The unary function operator for unary predicates. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Filtered_predicate.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Filtered__predicate_1a93407d36643c8fa92d5fd4d4509e2b5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class A1</type>
          </param>
          <param>
            <type>class A2</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Filtered__predicate_1a00994ff1203ba65f07f287fdad8a84d0" kindref="member">result_type</ref></type>
        <definition>result_type CGAL::Filtered_predicate&lt; EP, FP, C2E, C2F &gt;::operator()</definition>
        <argsstring>(A1 a1, A2 a2)</argsstring>
        <name>operator()</name>
        <param>
          <type>A1</type>
          <declname>a1</declname>
        </param>
        <param>
          <type>A2</type>
          <declname>a2</declname>
        </param>
        <briefdescription>
<para>The binary function operator for binary predicates. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Filtered_predicate.h" line="74" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><computeroutput><ref refid="classCGAL_1_1Filtered__predicate" kindref="compound">Filtered_predicate</ref></computeroutput> is an adaptor for predicate function objects that allows one to produce efficient and exact predicates. </para>    </briefdescription>
    <detaileddescription>
<para>It is used to build <computeroutput><ref refid="structCGAL_1_1Filtered__kernel" kindref="compound">CGAL::Filtered_kernel</ref>&lt;CK&gt;</computeroutput> and can be used for other predicates too.</para><para><computeroutput>EP</computeroutput> is the exact but supposedly slow predicate that is able to evaluate the predicate correctly. It will be called only when the filtering predicate, <computeroutput>FP</computeroutput>, cannot compute the correct result. This failure of <computeroutput>FP</computeroutput> must be done by throwing an exception.</para><para>To convert the geometric objects that are the arguments of the predicate, we use the function objects <computeroutput>C2E</computeroutput> and <computeroutput>C2F</computeroutput>, which must be of the form <computeroutput><ref refid="classCGAL_1_1Cartesian__converter" kindref="compound">Cartesian_converter</ref></computeroutput> or <computeroutput><ref refid="classCGAL_1_1Homogeneous__converter" kindref="compound">Homogeneous_converter</ref></computeroutput>.</para><para><bold>Example</bold><linebreak/>
</para><para>The following example defines an efficient and exact version of the orientation predicate over three points using the <ref refid="structCGAL_1_1Cartesian" kindref="compound">Cartesian</ref> representation with double coordinates and without reference counting (<computeroutput>Simple_cartesian::Point_2</computeroutput>). Of course, the orientation predicate can already be found in the kernel, but you can follow this example to filter your own predicates. It uses the fast but inexact predicate based on interval arithmetic for filtering and the slow but exact predicate based on multi-precision floats when the filtering predicate fails.</para><para><linebreak/>
<bold>File</bold> <ref refid="Filtered_kernel_2Filtered_predicate_8cpp-example" kindref="compound">Filtered_kernel/Filtered_predicate.cpp</ref> <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Simple_cartesian.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Filtered_predicate.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="MP__Float_8h" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">CGAL/MP_Float.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Cartesian_converter.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Simple__cartesian" kindref="compound">CGAL::Simple_cartesian&lt;double&gt;</ref><sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Simple__cartesian" kindref="compound">CGAL::Simple_cartesian&lt;CGAL::Interval_nt_advanced&gt;</ref><sp/>FK;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Simple__cartesian" kindref="compound">CGAL::Simple_cartesian&lt;CGAL::MP_Float&gt;</ref><sp/>EK;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Cartesian__converter" kindref="compound">CGAL::Cartesian_converter&lt;K, EK&gt;</ref><sp/>C2E;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Cartesian__converter" kindref="compound">CGAL::Cartesian_converter&lt;K, FK&gt;</ref><sp/>C2F;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>my<sp/>predicate,<sp/>parameterized<sp/>by<sp/>a<sp/>kernel.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K<sp/>&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">My_orientation_2</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K::RT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RT;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K::Point_2<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="group__kernel__enums_1ga1147c0cf556939e71279546b38f2a1c5" kindref="member">K::Orientation</ref><sp/><sp/><sp/><ref refid="classCGAL_1_1Filtered__predicate_1a00994ff1203ba65f07f287fdad8a84d0" kindref="member">result_type</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>result_type</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classCGAL_1_1Filtered__predicate_1ac4fe559526034a23b5980ab93906f5b4" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point_2<sp/>&amp;p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point_2<sp/>&amp;q,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point_2<sp/>&amp;r)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>RT<sp/>prx<sp/>=<sp/>p.x()<sp/>-<sp/>r.x();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>RT<sp/>pry<sp/>=<sp/>p.y()<sp/>-<sp/>r.y();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>RT<sp/>qrx<sp/>=<sp/>q.x()<sp/>-<sp/>r.x();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>RT<sp/>qry<sp/>=<sp/>q.y()<sp/>-<sp/>r.y();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__PkgAlgebraicFoundations_1gaf3d75d272a29458960987a8f248ec636" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">CGAL::sign</ref>(<sp/>prx*qry<sp/>-<sp/>qrx*pry<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CGAL::Filtered_predicate&lt;My_orientation_2&lt;EK&gt;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>My_orientation_2&lt;FK&gt;,<sp/>C2E,<sp/>C2F&gt;<sp/>Orientation_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>K::Point_2<sp/>p(1,2),<sp/>q(2,3),<sp/>r(3,4);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Orientation_2<sp/><ref refid="group__PkgKernelDFunctions_1ga140039774b89a338321c36e14732b787" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">orientation</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgKernelDFunctions_1ga140039774b89a338321c36e14732b787" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">orientation</ref>(p,<sp/>q,<sp/>r);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>    </detaileddescription>
    <location file="CGAL/Filtered_predicate.h" line="37" column="1" bodyfile="CGAL/Filtered_predicate.h" bodystart="37" bodyend="78"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Filtered__predicate_1aceeaaa1be5fc314c422d527f69fca2b0" prot="public" virt="non-virtual"><scope>CGAL::Filtered_predicate</scope><name>Filtered_predicate</name></member>
      <member refid="classCGAL_1_1Filtered__predicate_1ac4fe559526034a23b5980ab93906f5b4" prot="public" virt="non-virtual"><scope>CGAL::Filtered_predicate</scope><name>operator()</name></member>
      <member refid="classCGAL_1_1Filtered__predicate_1a93407d36643c8fa92d5fd4d4509e2b5f" prot="public" virt="non-virtual"><scope>CGAL::Filtered_predicate</scope><name>operator()</name></member>
      <member refid="classCGAL_1_1Filtered__predicate_1a00994ff1203ba65f07f287fdad8a84d0" prot="public" virt="non-virtual"><scope>CGAL::Filtered_predicate</scope><name>result_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
