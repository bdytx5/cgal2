<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structCGAL_1_1Kernel__traits" kind="struct" language="C++" prot="public">
    <compoundname>CGAL::Kernel_traits</compoundname>
    <includes local="no">CGAL/Kernel_traits.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="structCGAL_1_1Kernel__traits_1adaf2b06e17d5377307fca20b6bc2bbf9" prot="public" static="no">
        <type>T::R</type>
        <definition>typedef T::R CGAL::Kernel_traits&lt; T &gt;::Kernel</definition>
        <argsstring></argsstring>
        <name>Kernel</name>
        <briefdescription>
<para>If <computeroutput>T</computeroutput> is a type <computeroutput>K::Point_2</computeroutput> of some kernel model <computeroutput>K</computeroutput>, then <computeroutput><ref refid="classKernel" kindref="compound">Kernel</ref></computeroutput> is equal to <computeroutput>K</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel_traits.h" line="40" column="1" bodyfile="CGAL/Kernel_traits.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The class <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound">Kernel_traits</ref></computeroutput> provides access to the kernel model to which the argument type <computeroutput>T</computeroutput> belongs. </para>    </briefdescription>
    <detaileddescription>
<para>(Provided <computeroutput>T</computeroutput> belongs to some kernel model.) The default implementation assumes there is a local type <computeroutput>T::Kernel</computeroutput> referring to the kernel model of <computeroutput>T</computeroutput>. If this type does not exist, a specialization of <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound">Kernel_traits</ref></computeroutput> can be used to provide the desired information.</para><para>This class is, for example, useful in the following context. Assume you want to write a generic function that accepts two points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> as argument and constructs the line segment between <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. In order to specify the return type of this function, you need to know what is the segment type corresponding to the Point type representing <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. Using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound">Kernel_traits</ref></computeroutput>, this can be done as follows.</para><para><programlisting><codeline><highlight class="normal">template<sp/>&lt;<sp/>class<sp/>Point<sp/>&gt;<sp/></highlight></codeline>
<codeline><highlight class="normal">typename<sp/>Kernel_traits&lt;Point&gt;::Kernel::Segment<sp/></highlight></codeline>
<codeline><highlight class="normal">construct_segment(Point<sp/>p,<sp/>Point<sp/>q)<sp/></highlight></codeline>
<codeline><highlight class="normal">{<sp/>...<sp/>}<sp/></highlight></codeline>
</programlisting> </para>    </detaileddescription>
    <location file="CGAL/Kernel_traits.h" line="30" column="1" bodyfile="CGAL/Kernel_traits.h" bodystart="30" bodyend="44"/>
    <listofallmembers>
      <member refid="structCGAL_1_1Kernel__traits_1adaf2b06e17d5377307fca20b6bc2bbf9" prot="public" virt="non-virtual"><scope>CGAL::Kernel_traits</scope><name>Kernel</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
