<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classKernel_1_1CoplanarOrientation__3" kind="class" language="C++" prot="public">
    <compoundname>Kernel::CoplanarOrientation_3</compoundname>
    <includes local="no">Concepts/FunctionObjectConcepts.h</includes>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <description><para>A model of this concept must provide: </para></description>
      <memberdef kind="function" id="classKernel_1_1CoplanarOrientation__3_1aa24994f282b13f45a7f4019e481f67b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classKernel_1ac3987564bd4891820ba667615d59090b" kindref="member">Orientation</ref></type>
        <definition>Orientation Kernel::CoplanarOrientation_3::operator()</definition>
        <argsstring>(const Kernel::Point_3 &amp;p, const Kernel::Point_3 &amp;q, const Kernel::Point_3 &amp;r, const Kernel::Point_3 &amp;s)</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="classKernel_1ae82b7f4be77dd5b8819ebe419e4ae753" kindref="member">Kernel::Point_3</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classKernel_1ae82b7f4be77dd5b8819ebe419e4ae753" kindref="member">Kernel::Point_3</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classKernel_1ae82b7f4be77dd5b8819ebe419e4ae753" kindref="member">Kernel::Point_3</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classKernel_1ae82b7f4be77dd5b8819ebe419e4ae753" kindref="member">Kernel::Point_3</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>If <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>s</computeroutput> are collinear, then <ref refid="group__kernel__enums_1ga84f760a315c4f27cb4059db8a3a1159e" kindref="member">CGAL::COLLINEAR</ref> is returned. </para>        </briefdescription>
        <detaileddescription>
<para>If not, let <computeroutput>P</computeroutput> be the plane defined by the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput>. Note that the order defines the orientation of <computeroutput>P</computeroutput>. If <computeroutput>P</computeroutput> and the plane defined by <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>s</computeroutput> have the same orientation, then <ref refid="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a963eefff16725de743f4022f4e23fc0d" kindref="member">CGAL::POSITIVE</ref> is returned; otherwise <ref refid="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a3aef56502334293e3ad25e166d74bb2a" kindref="member">CGAL::NEGATIVE</ref> is returned.</para><para><simplesect kind="pre"><para><computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>r</computeroutput>, and <computeroutput>s</computeroutput> are coplanar and <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput> are not collinear. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/FunctionObjectConcepts.h" line="7220" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classKernel_1_1CoplanarOrientation__3_1aac655e1b87550abef70ad395c7b55d16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classKernel_1ac3987564bd4891820ba667615d59090b" kindref="member">Orientation</ref></type>
        <definition>Orientation Kernel::CoplanarOrientation_3::operator()</definition>
        <argsstring>(const Kernel::Point_3 &amp;p, const Kernel::Point_3 &amp;q, const Kernel::Point_3 &amp;r)</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="classKernel_1ae82b7f4be77dd5b8819ebe419e4ae753" kindref="member">Kernel::Point_3</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classKernel_1ae82b7f4be77dd5b8819ebe419e4ae753" kindref="member">Kernel::Point_3</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classKernel_1ae82b7f4be77dd5b8819ebe419e4ae753" kindref="member">Kernel::Point_3</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>If <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput> are collinear, then <ref refid="group__kernel__enums_1ga84f760a315c4f27cb4059db8a3a1159e" kindref="member">CGAL::COLLINEAR</ref> is returned. </para>        </briefdescription>
        <detaileddescription>
<para>If not, let <computeroutput>P</computeroutput> be the plane defined by the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput>. The return value in this case is either <ref refid="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a963eefff16725de743f4022f4e23fc0d" kindref="member">CGAL::POSITIVE</ref> or <ref refid="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a3aef56502334293e3ad25e166d74bb2a" kindref="member">CGAL::NEGATIVE</ref>, but we don&apos;t specify it explicitly. However, we guarantee that all calls to this predicate over 3 points in <computeroutput>P</computeroutput> will return a coherent orientation if considered as a 2D orientation in <computeroutput>P</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/FunctionObjectConcepts.h" line="7234" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para> <xrefsect id="refines_1_refines000205"><xreftitle>Refines</xreftitle><xrefdescription><para><computeroutput><ref refid="classAdaptableFunctor" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">AdaptableFunctor</ref></computeroutput> (with four arguments) </para></xrefdescription></xrefsect></para><para><simplesect kind="see"><para><computeroutput><ref refid="group__coplanar__orientation__grp" kindref="compound">CGAL::coplanar_orientation()</ref></computeroutput> </para></simplesect>
</para>    </detaileddescription>
    <location file="Concepts/FunctionObjectConcepts.h" line="7202" column="1" bodyfile="Concepts/FunctionObjectConcepts.h" bodystart="7202" bodyend="7241"/>
    <listofallmembers>
      <member refid="classKernel_1_1CoplanarOrientation__3_1aa24994f282b13f45a7f4019e481f67b4" prot="public" virt="non-virtual"><scope>Kernel::CoplanarOrientation_3</scope><name>operator()</name></member>
      <member refid="classKernel_1_1CoplanarOrientation__3_1aac655e1b87550abef70ad395c7b55d16" prot="public" virt="non-virtual"><scope>Kernel::CoplanarOrientation_3</scope><name>operator()</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
