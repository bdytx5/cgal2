<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__intersection__linear__grp" kind="group">
    <compoundname>intersection_linear_grp</compoundname>
    <title>CGAL::intersection() (2D/3D Linear Kernel)</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__intersection__linear__grp_1gab77f3cd98c4c4ff7acff59c98ab88ff0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>cpp11::result_of&lt; Kernel::Intersect_23(Type1, Type2)&gt;::type</type>
        <definition>cpp11::result_of&lt;Kernel::Intersect_23(Type1, Type2)&gt;::type CGAL::intersection</definition>
        <argsstring>(Type1&lt; Kernel &gt; obj1, Type2&lt; Kernel &gt; obj2)</argsstring>
        <name>intersection</name>
        <param>
          <type>Type1&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
          <declname>obj1</declname>
        </param>
        <param>
          <type>Type2&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
          <declname>obj2</declname>
        </param>
        <briefdescription>
<para>Two objects <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput> intersect if there is a point <computeroutput>p</computeroutput> that is part of both <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The intersection region of those two objects is defined as the set of all points <computeroutput>p</computeroutput> that are part of both <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput>. Note that for objects like triangles and polygons that enclose a bounded region, this region is considered part of the object. If a segment lies completely inside a triangle, then those two objects intersect and the intersection region is the complete segment.</para><para>Here, <computeroutput>Intersect_23</computeroutput> means either <computeroutput>Intersect_2</computeroutput> or <computeroutput>Intersect_3</computeroutput>, depending on the arguments.</para><para>The following tables give the possible values for <computeroutput>Type1</computeroutput> and <computeroutput>Type2</computeroutput>.</para><para><bold>2D Intersections</bold><linebreak/>
</para><para>The return type can be obtained through <computeroutput><ref refid="structCGAL_1_1cpp11_1_1result__of" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::cpp11::result_of</ref>&lt;<ref refid="classKernel_1_1Intersect__2" kindref="compound">Kernel::Intersect_2(A, B)</ref>&gt;::type</computeroutput>. It is equivalent to <computeroutput>boost::optional&lt; boost::variant&lt; T... &gt; &gt;</computeroutput>, the last column in the table providing the template parameter pack.</para><para> <table rows="16" cols="3"><row>
<entry thead="yes"><para>Type1  </para></entry><entry thead="yes"><para>Type2  </para></entry><entry thead="yes"><para>Return Type: <computeroutput>T...</computeroutput>   </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Iso__rectangle__2" kindref="compound">Iso_rectangle_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Iso__rectangle__2" kindref="compound">Iso_rectangle_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Iso__rectangle__2" kindref="compound">Iso_rectangle_2</ref> </para><para></para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Iso__rectangle__2" kindref="compound">Iso_rectangle_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Line__2" kindref="compound">Line_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>, or <ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Iso__rectangle__2" kindref="compound">Iso_rectangle_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Ray__2" kindref="compound">Ray_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>, or <ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Iso__rectangle__2" kindref="compound">Iso_rectangle_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>, or <ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Iso__rectangle__2" kindref="compound">Iso_rectangle_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Triangle__2" kindref="compound">Triangle_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>, or <ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>, or <ref refid="classCGAL_1_1Triangle__2" kindref="compound">Triangle_2</ref>, or std::vector&lt;<ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&gt;  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Line__2" kindref="compound">Line_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Line__2" kindref="compound">Line_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>, or <ref refid="classCGAL_1_1Line__2" kindref="compound">Line_2</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Line__2" kindref="compound">Line_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Ray__2" kindref="compound">Ray_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>, or <ref refid="classCGAL_1_1Ray__2" kindref="compound">Ray_2</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Line__2" kindref="compound">Line_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>, or <ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Line__2" kindref="compound">Line_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Triangle__2" kindref="compound">Triangle_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>, or <ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Ray__2" kindref="compound">Ray_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Ray__2" kindref="compound">Ray_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>, or <ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>, or <ref refid="classCGAL_1_1Ray__2" kindref="compound">Ray_2</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Ray__2" kindref="compound">Ray_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>, or <ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Ray__2" kindref="compound">Ray_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Triangle__2" kindref="compound">Triangle_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>, or <ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>, or <ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Triangle__2" kindref="compound">Triangle_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>, or <ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Triangle__2" kindref="compound">Triangle_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Triangle__2" kindref="compound">Triangle_2</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>, or <ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>, or <ref refid="classCGAL_1_1Triangle__2" kindref="compound">Triangle_2</ref>, or std::vector&lt;<ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&gt;  </para></entry></row>
</table>
</para><para><bold>3D Intersections</bold><linebreak/>
</para><para>The return type can be obtained through <computeroutput><ref refid="structCGAL_1_1cpp11_1_1result__of" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::cpp11::result_of</ref>&lt;<ref refid="classKernel_1_1Intersect__3" kindref="compound">Kernel::Intersect_3(A, B)</ref>&gt;::type</computeroutput>. It is equivalent to <computeroutput>boost::optional&lt; boost::variant&lt; T... &gt; &gt;</computeroutput>, the last column in the table providing the template parameter pack.</para><para> <table rows="18" cols="3"><row>
<entry thead="yes"><para>Type1  </para></entry><entry thead="yes"><para>Type2  </para></entry><entry thead="yes"><para>Return Type: <computeroutput>T...</computeroutput>   </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Line__3" kindref="compound">Line_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Line__3" kindref="compound">Line_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Line__3" kindref="compound">Line_3</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Line__3" kindref="compound">Line_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Line__3" kindref="compound">Line_3</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Line__3" kindref="compound">Line_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Ray__3" kindref="compound">Ray_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Ray__3" kindref="compound">Ray_3</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Line__3" kindref="compound">Line_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Line__3" kindref="compound">Line_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Triangle__3" kindref="compound">Triangle_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Line__3" kindref="compound">Line_3</ref>, or <ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Ray__3" kindref="compound">Ray_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Ray__3" kindref="compound">Ray_3</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Sphere__3" kindref="compound">Sphere_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Circle__3" kindref="compound">Circle_3</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Triangle__3" kindref="compound">Triangle_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>, or <ref refid="classCGAL_1_1Triangle__3" kindref="compound">Triangle_3</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Ray__3" kindref="compound">Ray_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Ray__3" kindref="compound">Ray_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Ray__3" kindref="compound">Ray_3</ref>, or <ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Ray__3" kindref="compound">Ray_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Ray__3" kindref="compound">Ray_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Triangle__3" kindref="compound">Triangle_3</ref>  p </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Triangle__3" kindref="compound">Triangle_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Sphere__3" kindref="compound">Sphere_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Sphere__3" kindref="compound">Sphere_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Circle__3" kindref="compound">Circle_3</ref>, or <ref refid="classCGAL_1_1Sphere__3" kindref="compound">Sphere_3</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Triangle__3" kindref="compound">Triangle_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Triangle__3" kindref="compound">Triangle_3</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>, or <ref refid="classCGAL_1_1Triangle__3" kindref="compound">Triangle_3</ref>, or std::vector &lt; <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref> &gt;  </para></entry></row>
</table>
</para><para><bold>Examples</bold><linebreak/>
</para><para>The following examples demonstrate the most common use of <computeroutput><ref refid="group__PkgKernelDFunctions_1ga0aa3e8b6bdf1bff509f8e2672ef194d1" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">intersection()</ref></computeroutput> functions with the 2D and 3D Linear Kernel.</para><para>In the first two examples we intersect a segment and a line. The result type can be obtained with <computeroutput><ref refid="structCGAL_1_1cpp11_1_1result__of" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::cpp11::result_of</ref></computeroutput>. It looks simpler if you use a C++ compiler which supports <computeroutput>auto</computeroutput>, but you must anyways know that the result type is a <computeroutput>boost::optional&lt;boost::variant&lt;..&gt; &gt;</computeroutput>, in order to unpack the point or segment.</para><para><ulink url="http://www.boost.org/libs/optional/"><computeroutput>boost::optional</computeroutput></ulink> comes in as there might be no intersection. <ulink url="http://www.boost.org/libs/variant/"><computeroutput>boost::variant</computeroutput></ulink> comes in as, if there is an intersection, it is either a point or a segment.</para><para>As explained in the boost manual pages for <ulink url="http://www.boost.org/libs/variant/"><computeroutput>boost::variant</computeroutput></ulink>, there are two ways to access the variants. The first examples uses <computeroutput>boost::get</computeroutput>.</para><para><linebreak/>
<bold>File</bold> <ref refid="Kernel_23_2intersection_get_8cpp-example" kindref="compound">Kernel_23/intersection_get.cpp</ref> <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_exact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/intersections.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Exact__predicates__exact__constructions__kernel" kindref="compound">CGAL::Exact_predicates_exact_constructions_kernel</ref><sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Point_2<sp/>Point_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Segment_2<sp/>Segment_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Line_2<sp/>Line_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Intersect_2<sp/>Intersect_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Segment_2<sp/>seg(Point_2(0,0),<sp/>Point_2(2,2));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Line_2<sp/>lin(1,-1,0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">CGAL::cpp11::result_of&lt;Intersect_2(Segment_2, Line_2)&gt;::type</ref></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="group__PkgKernelDFunctions_1ga0aa3e8b6bdf1bff509f8e2672ef194d1" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">intersection</ref>(seg,<sp/>lin);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Segment_2*<sp/>s<sp/>=<sp/>boost::get&lt;Segment_2&gt;(&amp;*result))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>*s<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point_2*<sp/>p<sp/>=<sp/>boost::get&lt;Point_2<sp/>&gt;(&amp;*result);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>*p<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>The second example uses <computeroutput>boost::apply_visitor</computeroutput>.</para><para><linebreak/>
<bold>File</bold> <ref refid="Kernel_23_2intersection_visitor_8cpp-example" kindref="compound">Kernel_23/intersection_visitor.cpp</ref> <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_exact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/intersections.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Exact__predicates__exact__constructions__kernel" kindref="compound">CGAL::Exact_predicates_exact_constructions_kernel</ref><sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Point_2<sp/>Point_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Segment_2<sp/>Segment_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Line_2<sp/>Line_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Intersect_2<sp/>Intersect_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Intersection_visitor<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>result_type;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point_2&amp;<sp/>p)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>p<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Segment_2&amp;<sp/>s)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>s<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Segment_2<sp/>seg(Point_2(0,0),<sp/>Point_2(1,1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Line_2<sp/>lin(1,-1,0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>C++11<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>auto<sp/>result<sp/>=<sp/>intersection(seg,<sp/>lin);</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>without<sp/>C++11</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">CGAL::cpp11::result_of&lt;Intersect_2(Segment_2, Line_2)&gt;::type</ref></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="group__PkgKernelDFunctions_1ga0aa3e8b6bdf1bff509f8e2672ef194d1" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_d.tag">intersection</ref>(seg,<sp/>lin);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result)<sp/>{<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>boost::apply_visitor(Intersection_visitor(),<sp/>*result);<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>intersection</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>A third example shows the use of the intersection function as a plain function call and with <computeroutput><ref refid="classCGAL_1_1Dispatch__output__iterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Dispatch_output_iterator</ref></computeroutput>, combined with a standard library algorithm.</para><para><linebreak/>
<bold>File</bold> <ref refid="Kernel_23_2intersections_8cpp-example" kindref="compound">Kernel_23/intersections.cpp</ref> <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_exact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/iterator.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/point_generators_2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/bind.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Exact__predicates__exact__constructions__kernel" kindref="compound">CGAL::Exact_predicates_exact_constructions_kernel</ref><sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Point_2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Segment_2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Segment;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Creator__uniform__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::Creator_uniform_2&lt;double,Point&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pt_creator;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CGAL::Random_points_on_segment_2&lt;Point,Pt_creator&gt;<sp/>P1;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CGAL::Random_points_on_circle_2&lt;Point,Pt_creator&gt;<sp/><sp/>P2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Creator__uniform__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::Creator_uniform_2&lt; Point, Segment&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Seg_creator;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Join__input__iterator__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::Join_input_iterator_2&lt; P1, P2, Seg_creator&gt;</ref><sp/><sp/>Seg_iterator;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Intersector{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">CGAL::cpp11::result_of&lt;K::Intersect_2(Segment,Segment)&gt;::type</ref><sp/>result_type;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Segment&amp;<sp/>s;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>K::Intersect_2<sp/>intersect;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Intersector(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Segment&amp;<sp/>seg):<sp/>s(seg)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>result_type</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>operator()<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Segment&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>intersect(s,<sp/>other);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;Segment&gt;<sp/>input;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Prepare<sp/>point<sp/>generator<sp/>for<sp/>the<sp/>horizontal<sp/>segment,<sp/>length<sp/>200.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>P1<sp/>p1(<sp/>Point(-100,0),<sp/>Point(100,0));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Prepare<sp/>point<sp/>generator<sp/>for<sp/>random<sp/>points<sp/>on<sp/>circle,<sp/>radius<sp/>250.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>P2<sp/>p2(<sp/>250);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>segments.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Seg_iterator<sp/>g(<sp/>p1,<sp/>p2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__STLAlgos_1gadba21cc5c30a79519438dfe0f9264255" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::cpp11::copy_n</ref>(<sp/>g,<sp/>200,<sp/>std::back_inserter(input));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>splitting<sp/>results<sp/>with<sp/>Dispatch_output_iterator</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;Point&gt;<sp/>points;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;Segment&gt;<sp/>segments;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Dispatch__output__iterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::Dispatch_output_iterator</ref>&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CGAL::cpp11::tuple&lt;Point,Segment&gt;,<sp/>CGAL::cpp11::tuple&lt;<sp/>std::back_insert_iterator&lt;std::vector&lt;Point&gt;<sp/>&gt;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::back_insert_iterator&lt;std::vector&lt;Segment&gt;<sp/>&gt;<sp/>&gt;<sp/>&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Dispatcher;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Dispatcher<sp/>disp<sp/>=<sp/>CGAL::dispatch_output&lt;Point,Segment&gt;(<sp/>std::back_inserter(points),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::back_inserter(segments)<sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>intersects<sp/>the<sp/>first<sp/>segment<sp/>of<sp/>input<sp/>with<sp/>all<sp/>other<sp/>segments</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>resulting<sp/>points<sp/>or<sp/>segments<sp/>are<sp/>written<sp/>in<sp/>the<sp/>vectors<sp/>with<sp/>the<sp/>same<sp/>names</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::transform(<sp/>input.begin(),<sp/>input.end(),<sp/>disp,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Intersector(input.front())<sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Point<sp/>intersections:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>points.size()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Segment<sp/>intersections:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>segments.size()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/intersections.h" line="353" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__intersection__linear__grp_1ga2992434e63396425b548089239de2d3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>boost::optional&lt; boost::variant&lt; Point_3, Line_3, Plane_3 &gt; &gt;</type>
        <definition>boost::optional&lt; boost::variant&lt; Point_3, Line_3, Plane_3 &gt; &gt; CGAL::intersection</definition>
        <argsstring>(const Plane_3&lt; Kernel &gt; &amp;pl1, const Plane_3&lt; Kernel &gt; &amp;pl2, const Plane_3&lt; Kernel &gt; &amp;pl3)</argsstring>
        <name>intersection</name>
        <param>
          <type>const Plane_3&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>pl1</declname>
        </param>
        <param>
          <type>const Plane_3&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>pl2</declname>
        </param>
        <param>
          <type>const Plane_3&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>pl3</declname>
        </param>
        <briefdescription>
<para>returns the intersection of 3 planes, which can be a point, a line, a plane, or empty. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/intersections.h" line="361" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
