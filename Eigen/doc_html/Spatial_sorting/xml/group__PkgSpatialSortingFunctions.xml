<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__PkgSpatialSortingFunctions" kind="group">
    <compoundname>PkgSpatialSortingFunctions</compoundname>
    <title>Functions</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgSpatialSortingFunctions_1ga1fa426fb0c0fdc1ec4950d7d08dfd1f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
          <param>
            <type>class PolicyTag</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::hilbert_sort</definition>
        <argsstring>(RandomAccessIterator begin, RandomAccessIterator end, const Traits &amp;traits=Default_traits, PolicyTag policy=Default_policy)</argsstring>
        <name>hilbert_sort</name>
        <param>
          <type><ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></type>
          <declname>begin</declname>
        </param>
        <param>
          <type><ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></type>
          <declname>end</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>traits</declname>
          <defval>Default_traits</defval>
        </param>
        <param>
          <type>PolicyTag</type>
          <declname>policy</declname>
          <defval>Default_policy</defval>
        </param>
        <briefdescription>
<para>The function <computeroutput><ref refid="group__PkgSpatialSortingFunctions_1ga1fa426fb0c0fdc1ec4950d7d08dfd1f7" kindref="member">hilbert_sort()</ref></computeroutput> sorts an iterator range of points along a Hilbert curve. </para>        </briefdescription>
        <detaileddescription>
<para>It sorts the range <computeroutput>[begin, end)</computeroutput> in place.</para><para>The default traits class <computeroutput>Default_traits</computeroutput> is the kernel in which the type <computeroutput>std::iterator_traits&lt;<ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref>&gt;::value_type</computeroutput> is defined. The default policy is <computeroutput><ref refid="group__PkgSpatialSortingUtils_1gabaa92ea6b71ca7eaaf9ddf8f8d1eb1c5" kindref="member">Hilbert_sort_median_policy()</ref></computeroutput> and the other option is <computeroutput><ref refid="group__PkgSpatialSortingUtils_1gab7a1539ef63348072146e101074deca1" kindref="member">Hilbert_sort_middle_policy()</ref></computeroutput>.</para><para><bold>Requirements</bold><linebreak/>
</para><para><orderedlist>
<listitem>
<para><computeroutput>std::iterator_traits&lt;<ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref>&gt;::value_type</computeroutput> is convertible to <computeroutput>Traits::Point_2</computeroutput>, <computeroutput>Traits::Point_3</computeroutput>, or <computeroutput>Traits::Point_d</computeroutput>. </para></listitem>
<listitem>
<para><computeroutput>Traits</computeroutput> is a model for concept <computeroutput><ref refid="classSpatialSortingTraits__2" kindref="compound">SpatialSortingTraits_2</ref></computeroutput>, <computeroutput><ref refid="classSpatialSortingTraits__3" kindref="compound">SpatialSortingTraits_3</ref></computeroutput>, or <computeroutput><ref refid="classSpatialSortingTraits__d" kindref="compound">SpatialSortingTraits_d</ref></computeroutput>. </para></listitem>
</orderedlist>
</para><para><bold>Implementation</bold><linebreak/>
</para><para>Creates an instance of <computeroutput><ref refid="classCGAL_1_1Hilbert__sort__2" kindref="compound">Hilbert_sort_2</ref>&lt;Traits, PolicyTag&gt;</computeroutput>, <computeroutput><ref refid="classCGAL_1_1Hilbert__sort__3" kindref="compound">Hilbert_sort_3</ref>&lt;Traits, PolicyTag&gt;</computeroutput>, or <computeroutput><ref refid="classCGAL_1_1Hilbert__sort__d" kindref="compound">Hilbert_sort_d</ref>&lt;Traits, PolicyTag&gt;</computeroutput> and calls its <computeroutput>operator()</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/hilbert_sort.h" line="36" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSpatialSortingFunctions_1ga749370ce96a883ddceb88a55ca6bdce1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
          <param>
            <type>class PolicyTag</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::hilbert_sort_on_sphere</definition>
        <argsstring>(RandomAccessIterator begin, RandomAccessIterator end, const Traits &amp;traits=Default_traits, PolicyTag policy=Default_policy, double sqr_radius=1.0, const Traits::Point_3 &amp;center=Default_center)</argsstring>
        <name>hilbert_sort_on_sphere</name>
        <param>
          <type><ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></type>
          <declname>begin</declname>
        </param>
        <param>
          <type><ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></type>
          <declname>end</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>traits</declname>
          <defval>Default_traits</defval>
        </param>
        <param>
          <type>PolicyTag</type>
          <declname>policy</declname>
          <defval>Default_policy</defval>
        </param>
        <param>
          <type>double</type>
          <declname>sqr_radius</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>const Traits::Point_3 &amp;</type>
          <declname>center</declname>
          <defval>Default_center</defval>
        </param>
        <briefdescription>
<para>The function <computeroutput><ref refid="group__PkgSpatialSortingFunctions_1ga749370ce96a883ddceb88a55ca6bdce1" kindref="member">hilbert_sort_on_sphere()</ref></computeroutput> sorts an iterator range of points that are supposed to be close to a given sphere along a Hilbert curve on that same sphere. </para>        </briefdescription>
        <detaileddescription>
<para>If input points are not close to the input sphere, this function still works, but it might not be a good sorting function.</para><para>It sorts the range <computeroutput>[begin, end)</computeroutput> in place.</para><para>The default traits class <computeroutput>Default_traits</computeroutput> is the kernel in which the type <computeroutput>std::iterator_traits&lt;<ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref>&gt;::value_type</computeroutput> is defined. The default policy is <computeroutput><ref refid="group__PkgSpatialSortingUtils_1gabaa92ea6b71ca7eaaf9ddf8f8d1eb1c5" kindref="member">Hilbert_sort_median_policy()</ref></computeroutput> and the other option is <computeroutput><ref refid="group__PkgSpatialSortingUtils_1gab7a1539ef63348072146e101074deca1" kindref="member">Hilbert_sort_middle_policy()</ref></computeroutput>.</para><para>The input sphere is given by a squared radius and a center, parameter <computeroutput>sqr_radius</computeroutput> and parameter <computeroutput>center</computeroutput> respectively. The default squared radius of the sphere is 1.0. The default center of the sphere is the origin (0,0,0).</para><para><bold>Requirements</bold><linebreak/>
</para><para><orderedlist>
<listitem>
<para><computeroutput>std::iterator_traits&lt;<ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref>&gt;::value_type</computeroutput> is convertible to <computeroutput>Traits::Point_3</computeroutput>. </para></listitem>
<listitem>
<para><computeroutput>Traits</computeroutput> is a model for concept <computeroutput><ref refid="classSpatialSortingTraits__3" kindref="compound">SpatialSortingTraits_3</ref></computeroutput>. </para></listitem>
</orderedlist>
</para><para><bold>Precondition</bold><linebreak/>
</para><para><orderedlist>
<listitem>
<para><computeroutput>sqr_radius</computeroutput> greater than 0. </para></listitem>
</orderedlist>
</para><para><bold>Implementation</bold><linebreak/>
</para><para>Creates an instance of <computeroutput>Hilbert_sort_on_sphere&lt;Traits, PolicyTag&gt;</computeroutput>, and calls its <computeroutput>operator()</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/hilbert_sort_on_sphere.h" line="43" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSpatialSortingFunctions_1ga2f4d770272b84481f7c4c9b20b7174c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
          <param>
            <type>class PolicyTag</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::spatial_sort</definition>
        <argsstring>(RandomAccessIterator begin, RandomAccessIterator end, const Traits &amp;traits=Default_traits, PolicyTag policy=Default_policy, std::ptrdiff_t threshold_hilbert=default, std::ptrdiff_t threshold_multiscale=default, double ratio=default)</argsstring>
        <name>spatial_sort</name>
        <param>
          <type><ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></type>
          <declname>begin</declname>
        </param>
        <param>
          <type><ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></type>
          <declname>end</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>traits</declname>
          <defval>Default_traits</defval>
        </param>
        <param>
          <type>PolicyTag</type>
          <declname>policy</declname>
          <defval>Default_policy</defval>
        </param>
        <param>
          <type>std::ptrdiff_t</type>
          <declname>threshold_hilbert</declname>
          <defval>default</defval>
        </param>
        <param>
          <type>std::ptrdiff_t</type>
          <declname>threshold_multiscale</declname>
          <defval>default</defval>
        </param>
        <param>
          <type>double</type>
          <declname>ratio</declname>
          <defval>default</defval>
        </param>
        <briefdescription>
<para>The function <computeroutput><ref refid="group__PkgSpatialSortingFunctions_1ga2f4d770272b84481f7c4c9b20b7174c7" kindref="member">spatial_sort()</ref></computeroutput> sorts an iterator range of points in a way that improves space locality. </para>        </briefdescription>
        <detaileddescription>
<para>Two points close in the order will be close geometrically, and two points close geometrically will have a high probability of being close in the order.</para><para>It sorts the range <computeroutput>[begin, end)</computeroutput> in place.</para><para>The default traits class <computeroutput>Default_traits</computeroutput> is the kernel in which the type <computeroutput>std::iterator_traits&lt;<ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref>&gt;::value_type</computeroutput> is defined.</para><para>The default policy is <computeroutput><ref refid="group__PkgSpatialSortingUtils_1gabaa92ea6b71ca7eaaf9ddf8f8d1eb1c5" kindref="member">Hilbert_sort_median_policy()</ref></computeroutput> and the other option is <computeroutput><ref refid="group__PkgSpatialSortingUtils_1gab7a1539ef63348072146e101074deca1" kindref="member">Hilbert_sort_middle_policy()</ref></computeroutput>.</para><para>The default values for the thresholds and the ratio depend on the dimension.</para><para><bold>Requirements</bold><linebreak/>
</para><para><orderedlist>
<listitem>
<para><computeroutput>std::iterator_traits&lt;<ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref>&gt;::value_type</computeroutput> is convertible to <computeroutput>Traits::Point_2</computeroutput>, <computeroutput>Traits::Point_3</computeroutput>, or <computeroutput>Traits::Point_d</computeroutput>. </para></listitem>
<listitem>
<para><computeroutput>Traits</computeroutput> is a model for concept <computeroutput><ref refid="classSpatialSortingTraits__2" kindref="compound">SpatialSortingTraits_2</ref></computeroutput>, <computeroutput><ref refid="classSpatialSortingTraits__3" kindref="compound">SpatialSortingTraits_3</ref></computeroutput>, or <computeroutput><ref refid="classSpatialSortingTraits__d" kindref="compound">SpatialSortingTraits_d</ref></computeroutput>. </para></listitem>
</orderedlist>
</para><para><bold>Implementation</bold><linebreak/>
</para><para>Creates an instance of <computeroutput><ref refid="classCGAL_1_1Multiscale__sort" kindref="compound">Multiscale_sort</ref>&lt;Hilbert_sort&gt;</computeroutput> where <computeroutput>Hilbert_sort</computeroutput> is an Hilbert sorting object, and calls its <computeroutput>operator()</computeroutput>.</para><para>The <computeroutput>threshold_hilbert</computeroutput> is the minimal size of a point set to be subdivided recursively during Hilbert sorting, otherwise random order is used. The <computeroutput>threshold_multiscale</computeroutput> value is the minimal size for a sample to call Hilbert sort, otherwise random order is used. The <computeroutput>ratio</computeroutput> value is used to split the original set in two subsets, spatial sort is applied on the first subset of size <computeroutput>ratio</computeroutput> times the original size of the set, Hilbert sort is applied on the second subset. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/spatial_sort.h" line="49" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSpatialSortingFunctions_1gaabfdd4cf9c2c180eacef956d646fcb6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
          <param>
            <type>class PolicyTag</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::spatial_sort_on_sphere</definition>
        <argsstring>(RandomAccessIterator begin, RandomAccessIterator end, const Traits &amp;traits=Default_traits, PolicyTag policy=Default_policy, double sqr_radius=1.0, const Traits::Point_3 &amp;center=Default_center, std::ptrdiff_t threshold_hilbert=default, std::ptrdiff_t threshold_multiscale=default, double ratio=default)</argsstring>
        <name>spatial_sort_on_sphere</name>
        <param>
          <type><ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></type>
          <declname>begin</declname>
        </param>
        <param>
          <type><ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></type>
          <declname>end</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>traits</declname>
          <defval>Default_traits</defval>
        </param>
        <param>
          <type>PolicyTag</type>
          <declname>policy</declname>
          <defval>Default_policy</defval>
        </param>
        <param>
          <type>double</type>
          <declname>sqr_radius</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>const Traits::Point_3 &amp;</type>
          <declname>center</declname>
          <defval>Default_center</defval>
        </param>
        <param>
          <type>std::ptrdiff_t</type>
          <declname>threshold_hilbert</declname>
          <defval>default</defval>
        </param>
        <param>
          <type>std::ptrdiff_t</type>
          <declname>threshold_multiscale</declname>
          <defval>default</defval>
        </param>
        <param>
          <type>double</type>
          <declname>ratio</declname>
          <defval>default</defval>
        </param>
        <briefdescription>
<para>The function <computeroutput><ref refid="group__PkgSpatialSortingFunctions_1gaabfdd4cf9c2c180eacef956d646fcb6a" kindref="member">spatial_sort_on_sphere()</ref></computeroutput> sorts an iterator range of points in a way that improves space locality with respect to the intrinsic metric on the sphere given as input. </para>        </briefdescription>
        <detaileddescription>
<para>Two points close in the order will be close on the sphere, and two points close on the sphere will have a high probability of being close in the order. The input points are supposed to be close to the input sphere. If input points are not close to the input sphere, this function still works, but it might not be a good sorting function.</para><para>It sorts the range <computeroutput>[begin, end)</computeroutput> in place.</para><para>The default traits class <computeroutput>Default_traits</computeroutput> is the kernel in which the type <computeroutput>std::iterator_traits&lt;<ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref>&gt;::value_type</computeroutput> is defined.</para><para>The default policy is <computeroutput><ref refid="group__PkgSpatialSortingUtils_1gabaa92ea6b71ca7eaaf9ddf8f8d1eb1c5" kindref="member">Hilbert_sort_median_policy()</ref></computeroutput> and the other option is <computeroutput><ref refid="group__PkgSpatialSortingUtils_1gab7a1539ef63348072146e101074deca1" kindref="member">Hilbert_sort_middle_policy()</ref></computeroutput>.</para><para>The input sphere is given by a squared radius and a center, parameter <computeroutput>sqr_radius</computeroutput> and parameter <computeroutput>center</computeroutput> respectively. The default squared radius of the sphere is 1.0. The default center of the sphere is the origin (0,0,0).</para><para><bold>Requirements</bold><linebreak/>
</para><para><orderedlist>
<listitem>
<para><computeroutput>std::iterator_traits&lt;<ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref>&gt;::value_type</computeroutput> is convertible to <computeroutput>Traits::Point_3</computeroutput>. </para></listitem>
<listitem>
<para><computeroutput>Traits</computeroutput> is a model for concept <computeroutput><ref refid="classSpatialSortingTraits__3" kindref="compound">SpatialSortingTraits_3</ref></computeroutput>. </para></listitem>
</orderedlist>
</para><para><bold>Precondition</bold><linebreak/>
</para><para><orderedlist>
<listitem>
<para><computeroutput>sqr_radius</computeroutput> greater than 0. </para></listitem>
</orderedlist>
</para><para><bold>Implementation</bold><linebreak/>
</para><para>Creates an instance of <computeroutput><ref refid="classCGAL_1_1Multiscale__sort" kindref="compound">Multiscale_sort</ref>&lt;<ref refid="classCGAL_1_1Hilbert__sort__on__sphere__3" kindref="compound">Hilbert_sort_on_sphere_3</ref>&gt;</computeroutput> where <computeroutput><ref refid="classCGAL_1_1Hilbert__sort__on__sphere__3" kindref="compound">Hilbert_sort_on_sphere_3</ref></computeroutput> is an Hilbert sorting on the sphere object, and calls its <computeroutput>operator()</computeroutput>.</para><para>The <computeroutput>threshold_hilbert</computeroutput> is the minimal size of a point set to be subdivided recursively during Hilbert sorting, otherwise random order is used. The <computeroutput>threshold_multiscale</computeroutput> value is the minimal size for a sample to call the <computeroutput><ref refid="classCGAL_1_1Hilbert__sort__on__sphere__3" kindref="compound">Hilbert_sort_on_sphere_3</ref></computeroutput> functor, otherwise random order is used. The <computeroutput>ratio</computeroutput> value is used to split the original set in two subsets, spatial sort is applied on the first subset of size <computeroutput>ratio</computeroutput> times the original size of the set, <computeroutput><ref refid="classCGAL_1_1Hilbert__sort__on__sphere__3" kindref="compound">Hilbert_sort_on_sphere_3</ref></computeroutput> functor is applied on the second subset. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/spatial_sort_on_sphere.h" line="59" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
