<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespaceCGAL_1_1Classification" kind="namespace" language="C++">
    <compoundname>CGAL::Classification</compoundname>
    <innerclass refid="classCGAL_1_1Classification_1_1Classifier" prot="public">CGAL::Classification::Classifier</innerclass>
    <innerclass refid="classCGAL_1_1Classification_1_1Cluster" prot="public">CGAL::Classification::Cluster</innerclass>
    <innerclass refid="classCGAL_1_1Classification_1_1ETHZ__random__forest__classifier" prot="public">CGAL::Classification::ETHZ_random_forest_classifier</innerclass>
    <innerclass refid="classCGAL_1_1Classification_1_1Evaluation" prot="public">CGAL::Classification::Evaluation</innerclass>
    <innerclass refid="classCGAL_1_1Classification_1_1Face__descriptor__to__center__of__mass__map" prot="public">CGAL::Classification::Face_descriptor_to_center_of_mass_map</innerclass>
    <innerclass refid="classCGAL_1_1Classification_1_1Face__descriptor__to__face__descriptor__with__bbox__map" prot="public">CGAL::Classification::Face_descriptor_to_face_descriptor_with_bbox_map</innerclass>
    <innerclass refid="classCGAL_1_1Classification_1_1Feature__base" prot="public">CGAL::Classification::Feature_base</innerclass>
    <innerclass refid="classCGAL_1_1Classification_1_1Feature__handle" prot="public">CGAL::Classification::Feature_handle</innerclass>
    <innerclass refid="classCGAL_1_1Classification_1_1Feature__set" prot="public">CGAL::Classification::Feature_set</innerclass>
    <innerclass refid="classCGAL_1_1Classification_1_1Label" prot="public">CGAL::Classification::Label</innerclass>
    <innerclass refid="classCGAL_1_1Classification_1_1Label__handle" prot="public">CGAL::Classification::Label_handle</innerclass>
    <innerclass refid="classCGAL_1_1Classification_1_1Label__set" prot="public">CGAL::Classification::Label_set</innerclass>
    <innerclass refid="classCGAL_1_1Classification_1_1Local__eigen__analysis" prot="public">CGAL::Classification::Local_eigen_analysis</innerclass>
    <innerclass refid="classCGAL_1_1Classification_1_1Mesh__feature__generator" prot="public">CGAL::Classification::Mesh_feature_generator</innerclass>
    <innerclass refid="classCGAL_1_1Classification_1_1Mesh__neighborhood" prot="public">CGAL::Classification::Mesh_neighborhood</innerclass>
    <innerclass refid="classCGAL_1_1Classification_1_1NeighborQuery" prot="public">CGAL::Classification::NeighborQuery</innerclass>
    <innerclass refid="classCGAL_1_1Classification_1_1OpenCV__random__forest__classifier" prot="public">CGAL::Classification::OpenCV_random_forest_classifier</innerclass>
    <innerclass refid="classCGAL_1_1Classification_1_1Planimetric__grid" prot="public">CGAL::Classification::Planimetric_grid</innerclass>
    <innerclass refid="classCGAL_1_1Classification_1_1Point__set__feature__generator" prot="public">CGAL::Classification::Point_set_feature_generator</innerclass>
    <innerclass refid="classCGAL_1_1Classification_1_1Point__set__neighborhood" prot="public">CGAL::Classification::Point_set_neighborhood</innerclass>
    <innerclass refid="classCGAL_1_1Classification_1_1Sum__of__weighted__features__classifier" prot="public">CGAL::Classification::Sum_of_weighted_features_classifier</innerclass>
    <innernamespace refid="namespaceCGAL_1_1Classification_1_1Feature">CGAL::Classification::Feature</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceCGAL_1_1Classification_1a821191c51c0d68935f3dd35413cdcd0a" prot="public" static="no">
        <type><ref refid="classCGAL_1_1cpp11_1_1array" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::cpp11::array</ref>&lt; unsigned char, 3 &gt;</type>
        <definition>typedef CGAL::cpp11::array&lt;unsigned char, 3&gt; CGAL::Classification::RGB_Color</definition>
        <argsstring></argsstring>
        <name>RGB_Color</name>
        <briefdescription>
<para>Color described in red/green/blue space. </para>        </briefdescription>
        <detaileddescription>
<para>Each component is stored as an unsigned char ranging from 0 (no color) to 255 (full color). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/Color.h" line="38" column="1" bodyfile="CGAL/Classification/Color.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceCGAL_1_1Classification_1af952648fbd6aae27d9ccb1f308bcf966" prot="public" static="no">
        <type><ref refid="classCGAL_1_1cpp11_1_1array" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::cpp11::array</ref>&lt; float, 3 &gt;</type>
        <definition>typedef CGAL::cpp11::array&lt;float, 3&gt; CGAL::Classification::HSV_Color</definition>
        <argsstring></argsstring>
        <name>HSV_Color</name>
        <briefdescription>
<para>Color described in hue/saturation/value space. </para>        </briefdescription>
        <detaileddescription>
<para>Each component is stored as a float:</para><para><itemizedlist>
<listitem><para><computeroutput>hue</computeroutput> ranges from 0° to 360° (corresponding to the color tint)</para></listitem><listitem><para><computeroutput>saturation</computeroutput> ranges from 0.0 (gray) to 100.0 (full saturation)</para></listitem><listitem><para><computeroutput>value</computeroutput> ranges from 0.0 (black) to 100.0 (white) </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/Color.h" line="49" column="1" bodyfile="CGAL/Classification/Color.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgClassificationCluster_1ga6c0c1a27071cf5ebfac967d6847cbbf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ItemRange</type>
          </param>
          <param>
            <type>typename ItemMap</type>
          </param>
          <param>
            <type>typename IndexMap</type>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Classification::create_clusters_from_indices</definition>
        <argsstring>(const ItemRange &amp;range, ItemMap item_map, IndexMap index_map, std::vector&lt; Cluster&lt; ItemRange, ItemMap &gt; &gt; &amp;clusters)</argsstring>
        <name>create_clusters_from_indices</name>
        <param>
          <type>const ItemRange &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>ItemMap</type>
          <declname>item_map</declname>
        </param>
        <param>
          <type>IndexMap</type>
          <declname>index_map</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classCGAL_1_1Classification_1_1Cluster" kindref="compound">Cluster</ref>&lt; ItemRange, ItemMap &gt; &gt; &amp;</type>
          <declname>clusters</declname>
        </param>
        <briefdescription>
<para>Given a set of cluster indices, segments the input <computeroutput>range</computeroutput> into <computeroutput><ref refid="classCGAL_1_1Classification_1_1Cluster" kindref="compound">Cluster</ref></computeroutput> objects. </para>        </briefdescription>
        <detaileddescription>
<para>All items whose index value <computeroutput>idx</computeroutput> (accessed through <computeroutput>index_map</computeroutput>) is the same are stored in the same cluster at position <computeroutput>idx</computeroutput> in the <computeroutput>clusters</computeroutput> vector.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ItemRange</parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput>. Its iterator type is <computeroutput><ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></computeroutput>. Its value type depends on the data that is classified (for example, <computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Point_3</ref></computeroutput> or <computeroutput><ref refid="classCGAL_1_1Triangle__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Triangle_3</ref></computeroutput>).</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ItemMap</parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> whose key type is the value type of the iterator of <computeroutput>ItemRange</computeroutput> and value type is the type of item to classify (for example, <computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Point_3</ref></computeroutput>).</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IndexMap</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with value type <computeroutput>int</computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>input range. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>item_map</parametername>
</parameternamelist>
<parameterdescription>
<para>property map to access the input items. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index_map</parametername>
</parameternamelist>
<parameterdescription>
<para>property map that associates the index of an item in the input range to the index of a cluster (-1 if item is not assigned to a cluster). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clusters</parametername>
</parameternamelist>
<parameterdescription>
<para>container where generated <computeroutput><ref refid="classCGAL_1_1Classification_1_1Cluster" kindref="compound">Cluster</ref></computeroutput> objects are stored. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/Cluster.h" line="210" column="1" bodyfile="CGAL/Classification/Cluster.h" bodystart="210" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgClassificationMain_1gaea3ed82bf801bc9fbd00b63da48df73e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ConcurrencyTag</type>
          </param>
          <param>
            <type>typename ItemRange</type>
          </param>
          <param>
            <type>typename Classifier</type>
          </param>
          <param>
            <type>typename LabelIndexRange</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Classification::classify</definition>
        <argsstring>(const ItemRange &amp;input, const Label_set &amp;labels, const Classifier &amp;classifier, LabelIndexRange &amp;output)</argsstring>
        <name>classify</name>
        <param>
          <type>const ItemRange &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Classification_1_1Label__set" kindref="compound">Label_set</ref> &amp;</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Classification_1_1Classifier" kindref="compound">Classifier</ref> &amp;</type>
          <declname>classifier</declname>
        </param>
        <param>
          <type>LabelIndexRange &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Runs the classification algorithm without any regularization. </para>        </briefdescription>
        <detaileddescription>
<para>There is no relationship between items, the classification energy is only minimized itemwise. This method is quick but produces suboptimal results.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ConcurrencyTag</parametername>
</parameternamelist>
<parameterdescription>
<para>enables sequential versus parallel algorithm. Possible values are <computeroutput><ref refid="structCGAL_1_1Parallel__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Parallel_tag</ref></computeroutput> or <computeroutput><ref refid="structCGAL_1_1Sequential__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Sequential_tag</ref></computeroutput>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ItemRange</parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput>. Its iterator type is <computeroutput><ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></computeroutput>. Its value type depends on the data that is classified (for example, <computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Point_3</ref></computeroutput> or <computeroutput><ref refid="classCGAL_1_1Triangle__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Triangle_3</ref></computeroutput>).</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classCGAL_1_1Classification_1_1Classifier" kindref="compound">Classifier</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classCGAL_1_1Classification_1_1Classifier" kindref="compound">Classifier</ref></computeroutput>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Model</parametername>
</parameternamelist>
<parameterdescription>
<para>of <computeroutput><ref refid="classRange" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput> with random access iterators whose value type is an integer type.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>input range. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>labels</parametername>
</parameternamelist>
<parameterdescription>
<para>set of input labels. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>classifier</parametername>
</parameternamelist>
<parameterdescription>
<para>input classifier. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>where to store the result. It is stored as a sequence, ordered like the input range, containing for each point the index (in the <computeroutput><ref refid="classCGAL_1_1Classification_1_1Label__set" kindref="compound">Label_set</ref></computeroutput>) of the assigned label. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/classify.h" line="321" column="1" bodyfile="CGAL/Classification/classify.h" bodystart="321" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgClassificationMain_1ga266e487bd1ab9dd4036e3fbd2ec4e8a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ConcurrencyTag</type>
          </param>
          <param>
            <type>typename ItemRange</type>
          </param>
          <param>
            <type>typename ItemMap</type>
          </param>
          <param>
            <type>typename NeighborQuery</type>
          </param>
          <param>
            <type>typename Classifier</type>
          </param>
          <param>
            <type>typename LabelIndexRange</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Classification::classify_with_local_smoothing</definition>
        <argsstring>(const ItemRange &amp;input, const ItemMap item_map, const Label_set &amp;labels, const Classifier &amp;classifier, const NeighborQuery &amp;neighbor_query, LabelIndexRange &amp;output)</argsstring>
        <name>classify_with_local_smoothing</name>
        <param>
          <type>const ItemRange &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const ItemMap</type>
          <declname>item_map</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Classification_1_1Label__set" kindref="compound">Label_set</ref> &amp;</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Classification_1_1Classifier" kindref="compound">Classifier</ref> &amp;</type>
          <declname>classifier</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Classification_1_1NeighborQuery" kindref="compound">NeighborQuery</ref> &amp;</type>
          <declname>neighbor_query</declname>
        </param>
        <param>
          <type>LabelIndexRange &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Runs the classification algorithm with a local smoothing. </para>        </briefdescription>
        <detaileddescription>
<para>The computed classification energy is smoothed on a user defined local neighborhood of items. This method is a compromise between efficiency and better quality results.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ConcurrencyTag</parametername>
</parameternamelist>
<parameterdescription>
<para>enables sequential versus parallel algorithm. Possible values are <computeroutput><ref refid="structCGAL_1_1Parallel__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Parallel_tag</ref></computeroutput> or <computeroutput><ref refid="structCGAL_1_1Sequential__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Sequential_tag</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ItemRange</parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput>. Its iterator type is <computeroutput><ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ItemMap</parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> whose key type is the value type of the iterator of <computeroutput>ItemRange</computeroutput> and value type is the type of item to classify (for example, <computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Point_3</ref></computeroutput>). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classCGAL_1_1Classification_1_1NeighborQuery" kindref="compound">NeighborQuery</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classCGAL_1_1Classification_1_1NeighborQuery" kindref="compound">NeighborQuery</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classCGAL_1_1Classification_1_1Classifier" kindref="compound">Classifier</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classCGAL_1_1Classification_1_1Classifier" kindref="compound">Classifier</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Model</parametername>
</parameternamelist>
<parameterdescription>
<para>of <computeroutput><ref refid="classRange" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput> with random access iterators whose value type is an integer type.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>input range. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>item_map</parametername>
</parameternamelist>
<parameterdescription>
<para>property map to access the input items. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>labels</parametername>
</parameternamelist>
<parameterdescription>
<para>set of input labels. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>classifier</parametername>
</parameternamelist>
<parameterdescription>
<para>input classifier. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>neighbor_query</parametername>
</parameternamelist>
<parameterdescription>
<para>used to access neighborhoods of items. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>where to store the result. It is stored as a sequence, ordered like the input range, containing for each point the index (in the <computeroutput><ref refid="classCGAL_1_1Classification_1_1Label__set" kindref="compound">Label_set</ref></computeroutput>) of the assigned label. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/classify.h" line="384" column="1" bodyfile="CGAL/Classification/classify.h" bodystart="384" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgClassificationMain_1ga2a4c1b0816b81b628dc9023e104449eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ConcurrencyTag</type>
          </param>
          <param>
            <type>typename ItemRange</type>
          </param>
          <param>
            <type>typename ItemMap</type>
          </param>
          <param>
            <type>typename NeighborQuery</type>
          </param>
          <param>
            <type>typename Classifier</type>
          </param>
          <param>
            <type>typename LabelIndexRange</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Classification::classify_with_graphcut</definition>
        <argsstring>(const ItemRange &amp;input, const ItemMap item_map, const Label_set &amp;labels, const Classifier &amp;classifier, const NeighborQuery &amp;neighbor_query, const float strength, const std::size_t min_number_of_subdivisions, LabelIndexRange &amp;output)</argsstring>
        <name>classify_with_graphcut</name>
        <param>
          <type>const ItemRange &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const ItemMap</type>
          <declname>item_map</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Classification_1_1Label__set" kindref="compound">Label_set</ref> &amp;</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Classification_1_1Classifier" kindref="compound">Classifier</ref> &amp;</type>
          <declname>classifier</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Classification_1_1NeighborQuery" kindref="compound">NeighborQuery</ref> &amp;</type>
          <declname>neighbor_query</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>strength</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>min_number_of_subdivisions</declname>
        </param>
        <param>
          <type>LabelIndexRange &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Runs the classification algorithm with a global regularization based on a graph cut. </para>        </briefdescription>
        <detaileddescription>
<para>The computed classification energy is globally regularized through an alpha-expansion algorithm. This method is slow but provides the user with good quality results.</para><para>To speed up computation, the input domain can be subdivided into smaller subsets such that several smaller graph cuts are applied instead of a big one. The computation of these smaller graph cuts can be done in parallel. Increasing the number of subsets allows for faster computation times but can also reduce the quality of the results.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ConcurrencyTag</parametername>
</parameternamelist>
<parameterdescription>
<para>enables sequential versus parallel algorithm. Possible values are <computeroutput><ref refid="structCGAL_1_1Parallel__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Parallel_tag</ref></computeroutput> or <computeroutput><ref refid="structCGAL_1_1Sequential__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Sequential_tag</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ItemRange</parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput>. Its iterator type is <computeroutput><ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ItemMap</parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> whose key type is the value type of the iterator of <computeroutput>ItemRange</computeroutput> and value type is the type of item to classify (for example, <computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Point_3</ref></computeroutput>). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classCGAL_1_1Classification_1_1NeighborQuery" kindref="compound">NeighborQuery</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classCGAL_1_1Classification_1_1NeighborQuery" kindref="compound">NeighborQuery</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classCGAL_1_1Classification_1_1Classifier" kindref="compound">Classifier</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classCGAL_1_1Classification_1_1Classifier" kindref="compound">Classifier</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Model</parametername>
</parameternamelist>
<parameterdescription>
<para>of <computeroutput><ref refid="classRange" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput> with random access iterators whose value type is an integer type.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>input range. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>item_map</parametername>
</parameternamelist>
<parameterdescription>
<para>property map to access the input items. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>labels</parametername>
</parameternamelist>
<parameterdescription>
<para>set of input labels. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>classifier</parametername>
</parameternamelist>
<parameterdescription>
<para>input classifier. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>neighbor_query</parametername>
</parameternamelist>
<parameterdescription>
<para>used to access neighborhoods of items. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strength</parametername>
</parameternamelist>
<parameterdescription>
<para>strength of the regularization with respect to the classification energy. Higher values produce more regularized output but may result in a loss of details. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_number_of_subdivisions</parametername>
</parameternamelist>
<parameterdescription>
<para>minimum number of subdivisions (for parallel processing to be efficient, this should be at least the number of cores of the processor). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>where to store the result. It is stored as a sequence, ordered like the input range, containing for each point the index (in the <computeroutput><ref refid="classCGAL_1_1Classification_1_1Label__set" kindref="compound">Label_set</ref></computeroutput>) of the assigned label. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/classify.h" line="470" column="1" bodyfile="CGAL/Classification/classify.h" bodystart="470" bodyend="544"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="Concepts/Classifier.h" line="5" column="1"/>
  </compounddef>
</doxygen>
