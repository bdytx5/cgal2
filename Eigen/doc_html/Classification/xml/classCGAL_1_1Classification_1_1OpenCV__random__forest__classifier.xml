<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Classification_1_1OpenCV__random__forest__classifier" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Classification::OpenCV_random_forest_classifier</compoundname>
    <includes local="no">CGAL/Classification/OpenCV_random_forest_classifier.h</includes>
      <sectiondef kind="user-defined">
      <header>Constructor</header>
      <memberdef kind="function" id="classCGAL_1_1Classification_1_1OpenCV__random__forest__classifier_1a219e0bfd26bb613f61f0d6a479d9e128" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CGAL::Classification::OpenCV_random_forest_classifier::OpenCV_random_forest_classifier</definition>
        <argsstring>(const Label_set &amp;labels, const Feature_set &amp;features, int max_depth=20, int min_sample_count=5, int max_categories=15, int max_number_of_trees_in_the_forest=100, float forest_accuracy=0.01f)</argsstring>
        <name>OpenCV_random_forest_classifier</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Classification_1_1Label__set" kindref="compound">Label_set</ref> &amp;</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Classification_1_1Feature__set" kindref="compound">Feature_set</ref> &amp;</type>
          <declname>features</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_depth</declname>
          <defval>20</defval>
        </param>
        <param>
          <type>int</type>
          <declname>min_sample_count</declname>
          <defval>5</defval>
        </param>
        <param>
          <type>int</type>
          <declname>max_categories</declname>
          <defval>15</defval>
        </param>
        <param>
          <type>int</type>
          <declname>max_number_of_trees_in_the_forest</declname>
          <defval>100</defval>
        </param>
        <param>
          <type>float</type>
          <declname>forest_accuracy</declname>
          <defval>0.01f</defval>
        </param>
        <briefdescription>
<para>Instantiate the classifier using the sets of <computeroutput>labels</computeroutput> and <computeroutput>features</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Parameters documentation is copy-pasted from <ulink url="http://docs.opencv.org/2.4/modules/ml/doc/random_trees.html">the official documentation of OpenCV</ulink>. For more details on this method, please refer to it.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>labels</parametername>
</parameternamelist>
<parameterdescription>
<para>label set used. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>features</parametername>
</parameternamelist>
<parameterdescription>
<para>feature set used. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_depth</parametername>
</parameternamelist>
<parameterdescription>
<para>the depth of the tree. A low value will likely underfit and conversely a high value will likely overfit. The optimal value can be obtained using cross validation or other suitable methods. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_sample_count</parametername>
</parameternamelist>
<parameterdescription>
<para>minimum samples required at a leaf node for it to be split. A reasonable value is a small percentage of the total data e.g. 1%. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_categories</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classCGAL_1_1Classification_1_1Cluster" kindref="compound">Cluster</ref> possible values of a categorical variable into <formula id="21">$ K \leq max\_categories $</formula> clusters to find a suboptimal split. If a discrete variable, on which the training procedure tries to make a split, takes more than max_categories values, the precise best subset estimation may take a very long time because the algorithm is exponential. Instead, many decision trees engines (including ML) try to find sub-optimal split in this case by clustering all the samples into max_categories clusters that is some categories are merged together. The clustering is applied only in <formula id="22">$ n&gt;2-class $</formula> classification problems for categorical variables with <formula id="23">$ N &gt; max\_categories $</formula> possible values. In case of regression and 2-class classification the optimal split can be found efficiently without employing clustering, thus the parameter is not used in these cases. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_number_of_trees_in_the_forest</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of trees in the forest (surprise, surprise). Typically the more trees you have the better the accuracy. However, the improvement in accuracy generally diminishes and asymptotes pass a certain number of trees. Also to keep in mind, the number of tree increases the prediction time linearly. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>forest_accuracy</parametername>
</parameternamelist>
<parameterdescription>
<para>Sufficient accuracy (OOB error). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/OpenCV_random_forest_classifier.h" line="83" column="1" bodyfile="CGAL/Classification/OpenCV_random_forest_classifier.h" bodystart="83" bodyend="98"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Parameters</header>
      <memberdef kind="function" id="classCGAL_1_1Classification_1_1OpenCV__random__forest__classifier_1af3849a27e3056b723346370fc14ca766" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Classification::OpenCV_random_forest_classifier::set_max_depth</definition>
        <argsstring>(int max_depth)</argsstring>
        <name>set_max_depth</name>
        <param>
          <type>int</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/OpenCV_random_forest_classifier.h" line="115" column="1" bodyfile="CGAL/Classification/OpenCV_random_forest_classifier.h" bodystart="115" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Classification_1_1OpenCV__random__forest__classifier_1a6a13a8a10a57727b42134e3e88feac36" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Classification::OpenCV_random_forest_classifier::set_min_sample_count</definition>
        <argsstring>(int min_sample_count)</argsstring>
        <name>set_min_sample_count</name>
        <param>
          <type>int</type>
          <declname>min_sample_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/OpenCV_random_forest_classifier.h" line="116" column="1" bodyfile="CGAL/Classification/OpenCV_random_forest_classifier.h" bodystart="116" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Classification_1_1OpenCV__random__forest__classifier_1ae92513aeab88d81dcbcdef7d00aa0417" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Classification::OpenCV_random_forest_classifier::set_max_categories</definition>
        <argsstring>(int max_categories)</argsstring>
        <name>set_max_categories</name>
        <param>
          <type>int</type>
          <declname>max_categories</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/OpenCV_random_forest_classifier.h" line="117" column="1" bodyfile="CGAL/Classification/OpenCV_random_forest_classifier.h" bodystart="117" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Classification_1_1OpenCV__random__forest__classifier_1a49edbc6cefbe859182627e0b9817fe84" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Classification::OpenCV_random_forest_classifier::set_max_number_of_trees_in_the_forest</definition>
        <argsstring>(int max_number_of_trees_in_the_forest)</argsstring>
        <name>set_max_number_of_trees_in_the_forest</name>
        <param>
          <type>int</type>
          <declname>max_number_of_trees_in_the_forest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/OpenCV_random_forest_classifier.h" line="118" column="1" bodyfile="CGAL/Classification/OpenCV_random_forest_classifier.h" bodystart="118" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Classification_1_1OpenCV__random__forest__classifier_1a5433dd5549e8dcb0b1ff8392ec5de352" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Classification::OpenCV_random_forest_classifier::set_forest_accuracy</definition>
        <argsstring>(float forest_accuracy)</argsstring>
        <name>set_forest_accuracy</name>
        <param>
          <type>float</type>
          <declname>forest_accuracy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/OpenCV_random_forest_classifier.h" line="120" column="1" bodyfile="CGAL/Classification/OpenCV_random_forest_classifier.h" bodystart="120" bodyend="120"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Training</header>
      <memberdef kind="function" id="classCGAL_1_1Classification_1_1OpenCV__random__forest__classifier_1a3d27a4b344a3ab8d56445738852bfde7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename LabelIndexRange</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Classification::OpenCV_random_forest_classifier::train</definition>
        <argsstring>(const LabelIndexRange &amp;ground_truth)</argsstring>
        <name>train</name>
        <param>
          <type>const LabelIndexRange &amp;</type>
          <declname>ground_truth</declname>
        </param>
        <briefdescription>
<para>Runs the training algorithm. </para>        </briefdescription>
        <detaileddescription>
<para>From the set of provided ground truth, this algorithm estimates sets up the random trees that produce the most accurate result with respect to this ground truth.</para><para><simplesect kind="pre"><para>At least one ground truth item should be assigned to each label.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ground_truth</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of label indices. It should contain for each input item, in the same order as the input set, the index of the corresponding label in the <computeroutput><ref refid="classCGAL_1_1Classification_1_1Label__set" kindref="compound">Label_set</ref></computeroutput> provided in the constructor. Input items that do not have a ground truth information should be given the value <computeroutput>-1</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/OpenCV_random_forest_classifier.h" line="145" column="1" bodyfile="CGAL/Classification/OpenCV_random_forest_classifier.h" bodystart="145" bodyend="217"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Input/Output</header>
      <memberdef kind="function" id="classCGAL_1_1Classification_1_1OpenCV__random__forest__classifier_1a22cd8321a3b3e2d0e6f56714b30f17e4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Classification::OpenCV_random_forest_classifier::save_configuration</definition>
        <argsstring>(const char *filename)</argsstring>
        <name>save_configuration</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Saves the current configuration in the file named <computeroutput>filename</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>This allows to easily save and recover a specific classification configuration.</para><para>The output file is written in an XML format that is readable by the <computeroutput><ref refid="classCGAL_1_1Classification_1_1OpenCV__random__forest__classifier_1a615e82342bb7afdcf1e9b0e2c64c9d22" kindref="member">load_configuration()</ref></computeroutput> method. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/OpenCV_random_forest_classifier.h" line="270" column="1" bodyfile="CGAL/Classification/OpenCV_random_forest_classifier.h" bodystart="270" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Classification_1_1OpenCV__random__forest__classifier_1a615e82342bb7afdcf1e9b0e2c64c9d22" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Classification::OpenCV_random_forest_classifier::load_configuration</definition>
        <argsstring>(const char *filename)</argsstring>
        <name>load_configuration</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Loads a configuration from the file named <computeroutput>filename</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The input file should be in the XML format written by the <computeroutput><ref refid="classCGAL_1_1Classification_1_1OpenCV__random__forest__classifier_1a22cd8321a3b3e2d0e6f56714b30f17e4" kindref="member">save_configuration()</ref></computeroutput> method. The feature set of the classifier should contain the exact same features in the exact same order as the ones present when the file was generated using <computeroutput><ref refid="classCGAL_1_1Classification_1_1OpenCV__random__forest__classifier_1a22cd8321a3b3e2d0e6f56714b30f17e4" kindref="member">save_configuration()</ref></computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/OpenCV_random_forest_classifier.h" line="284" column="1" bodyfile="CGAL/Classification/OpenCV_random_forest_classifier.h" bodystart="284" bodyend="294"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classCGAL_1_1Classification_1_1OpenCV__random__forest__classifier_1aae2cae1e76af33b697ded5abbad6e9c7" prot="private" static="no" mutable="no">
        <type>const <ref refid="classCGAL_1_1Classification_1_1Label__set" kindref="compound">Label_set</ref> &amp;</type>
        <definition>const Label_set&amp; CGAL::Classification::OpenCV_random_forest_classifier::m_labels</definition>
        <argsstring></argsstring>
        <name>m_labels</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/OpenCV_random_forest_classifier.h" line="51" column="1" bodyfile="CGAL/Classification/OpenCV_random_forest_classifier.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCGAL_1_1Classification_1_1OpenCV__random__forest__classifier_1a5800f33b5d7d67cee336677f8858d76d" prot="private" static="no" mutable="no">
        <type>const <ref refid="classCGAL_1_1Classification_1_1Feature__set" kindref="compound">Feature_set</ref> &amp;</type>
        <definition>const Feature_set&amp; CGAL::Classification::OpenCV_random_forest_classifier::m_features</definition>
        <argsstring></argsstring>
        <name>m_features</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/OpenCV_random_forest_classifier.h" line="52" column="1" bodyfile="CGAL/Classification/OpenCV_random_forest_classifier.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCGAL_1_1Classification_1_1OpenCV__random__forest__classifier_1acd1d0186b787cea47630361a0857dcfe" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int CGAL::Classification::OpenCV_random_forest_classifier::m_max_depth</definition>
        <argsstring></argsstring>
        <name>m_max_depth</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/OpenCV_random_forest_classifier.h" line="53" column="1" bodyfile="CGAL/Classification/OpenCV_random_forest_classifier.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCGAL_1_1Classification_1_1OpenCV__random__forest__classifier_1a0f34cb199381235fc64d8aa644404b49" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int CGAL::Classification::OpenCV_random_forest_classifier::m_min_sample_count</definition>
        <argsstring></argsstring>
        <name>m_min_sample_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/OpenCV_random_forest_classifier.h" line="54" column="1" bodyfile="CGAL/Classification/OpenCV_random_forest_classifier.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCGAL_1_1Classification_1_1OpenCV__random__forest__classifier_1aab06171aad8754b723a2a6f376d1ac97" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int CGAL::Classification::OpenCV_random_forest_classifier::m_max_categories</definition>
        <argsstring></argsstring>
        <name>m_max_categories</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/OpenCV_random_forest_classifier.h" line="55" column="1" bodyfile="CGAL/Classification/OpenCV_random_forest_classifier.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCGAL_1_1Classification_1_1OpenCV__random__forest__classifier_1a583f332e0f7c1f59eb7fdc34b8064d80" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int CGAL::Classification::OpenCV_random_forest_classifier::m_max_number_of_trees_in_the_forest</definition>
        <argsstring></argsstring>
        <name>m_max_number_of_trees_in_the_forest</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/OpenCV_random_forest_classifier.h" line="56" column="1" bodyfile="CGAL/Classification/OpenCV_random_forest_classifier.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCGAL_1_1Classification_1_1OpenCV__random__forest__classifier_1a099bb00119c3e74d33761b07d6030489" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float CGAL::Classification::OpenCV_random_forest_classifier::m_forest_accuracy</definition>
        <argsstring></argsstring>
        <name>m_forest_accuracy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/OpenCV_random_forest_classifier.h" line="57" column="1" bodyfile="CGAL/Classification/OpenCV_random_forest_classifier.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCGAL_1_1Classification_1_1OpenCV__random__forest__classifier_1abefd0f40f27102f596ea945bdd64da35" prot="private" static="no" mutable="no">
        <type>CvRTrees *</type>
        <definition>CvRTrees* CGAL::Classification::OpenCV_random_forest_classifier::rtree</definition>
        <argsstring></argsstring>
        <name>rtree</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/OpenCV_random_forest_classifier.h" line="60" column="1" bodyfile="CGAL/Classification/OpenCV_random_forest_classifier.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Classifier based on the OpenCV version of random forest algorithm. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>This class requires the <ref refid="installation_1thirdpartyOpenCV" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OpenCV</ref> library.</para></simplesect>
<xrefsect id="models_1_models000002"><xreftitle>Is Model Of</xreftitle><xrefdescription><para><computeroutput><ref refid="classCGAL_1_1Classification_1_1Classifier" kindref="compound">CGAL::Classification::Classifier</ref></computeroutput> </para></xrefdescription></xrefsect></para>    </detaileddescription>
    <location file="CGAL/Classification/OpenCV_random_forest_classifier.h" line="50" column="1" bodyfile="CGAL/Classification/OpenCV_random_forest_classifier.h" bodystart="49" bodyend="297"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Classification_1_1OpenCV__random__forest__classifier_1a615e82342bb7afdcf1e9b0e2c64c9d22" prot="public" virt="non-virtual"><scope>CGAL::Classification::OpenCV_random_forest_classifier</scope><name>load_configuration</name></member>
      <member refid="classCGAL_1_1Classification_1_1OpenCV__random__forest__classifier_1a5800f33b5d7d67cee336677f8858d76d" prot="private" virt="non-virtual"><scope>CGAL::Classification::OpenCV_random_forest_classifier</scope><name>m_features</name></member>
      <member refid="classCGAL_1_1Classification_1_1OpenCV__random__forest__classifier_1a099bb00119c3e74d33761b07d6030489" prot="private" virt="non-virtual"><scope>CGAL::Classification::OpenCV_random_forest_classifier</scope><name>m_forest_accuracy</name></member>
      <member refid="classCGAL_1_1Classification_1_1OpenCV__random__forest__classifier_1aae2cae1e76af33b697ded5abbad6e9c7" prot="private" virt="non-virtual"><scope>CGAL::Classification::OpenCV_random_forest_classifier</scope><name>m_labels</name></member>
      <member refid="classCGAL_1_1Classification_1_1OpenCV__random__forest__classifier_1aab06171aad8754b723a2a6f376d1ac97" prot="private" virt="non-virtual"><scope>CGAL::Classification::OpenCV_random_forest_classifier</scope><name>m_max_categories</name></member>
      <member refid="classCGAL_1_1Classification_1_1OpenCV__random__forest__classifier_1acd1d0186b787cea47630361a0857dcfe" prot="private" virt="non-virtual"><scope>CGAL::Classification::OpenCV_random_forest_classifier</scope><name>m_max_depth</name></member>
      <member refid="classCGAL_1_1Classification_1_1OpenCV__random__forest__classifier_1a583f332e0f7c1f59eb7fdc34b8064d80" prot="private" virt="non-virtual"><scope>CGAL::Classification::OpenCV_random_forest_classifier</scope><name>m_max_number_of_trees_in_the_forest</name></member>
      <member refid="classCGAL_1_1Classification_1_1OpenCV__random__forest__classifier_1a0f34cb199381235fc64d8aa644404b49" prot="private" virt="non-virtual"><scope>CGAL::Classification::OpenCV_random_forest_classifier</scope><name>m_min_sample_count</name></member>
      <member refid="classCGAL_1_1Classification_1_1OpenCV__random__forest__classifier_1a219e0bfd26bb613f61f0d6a479d9e128" prot="public" virt="non-virtual"><scope>CGAL::Classification::OpenCV_random_forest_classifier</scope><name>OpenCV_random_forest_classifier</name></member>
      <member refid="classCGAL_1_1Classification_1_1OpenCV__random__forest__classifier_1abefd0f40f27102f596ea945bdd64da35" prot="private" virt="non-virtual"><scope>CGAL::Classification::OpenCV_random_forest_classifier</scope><name>rtree</name></member>
      <member refid="classCGAL_1_1Classification_1_1OpenCV__random__forest__classifier_1a22cd8321a3b3e2d0e6f56714b30f17e4" prot="public" virt="non-virtual"><scope>CGAL::Classification::OpenCV_random_forest_classifier</scope><name>save_configuration</name></member>
      <member refid="classCGAL_1_1Classification_1_1OpenCV__random__forest__classifier_1a5433dd5549e8dcb0b1ff8392ec5de352" prot="public" virt="non-virtual"><scope>CGAL::Classification::OpenCV_random_forest_classifier</scope><name>set_forest_accuracy</name></member>
      <member refid="classCGAL_1_1Classification_1_1OpenCV__random__forest__classifier_1ae92513aeab88d81dcbcdef7d00aa0417" prot="public" virt="non-virtual"><scope>CGAL::Classification::OpenCV_random_forest_classifier</scope><name>set_max_categories</name></member>
      <member refid="classCGAL_1_1Classification_1_1OpenCV__random__forest__classifier_1af3849a27e3056b723346370fc14ca766" prot="public" virt="non-virtual"><scope>CGAL::Classification::OpenCV_random_forest_classifier</scope><name>set_max_depth</name></member>
      <member refid="classCGAL_1_1Classification_1_1OpenCV__random__forest__classifier_1a49edbc6cefbe859182627e0b9817fe84" prot="public" virt="non-virtual"><scope>CGAL::Classification::OpenCV_random_forest_classifier</scope><name>set_max_number_of_trees_in_the_forest</name></member>
      <member refid="classCGAL_1_1Classification_1_1OpenCV__random__forest__classifier_1a6a13a8a10a57727b42134e3e88feac36" prot="public" virt="non-virtual"><scope>CGAL::Classification::OpenCV_random_forest_classifier</scope><name>set_min_sample_count</name></member>
      <member refid="classCGAL_1_1Classification_1_1OpenCV__random__forest__classifier_1a3d27a4b344a3ab8d56445738852bfde7" prot="public" virt="non-virtual"><scope>CGAL::Classification::OpenCV_random_forest_classifier</scope><name>train</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
