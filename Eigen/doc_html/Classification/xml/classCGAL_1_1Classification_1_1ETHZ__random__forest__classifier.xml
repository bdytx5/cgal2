<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Classification_1_1ETHZ__random__forest__classifier" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Classification::ETHZ_random_forest_classifier</compoundname>
    <includes local="no">CGAL/Classification/ETHZ_random_forest_classifier.h</includes>
      <sectiondef kind="user-defined">
      <header>Constructor</header>
      <memberdef kind="function" id="classCGAL_1_1Classification_1_1ETHZ__random__forest__classifier_1aded88281879ee75a212ffc42cc01e255" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CGAL::Classification::ETHZ_random_forest_classifier::ETHZ_random_forest_classifier</definition>
        <argsstring>(const Label_set &amp;labels, const Feature_set &amp;features)</argsstring>
        <name>ETHZ_random_forest_classifier</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Classification_1_1Label__set" kindref="compound">Label_set</ref> &amp;</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Classification_1_1Feature__set" kindref="compound">Feature_set</ref> &amp;</type>
          <declname>features</declname>
        </param>
        <briefdescription>
<para>Instantiate the classifier using the sets of <computeroutput>labels</computeroutput> and <computeroutput>features</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/ETHZ_random_forest_classifier.h" line="88" column="1" bodyfile="CGAL/Classification/ETHZ_random_forest_classifier.h" bodystart="88" bodyend="91"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Training</header>
      <memberdef kind="function" id="classCGAL_1_1Classification_1_1ETHZ__random__forest__classifier_1a5ab1605d9f7e92c1206c6ff456acd6d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename LabelIndexRange</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Classification::ETHZ_random_forest_classifier::train</definition>
        <argsstring>(const LabelIndexRange &amp;ground_truth, bool reset_trees=true, std::size_t num_trees=25, std::size_t max_depth=20)</argsstring>
        <name>train</name>
        <param>
          <type>const LabelIndexRange &amp;</type>
          <declname>ground_truth</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reset_trees</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>num_trees</declname>
          <defval>25</defval>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>max_depth</declname>
          <defval>20</defval>
        </param>
        <briefdescription>
<para>Runs the training algorithm. </para>        </briefdescription>
        <detaileddescription>
<para>From the set of provided ground truth, this algorithm estimates sets up the random trees that produce the most accurate result with respect to this ground truth.</para><para><simplesect kind="pre"><para>At least one ground truth item should be assigned to each label.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ground_truth</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of label indices. It should contain for each input item, in the same order as the input set, the index of the corresponding label in the <computeroutput><ref refid="classCGAL_1_1Classification_1_1Label__set" kindref="compound">Label_set</ref></computeroutput> provided in the constructor. Input items that do not have a ground truth information should be given the value <computeroutput>-1</computeroutput>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reset_trees</parametername>
</parameternamelist>
<parameterdescription>
<para>should be set to <computeroutput>false</computeroutput> if the users wants to <emphasis>add</emphasis> new trees to the existing forest, and kept to <computeroutput>true</computeroutput> if the training should be recomputing from scratch (discarding the current forest).</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_trees</parametername>
</parameternamelist>
<parameterdescription>
<para>number of trees generated by the training algorithm. Higher values may improve result at the cost of higher computation times (in general, using a few dozens of trees is enough).</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_depth</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum depth of the trees. Higher values will improve how the forest fits the training set. A overly low value will underfit the test data and conversely an overly high value will likely overfit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/ETHZ_random_forest_classifier.h" line="138" column="1" bodyfile="CGAL/Classification/ETHZ_random_forest_classifier.h" bodystart="138" bodyend="178"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Input/Output</header>
      <memberdef kind="function" id="classCGAL_1_1Classification_1_1ETHZ__random__forest__classifier_1a47b61175613f56651b24bf4445a52af9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Classification::ETHZ_random_forest_classifier::save_configuration</definition>
        <argsstring>(std::ostream &amp;output)</argsstring>
        <name>save_configuration</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Saves the current configuration in the stream <computeroutput>output</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>This allows to easily save and recover a specific classification configuration.</para><para>The output file is written in an GZIP container that is readable by the <computeroutput><ref refid="classCGAL_1_1Classification_1_1ETHZ__random__forest__classifier_1a4d238624ac9fd5d6cf14c85348ee2eaa" kindref="member">load_configuration()</ref></computeroutput> method. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/ETHZ_random_forest_classifier.h" line="213" column="1" bodyfile="CGAL/Classification/ETHZ_random_forest_classifier.h" bodystart="213" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Classification_1_1ETHZ__random__forest__classifier_1a4d238624ac9fd5d6cf14c85348ee2eaa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Classification::ETHZ_random_forest_classifier::load_configuration</definition>
        <argsstring>(std::istream &amp;input)</argsstring>
        <name>load_configuration</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Loads a configuration from the stream <computeroutput>input</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The input file should be a GZIP container written by the <computeroutput><ref refid="classCGAL_1_1Classification_1_1ETHZ__random__forest__classifier_1a47b61175613f56651b24bf4445a52af9" kindref="member">save_configuration()</ref></computeroutput> method. The feature set of the classifier should contain the exact same features in the exact same order as the ones present when the file was generated using <computeroutput><ref refid="classCGAL_1_1Classification_1_1ETHZ__random__forest__classifier_1a47b61175613f56651b24bf4445a52af9" kindref="member">save_configuration()</ref></computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/ETHZ_random_forest_classifier.h" line="231" column="1" bodyfile="CGAL/Classification/ETHZ_random_forest_classifier.h" bodystart="231" bodyend="243"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classCGAL_1_1Classification_1_1ETHZ__random__forest__classifier_1afa6415db819c0f7144ec1443116a9b51" prot="private" static="no">
        <type>CGAL::internal::liblearning::RandomForest::RandomForest&lt; CGAL::internal::liblearning::RandomForest::NodeGini&lt; CGAL::internal::liblearning::RandomForest::AxisAlignedSplitter &gt; &gt;</type>
        <definition>typedef CGAL::internal::liblearning::RandomForest::RandomForest&lt; CGAL::internal::liblearning::RandomForest::NodeGini &lt; CGAL::internal::liblearning::RandomForest::AxisAlignedSplitter&gt; &gt; CGAL::Classification::ETHZ_random_forest_classifier::Forest</definition>
        <argsstring></argsstring>
        <name>Forest</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/ETHZ_random_forest_classifier.h" line="73" column="1" bodyfile="CGAL/Classification/ETHZ_random_forest_classifier.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classCGAL_1_1Classification_1_1ETHZ__random__forest__classifier_1adf942068d682c508c7c4b46a5718829b" prot="private" static="no" mutable="no">
        <type>const <ref refid="classCGAL_1_1Classification_1_1Label__set" kindref="compound">Label_set</ref> &amp;</type>
        <definition>const Label_set&amp; CGAL::Classification::ETHZ_random_forest_classifier::m_labels</definition>
        <argsstring></argsstring>
        <name>m_labels</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/ETHZ_random_forest_classifier.h" line="75" column="1" bodyfile="CGAL/Classification/ETHZ_random_forest_classifier.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCGAL_1_1Classification_1_1ETHZ__random__forest__classifier_1aaf6a1b67012d823d613a4923bd746832" prot="private" static="no" mutable="no">
        <type>const <ref refid="classCGAL_1_1Classification_1_1Feature__set" kindref="compound">Feature_set</ref> &amp;</type>
        <definition>const Feature_set&amp; CGAL::Classification::ETHZ_random_forest_classifier::m_features</definition>
        <argsstring></argsstring>
        <name>m_features</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/ETHZ_random_forest_classifier.h" line="76" column="1" bodyfile="CGAL/Classification/ETHZ_random_forest_classifier.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCGAL_1_1Classification_1_1ETHZ__random__forest__classifier_1a5ab79b29a52362950db6a711ea0d9919" prot="private" static="no" mutable="no">
        <type>Forest *</type>
        <definition>Forest* CGAL::Classification::ETHZ_random_forest_classifier::m_rfc</definition>
        <argsstring></argsstring>
        <name>m_rfc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/ETHZ_random_forest_classifier.h" line="77" column="1" bodyfile="CGAL/Classification/ETHZ_random_forest_classifier.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Classifier based on the ETH Zurich version of random forest algorithm <ref refid="citelist_1CITEREF_cgal:w-erftl-14" kindref="member">[2]</ref>. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>This classifier is distributed under the MIT license.</para></simplesect>
<xrefsect id="models_1_models000007"><xreftitle>Is Model Of</xreftitle><xrefdescription><para><computeroutput><ref refid="classCGAL_1_1Classification_1_1Classifier" kindref="compound">CGAL::Classification::Classifier</ref></computeroutput> </para></xrefdescription></xrefsect></para>    </detaileddescription>
    <location file="CGAL/Classification/ETHZ_random_forest_classifier.h" line="70" column="1" bodyfile="CGAL/Classification/ETHZ_random_forest_classifier.h" bodystart="69" bodyend="245"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Classification_1_1ETHZ__random__forest__classifier_1aded88281879ee75a212ffc42cc01e255" prot="public" virt="non-virtual"><scope>CGAL::Classification::ETHZ_random_forest_classifier</scope><name>ETHZ_random_forest_classifier</name></member>
      <member refid="classCGAL_1_1Classification_1_1ETHZ__random__forest__classifier_1afa6415db819c0f7144ec1443116a9b51" prot="private" virt="non-virtual"><scope>CGAL::Classification::ETHZ_random_forest_classifier</scope><name>Forest</name></member>
      <member refid="classCGAL_1_1Classification_1_1ETHZ__random__forest__classifier_1a4d238624ac9fd5d6cf14c85348ee2eaa" prot="public" virt="non-virtual"><scope>CGAL::Classification::ETHZ_random_forest_classifier</scope><name>load_configuration</name></member>
      <member refid="classCGAL_1_1Classification_1_1ETHZ__random__forest__classifier_1aaf6a1b67012d823d613a4923bd746832" prot="private" virt="non-virtual"><scope>CGAL::Classification::ETHZ_random_forest_classifier</scope><name>m_features</name></member>
      <member refid="classCGAL_1_1Classification_1_1ETHZ__random__forest__classifier_1adf942068d682c508c7c4b46a5718829b" prot="private" virt="non-virtual"><scope>CGAL::Classification::ETHZ_random_forest_classifier</scope><name>m_labels</name></member>
      <member refid="classCGAL_1_1Classification_1_1ETHZ__random__forest__classifier_1a5ab79b29a52362950db6a711ea0d9919" prot="private" virt="non-virtual"><scope>CGAL::Classification::ETHZ_random_forest_classifier</scope><name>m_rfc</name></member>
      <member refid="classCGAL_1_1Classification_1_1ETHZ__random__forest__classifier_1a47b61175613f56651b24bf4445a52af9" prot="public" virt="non-virtual"><scope>CGAL::Classification::ETHZ_random_forest_classifier</scope><name>save_configuration</name></member>
      <member refid="classCGAL_1_1Classification_1_1ETHZ__random__forest__classifier_1a5ab1605d9f7e92c1206c6ff456acd6d7" prot="public" virt="non-virtual"><scope>CGAL::Classification::ETHZ_random_forest_classifier</scope><name>train</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
