<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__PkgClassificationCluster" kind="group">
    <compoundname>PkgClassificationCluster</compoundname>
    <title>Cluster Classification</title>
    <innerclass refid="classCGAL_1_1Classification_1_1Feature_1_1Cluster__vertical__extent" prot="public">CGAL::Classification::Feature::Cluster_vertical_extent</innerclass>
    <innerclass refid="classCGAL_1_1Classification_1_1Feature_1_1Cluster__variance__of__feature" prot="public">CGAL::Classification::Feature::Cluster_variance_of_feature</innerclass>
    <innerclass refid="classCGAL_1_1Classification_1_1Feature_1_1Cluster__mean__of__feature" prot="public">CGAL::Classification::Feature::Cluster_mean_of_feature</innerclass>
    <innerclass refid="classCGAL_1_1Classification_1_1Feature_1_1Cluster__size" prot="public">CGAL::Classification::Feature::Cluster_size</innerclass>
    <innerclass refid="classCGAL_1_1Classification_1_1Cluster" prot="public">CGAL::Classification::Cluster</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgClassificationCluster_1ga6c0c1a27071cf5ebfac967d6847cbbf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ItemRange</type>
          </param>
          <param>
            <type>typename ItemMap</type>
          </param>
          <param>
            <type>typename IndexMap</type>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Classification::create_clusters_from_indices</definition>
        <argsstring>(const ItemRange &amp;range, ItemMap item_map, IndexMap index_map, std::vector&lt; Cluster&lt; ItemRange, ItemMap &gt; &gt; &amp;clusters)</argsstring>
        <name>create_clusters_from_indices</name>
        <param>
          <type>const ItemRange &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>ItemMap</type>
          <declname>item_map</declname>
        </param>
        <param>
          <type>IndexMap</type>
          <declname>index_map</declname>
        </param>
        <param>
          <type>std::vector&lt; Cluster&lt; ItemRange, ItemMap &gt; &gt; &amp;</type>
          <declname>clusters</declname>
        </param>
        <briefdescription>
<para>Given a set of cluster indices, segments the input <computeroutput>range</computeroutput> into <computeroutput><ref refid="classCGAL_1_1Classification_1_1Cluster" kindref="compound">Cluster</ref></computeroutput> objects. </para>        </briefdescription>
        <detaileddescription>
<para>All items whose index value <computeroutput>idx</computeroutput> (accessed through <computeroutput>index_map</computeroutput>) is the same are stored in the same cluster at position <computeroutput>idx</computeroutput> in the <computeroutput>clusters</computeroutput> vector.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ItemRange</parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput>. Its iterator type is <computeroutput><ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></computeroutput>. Its value type depends on the data that is classified (for example, <computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Point_3</ref></computeroutput> or <computeroutput><ref refid="classCGAL_1_1Triangle__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Triangle_3</ref></computeroutput>).</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ItemMap</parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> whose key type is the value type of the iterator of <computeroutput>ItemRange</computeroutput> and value type is the type of item to classify (for example, <computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Point_3</ref></computeroutput>).</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IndexMap</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with value type <computeroutput>int</computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>input range. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>item_map</parametername>
</parameternamelist>
<parameterdescription>
<para>property map to access the input items. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index_map</parametername>
</parameternamelist>
<parameterdescription>
<para>property map that associates the index of an item in the input range to the index of a cluster (-1 if item is not assigned to a cluster). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clusters</parametername>
</parameternamelist>
<parameterdescription>
<para>container where generated <computeroutput><ref refid="classCGAL_1_1Classification_1_1Cluster" kindref="compound">Cluster</ref></computeroutput> objects are stored. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/Cluster.h" line="210" column="1" bodyfile="CGAL/Classification/Cluster.h" bodystart="210" bodyend="227"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Data structures specialized to classify clusters. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
