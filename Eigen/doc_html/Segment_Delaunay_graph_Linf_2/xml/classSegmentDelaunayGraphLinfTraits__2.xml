<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classSegmentDelaunayGraphLinfTraits__2" kind="class" language="C++" prot="public">
    <compoundname>SegmentDelaunayGraphLinfTraits_2</compoundname>
    <includes local="no">Concepts/SegmentDelaunayGraphLinfTraits_2.h</includes>
    <innerclass refid="classSegmentDelaunayGraphLinfTraits__2_1_1Construct__sdg__bisector__2" prot="public">SegmentDelaunayGraphLinfTraits_2::Construct_sdg_bisector_2</innerclass>
    <innerclass refid="classSegmentDelaunayGraphLinfTraits__2_1_1Construct__sdg__bisector__ray__2" prot="public">SegmentDelaunayGraphLinfTraits_2::Construct_sdg_bisector_ray_2</innerclass>
    <innerclass refid="classSegmentDelaunayGraphLinfTraits__2_1_1Construct__sdg__bisector__segment__2" prot="public">SegmentDelaunayGraphLinfTraits_2::Construct_sdg_bisector_segment_2</innerclass>
      <sectiondef kind="user-defined">
      <header>Bisector construction tag</header>
      <memberdef kind="typedef" id="classSegmentDelaunayGraphLinfTraits__2_1a305b6c96a083dfd5fdddf11796b03e31" prot="public" static="no">
        <type>char</type>
        <definition>typedef char SegmentDelaunayGraphLinfTraits_2::Has_bisector_constructions_type</definition>
        <argsstring></argsstring>
        <name>Has_bisector_constructions_type</name>
        <briefdescription>
<para>If this tag type is defined in the concept, then the concept should also contain three bisector drawing class templates, <computeroutput><ref refid="classSegmentDelaunayGraphLinfTraits__2_1_1Construct__sdg__bisector__2" kindref="compound">Construct_sdg_bisector_2</ref></computeroutput>, <computeroutput><ref refid="classSegmentDelaunayGraphLinfTraits__2_1_1Construct__sdg__bisector__ray__2" kindref="compound">Construct_sdg_bisector_ray_2</ref></computeroutput>, and <computeroutput><ref refid="classSegmentDelaunayGraphLinfTraits__2_1_1Construct__sdg__bisector__segment__2" kindref="compound">Construct_sdg_bisector_segment_2</ref></computeroutput>, that will be used when drawing the dual of the <formula id="2">$L_{\infty}$</formula> segment Delaunay graph. </para>        </briefdescription>
        <detaileddescription>
<para>This is the only way to draw correctly the <formula id="2">$L_{\infty}$</formula> segment Voronoi diagram. If this type is omitted, then the default drawing methods are used, which are only good for the <formula id="3">$L_2$</formula> segment Voronoi diagram. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/SegmentDelaunayGraphLinfTraits_2.h" line="68" column="1" bodyfile="Concepts/SegmentDelaunayGraphLinfTraits_2.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classSegmentDelaunayGraphLinfTraits__2_1aae97dcc281c9d9c714acb2416d4278eb" prot="public" static="no">
        <type>Hidden_type</type>
        <definition>typedef Hidden_type SegmentDelaunayGraphLinfTraits_2::Construct_svd_vertex_2</definition>
        <argsstring></argsstring>
        <name>Construct_svd_vertex_2</name>
        <briefdescription>
<para>A constructor for the point <formula id="4">$ v $</formula> at which the three <formula id="0">$ L_{\infty} $</formula> bisectors between the three given sites <computeroutput>s1</computeroutput>, <computeroutput>s2</computeroutput> and <computeroutput>s3</computeroutput> intersect and the regions of <computeroutput>s1</computeroutput>, <computeroutput>s2</computeroutput> and <computeroutput>s3</computeroutput> appear in the counter-clockwise order <computeroutput>s1</computeroutput>, <computeroutput>s2</computeroutput>, <computeroutput>s3</computeroutput> around <formula id="5">$ v$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Point <formula id="4">$ v $</formula> is equidistant from the three sites, under the <formula id="0">$ L_{\infty} $</formula> distance.</para><para>It must provide <computeroutput>Point_2 operator()(Site_2 s1, Site_2 s2, Site_2 s3)</computeroutput>, which constructs this point <formula id="4">$ v $</formula> which is equidistant (under the <formula id="0">$ L_{\infty} $</formula> distance) from the sites <computeroutput>s1</computeroutput>, <computeroutput>s2</computeroutput> and <computeroutput>s3</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/SegmentDelaunayGraphLinfTraits_2.h" line="91" column="1" bodyfile="Concepts/SegmentDelaunayGraphLinfTraits_2.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classSegmentDelaunayGraphLinfTraits__2_1a05f54109928eac5c687824a0a0dc7878" prot="public" static="no">
        <type>Hidden_type</type>
        <definition>typedef Hidden_type SegmentDelaunayGraphLinfTraits_2::Oriented_side_of_bisector_2</definition>
        <argsstring></argsstring>
        <name>Oriented_side_of_bisector_2</name>
        <briefdescription>
<para>A predicate object type. </para>        </briefdescription>
        <detaileddescription>
<para>It must provide <computeroutput>Oriented_side operator()(Site_2 s1, Site_2 s2, Point_2 p)</computeroutput>, which returns the oriented side of the <formula id="0">$ L_{\infty} $</formula> bisector of <computeroutput>s1</computeroutput> and <computeroutput>s2</computeroutput> that contains <computeroutput>p</computeroutput>. It returns <computeroutput>ON_POSITIVE_SIDE</computeroutput> if <computeroutput>p</computeroutput> lies in the nearest region of <computeroutput>s1</computeroutput> (i.e., <computeroutput>p</computeroutput> is closer to <computeroutput>s1</computeroutput> than <computeroutput>s2</computeroutput>); returns <computeroutput>ON_NEGATIVE_SIDE</computeroutput> if <computeroutput>p</computeroutput> lies in the nearest region of <computeroutput>s2</computeroutput>; returns <computeroutput>ON_ORIENTED_BOUNDARY</computeroutput> if <computeroutput>p</computeroutput> lies on the <formula id="0">$ L_{\infty} $</formula> bisector of <computeroutput>s1</computeroutput> and <computeroutput>s2</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/SegmentDelaunayGraphLinfTraits_2.h" line="104" column="1" bodyfile="Concepts/SegmentDelaunayGraphLinfTraits_2.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classSegmentDelaunayGraphLinfTraits__2_1a3114aea0d8dd7e201d17021477e7ba57" prot="public" static="no">
        <type>Hidden_type</type>
        <definition>typedef Hidden_type SegmentDelaunayGraphLinfTraits_2::Vertex_conflict_2</definition>
        <argsstring></argsstring>
        <name>Vertex_conflict_2</name>
        <briefdescription>
<para>A predicate object type. </para>        </briefdescription>
        <detaileddescription>
<para>It must provide <computeroutput>Sign operator()(Site_2 s1, Site_2 s2, Site_2 s3, Site_2 q)</computeroutput>, which returns the sign of the distance of <computeroutput>q</computeroutput> from the <formula id="0">$ L_{\infty} $</formula> Voronoi square of <computeroutput>s1</computeroutput>, <computeroutput>s2</computeroutput>, <computeroutput>s3</computeroutput>. The <formula id="0">$ L_{\infty} $</formula> Voronoi square of three sites <computeroutput>s1</computeroutput>, <computeroutput>s2</computeroutput>, <computeroutput>s3</computeroutput> is an axis-parallel square which is passing through all three sites and touches them in the <computeroutput>s1</computeroutput>, <computeroutput>s2</computeroutput>, <computeroutput>s3</computeroutput> order as we walk on the square in the counter-clockwise sense. The center of the square is at the intersection of the three <formula id="0">$ L_{\infty} $</formula> bisectors of the three sites.</para><para><simplesect kind="pre"><para>the <formula id="0">$ L_{\infty} $</formula> Voronoi square of <computeroutput>s1</computeroutput>, <computeroutput>s2</computeroutput>, <computeroutput>s3</computeroutput> must exist.</para></simplesect>
It must also provide <computeroutput>Sign operator()(Site_2 s1, Site_2 s2, Site_2 q)</computeroutput>, which returns the sign of the distance of <computeroutput>q</computeroutput> from the <formula id="0">$ L_{\infty} $</formula> Voronoi square of sites <computeroutput>s1</computeroutput>, <computeroutput>s2</computeroutput>, <formula id="6">$s_\infty$</formula>, where <formula id="6">$s_\infty$</formula> is the dummy site at infinity. This is a degenerate <formula id="0">$ L_{\infty} $</formula> Voronoi square, with its center at infinity, which is either a line or a right angle wedge. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/SegmentDelaunayGraphLinfTraits_2.h" line="132" column="1" bodyfile="Concepts/SegmentDelaunayGraphLinfTraits_2.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classSegmentDelaunayGraphLinfTraits__2_1afcfdf3588e55c2c4ee0f685afab8c07c" prot="public" static="no">
        <type>Hidden_type</type>
        <definition>typedef Hidden_type SegmentDelaunayGraphLinfTraits_2::Finite_edge_interior_conflict_2</definition>
        <argsstring></argsstring>
        <name>Finite_edge_interior_conflict_2</name>
        <briefdescription>
<para>A predicate object type. </para>        </briefdescription>
        <detaileddescription>
<para>It must provide <computeroutput>bool operator()(Site_2 s1, Site_2 s2, Site_2 s3, Site_2 s4, Site_2 q, Sign sgn)</computeroutput>. The sites <computeroutput>s1</computeroutput>, <computeroutput>s2</computeroutput>, <computeroutput>s3</computeroutput> and <computeroutput>s4</computeroutput> define a Voronoi edge that lies on the bisector of <computeroutput>s1</computeroutput> and <computeroutput>s2</computeroutput> and has as endpoints the <formula id="2">$L_{\infty}$</formula> Voronoi vertices <formula id="7">$ v_{123} $</formula> and <formula id="8">$ v_{142} $</formula> defined by the ordered triplets <computeroutput>s1</computeroutput>, <computeroutput>s2</computeroutput>, <computeroutput>s3</computeroutput> and <computeroutput>s1</computeroutput>, <computeroutput>s4</computeroutput>, <computeroutput>s2</computeroutput>, respectively. The sign <computeroutput>sgn</computeroutput> is the common sign of the distance of the site <computeroutput>q</computeroutput> from the <formula id="2">$L_{\infty}$</formula> Voronoi square of the triplets <computeroutput>s1</computeroutput>, <computeroutput>s2</computeroutput>, <computeroutput>s3</computeroutput> and <computeroutput>s1</computeroutput>, <computeroutput>s4</computeroutput>, <computeroutput>s2</computeroutput>. In case that <computeroutput>sgn</computeroutput> is equal to <computeroutput>NEGATIVE</computeroutput>, the predicate returns <computeroutput>true</computeroutput> if and only if the entire Voronoi edge is in conflict with <computeroutput>q</computeroutput>. If <computeroutput>sgn</computeroutput> is equal to <computeroutput>POSITIVE</computeroutput> or <computeroutput>ZERO</computeroutput>, the predicate returns <computeroutput>false</computeroutput> if and only if <computeroutput>q</computeroutput> is not in conflict with the Voronoi edge. <simplesect kind="pre"><para>the <formula id="2">$L_{\infty}$</formula> Voronoi vertices <formula id="7">$ v_{123} $</formula> and <formula id="8">$ v_{142} $</formula> must exist and the sign of the distance of <computeroutput>q</computeroutput> from these two vertices must be common and equal to <computeroutput>sgn</computeroutput>.</para></simplesect>
It must also provide <computeroutput>bool operator()(Site_2 s1, Site_2 s2, Site_2 s3, Site_2 q, Sign sgn)</computeroutput>. The sites <computeroutput>s1</computeroutput>, <computeroutput>s2</computeroutput>, <computeroutput>s3</computeroutput> and the dummy site at infinity <formula id="9">$ s_\infty$</formula> define a Voronoi edge that lies on the <formula id="2">$L_{\infty}$</formula> bisector of <computeroutput>s1</computeroutput> and <computeroutput>s2</computeroutput> and has as endpoints the Voronoi vertices <formula id="10">$ v_{123}$</formula> and <formula id="11">$ v_{{1}\infty{2}}$</formula> defined by the triplets <computeroutput>s1</computeroutput>, <computeroutput>s2</computeroutput>, <computeroutput>s3</computeroutput> and <computeroutput>s1</computeroutput>, <formula id="9">$ s_\infty$</formula>, <computeroutput>s2</computeroutput> (the second vertex is at infinity). The sign <computeroutput>sgn</computeroutput> is the common sign of the distance of the site <computeroutput>q</computeroutput> from the two <formula id="2">$L_{\infty}$</formula> Voronoi squares centered at the Voronoi vertices <formula id="10">$ v_{123}$</formula> and <formula id="12">$ v_{1\infty{2}}$</formula>. In case that <computeroutput>sgn</computeroutput> is <computeroutput>NEGATIVE</computeroutput>, the predicate returns <computeroutput>true</computeroutput> if and only if the entire Voronoi edge is in conflict with <computeroutput>q</computeroutput>. If <computeroutput>sgn</computeroutput> is <computeroutput>POSITIVE</computeroutput> or <computeroutput>ZERO</computeroutput>, the predicate returns <computeroutput>false</computeroutput> if and only if <computeroutput>q</computeroutput> is not in conflict with the Voronoi edge. <simplesect kind="pre"><para>the <formula id="2">$L_{\infty}$</formula> Voronoi vertex <formula id="10">$ v_{123}$</formula> of <computeroutput>s1</computeroutput>, <computeroutput>s2</computeroutput>, <computeroutput>s3</computeroutput> must exist and the sign of the distance of <computeroutput>q</computeroutput> from the vertices <formula id="10">$ v_{123}$</formula> and <formula id="13">$ v_{1{\infty}2}$</formula> must be common and equal to <computeroutput>sgn</computeroutput>.</para></simplesect>
It must finally provide <computeroutput>bool operator()(Site_2 s1, Site_2 s2, Site_2 q, Sign sgn)</computeroutput>. The sites <computeroutput>s1</computeroutput>, <computeroutput>s2</computeroutput> and the dummy site at infinity <formula id="9">$ s_\infty$</formula> define a Voronoi edge that is equal to the <formula id="2">$L_{\infty}$</formula> bisector of <computeroutput>s1</computeroutput> and <computeroutput>s2</computeroutput>. The endpoints of this edge are the <formula id="2">$L_{\infty}$</formula> Voronoi vertices <formula id="14">$ v_{12\infty}$</formula> and <formula id="15">$ v_{1\infty{}2}$</formula>, defined by the triplets <computeroutput>s1</computeroutput>, <computeroutput>s2</computeroutput>, <formula id="9">$ s_\infty$</formula> and <computeroutput>s1</computeroutput>, <formula id="9">$ s_\infty$</formula>, <computeroutput>s2</computeroutput> (both vertices are at infinity). The sign <computeroutput>sgn</computeroutput> denotes the common sign of the distance of the site <computeroutput>q</computeroutput> from the <formula id="2">$L_{\infty}$</formula> Voronoi squares centered at <formula id="14">$ v_{12\infty}$</formula> and <formula id="15">$ v_{1\infty{}2}$</formula>. If <computeroutput>sgn</computeroutput> is <computeroutput>NEGATIVE</computeroutput>, the predicate returns <computeroutput>true</computeroutput> if and only if the entire Voronoi edge is in conflict with <computeroutput>q</computeroutput>. If <computeroutput>sgn</computeroutput> is <computeroutput>POSITIVE</computeroutput> or <computeroutput>ZERO</computeroutput>, the predicate returns <computeroutput>false</computeroutput> if and only if <computeroutput>q</computeroutput> is not in conflict with the Voronoi edge. <simplesect kind="pre"><para>the sign of the distance of <computeroutput>q</computeroutput> from the <formula id="2">$L_{\infty}$</formula> Voronoi vertices <formula id="14">$ v_{12\infty}$</formula> and <formula id="15">$ v_{1\infty{}2}$</formula> must be common and equal to <computeroutput>sgn</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/SegmentDelaunayGraphLinfTraits_2.h" line="208" column="1" bodyfile="Concepts/SegmentDelaunayGraphLinfTraits_2.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classSegmentDelaunayGraphLinfTraits__2_1a7863ae986ef49f22528c9e6bb39f0986" prot="public" static="no">
        <type>Hidden_type</type>
        <definition>typedef Hidden_type SegmentDelaunayGraphLinfTraits_2::Infinite_edge_interior_conflict_2</definition>
        <argsstring></argsstring>
        <name>Infinite_edge_interior_conflict_2</name>
        <briefdescription>
<para>A predicate object type. </para>        </briefdescription>
        <detaileddescription>
<para>It must provide <computeroutput>bool operator()(Site_2 s1, Site_2 s2, Site_2 s3, Site_2 q, Sign sgn)</computeroutput>. Let <formula id="6">$s_\infty$</formula> be the dummy site at infinity. The sites <formula id="9">$ s_\infty$</formula>, <computeroutput>s1</computeroutput>, <computeroutput>s2</computeroutput> and <computeroutput>s3</computeroutput> define a Voronoi edge that lies on the bisector of <formula id="9">$ s_\infty$</formula> and <computeroutput>s1</computeroutput> and has as endpoints the <formula id="2">$L_{\infty}$</formula> Voronoi vertices <formula id="16">$ v_{\infty{}12}$</formula> and <formula id="17">$ v_{\infty{}31}$</formula> defined by the triplets <formula id="9">$ s_\infty$</formula>, <computeroutput>s1</computeroutput>, <computeroutput>s2</computeroutput> and <formula id="9">$ s_\infty$</formula>, <computeroutput>s3</computeroutput>, <computeroutput>s1</computeroutput>, respectively. The sign <computeroutput>sgn</computeroutput> is the common sign of the distances of <computeroutput>q</computeroutput> from the <formula id="2">$L_{\infty}$</formula> Voronoi squares centered at the vertices <formula id="18">$ v_{\infty{}{1}{2}}$</formula> and <formula id="17">$ v_{\infty{}31}$</formula>. If <computeroutput>sgn</computeroutput> is <computeroutput>NEGATIVE</computeroutput>, the predicate returns <computeroutput>true</computeroutput> if and only if the entire Voronoi edge is in conflict with <computeroutput>q</computeroutput>. If <computeroutput>sgn</computeroutput> is <computeroutput>POSITIVE</computeroutput> or <computeroutput>ZERO</computeroutput>, the predicate returns <computeroutput>false</computeroutput> if and only if <computeroutput>q</computeroutput> is not in conflict with the Voronoi edge. <simplesect kind="pre"><para>the sign of the distance of <computeroutput>q</computeroutput> from the <formula id="2">$L_{\infty}$</formula> Voronoi vertices <formula id="19">$ v_{{\infty}{1}{2}}$</formula> and <formula id="20">$ v_{{\infty}{3}{1}}$</formula> must be common and equal to <computeroutput>sgn</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/SegmentDelaunayGraphLinfTraits_2.h" line="236" column="1" bodyfile="Concepts/SegmentDelaunayGraphLinfTraits_2.h" bodystart="236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classSegmentDelaunayGraphLinfTraits__2_1a380006b605b58b40c10058856337779e" prot="public" static="no">
        <type>Hidden_type</type>
        <definition>typedef Hidden_type SegmentDelaunayGraphLinfTraits_2::Oriented_side_2</definition>
        <argsstring></argsstring>
        <name>Oriented_side_2</name>
        <briefdescription>
<para>A predicate object type. </para>        </briefdescription>
        <detaileddescription>
<para>First, we define the notion of (non-oriented) <formula id="2">$L_{\infty}$</formula>-perpendicular lines to a given non-trivial (non-oriented) segment <formula id="21">$ s $</formula>. If <formula id="21">$ s $</formula> is horizontal, then the perpendicular lines are the vertical lines. If <formula id="21">$ s $</formula> is vertical, then the perpendicular lines are the horizontal lines. If <formula id="21">$ s $</formula> has positive slope, then the perpendicular lines are the lines of slope -1. If <formula id="21">$ s $</formula> has negative slope, then the perpendicular lines are the lines of slope +1.</para><para>Since <ref refid="namespaceCGAL" kindref="compound">CGAL</ref> segments have also an orientation, we also orient <formula id="2">$L_{\infty}$</formula>-perpendicular lines, as follows. For an <emphasis>oriented</emphasis> segment <formula id="21">$ s $</formula>, we orient its <formula id="2">$L_{\infty}$</formula>-perpendicular lines so that the lines&apos; orientation is closest to the following orientation: the orientation of <formula id="21">$ s $</formula> rotated <emphasis>counter-clockwise</emphasis> by <formula id="22">$ \pi/2 $</formula>.</para><para>Let <computeroutput>s</computeroutput> be a segment and <computeroutput>p</computeroutput> a point contained in its interior. Let <formula id="23">$ \ell$</formula> be the line which is <formula id="2">$L_{\infty}$</formula>-perpendicular to segment <computeroutput>s</computeroutput> and is passing through point <computeroutput>p</computeroutput>.</para><para>The predicate object type must provide <computeroutput>Oriented_side operator()(Site_1 s1, Site_2 s2, Site_2 s3, Site_2 s, Site_2 p)</computeroutput>. This determines the oriented side of the line <formula id="23">$ \ell$</formula> in which the <formula id="2">$L_{\infty}$</formula> Voronoi vertex <formula id="24">$v_{123}$</formula> of the sites <computeroutput>s1</computeroutput>, <computeroutput>s2</computeroutput>, <computeroutput>s3</computeroutput> is contained. <simplesect kind="pre"><para><computeroutput>s</computeroutput> must be a segment, <computeroutput>p</computeroutput> must be a point, and <computeroutput>p</computeroutput> must be contained in the interior of <computeroutput>s</computeroutput>.</para></simplesect>
The predicate object type must also provide <computeroutput>bool operator()(Site_2 s1, Site_2 s2, Site_2 s, Site_2 p)</computeroutput>. This determines the oriented side of the line <formula id="23">$ \ell$</formula> in which the <formula id="2">$L_{\infty}$</formula> Voronoi vertex <formula id="25">$v_{12\infty}$</formula> of the sites <computeroutput>s1</computeroutput>, <computeroutput>s2</computeroutput>, <formula id="26">$s_{\infty}$</formula> is contained. <simplesect kind="pre"><para><computeroutput>s</computeroutput> must be a segment, <computeroutput>p</computeroutput> must be a point, and <computeroutput>p</computeroutput> must be contained in the interior of <computeroutput>s</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/SegmentDelaunayGraphLinfTraits_2.h" line="283" column="1" bodyfile="Concepts/SegmentDelaunayGraphLinfTraits_2.h" bodystart="283" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Access to predicate objects</header>
      <memberdef kind="function" id="classSegmentDelaunayGraphLinfTraits__2_1af120de0dad569a5aafc5683ba7b96a15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classSegmentDelaunayGraphLinfTraits__2_1a05f54109928eac5c687824a0a0dc7878" kindref="member">Oriented_side_of_bisector_2</ref></type>
        <definition>Oriented_side_of_bisector_2 SegmentDelaunayGraphLinfTraits_2::oriented_side_of_bisector_test_2_object</definition>
        <argsstring>()</argsstring>
        <name>oriented_side_of_bisector_test_2_object</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/SegmentDelaunayGraphLinfTraits_2.h" line="295" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentDelaunayGraphLinfTraits__2_1a6b5611056a29e618359509953744e43e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classSegmentDelaunayGraphLinfTraits__2_1a3114aea0d8dd7e201d17021477e7ba57" kindref="member">Vertex_conflict_2</ref></type>
        <definition>Vertex_conflict_2 SegmentDelaunayGraphLinfTraits_2::vertex_conflict_2_object</definition>
        <argsstring>()</argsstring>
        <name>vertex_conflict_2_object</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/SegmentDelaunayGraphLinfTraits_2.h" line="300" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentDelaunayGraphLinfTraits__2_1aa3725b12d48e71b87f01a1ca99701ab5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classSegmentDelaunayGraphLinfTraits__2_1afcfdf3588e55c2c4ee0f685afab8c07c" kindref="member">Finite_edge_interior_conflict_2</ref></type>
        <definition>Finite_edge_interior_conflict_2 SegmentDelaunayGraphLinfTraits_2::finite_edge_interior_conflict_2_object</definition>
        <argsstring>()</argsstring>
        <name>finite_edge_interior_conflict_2_object</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/SegmentDelaunayGraphLinfTraits_2.h" line="306" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentDelaunayGraphLinfTraits__2_1a2af8ea08d36f6dc31c21a69ad337e783" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classSegmentDelaunayGraphLinfTraits__2_1a7863ae986ef49f22528c9e6bb39f0986" kindref="member">Infinite_edge_interior_conflict_2</ref></type>
        <definition>Infinite_edge_interior_conflict_2 SegmentDelaunayGraphLinfTraits_2::infinite_edge_interior_conflict_2_object</definition>
        <argsstring>()</argsstring>
        <name>infinite_edge_interior_conflict_2_object</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/SegmentDelaunayGraphLinfTraits_2.h" line="312" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentDelaunayGraphLinfTraits__2_1aff65eaf58c0393434fa7952a8095c1ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classSegmentDelaunayGraphLinfTraits__2_1a380006b605b58b40c10058856337779e" kindref="member">Oriented_side_2</ref></type>
        <definition>Oriented_side_2 SegmentDelaunayGraphLinfTraits_2::oriented_side_2_object</definition>
        <argsstring>()</argsstring>
        <name>oriented_side_2_object</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/SegmentDelaunayGraphLinfTraits_2.h" line="317" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Access to constructor objects</header>
      <memberdef kind="function" id="classSegmentDelaunayGraphLinfTraits__2_1ad71d0c2fee9dfcf68d2b4d10f6ba8da2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classSegmentDelaunayGraphLinfTraits__2_1aae97dcc281c9d9c714acb2416d4278eb" kindref="member">Construct_svd_vertex_2</ref></type>
        <definition>Construct_svd_vertex_2 SegmentDelaunayGraphLinfTraits_2::construct_svd_vertex_2_object</definition>
        <argsstring>()</argsstring>
        <name>construct_svd_vertex_2_object</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/SegmentDelaunayGraphLinfTraits_2.h" line="329" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The concept <computeroutput><ref refid="classSegmentDelaunayGraphLinfTraits__2" kindref="compound">SegmentDelaunayGraphLinfTraits_2</ref></computeroutput> provides traits for constructing the segment Delaunay graph under the <formula id="0">$ L_{\infty} $</formula> distance. The segment Delaunay graph is the dual of the segment Voronoi diagram. We stress that we consider the 1-dimensionalization of <formula id="0">$ L_{\infty} $</formula> bisectors between two sites which is explained in Section <ref refid="index_1subsecbis1dim" kindref="member">Bisectors and 1-Dimensionalization</ref> of the User Manual, and this reflects on the constructed graph (and its dual diagram). These traits should be used in the Gt template parameter of the <computeroutput><ref refid="classCGAL_1_1Segment__Delaunay__graph__Linf__2" kindref="compound">CGAL::Segment_Delaunay_graph_Linf_2</ref>&lt;Gt,DS&gt;</computeroutput> and <computeroutput><ref refid="classCGAL_1_1Segment__Delaunay__graph__Linf__hierarchy__2" kindref="compound">CGAL::Segment_Delaunay_graph_Linf_hierarchy_2</ref>&lt;Gt,STag,DS&gt;</computeroutput> class templates. The concept is a refinement of <computeroutput><ref refid="classSegmentDelaunayGraphTraits__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Segment_Delaunay_graph_2.tag">SegmentDelaunayGraphTraits_2</ref></computeroutput>. In particular, it provides a type <computeroutput>Site_2</computeroutput>, which must be a model of the concept <computeroutput><ref refid="classSegmentDelaunayGraphSite__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Segment_Delaunay_graph_2.tag">SegmentDelaunayGraphSite_2</ref></computeroutput>. It also provides constructions for sites and several function object types for the predicates. </para>    </briefdescription>
    <detaileddescription>
<para> In contrast with <formula id="1">$ L_{2} $</formula>, the concept also contains drawing methods for the edges of the <formula id="0">$ L_{\infty} $</formula> segment Voronoi diagram (class templates <computeroutput><ref refid="classSegmentDelaunayGraphLinfTraits__2_1_1Construct__sdg__bisector__2" kindref="compound">Construct_sdg_bisector_2</ref></computeroutput>, <computeroutput><ref refid="classSegmentDelaunayGraphLinfTraits__2_1_1Construct__sdg__bisector__ray__2" kindref="compound">Construct_sdg_bisector_ray_2</ref></computeroutput>, and <computeroutput><ref refid="classSegmentDelaunayGraphLinfTraits__2_1_1Construct__sdg__bisector__segment__2" kindref="compound">Construct_sdg_bisector_segment_2</ref></computeroutput>). These methods are used when, additionally, the tag type <computeroutput>Has_bisector_constructions_type</computeroutput> is defined in the concept.</para><para>We only describe the refined and additional requirements of the <computeroutput><ref refid="classSegmentDelaunayGraphLinfTraits__2" kindref="compound">SegmentDelaunayGraphLinfTraits_2</ref></computeroutput> concept with respect to the <computeroutput><ref refid="classSegmentDelaunayGraphTraits__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Segment_Delaunay_graph_2.tag">SegmentDelaunayGraphTraits_2</ref></computeroutput> concept.</para><para><xrefsect id="refines_1_refines000001"><xreftitle>Refines</xreftitle><xrefdescription><para><computeroutput><ref refid="classSegmentDelaunayGraphTraits__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Segment_Delaunay_graph_2.tag">SegmentDelaunayGraphTraits_2</ref></computeroutput></para></xrefdescription></xrefsect></para><para><xrefsect id="hasModels_1_hasModels000001"><xreftitle>Has Models</xreftitle><xrefdescription><para><computeroutput><ref refid="structCGAL_1_1Segment__Delaunay__graph__Linf__traits__2" kindref="compound">CGAL::Segment_Delaunay_graph_Linf_traits_2</ref>&lt;K,MTag&gt;</computeroutput> </para><para><computeroutput><ref refid="structCGAL_1_1Segment__Delaunay__graph__Linf__traits__without__intersections__2" kindref="compound">CGAL::Segment_Delaunay_graph_Linf_traits_without_intersections_2</ref>&lt;K,MTag&gt;</computeroutput> </para><para><computeroutput><ref refid="structCGAL_1_1Segment__Delaunay__graph__Linf__filtered__traits__2" kindref="compound">CGAL::Segment_Delaunay_graph_Linf_filtered_traits_2</ref>&lt;CK,CM,EK,EM,FK,FM&gt;</computeroutput> </para><para><computeroutput><ref refid="structCGAL_1_1Segment__Delaunay__graph__Linf__filtered__traits__without__intersections__2" kindref="compound">CGAL::Segment_Delaunay_graph_Linf_filtered_traits_without_intersections_2</ref>&lt;CK,CM,EK,EM,FK,FM&gt;</computeroutput></para></xrefdescription></xrefsect></para><para><simplesect kind="see"><para><computeroutput><ref refid="classSegmentDelaunayGraphSite__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Segment_Delaunay_graph_2.tag">SegmentDelaunayGraphSite_2</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Segment__Delaunay__graph__Linf__2" kindref="compound">CGAL::Segment_Delaunay_graph_Linf_2</ref>&lt;Gt,DS&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Segment__Delaunay__graph__Linf__hierarchy__2" kindref="compound">CGAL::Segment_Delaunay_graph_Linf_hierarchy_2</ref>&lt;Gt,STag,DS&gt;</computeroutput> </para></simplesect>
</para>    </detaileddescription>
    <location file="Concepts/SegmentDelaunayGraphLinfTraits_2.h" line="50" column="1" bodyfile="Concepts/SegmentDelaunayGraphLinfTraits_2.h" bodystart="50" bodyend="384"/>
    <listofallmembers>
      <member refid="classSegmentDelaunayGraphLinfTraits__2_1aae97dcc281c9d9c714acb2416d4278eb" prot="public" virt="non-virtual"><scope>SegmentDelaunayGraphLinfTraits_2</scope><name>Construct_svd_vertex_2</name></member>
      <member refid="classSegmentDelaunayGraphLinfTraits__2_1ad71d0c2fee9dfcf68d2b4d10f6ba8da2" prot="public" virt="non-virtual"><scope>SegmentDelaunayGraphLinfTraits_2</scope><name>construct_svd_vertex_2_object</name></member>
      <member refid="classSegmentDelaunayGraphLinfTraits__2_1afcfdf3588e55c2c4ee0f685afab8c07c" prot="public" virt="non-virtual"><scope>SegmentDelaunayGraphLinfTraits_2</scope><name>Finite_edge_interior_conflict_2</name></member>
      <member refid="classSegmentDelaunayGraphLinfTraits__2_1aa3725b12d48e71b87f01a1ca99701ab5" prot="public" virt="non-virtual"><scope>SegmentDelaunayGraphLinfTraits_2</scope><name>finite_edge_interior_conflict_2_object</name></member>
      <member refid="classSegmentDelaunayGraphLinfTraits__2_1a305b6c96a083dfd5fdddf11796b03e31" prot="public" virt="non-virtual"><scope>SegmentDelaunayGraphLinfTraits_2</scope><name>Has_bisector_constructions_type</name></member>
      <member refid="classSegmentDelaunayGraphLinfTraits__2_1a7863ae986ef49f22528c9e6bb39f0986" prot="public" virt="non-virtual"><scope>SegmentDelaunayGraphLinfTraits_2</scope><name>Infinite_edge_interior_conflict_2</name></member>
      <member refid="classSegmentDelaunayGraphLinfTraits__2_1a2af8ea08d36f6dc31c21a69ad337e783" prot="public" virt="non-virtual"><scope>SegmentDelaunayGraphLinfTraits_2</scope><name>infinite_edge_interior_conflict_2_object</name></member>
      <member refid="classSegmentDelaunayGraphLinfTraits__2_1a380006b605b58b40c10058856337779e" prot="public" virt="non-virtual"><scope>SegmentDelaunayGraphLinfTraits_2</scope><name>Oriented_side_2</name></member>
      <member refid="classSegmentDelaunayGraphLinfTraits__2_1aff65eaf58c0393434fa7952a8095c1ab" prot="public" virt="non-virtual"><scope>SegmentDelaunayGraphLinfTraits_2</scope><name>oriented_side_2_object</name></member>
      <member refid="classSegmentDelaunayGraphLinfTraits__2_1a05f54109928eac5c687824a0a0dc7878" prot="public" virt="non-virtual"><scope>SegmentDelaunayGraphLinfTraits_2</scope><name>Oriented_side_of_bisector_2</name></member>
      <member refid="classSegmentDelaunayGraphLinfTraits__2_1af120de0dad569a5aafc5683ba7b96a15" prot="public" virt="non-virtual"><scope>SegmentDelaunayGraphLinfTraits_2</scope><name>oriented_side_of_bisector_test_2_object</name></member>
      <member refid="classSegmentDelaunayGraphLinfTraits__2_1a3114aea0d8dd7e201d17021477e7ba57" prot="public" virt="non-virtual"><scope>SegmentDelaunayGraphLinfTraits_2</scope><name>Vertex_conflict_2</name></member>
      <member refid="classSegmentDelaunayGraphLinfTraits__2_1a6b5611056a29e618359509953744e43e" prot="public" virt="non-virtual"><scope>SegmentDelaunayGraphLinfTraits_2</scope><name>vertex_conflict_2_object</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
