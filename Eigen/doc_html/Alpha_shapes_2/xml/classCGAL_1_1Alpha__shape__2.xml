<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Alpha__shape__2" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Alpha_shape_2</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Dt</basecompoundref>
    <includes local="no">CGAL/Alpha_shape_2.h</includes>
    <templateparamlist>
      <param>
        <type>typename Dt</type>
      </param>
      <param>
        <type>typename ExactAlphaComparisonTag</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="enum" id="classCGAL_1_1Alpha__shape__2_1a910fdb5781b25ae73507d54bb73a63bf" prot="public" static="no">
        <name>Classification_type</name>
        <enumvalue id="classCGAL_1_1Alpha__shape__2_1a910fdb5781b25ae73507d54bb73a63bfa3e492dc451d7dee78e36d423ecd5e659" prot="public">
          <name>EXTERIOR</name>
          <briefdescription>
<para>if the face does not belong to the alpha-complex. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classCGAL_1_1Alpha__shape__2_1a910fdb5781b25ae73507d54bb73a63bfa9cb3341f2648b9c7073ca058884a6738" prot="public">
          <name>SINGULAR</name>
          <briefdescription>
<para>if the face belongs to the boundary of the alpha-shape, but is not incident to any 2-dimensional face of the alpha-complex </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classCGAL_1_1Alpha__shape__2_1a910fdb5781b25ae73507d54bb73a63bfaa686e4d8d92d3f50a34ba8d7fd76045c" prot="public">
          <name>REGULAR</name>
          <briefdescription>
<para>if the face belongs to the boundary of the alpha-shape and is incident to a 2-dimensional face of the alpha-complex </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classCGAL_1_1Alpha__shape__2_1a910fdb5781b25ae73507d54bb73a63bfa1c70ff74073e4c7419bc5e013e964ade" prot="public">
          <name>INTERIOR</name>
          <briefdescription>
<para>if the face belongs to the alpha-complex, but does not belong to the boundary of the alpha-shape. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Distinguishes the different cases for classifying a <formula id="5">$ k$</formula>-dimensional face of the underlying triangulation of the <formula id="1">$ \alpha$</formula>-shape. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Alpha_shape_2.h" line="156" column="1" bodyfile="CGAL/Alpha_shape_2.h" bodystart="156" bodyend="163"/>
      </memberdef>
      <memberdef kind="enum" id="classCGAL_1_1Alpha__shape__2_1ae1c8fee3b311d5417dd9c58c8a2b97f5" prot="public" static="no">
        <name>Mode</name>
        <enumvalue id="classCGAL_1_1Alpha__shape__2_1ae1c8fee3b311d5417dd9c58c8a2b97f5a98f773aea96e5662d660bbf59e2d2bcc" prot="public">
          <name>GENERAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classCGAL_1_1Alpha__shape__2_1ae1c8fee3b311d5417dd9c58c8a2b97f5a7cf1156bb047b011ea73178e2cbc17d4" prot="public">
          <name>REGULARIZED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>In general, an alpha shape can be disconnected and contain many singular edges or vertices. </para>        </briefdescription>
        <detaileddescription>
<para>Its regularized version is formed by the set of regular edges and their vertices. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Alpha_shape_2.h" line="170" column="1" bodyfile="CGAL/Alpha_shape_2.h" bodystart="170" bodyend="171"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Alpha__shape__2_1a7a91ffcbeb467d1978a7cd6d4d262141" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Alpha_shape_2&lt; Dt, ExactAlphaComparisonTag &gt;::Gt</definition>
        <argsstring></argsstring>
        <name>Gt</name>
        <briefdescription>
<para>the alpha shape traits type. </para>        </briefdescription>
        <detaileddescription>
<para>it has to derive from a triangulation traits class. For example <computeroutput>Dt::Point</computeroutput> is a point class. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Alpha_shape_2.h" line="97" column="1" bodyfile="CGAL/Alpha_shape_2.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Alpha__shape__2_1aa8920f564e99cf8abb708fc4495d11a3" prot="public" static="no">
        <type>Gt::FT</type>
        <definition>typedef Gt::FT CGAL::Alpha_shape_2&lt; Dt, ExactAlphaComparisonTag &gt;::FT</definition>
        <argsstring></argsstring>
        <name>FT</name>
        <briefdescription>
<para>the number type of alpha values. </para>        </briefdescription>
        <detaileddescription>
<para>In case <computeroutput>ExactAlphaComparisonTag</computeroutput> is <computeroutput><ref refid="group__PkgStlExtensionUtilities_1ga89d5ecf1540b2ec0a2bf5dd003e186d0" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::Tag_false</ref></computeroutput>, it is Gt::FT.</para><para>In case <computeroutput>ExactAlphaComparisonTag</computeroutput> is <computeroutput><ref refid="group__PkgStlExtensionUtilities_1gab3e2296107b5d26c32c8183028a217f1" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::Tag_true</ref></computeroutput>, it is a number type allowing filtered exact comparisons (that is, interval arithmetic is first used before resorting to exact arithmetic). Access to the interval containing the exact value is provided through the function <computeroutput>FT::Approximate_nt approx() const</computeroutput> where <computeroutput>FT::Approximate_nt</computeroutput> is <computeroutput><ref refid="classCGAL_1_1Interval__nt" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">CGAL::Interval_nt</ref>&lt;Protected&gt;</computeroutput> with <computeroutput>Protected=true</computeroutput>. Access to the exact value is provided through the function <computeroutput>FT::Exact_nt exact() const</computeroutput> where <computeroutput>FT::Exact_nt</computeroutput> depends on the configuration of CGAL (it is <computeroutput><ref refid="classCGAL_1_1Gmpq" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">Gmpq</ref></computeroutput> if <computeroutput>gmp</computeroutput> is available and <computeroutput><ref refid="classCGAL_1_1Quotient" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">Quotient</ref>&lt;<ref refid="classCGAL_1_1MP__Float" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">CGAL::MP_Float</ref>&gt;</computeroutput> otherwise). It must be noted that an object of type <computeroutput>FT</computeroutput> is valid as long as the alpha shapes class that creates it is valid and has not been modified. For convenience, classical comparison operators are provided for the type <computeroutput>FT</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Alpha_shape_2.h" line="116" column="1" bodyfile="CGAL/Alpha_shape_2.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Alpha__shape__2_1a0cfa83d865a6db8e82aa5708cf0e2b8e" prot="public" static="no">
        <type>Dt::Point</type>
        <definition>typedef Dt::Point CGAL::Alpha_shape_2&lt; Dt, ExactAlphaComparisonTag &gt;::Point</definition>
        <argsstring></argsstring>
        <name>Point</name>
        <briefdescription>
<para>The point type. </para>        </briefdescription>
        <detaileddescription>
<para>For basic alpha shapes, <computeroutput>Point</computeroutput> will be equal to <computeroutput>Gt::Point_2</computeroutput>. For weighted alpha shapes, <computeroutput>Point</computeroutput> will be equal to <computeroutput>Gt::Weighted_point_2</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Alpha_shape_2.h" line="124" column="1" bodyfile="CGAL/Alpha_shape_2.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Alpha__shape__2_1a0a8ef3912c1c6e65c3ecdfd33ec7b7a3" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Alpha_shape_2&lt; Dt, ExactAlphaComparisonTag &gt;::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <briefdescription>
<para>The size type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Alpha_shape_2.h" line="129" column="1" bodyfile="CGAL/Alpha_shape_2.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Alpha__shape__2_1a06ac11586ec6d90d59e0e76e465d074c" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Alpha_shape_2&lt; Dt, ExactAlphaComparisonTag &gt;::Alpha_iterator</definition>
        <argsstring></argsstring>
        <name>Alpha_iterator</name>
        <briefdescription>
<para>A bidirectional and non-mutable iterator that allow to traverse the increasing sequence of different <formula id="1">$ \alpha$</formula>-values. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>Its <computeroutput>value_type</computeroutput> is <computeroutput>FT</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Alpha_shape_2.h" line="136" column="1" bodyfile="CGAL/Alpha_shape_2.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Alpha__shape__2_1a1f0efadb0576e2dfa5ba012325660755" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Alpha_shape_2&lt; Dt, ExactAlphaComparisonTag &gt;::Alpha_shape_vertices_iterator</definition>
        <argsstring></argsstring>
        <name>Alpha_shape_vertices_iterator</name>
        <briefdescription>
<para>A bidirectional and non-mutable iterator that allow to traverse the vertices which belongs to the <formula id="1">$ \alpha$</formula>-shape for the current <formula id="1">$ \alpha$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>Its <computeroutput>value_type</computeroutput> is <computeroutput>Dt::Vertex_handle</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Alpha_shape_2.h" line="143" column="1" bodyfile="CGAL/Alpha_shape_2.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Alpha__shape__2_1a652f355cc521b0aa248a874a3fb408cc" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Alpha_shape_2&lt; Dt, ExactAlphaComparisonTag &gt;::Alpha_shape_edges_iterator</definition>
        <argsstring></argsstring>
        <name>Alpha_shape_edges_iterator</name>
        <briefdescription>
<para>A bidirectional and non-mutable iterator that allow to traverse the edges which belongs to the <formula id="1">$ \alpha$</formula>-shape for the current <formula id="1">$ \alpha$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>Its <computeroutput>value_type</computeroutput> is <computeroutput>Dt::Edge</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Alpha_shape_2.h" line="150" column="1" bodyfile="CGAL/Alpha_shape_2.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Alpha__shape__2_1a06f5c57833229a92e8b67fcc29247880" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Alpha_shape_2&lt; Dt, ExactAlphaComparisonTag &gt;::Alpha_shape_2</definition>
        <argsstring>(FT alpha=0, Mode m=GENERAL)</argsstring>
        <name>Alpha_shape_2</name>
        <param>
          <type><ref refid="classCGAL_1_1Alpha__shape__2_1aa8920f564e99cf8abb708fc4495d11a3" kindref="member">FT</ref></type>
          <declname>alpha</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Alpha__shape__2_1ae1c8fee3b311d5417dd9c58c8a2b97f5" kindref="member">Mode</ref></type>
          <declname>m</declname>
          <defval><ref refid="classCGAL_1_1Alpha__shape__2_1ae1c8fee3b311d5417dd9c58c8a2b97f5a98f773aea96e5662d660bbf59e2d2bcc" kindref="member">GENERAL</ref></defval>
        </param>
        <briefdescription>
<para>Introduces an empty alpha-shape for a positive <formula id="1">$ \alpha$</formula>-value <computeroutput>alpha</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>alpha</computeroutput> <formula id="13">$ \geq~0$</formula>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Alpha_shape_2.h" line="183" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Alpha__shape__2_1a9d026da2568aed80884a5053bae0039b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Alpha_shape_2&lt; Dt, ExactAlphaComparisonTag &gt;::Alpha_shape_2</definition>
        <argsstring>(Dt &amp;dt, FT alpha=0, Mode m=GENERAL)</argsstring>
        <name>Alpha_shape_2</name>
        <param>
          <type>Dt &amp;</type>
          <declname>dt</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Alpha__shape__2_1aa8920f564e99cf8abb708fc4495d11a3" kindref="member">FT</ref></type>
          <declname>alpha</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Alpha__shape__2_1ae1c8fee3b311d5417dd9c58c8a2b97f5" kindref="member">Mode</ref></type>
          <declname>m</declname>
          <defval><ref refid="classCGAL_1_1Alpha__shape__2_1ae1c8fee3b311d5417dd9c58c8a2b97f5a98f773aea96e5662d660bbf59e2d2bcc" kindref="member">GENERAL</ref></defval>
        </param>
        <briefdescription>
<para>Builds an alpha shape of mode <computeroutput>m</computeroutput> from the triangulation <computeroutput>dt</computeroutput> for a positive <formula id="1">$ \alpha$</formula>-value <computeroutput>alpha</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This operation destroys the triangulation. </para></simplesect>
<simplesect kind="pre"><para><computeroutput>alpha</computeroutput> <formula id="13">$ \geq~0$</formula>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Alpha_shape_2.h" line="192" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Alpha__shape__2_1a5524e49e27ef267165673d0a36bddb14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>CGAL::Alpha_shape_2&lt; Dt, ExactAlphaComparisonTag &gt;::Alpha_shape_2</definition>
        <argsstring>(InputIterator first, InputIterator last, const FT &amp;alpha=0, Mode m=GENERAL)</argsstring>
        <name>Alpha_shape_2</name>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>last</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Alpha__shape__2_1aa8920f564e99cf8abb708fc4495d11a3" kindref="member">FT</ref> &amp;</type>
          <declname>alpha</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Alpha__shape__2_1ae1c8fee3b311d5417dd9c58c8a2b97f5" kindref="member">Mode</ref></type>
          <declname>m</declname>
          <defval><ref refid="classCGAL_1_1Alpha__shape__2_1ae1c8fee3b311d5417dd9c58c8a2b97f5a98f773aea96e5662d660bbf59e2d2bcc" kindref="member">GENERAL</ref></defval>
        </param>
        <briefdescription>
<para>Initializes the family of alpha-shapes with the points in the range <computeroutput>[first,last)</computeroutput> and introduces an <formula id="1">$ \alpha$</formula>-shape for a positive <formula id="1">$ \alpha$</formula>-value <computeroutput>alpha</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>must be an input iterator with the value type <computeroutput>Point</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>alpha</computeroutput> <formula id="14">$ \geq0$</formula>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Alpha_shape_2.h" line="206" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <memberdef kind="function" id="classCGAL_1_1Alpha__shape__2_1a297b8abac45392eb96dff816f18cb2bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          </param>
        </templateparamlist>
        <type>std::ptrdiff_t</type>
        <definition>std::ptrdiff_t CGAL::Alpha_shape_2&lt; Dt, ExactAlphaComparisonTag &gt;::make_alpha_shape</definition>
        <argsstring>(InputIterator first, InputIterator last)</argsstring>
        <name>make_alpha_shape</name>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Initialize the family of alpha-shapes with the points in the range <computeroutput>[first,last)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the number of inserted points.</para><para>If the function is applied to an non-empty family of alpha-shape, it is cleared before initialization. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classInputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">InputIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>must be an input iterator with the value type <computeroutput>Point</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Alpha_shape_2.h" line="226" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Alpha__shape__2_1a9484322dab40466cfba38aa6eec47fc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Alpha_shape_2&lt; Dt, ExactAlphaComparisonTag &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Clears the structure. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Alpha_shape_2.h" line="234" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Alpha__shape__2_1a8c23339209bc738bc33a74bbc83a9641" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Alpha__shape__2_1aa8920f564e99cf8abb708fc4495d11a3" kindref="member">FT</ref></type>
        <definition>FT CGAL::Alpha_shape_2&lt; Dt, ExactAlphaComparisonTag &gt;::set_alpha</definition>
        <argsstring>(const FT &amp;alpha)</argsstring>
        <name>set_alpha</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Alpha__shape__2_1aa8920f564e99cf8abb708fc4495d11a3" kindref="member">FT</ref> &amp;</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
<para>Sets the <formula id="1">$ \alpha$</formula>-value to <computeroutput>alpha</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the previous <formula id="1">$ \alpha$</formula>-value. <simplesect kind="pre"><para><computeroutput>alpha</computeroutput> <formula id="14">$ \geq0$</formula>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Alpha_shape_2.h" line="242" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Alpha__shape__2_1ad88e634f9913a841ca4c0cbc5db801d5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classCGAL_1_1Alpha__shape__2_1aa8920f564e99cf8abb708fc4495d11a3" kindref="member">FT</ref> &amp;</type>
        <definition>const FT&amp; CGAL::Alpha_shape_2&lt; Dt, ExactAlphaComparisonTag &gt;::get_alpha</definition>
        <argsstring>(void) const</argsstring>
        <name>get_alpha</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns the current <formula id="1">$ \alpha$</formula>-value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Alpha_shape_2.h" line="248" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Alpha__shape__2_1a68fd6ec9d3a640000ff1b9120bf46778" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classCGAL_1_1Alpha__shape__2_1aa8920f564e99cf8abb708fc4495d11a3" kindref="member">FT</ref> &amp;</type>
        <definition>const FT&amp; CGAL::Alpha_shape_2&lt; Dt, ExactAlphaComparisonTag &gt;::get_nth_alpha</definition>
        <argsstring>(size_type n) const</argsstring>
        <name>get_nth_alpha</name>
        <param>
          <type><ref refid="classCGAL_1_1Alpha__shape__2_1a0a8ef3912c1c6e65c3ecdfd33ec7b7a3" kindref="member">size_type</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Returns the <computeroutput>n</computeroutput>-th <formula id="15">$\alpha$</formula>-value, sorted in an increasing order. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>n</computeroutput> <formula id="16">$ &lt;$</formula> number of alphas. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Alpha_shape_2.h" line="254" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Alpha__shape__2_1a283aa5b63b84825a46f899d82c1c2b0a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Alpha__shape__2_1a0a8ef3912c1c6e65c3ecdfd33ec7b7a3" kindref="member">size_type</ref></type>
        <definition>size_type CGAL::Alpha_shape_2&lt; Dt, ExactAlphaComparisonTag &gt;::number_of_alphas</definition>
        <argsstring>() const</argsstring>
        <name>number_of_alphas</name>
        <briefdescription>
<para>Returns the number of different alpha-values. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Alpha_shape_2.h" line="259" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Alpha__shape__2_1a94639ef3e078140520552c350dc727be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Alpha__shape__2_1ae1c8fee3b311d5417dd9c58c8a2b97f5" kindref="member">Mode</ref></type>
        <definition>Mode CGAL::Alpha_shape_2&lt; Dt, ExactAlphaComparisonTag &gt;::set_mode</definition>
        <argsstring>(Mode m=GENERAL)</argsstring>
        <name>set_mode</name>
        <param>
          <type><ref refid="classCGAL_1_1Alpha__shape__2_1ae1c8fee3b311d5417dd9c58c8a2b97f5" kindref="member">Mode</ref></type>
          <declname>m</declname>
          <defval><ref refid="classCGAL_1_1Alpha__shape__2_1ae1c8fee3b311d5417dd9c58c8a2b97f5a98f773aea96e5662d660bbf59e2d2bcc" kindref="member">GENERAL</ref></defval>
        </param>
        <briefdescription>
<para>Sets the mode to its general or regularized version. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the previous mode. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Alpha_shape_2.h" line="266" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Alpha__shape__2_1a31eebdbc67677078ea368367a87c7ed0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Alpha__shape__2_1ae1c8fee3b311d5417dd9c58c8a2b97f5" kindref="member">Mode</ref></type>
        <definition>Mode CGAL::Alpha_shape_2&lt; Dt, ExactAlphaComparisonTag &gt;::get_mode</definition>
        <argsstring>(void) const</argsstring>
        <name>get_mode</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns the mode, that is either <computeroutput>GENERAL</computeroutput> or <computeroutput>REGULARIZED</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Alpha_shape_2.h" line="272" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Alpha__shape__2_1a66e0477bd1ebd44bec1e50b8a7ebc4ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Alpha__shape__2_1a1f0efadb0576e2dfa5ba012325660755" kindref="member">Alpha_shape_vertices_iterator</ref></type>
        <definition>Alpha_shape_vertices_iterator CGAL::Alpha_shape_2&lt; Dt, ExactAlphaComparisonTag &gt;::alpha_shape_vertices_begin</definition>
        <argsstring>()</argsstring>
        <name>alpha_shape_vertices_begin</name>
        <briefdescription>
<para>Starts at an arbitrary finite vertex which belongs to the <formula id="1">$ \alpha$</formula>-shape for the current <formula id="1">$ \alpha$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Alpha_shape_2.h" line="278" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Alpha__shape__2_1a7c609024ff3d3ec5d862ca785c4717ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Alpha__shape__2_1a1f0efadb0576e2dfa5ba012325660755" kindref="member">Alpha_shape_vertices_iterator</ref></type>
        <definition>Alpha_shape_vertices_iterator CGAL::Alpha_shape_2&lt; Dt, ExactAlphaComparisonTag &gt;::alpha_shape_vertices_end</definition>
        <argsstring>()</argsstring>
        <name>alpha_shape_vertices_end</name>
        <briefdescription>
<para>Past-the-end iterator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Alpha_shape_2.h" line="283" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Alpha__shape__2_1aa6b07740a02dd18a7aa0cf6bf30699d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Alpha__shape__2_1a652f355cc521b0aa248a874a3fb408cc" kindref="member">Alpha_shape_edges_iterator</ref></type>
        <definition>Alpha_shape_edges_iterator CGAL::Alpha_shape_2&lt; Dt, ExactAlphaComparisonTag &gt;::alpha_shape_edges_begin</definition>
        <argsstring>()</argsstring>
        <name>alpha_shape_edges_begin</name>
        <briefdescription>
<para>Starts at an arbitrary finite edge which belongs to the <formula id="1">$ \alpha$</formula>-shape for the current <formula id="1">$ \alpha$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>In regularized mode, edges are represented as a pair (f,i), where f is an interior face of the <formula id="1">$ \alpha$</formula>-shape. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Alpha_shape_2.h" line="291" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Alpha__shape__2_1a2ac6405046c2becb35e876e446a56885" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Alpha__shape__2_1a652f355cc521b0aa248a874a3fb408cc" kindref="member">Alpha_shape_edges_iterator</ref></type>
        <definition>Alpha_shape_edges_iterator CGAL::Alpha_shape_2&lt; Dt, ExactAlphaComparisonTag &gt;::alpha_shape_edges_end</definition>
        <argsstring>()</argsstring>
        <name>alpha_shape_edges_end</name>
        <briefdescription>
<para>Past-the-end iterator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Alpha_shape_2.h" line="296" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Alpha__shape__2_1a57e288e875ccdcb83f108bada08a2e65" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Alpha__shape__2_1a0a8ef3912c1c6e65c3ecdfd33ec7b7a3" kindref="member">size_type</ref></type>
        <definition>size_type CGAL::Alpha_shape_2&lt; Dt, ExactAlphaComparisonTag &gt;::number_of_solid_components</definition>
        <argsstring>(const FT &amp;alpha=get_alpha()) const</argsstring>
        <name>number_of_solid_components</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Alpha__shape__2_1aa8920f564e99cf8abb708fc4495d11a3" kindref="member">FT</ref> &amp;</type>
          <declname>alpha</declname>
          <defval><ref refid="classCGAL_1_1Alpha__shape__2_1ad88e634f9913a841ca4c0cbc5db801d5" kindref="member">get_alpha</ref>()</defval>
        </param>
        <briefdescription>
<para>Returns the number of solid components of the alpha shape, that is, the number of components of its regularized version. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Alpha_shape_2.h" line="381" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Alpha__shape__2_1aec257cfd1bb47e49366f3ca589a56959" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Alpha__shape__2_1a06ac11586ec6d90d59e0e76e465d074c" kindref="member">Alpha_iterator</ref></type>
        <definition>Alpha_iterator CGAL::Alpha_shape_2&lt; Dt, ExactAlphaComparisonTag &gt;::find_optimal_alpha</definition>
        <argsstring>(size_type nb_components) const</argsstring>
        <name>find_optimal_alpha</name>
        <param>
          <type><ref refid="classCGAL_1_1Alpha__shape__2_1a0a8ef3912c1c6e65c3ecdfd33ec7b7a3" kindref="member">size_type</ref></type>
          <declname>nb_components</declname>
        </param>
        <briefdescription>
<para>Returns an iterator pointing to the first element with <formula id="1">$ \alpha$</formula>-value such that the alpha shape satisfies the following two properties: </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>All data points are either on the boundary or in the interior of the regularized version of the alpha shape.</para></listitem><listitem><para>The number of solid component of the alpha shape is equal to or smaller than <computeroutput>nb_components</computeroutput>.</para></listitem></itemizedlist>
</para><para>If no such value is found, the iterator points to the first element with <formula id="1">$ \alpha$</formula>-value such that the alpha shape satisfies the second property. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Alpha_shape_2.h" line="396" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Alpha__shape__2_1abb1d116031c4587dcf06f6cb50d8cc65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Alpha_shape_2&lt; Dt &gt; &amp;A)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Alpha__shape__2" kindref="compound">Alpha_shape_2</ref>&lt; Dt &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Inserts the alpha shape for the current <formula id="1">$ \alpha$</formula>-value into the stream <computeroutput>os</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>CGAL/IO/io.h must be included.</para></simplesect>
<simplesect kind="pre"><para>The insert operator must be defined for <computeroutput>Point</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Alpha_shape_2.h" line="406" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Predicates</header>
      <memberdef kind="function" id="classCGAL_1_1Alpha__shape__2_1a034641482ad0133a55ef7da3fed87510" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Alpha__shape__2_1a910fdb5781b25ae73507d54bb73a63bf" kindref="member">Classification_type</ref></type>
        <definition>Classification_type CGAL::Alpha_shape_2&lt; Dt, ExactAlphaComparisonTag &gt;::classify</definition>
        <argsstring>(const Point &amp;p, const FT &amp;alpha=get_alpha()) const</argsstring>
        <name>classify</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Alpha__shape__2_1a0cfa83d865a6db8e82aa5708cf0e2b8e" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Alpha__shape__2_1aa8920f564e99cf8abb708fc4495d11a3" kindref="member">FT</ref> &amp;</type>
          <declname>alpha</declname>
          <defval><ref refid="classCGAL_1_1Alpha__shape__2_1ad88e634f9913a841ca4c0cbc5db801d5" kindref="member">get_alpha</ref>()</defval>
        </param>
        <briefdescription>
<para>Locates a point <computeroutput>p</computeroutput> in the underlying triangulation and Classifies the associated k-face with respect to the alpha shape. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Alpha_shape_2.h" line="308" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Alpha__shape__2_1afe145b3345b830bf051618caf7a5f0b1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Alpha__shape__2_1a910fdb5781b25ae73507d54bb73a63bf" kindref="member">Classification_type</ref></type>
        <definition>Classification_type CGAL::Alpha_shape_2&lt; Dt, ExactAlphaComparisonTag &gt;::classify</definition>
        <argsstring>(Face_handle f, const FT &amp;alpha=get_alpha()) const</argsstring>
        <name>classify</name>
        <param>
          <type>Face_handle</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Alpha__shape__2_1aa8920f564e99cf8abb708fc4495d11a3" kindref="member">FT</ref> &amp;</type>
          <declname>alpha</declname>
          <defval><ref refid="classCGAL_1_1Alpha__shape__2_1ad88e634f9913a841ca4c0cbc5db801d5" kindref="member">get_alpha</ref>()</defval>
        </param>
        <briefdescription>
<para>Classifies the face <computeroutput>f</computeroutput> of the underlying triangulation with respect to the alpha shape. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Alpha_shape_2.h" line="315" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Alpha__shape__2_1af39706db8539852987c5356e12760764" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Alpha__shape__2_1a910fdb5781b25ae73507d54bb73a63bf" kindref="member">Classification_type</ref></type>
        <definition>Classification_type CGAL::Alpha_shape_2&lt; Dt, ExactAlphaComparisonTag &gt;::classify</definition>
        <argsstring>(Edge e, const FT &amp;alpha=get_alpha()) const</argsstring>
        <name>classify</name>
        <param>
          <type>Edge</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Alpha__shape__2_1aa8920f564e99cf8abb708fc4495d11a3" kindref="member">FT</ref> &amp;</type>
          <declname>alpha</declname>
          <defval><ref refid="classCGAL_1_1Alpha__shape__2_1ad88e634f9913a841ca4c0cbc5db801d5" kindref="member">get_alpha</ref>()</defval>
        </param>
        <briefdescription>
<para>Classifies the edge <computeroutput>e</computeroutput> of the underlying triangulation with respect to the alpha shape. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Alpha_shape_2.h" line="321" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Alpha__shape__2_1a3ff4fad0f790cde80f84bb9255333964" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Alpha__shape__2_1a910fdb5781b25ae73507d54bb73a63bf" kindref="member">Classification_type</ref></type>
        <definition>Classification_type CGAL::Alpha_shape_2&lt; Dt, ExactAlphaComparisonTag &gt;::classify</definition>
        <argsstring>(Face_handle f, int i, const FT &amp;alpha=get_alpha()) const</argsstring>
        <name>classify</name>
        <param>
          <type>Face_handle</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Alpha__shape__2_1aa8920f564e99cf8abb708fc4495d11a3" kindref="member">FT</ref> &amp;</type>
          <declname>alpha</declname>
          <defval><ref refid="classCGAL_1_1Alpha__shape__2_1ad88e634f9913a841ca4c0cbc5db801d5" kindref="member">get_alpha</ref>()</defval>
        </param>
        <briefdescription>
<para>Classifies the edge of the face <computeroutput>f</computeroutput> opposite to the vertex with index <computeroutput>i</computeroutput> of the underlying triangulation with respect to the alpha shape. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Alpha_shape_2.h" line="329" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Alpha__shape__2_1aa5bf44693cef4dc2a48d50375f345766" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Alpha__shape__2_1a910fdb5781b25ae73507d54bb73a63bf" kindref="member">Classification_type</ref></type>
        <definition>Classification_type CGAL::Alpha_shape_2&lt; Dt, ExactAlphaComparisonTag &gt;::classify</definition>
        <argsstring>(Vertex_handle v, const FT &amp;alpha=get_alpha()) const</argsstring>
        <name>classify</name>
        <param>
          <type>Vertex_handle</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Alpha__shape__2_1aa8920f564e99cf8abb708fc4495d11a3" kindref="member">FT</ref> &amp;</type>
          <declname>alpha</declname>
          <defval><ref refid="classCGAL_1_1Alpha__shape__2_1ad88e634f9913a841ca4c0cbc5db801d5" kindref="member">get_alpha</ref>()</defval>
        </param>
        <briefdescription>
<para>Classifies the vertex <computeroutput>v</computeroutput> of the underlying triangulation with respect to the alpha shape. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Alpha_shape_2.h" line="335" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Traversal of the alpha-Values</header>
      <memberdef kind="function" id="classCGAL_1_1Alpha__shape__2_1a85688969e0e33a737301553873eb0522" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Alpha__shape__2_1a06ac11586ec6d90d59e0e76e465d074c" kindref="member">Alpha_iterator</ref></type>
        <definition>Alpha_iterator CGAL::Alpha_shape_2&lt; Dt, ExactAlphaComparisonTag &gt;::alpha_begin</definition>
        <argsstring>() const</argsstring>
        <name>alpha_begin</name>
        <briefdescription>
<para>Returns an iterator that allows to traverse the sorted sequence of <formula id="1">$ \alpha$</formula>-values of the family of alpha shapes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Alpha_shape_2.h" line="346" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Alpha__shape__2_1a113ae772bd4d895abdc07141851161b2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Alpha__shape__2_1a06ac11586ec6d90d59e0e76e465d074c" kindref="member">Alpha_iterator</ref></type>
        <definition>Alpha_iterator CGAL::Alpha_shape_2&lt; Dt, ExactAlphaComparisonTag &gt;::alpha_end</definition>
        <argsstring>() const</argsstring>
        <name>alpha_end</name>
        <briefdescription>
<para>Returns the corresponding past-the-end iterator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Alpha_shape_2.h" line="351" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Alpha__shape__2_1a0e65969e3dc74bc1ef463c556967395e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Alpha__shape__2_1a06ac11586ec6d90d59e0e76e465d074c" kindref="member">Alpha_iterator</ref></type>
        <definition>Alpha_iterator CGAL::Alpha_shape_2&lt; Dt, ExactAlphaComparisonTag &gt;::alpha_find</definition>
        <argsstring>(const FT &amp;alpha) const</argsstring>
        <name>alpha_find</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Alpha__shape__2_1aa8920f564e99cf8abb708fc4495d11a3" kindref="member">FT</ref> &amp;</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
<para>Returns an iterator pointing to an element with <formula id="1">$ \alpha$</formula>-value <computeroutput>alpha</computeroutput>, or the corresponding past-the-end iterator if such an element is not found. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Alpha_shape_2.h" line="358" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Alpha__shape__2_1a7319bb1de894b38ce79af6d4ed301b6b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Alpha__shape__2_1a06ac11586ec6d90d59e0e76e465d074c" kindref="member">Alpha_iterator</ref></type>
        <definition>Alpha_iterator CGAL::Alpha_shape_2&lt; Dt, ExactAlphaComparisonTag &gt;::alpha_lower_bound</definition>
        <argsstring>(const FT &amp;alpha) const</argsstring>
        <name>alpha_lower_bound</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Alpha__shape__2_1aa8920f564e99cf8abb708fc4495d11a3" kindref="member">FT</ref> &amp;</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
<para>Returns an iterator pointing to the first element with <formula id="1">$ \alpha$</formula>-value not less than <computeroutput>alpha</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Alpha_shape_2.h" line="364" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Alpha__shape__2_1a2491c68215e8eadc1e005f5fdfb14f02" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Alpha__shape__2_1a06ac11586ec6d90d59e0e76e465d074c" kindref="member">Alpha_iterator</ref></type>
        <definition>Alpha_iterator CGAL::Alpha_shape_2&lt; Dt, ExactAlphaComparisonTag &gt;::alpha_upper_bound</definition>
        <argsstring>(const FT &amp;alpha) const</argsstring>
        <name>alpha_upper_bound</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Alpha__shape__2_1aa8920f564e99cf8abb708fc4495d11a3" kindref="member">FT</ref> &amp;</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
<para>Returns an iterator pointing to the first element with <formula id="1">$ \alpha$</formula>-value greater than <computeroutput>alpha</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Alpha_shape_2.h" line="370" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      </sectiondef>
    <briefdescription>
<para>The class <computeroutput><ref refid="classCGAL_1_1Alpha__shape__2" kindref="compound">Alpha_shape_2</ref></computeroutput> represents the family of <formula id="1">$ \alpha$</formula>-shapes of points in a plane for <emphasis>all</emphasis> positive <formula id="1">$ \alpha$</formula>. </para>    </briefdescription>
    <detaileddescription>
<para>It maintains the underlying triangulation <computeroutput>Dt</computeroutput> which represents connectivity and order among its faces. Each <formula id="5">$ k$</formula>-dimensional face of the <computeroutput>Dt</computeroutput> is associated with an interval that specifies for which values of <formula id="1">$ \alpha$</formula> the face belongs to the <formula id="1">$ \alpha$</formula>-shape. There are links between the intervals and the <formula id="5">$ k$</formula>-dimensional faces of the triangulation.</para><para>Note that this class is at the same time used for <emphasis>basic</emphasis> and for <emphasis>weighted</emphasis> Alpha Shapes.</para><para>The modifying functions <computeroutput>Alpha_shape_2::insert()</computeroutput> and <computeroutput>Alpha_shape_2::remove()</computeroutput> will overwrite the one inherited from the underlying triangulation class <computeroutput>Dt</computeroutput>. At the moment, only the static version is implemented.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Dt</parametername>
</parameternamelist>
<parameterdescription>
<para>must be either <computeroutput><ref refid="classCGAL_1_1Delaunay__triangulation__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_2.tag">Delaunay_triangulation_2</ref></computeroutput> or <computeroutput><ref refid="classCGAL_1_1Regular__triangulation__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_2.tag">Regular_triangulation_2</ref></computeroutput>. Note that <computeroutput>Dt::Geom_traits</computeroutput>, <computeroutput>Dt::Vertex</computeroutput>, and <computeroutput>Dt::Face</computeroutput> must be model the concepts <computeroutput><ref refid="classAlphaShapeTraits__2" kindref="compound">AlphaShapeTraits_2</ref></computeroutput>, <computeroutput><ref refid="classAlphaShapeVertex__2" kindref="compound">AlphaShapeVertex_2</ref></computeroutput> and <computeroutput><ref refid="classAlphaShapeFace__2" kindref="compound">AlphaShapeFace_2</ref></computeroutput>, respectively.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ExactAlphaComparisonTag</parametername>
</parameternamelist>
<parameterdescription>
<para>is a tag that, when set to <ref refid="group__PkgStlExtensionUtilities_1gab3e2296107b5d26c32c8183028a217f1" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag"><computeroutput>Tag_true</computeroutput></ref>, triggers exact comparisons between alpha values. This is useful when the underlying triangulation is instantiated with an exact predicates inexact constructions kernel. By default the <computeroutput>ExactAlphaComparisonTag</computeroutput> is set to <ref refid="group__PkgStlExtensionUtilities_1ga89d5ecf1540b2ec0a2bf5dd003e186d0" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag"><computeroutput>Tag_false</computeroutput></ref> as it induces a small overhead. Note that the tag <computeroutput>ExactAlphaComparisonTag</computeroutput> is currently ignored (meaning that the code will behave as if <computeroutput>ExactAlphaComparisonTag</computeroutput> were set to <ref refid="group__PkgStlExtensionUtilities_1ga89d5ecf1540b2ec0a2bf5dd003e186d0" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag"><computeroutput>Tag_false</computeroutput></ref>) if <computeroutput>Dt::Geom_traits::FT</computeroutput> is not a floating point number type as this strategy does not make sense if the traits class already provides exact constructions.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para><itemizedlist>
<listitem>
<para>When the tag <computeroutput>ExactAlphaComparisonTag</computeroutput> is set to <ref refid="group__PkgStlExtensionUtilities_1gab3e2296107b5d26c32c8183028a217f1" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag"><computeroutput>Tag_true</computeroutput></ref>, the class <computeroutput><ref refid="classCGAL_1_1Cartesian__converter" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Cartesian_converter</ref></computeroutput> is used internally to switch between the traits class and the CGAL kernel <computeroutput><ref refid="structCGAL_1_1Simple__cartesian" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Simple_cartesian</ref>&lt;NT&gt;</computeroutput>, where <computeroutput>NT</computeroutput> can be either <computeroutput><ref refid="classCGAL_1_1Interval__nt" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">CGAL::Interval_nt</ref></computeroutput> or <computeroutput><ref refid="group__nt__cgal_1ga0849ff44771b19582218ebdfa5614f64" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">CGAL::Exact_rational</ref></computeroutput>. <computeroutput><ref refid="classCGAL_1_1Cartesian__converter" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Cartesian_converter</ref></computeroutput> must thus offer the necessary functors to convert a two-dimensional point of the traits class to a two-dimensional point of <computeroutput><ref refid="structCGAL_1_1Simple__cartesian" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Simple_cartesian</ref>&lt;NT&gt;</computeroutput>. However, these functors are not necessarily provided by the basic <computeroutput><ref refid="classCGAL_1_1Cartesian__converter" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Cartesian_converter</ref></computeroutput>. For example when using the traits class <computeroutput><ref refid="classCGAL_1_1Projection__traits__xy__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Projection_traits_xy_3</ref></computeroutput>, a <computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Point_3</ref></computeroutput> is camouflaged as a <computeroutput>Point_2</computeroutput> and the basic <computeroutput><ref refid="classCGAL_1_1Cartesian__converter" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Cartesian_converter</ref></computeroutput> does not know how to convert from the camouflaged <computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Point_3</ref></computeroutput> to the two-dimensional point of <computeroutput><ref refid="structCGAL_1_1Simple__cartesian" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Simple_cartesian</ref>&lt;NT&gt;</computeroutput>. In this case, a partial specialization of <computeroutput><ref refid="classCGAL_1_1Cartesian__converter" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Cartesian_converter</ref></computeroutput> must be provided by the user. An example of such specialization is given in the example <ref refid="Alpha_shapes_2_2ex_alpha_projection_traits_8cpp-example" kindref="compound">ex_alpha_projection_traits.cpp</ref>. </para></listitem>
<listitem>
<para>The tag <computeroutput>ExactAlphaComparisonTag</computeroutput> cannot be used in conjonction with periodic triangulations. When the tag <computeroutput>ExactAlphaComparisonTag</computeroutput> is set to <ref refid="group__PkgStlExtensionUtilities_1gab3e2296107b5d26c32c8183028a217f1" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag"><computeroutput>Tag_true</computeroutput></ref>, the evaluations of predicates such as <computeroutput>Side_of_oriented_circle_2</computeroutput> are done lazily. Consequently, the predicates store pointers to the geometrical positions of the points passed as arguments of the predicates. It is thus important that these points are not temporary objects. Points of the triangulation are accessed using the function <computeroutput>point(Face_handle, int)</computeroutput> of the underlying triangulation. In the case of periodic triangulations, the <computeroutput>point(Face_handle, int)</computeroutput> function is actually a construction that returns a temporary, which thus cannot be used along with a lazy predicate evaluation. </para></listitem>
</itemizedlist>
</para></simplesect>
<bold>I/O</bold><linebreak/>
</para><para>The I/O operators are defined for <computeroutput>std::iostream</computeroutput>. The format for the iostream is an internal format.</para><para><bold>Implementation</bold><linebreak/>
</para><para>The set of intervals associated with the <formula id="5">$ k$</formula>-dimensional faces of the underlying triangulation are stored in <computeroutput>multimaps</computeroutput>.</para><para>The cross links between the intervals and the <formula id="5">$ k$</formula>-dimensional faces of the triangulation are realized using methods in the <formula id="5">$ k$</formula>-dimensional faces themselves.</para><para><computeroutput><ref refid="classCGAL_1_1Alpha__shape__2_1a0e65969e3dc74bc1ef463c556967395e" kindref="member">Alpha_shape_2::alpha_find()</ref></computeroutput> uses linear search, while <computeroutput><ref refid="classCGAL_1_1Alpha__shape__2_1a7319bb1de894b38ce79af6d4ed301b6b" kindref="member">Alpha_shape_2::alpha_lower_bound()</ref></computeroutput> and <computeroutput><ref refid="classCGAL_1_1Alpha__shape__2_1a2491c68215e8eadc1e005f5fdfb14f02" kindref="member">Alpha_shape_2::alpha_upper_bound()</ref></computeroutput> use binary search. <computeroutput><ref refid="classCGAL_1_1Alpha__shape__2_1a57e288e875ccdcb83f108bada08a2e65" kindref="member">Alpha_shape_2::number_of_solid_components()</ref></computeroutput> performs a graph traversal and takes time linear in the number of faces of the underlying triangulation. <computeroutput><ref refid="classCGAL_1_1Alpha__shape__2_1aec257cfd1bb47e49366f3ca589a56959" kindref="member">Alpha_shape_2::find_optimal_alpha()</ref></computeroutput> uses binary search and takes time <formula id="11">$ O(n \log n)$</formula>, where <formula id="12">$ n$</formula> is the number of points. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="7">
        <label>Dt</label>
      </node>
      <node id="6">
        <label>CGAL::Alpha_shape_2&lt; Dt, ExactAlphaComparisonTag &gt;</label>
        <link refid="classCGAL_1_1Alpha__shape__2"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="9">
        <label>Dt</label>
      </node>
      <node id="8">
        <label>CGAL::Alpha_shape_2&lt; Dt, ExactAlphaComparisonTag &gt;</label>
        <link refid="classCGAL_1_1Alpha__shape__2"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="CGAL/Alpha_shape_2.h" line="87" column="1" bodyfile="CGAL/Alpha_shape_2.h" bodystart="87" bodyend="411"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Alpha__shape__2_1a85688969e0e33a737301553873eb0522" prot="public" virt="non-virtual"><scope>CGAL::Alpha_shape_2</scope><name>alpha_begin</name></member>
      <member refid="classCGAL_1_1Alpha__shape__2_1a113ae772bd4d895abdc07141851161b2" prot="public" virt="non-virtual"><scope>CGAL::Alpha_shape_2</scope><name>alpha_end</name></member>
      <member refid="classCGAL_1_1Alpha__shape__2_1a0e65969e3dc74bc1ef463c556967395e" prot="public" virt="non-virtual"><scope>CGAL::Alpha_shape_2</scope><name>alpha_find</name></member>
      <member refid="classCGAL_1_1Alpha__shape__2_1a06ac11586ec6d90d59e0e76e465d074c" prot="public" virt="non-virtual"><scope>CGAL::Alpha_shape_2</scope><name>Alpha_iterator</name></member>
      <member refid="classCGAL_1_1Alpha__shape__2_1a7319bb1de894b38ce79af6d4ed301b6b" prot="public" virt="non-virtual"><scope>CGAL::Alpha_shape_2</scope><name>alpha_lower_bound</name></member>
      <member refid="classCGAL_1_1Alpha__shape__2_1a06f5c57833229a92e8b67fcc29247880" prot="public" virt="non-virtual"><scope>CGAL::Alpha_shape_2</scope><name>Alpha_shape_2</name></member>
      <member refid="classCGAL_1_1Alpha__shape__2_1a9d026da2568aed80884a5053bae0039b" prot="public" virt="non-virtual"><scope>CGAL::Alpha_shape_2</scope><name>Alpha_shape_2</name></member>
      <member refid="classCGAL_1_1Alpha__shape__2_1a5524e49e27ef267165673d0a36bddb14" prot="public" virt="non-virtual"><scope>CGAL::Alpha_shape_2</scope><name>Alpha_shape_2</name></member>
      <member refid="classCGAL_1_1Alpha__shape__2_1aa6b07740a02dd18a7aa0cf6bf30699d5" prot="public" virt="non-virtual"><scope>CGAL::Alpha_shape_2</scope><name>alpha_shape_edges_begin</name></member>
      <member refid="classCGAL_1_1Alpha__shape__2_1a2ac6405046c2becb35e876e446a56885" prot="public" virt="non-virtual"><scope>CGAL::Alpha_shape_2</scope><name>alpha_shape_edges_end</name></member>
      <member refid="classCGAL_1_1Alpha__shape__2_1a652f355cc521b0aa248a874a3fb408cc" prot="public" virt="non-virtual"><scope>CGAL::Alpha_shape_2</scope><name>Alpha_shape_edges_iterator</name></member>
      <member refid="classCGAL_1_1Alpha__shape__2_1a66e0477bd1ebd44bec1e50b8a7ebc4ef" prot="public" virt="non-virtual"><scope>CGAL::Alpha_shape_2</scope><name>alpha_shape_vertices_begin</name></member>
      <member refid="classCGAL_1_1Alpha__shape__2_1a7c609024ff3d3ec5d862ca785c4717ac" prot="public" virt="non-virtual"><scope>CGAL::Alpha_shape_2</scope><name>alpha_shape_vertices_end</name></member>
      <member refid="classCGAL_1_1Alpha__shape__2_1a1f0efadb0576e2dfa5ba012325660755" prot="public" virt="non-virtual"><scope>CGAL::Alpha_shape_2</scope><name>Alpha_shape_vertices_iterator</name></member>
      <member refid="classCGAL_1_1Alpha__shape__2_1a2491c68215e8eadc1e005f5fdfb14f02" prot="public" virt="non-virtual"><scope>CGAL::Alpha_shape_2</scope><name>alpha_upper_bound</name></member>
      <member refid="classCGAL_1_1Alpha__shape__2_1a910fdb5781b25ae73507d54bb73a63bf" prot="public" virt="non-virtual"><scope>CGAL::Alpha_shape_2</scope><name>Classification_type</name></member>
      <member refid="classCGAL_1_1Alpha__shape__2_1a034641482ad0133a55ef7da3fed87510" prot="public" virt="non-virtual"><scope>CGAL::Alpha_shape_2</scope><name>classify</name></member>
      <member refid="classCGAL_1_1Alpha__shape__2_1afe145b3345b830bf051618caf7a5f0b1" prot="public" virt="non-virtual"><scope>CGAL::Alpha_shape_2</scope><name>classify</name></member>
      <member refid="classCGAL_1_1Alpha__shape__2_1af39706db8539852987c5356e12760764" prot="public" virt="non-virtual"><scope>CGAL::Alpha_shape_2</scope><name>classify</name></member>
      <member refid="classCGAL_1_1Alpha__shape__2_1a3ff4fad0f790cde80f84bb9255333964" prot="public" virt="non-virtual"><scope>CGAL::Alpha_shape_2</scope><name>classify</name></member>
      <member refid="classCGAL_1_1Alpha__shape__2_1aa5bf44693cef4dc2a48d50375f345766" prot="public" virt="non-virtual"><scope>CGAL::Alpha_shape_2</scope><name>classify</name></member>
      <member refid="classCGAL_1_1Alpha__shape__2_1a9484322dab40466cfba38aa6eec47fc7" prot="public" virt="non-virtual"><scope>CGAL::Alpha_shape_2</scope><name>clear</name></member>
      <member refid="classCGAL_1_1Alpha__shape__2_1a910fdb5781b25ae73507d54bb73a63bfa3e492dc451d7dee78e36d423ecd5e659" prot="public" virt="non-virtual"><scope>CGAL::Alpha_shape_2</scope><name>EXTERIOR</name></member>
      <member refid="classCGAL_1_1Alpha__shape__2_1aec257cfd1bb47e49366f3ca589a56959" prot="public" virt="non-virtual"><scope>CGAL::Alpha_shape_2</scope><name>find_optimal_alpha</name></member>
      <member refid="classCGAL_1_1Alpha__shape__2_1aa8920f564e99cf8abb708fc4495d11a3" prot="public" virt="non-virtual"><scope>CGAL::Alpha_shape_2</scope><name>FT</name></member>
      <member refid="classCGAL_1_1Alpha__shape__2_1ae1c8fee3b311d5417dd9c58c8a2b97f5a98f773aea96e5662d660bbf59e2d2bcc" prot="public" virt="non-virtual"><scope>CGAL::Alpha_shape_2</scope><name>GENERAL</name></member>
      <member refid="classCGAL_1_1Alpha__shape__2_1ad88e634f9913a841ca4c0cbc5db801d5" prot="public" virt="non-virtual"><scope>CGAL::Alpha_shape_2</scope><name>get_alpha</name></member>
      <member refid="classCGAL_1_1Alpha__shape__2_1a31eebdbc67677078ea368367a87c7ed0" prot="public" virt="non-virtual"><scope>CGAL::Alpha_shape_2</scope><name>get_mode</name></member>
      <member refid="classCGAL_1_1Alpha__shape__2_1a68fd6ec9d3a640000ff1b9120bf46778" prot="public" virt="non-virtual"><scope>CGAL::Alpha_shape_2</scope><name>get_nth_alpha</name></member>
      <member refid="classCGAL_1_1Alpha__shape__2_1a7a91ffcbeb467d1978a7cd6d4d262141" prot="public" virt="non-virtual"><scope>CGAL::Alpha_shape_2</scope><name>Gt</name></member>
      <member refid="classCGAL_1_1Alpha__shape__2_1a910fdb5781b25ae73507d54bb73a63bfa1c70ff74073e4c7419bc5e013e964ade" prot="public" virt="non-virtual"><scope>CGAL::Alpha_shape_2</scope><name>INTERIOR</name></member>
      <member refid="classCGAL_1_1Alpha__shape__2_1a297b8abac45392eb96dff816f18cb2bf" prot="public" virt="non-virtual"><scope>CGAL::Alpha_shape_2</scope><name>make_alpha_shape</name></member>
      <member refid="classCGAL_1_1Alpha__shape__2_1ae1c8fee3b311d5417dd9c58c8a2b97f5" prot="public" virt="non-virtual"><scope>CGAL::Alpha_shape_2</scope><name>Mode</name></member>
      <member refid="classCGAL_1_1Alpha__shape__2_1a283aa5b63b84825a46f899d82c1c2b0a" prot="public" virt="non-virtual"><scope>CGAL::Alpha_shape_2</scope><name>number_of_alphas</name></member>
      <member refid="classCGAL_1_1Alpha__shape__2_1a57e288e875ccdcb83f108bada08a2e65" prot="public" virt="non-virtual"><scope>CGAL::Alpha_shape_2</scope><name>number_of_solid_components</name></member>
      <member refid="classCGAL_1_1Alpha__shape__2_1abb1d116031c4587dcf06f6cb50d8cc65" prot="public" virt="non-virtual"><scope>CGAL::Alpha_shape_2</scope><name>operator&lt;&lt;</name></member>
      <member refid="classCGAL_1_1Alpha__shape__2_1a0cfa83d865a6db8e82aa5708cf0e2b8e" prot="public" virt="non-virtual"><scope>CGAL::Alpha_shape_2</scope><name>Point</name></member>
      <member refid="classCGAL_1_1Alpha__shape__2_1a910fdb5781b25ae73507d54bb73a63bfaa686e4d8d92d3f50a34ba8d7fd76045c" prot="public" virt="non-virtual"><scope>CGAL::Alpha_shape_2</scope><name>REGULAR</name></member>
      <member refid="classCGAL_1_1Alpha__shape__2_1ae1c8fee3b311d5417dd9c58c8a2b97f5a7cf1156bb047b011ea73178e2cbc17d4" prot="public" virt="non-virtual"><scope>CGAL::Alpha_shape_2</scope><name>REGULARIZED</name></member>
      <member refid="classCGAL_1_1Alpha__shape__2_1a8c23339209bc738bc33a74bbc83a9641" prot="public" virt="non-virtual"><scope>CGAL::Alpha_shape_2</scope><name>set_alpha</name></member>
      <member refid="classCGAL_1_1Alpha__shape__2_1a94639ef3e078140520552c350dc727be" prot="public" virt="non-virtual"><scope>CGAL::Alpha_shape_2</scope><name>set_mode</name></member>
      <member refid="classCGAL_1_1Alpha__shape__2_1a910fdb5781b25ae73507d54bb73a63bfa9cb3341f2648b9c7073ca058884a6738" prot="public" virt="non-virtual"><scope>CGAL::Alpha_shape_2</scope><name>SINGULAR</name></member>
      <member refid="classCGAL_1_1Alpha__shape__2_1a0a8ef3912c1c6e65c3ecdfd33ec7b7a3" prot="public" virt="non-virtual"><scope>CGAL::Alpha_shape_2</scope><name>size_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
