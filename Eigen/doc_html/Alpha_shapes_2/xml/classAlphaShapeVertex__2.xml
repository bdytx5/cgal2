<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classAlphaShapeVertex__2" kind="class" language="C++" prot="public">
    <compoundname>AlphaShapeVertex_2</compoundname>
    <includes local="no">Concepts/AlphaShapeVertex_2.h</includes>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classAlphaShapeVertex__2_1ae6b8af794a2cc37fe62ef533a9a41cbf" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type AlphaShapeVertex_2::FT</definition>
        <argsstring></argsstring>
        <name>FT</name>
        <briefdescription>
<para>A coordinate type. </para>        </briefdescription>
        <detaileddescription>
<para>The type must provide a copy constructor, assignment, comparison operators, negation, multiplication, division and allow the declaration and initialization with a small integer constant (cf. requirements for number types). An obvious choice would be coordinate type of the point class. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AlphaShapeVertex_2.h" line="28" column="1" bodyfile="Concepts/AlphaShapeVertex_2.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classAlphaShapeVertex__2_1a10f6b09f6eb103a56d1248ed9fda7360" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>AlphaShapeVertex_2::AlphaShapeVertex_2</definition>
        <argsstring>()</argsstring>
        <name>AlphaShapeVertex_2</name>
        <briefdescription>
<para>default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AlphaShapeVertex_2.h" line="38" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classAlphaShapeVertex__2_1a8f91218eb84cd9eafc71699e9c479da5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>AlphaShapeVertex_2::AlphaShapeVertex_2</definition>
        <argsstring>(Point p)</argsstring>
        <name>AlphaShapeVertex_2</name>
        <param>
          <type>Point</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>constructor setting the point. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AlphaShapeVertex_2.h" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classAlphaShapeVertex__2_1a7778f089fac21da822d8ae297b39af8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>AlphaShapeVertex_2::AlphaShapeVertex_2</definition>
        <argsstring>(Point p, const Face_handle &amp;ff)</argsstring>
        <name>AlphaShapeVertex_2</name>
        <param>
          <type>Point</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const Face_handle &amp;</type>
          <declname>ff</declname>
        </param>
        <briefdescription>
<para>constructor setting the point associated to and an incident face. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AlphaShapeVertex_2.h" line="49" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Access Functions</header>
      <memberdef kind="function" id="classAlphaShapeVertex__2_1ae0bfba0660ae1a0a9bbcb57ce62420eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; <ref refid="classAlphaShapeVertex__2_1ae6b8af794a2cc37fe62ef533a9a41cbf" kindref="member">FT</ref>, <ref refid="classAlphaShapeVertex__2_1ae6b8af794a2cc37fe62ef533a9a41cbf" kindref="member">FT</ref> &gt;</type>
        <definition>std::pair&lt; FT, FT &gt; AlphaShapeVertex_2::get_range</definition>
        <argsstring>()</argsstring>
        <name>get_range</name>
        <briefdescription>
<para>returns two alpha values <formula id="23">$ \alpha_1 \leq\alpha_2$</formula>, such as for <formula id="1">$ \alpha$</formula> between <formula id="20">$ \alpha_1$</formula> and <formula id="21">$ \alpha_2$</formula>, the vertex is attached but singular, and for <formula id="1">$ \alpha$</formula> upper <formula id="21">$ \alpha_2$</formula>, the vertex is regular. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AlphaShapeVertex_2.h" line="61" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Modifiers</header>
      <memberdef kind="function" id="classAlphaShapeVertex__2_1a7638f81675b1bdb0810ed76b2cd5fd37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AlphaShapeVertex_2::set_range</definition>
        <argsstring>(std::pair&lt; FT, FT &gt; I)</argsstring>
        <name>set_range</name>
        <param>
          <type>std::pair&lt; <ref refid="classAlphaShapeVertex__2_1ae6b8af794a2cc37fe62ef533a9a41cbf" kindref="member">FT</ref>, <ref refid="classAlphaShapeVertex__2_1ae6b8af794a2cc37fe62ef533a9a41cbf" kindref="member">FT</ref> &gt;</type>
          <declname>I</declname>
        </param>
        <briefdescription>
<para>sets the alpha values <formula id="23">$ \alpha_1 \leq\alpha_2$</formula>, such as for <formula id="1">$ \alpha$</formula> between <formula id="20">$ \alpha_1$</formula> and <formula id="21">$ \alpha_2$</formula>, the vertex is attached but singular, and for <formula id="1">$ \alpha$</formula> upper <formula id="21">$ \alpha_2$</formula>, the vertex is regular. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AlphaShapeVertex_2.h" line="73" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The concept <computeroutput><ref refid="classAlphaShapeVertex__2" kindref="compound">AlphaShapeVertex_2</ref></computeroutput> describes the requirements for the base vertex of an alpha shape. </para>    </briefdescription>
    <detaileddescription>
<para> <xrefsect id="refines_1_refines000003"><xreftitle>Refines</xreftitle><xrefdescription><para><computeroutput><ref refid="classTriangulationVertexBase__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_2.tag">TriangulationVertexBase_2</ref></computeroutput>, if the underlying triangulation of the alpha shape is a Delaunay triangulation. </para><para><computeroutput><ref refid="classRegularTriangulationVertexBase__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_2.tag">RegularTriangulationVertexBase_2</ref></computeroutput>, if the underlying triangulation of the alpha shape is a regular triangulation. </para><para><computeroutput><ref refid="classPeriodic__2TriangulationVertexBase__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Periodic_2_triangulation_2.tag">Periodic_2TriangulationVertexBase_2</ref></computeroutput>, if the underlying triangulation of the alpha shape is a periodic triangulation.</para></xrefdescription></xrefsect></para><para><xrefsect id="hasModels_1_hasModels000003"><xreftitle>Has Models</xreftitle><xrefdescription><para><computeroutput><ref refid="classCGAL_1_1Alpha__shape__vertex__base__2" kindref="compound">CGAL::Alpha_shape_vertex_base_2</ref></computeroutput> (templated with the appropriate triangulation vertex base class). </para></xrefdescription></xrefsect></para>    </detaileddescription>
    <location file="Concepts/AlphaShapeVertex_2.h" line="14" column="1" bodyfile="Concepts/AlphaShapeVertex_2.h" bodystart="14" bodyend="77"/>
    <listofallmembers>
      <member refid="classAlphaShapeVertex__2_1a10f6b09f6eb103a56d1248ed9fda7360" prot="public" virt="non-virtual"><scope>AlphaShapeVertex_2</scope><name>AlphaShapeVertex_2</name></member>
      <member refid="classAlphaShapeVertex__2_1a8f91218eb84cd9eafc71699e9c479da5" prot="public" virt="non-virtual"><scope>AlphaShapeVertex_2</scope><name>AlphaShapeVertex_2</name></member>
      <member refid="classAlphaShapeVertex__2_1a7778f089fac21da822d8ae297b39af8e" prot="public" virt="non-virtual"><scope>AlphaShapeVertex_2</scope><name>AlphaShapeVertex_2</name></member>
      <member refid="classAlphaShapeVertex__2_1ae6b8af794a2cc37fe62ef533a9a41cbf" prot="public" virt="non-virtual"><scope>AlphaShapeVertex_2</scope><name>FT</name></member>
      <member refid="classAlphaShapeVertex__2_1ae0bfba0660ae1a0a9bbcb57ce62420eb" prot="public" virt="non-virtual"><scope>AlphaShapeVertex_2</scope><name>get_range</name></member>
      <member refid="classAlphaShapeVertex__2_1a7638f81675b1bdb0810ed76b2cd5fd37" prot="public" virt="non-virtual"><scope>AlphaShapeVertex_2</scope><name>set_range</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
