<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classAlphaShapeFace__2" kind="class" language="C++" prot="public">
    <compoundname>AlphaShapeFace_2</compoundname>
    <includes local="no">Concepts/AlphaShapeFace_2.h</includes>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classAlphaShapeFace__2_1ac8df1973347ad674ca2d5df8dded6c74" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type AlphaShapeFace_2::Interval_3</definition>
        <argsstring></argsstring>
        <name>Interval_3</name>
        <briefdescription>
<para>A container type to get (and put) the three special values ( <formula id="17">$ \alpha_1, \alpha_2, \alpha_3$</formula>) associated with an alpha shape edge. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AlphaShapeFace_2.h" line="25" column="1" bodyfile="Concepts/AlphaShapeFace_2.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classAlphaShapeFace__2_1a085176477cd3c2e5f5e8fe07df2df687" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type AlphaShapeFace_2::FT</definition>
        <argsstring></argsstring>
        <name>FT</name>
        <briefdescription>
<para>A coordinate type. </para>        </briefdescription>
        <detaileddescription>
<para>The type must provide a copy constructor, assignment, comparison operators, negation, multiplication, division and allow the declaration and initialization with a small integer constant (cf. requirements for number types). An obvious choice would be coordinate type of the point class </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AlphaShapeFace_2.h" line="35" column="1" bodyfile="Concepts/AlphaShapeFace_2.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classAlphaShapeFace__2_1aca6bbab4095de5277589359ee8698c16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>AlphaShapeFace_2::AlphaShapeFace_2</definition>
        <argsstring>()</argsstring>
        <name>AlphaShapeFace_2</name>
        <briefdescription>
<para>default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AlphaShapeFace_2.h" line="45" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classAlphaShapeFace__2_1a6fc71c1ca5c65fcefbc864a4a170ad3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>AlphaShapeFace_2::AlphaShapeFace_2</definition>
        <argsstring>(const Vertex_handle &amp;v0, const Vertex_handle &amp;v1, const Vertex_handle &amp;v2)</argsstring>
        <name>AlphaShapeFace_2</name>
        <param>
          <type>const Vertex_handle &amp;</type>
          <declname>v0</declname>
        </param>
        <param>
          <type>const Vertex_handle &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const Vertex_handle &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>constructor setting the incident vertices. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AlphaShapeFace_2.h" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classAlphaShapeFace__2_1a4c6d96bb55478ea76f2cc608d5776b72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>AlphaShapeFace_2::AlphaShapeFace_2</definition>
        <argsstring>(const Vertex_handle &amp;v0, const Vertex_handle &amp;v1, const Vertex_handle &amp;v2, const Face_handle &amp;n0, const Face_handle &amp;n1, const Face_handle &amp;n2)</argsstring>
        <name>AlphaShapeFace_2</name>
        <param>
          <type>const Vertex_handle &amp;</type>
          <declname>v0</declname>
        </param>
        <param>
          <type>const Vertex_handle &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const Vertex_handle &amp;</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>const Face_handle &amp;</type>
          <declname>n0</declname>
        </param>
        <param>
          <type>const Face_handle &amp;</type>
          <declname>n1</declname>
        </param>
        <param>
          <type>const Face_handle &amp;</type>
          <declname>n2</declname>
        </param>
        <briefdescription>
<para>constructor setting the incident vertices and the neighboring faces. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AlphaShapeFace_2.h" line="55" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Access Functions</header>
      <memberdef kind="function" id="classAlphaShapeFace__2_1a87d0636b0c59afdcd02fb2cc6ea33498" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classAlphaShapeFace__2_1ac8df1973347ad674ca2d5df8dded6c74" kindref="member">Interval_3</ref></type>
        <definition>Interval_3 AlphaShapeFace_2::get_ranges</definition>
        <argsstring>(const int &amp;i)</argsstring>
        <name>get_ranges</name>
        <param>
          <type>const int &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>returns the interval associated with the edge indexed with <formula id="18">$ i$</formula>, which contains three alpha values <formula id="19">$ \alpha_1 \leq\alpha_2 \leq\alpha_3$</formula>, such as for <formula id="1">$ \alpha$</formula> between <formula id="20">$ \alpha_1$</formula> and <formula id="21">$ \alpha_2$</formula>, the edge indexed with <formula id="18">$ i$</formula> is attached but singular, for <formula id="1">$ \alpha$</formula> between <formula id="21">$ \alpha_2$</formula> and <formula id="22">$ \alpha_3$</formula>, the edge is regular, and for <formula id="1">$ \alpha$</formula> greater than <formula id="22">$ \alpha_3$</formula>, the edge is interior. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AlphaShapeFace_2.h" line="71" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classAlphaShapeFace__2_1aa562823b9ed68c3262e5744f3b5e7947" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classAlphaShapeFace__2_1a085176477cd3c2e5f5e8fe07df2df687" kindref="member">FT</ref></type>
        <definition>FT AlphaShapeFace_2::get_alpha</definition>
        <argsstring>()</argsstring>
        <name>get_alpha</name>
        <briefdescription>
<para>return the alpha value, under which the alpha shape contains the face. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AlphaShapeFace_2.h" line="77" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Modifiers</header>
      <memberdef kind="function" id="classAlphaShapeFace__2_1a49a7d3bdb04d8b0e330f520f2b6ab5c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AlphaShapeFace_2::set_ranges</definition>
        <argsstring>(const int &amp;i, const Interval_3 &amp;V)</argsstring>
        <name>set_ranges</name>
        <param>
          <type>const int &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const <ref refid="classAlphaShapeFace__2_1ac8df1973347ad674ca2d5df8dded6c74" kindref="member">Interval_3</ref> &amp;</type>
          <declname>V</declname>
        </param>
        <briefdescription>
<para>sets the interval associated with the edge indexed with <formula id="18">$ i$</formula>, which contains three alpha values <formula id="19">$ \alpha_1 \leq\alpha_2 \leq\alpha_3$</formula>, such as for <formula id="1">$ \alpha$</formula> between <formula id="20">$ \alpha_1$</formula> and <formula id="21">$ \alpha_2$</formula>, the edge indexed with <formula id="18">$ i$</formula> is attached but singular, for <formula id="1">$ \alpha$</formula> between <formula id="21">$ \alpha_2$</formula> and <formula id="22">$ \alpha_3$</formula>, the edge is regular, and for <formula id="1">$ \alpha$</formula> greater than <formula id="22">$ \alpha_3$</formula>, the edge is interior. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AlphaShapeFace_2.h" line="93" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classAlphaShapeFace__2_1aa8f17c63ceb14823b705841f58ab1e33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AlphaShapeFace_2::set_alpha</definition>
        <argsstring>(FT A)</argsstring>
        <name>set_alpha</name>
        <param>
          <type><ref refid="classAlphaShapeFace__2_1a085176477cd3c2e5f5e8fe07df2df687" kindref="member">FT</ref></type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>sets the alpha value, under which the alpha shape contains the face. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AlphaShapeFace_2.h" line="99" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The concept <computeroutput><ref refid="classAlphaShapeFace__2" kindref="compound">AlphaShapeFace_2</ref></computeroutput> describes the requirements for the base face of an alpha shape. </para>    </briefdescription>
    <detaileddescription>
<para> <xrefsect id="refines_1_refines000001"><xreftitle>Refines</xreftitle><xrefdescription><para><computeroutput><ref refid="classTriangulationFaceBase__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_2.tag">TriangulationFaceBase_2</ref></computeroutput>, if the underlying triangulation of the alpha shape is a Delaunay triangulation. </para><para><computeroutput><ref refid="classRegularTriangulationFaceBase__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_2.tag">RegularTriangulationFaceBase_2</ref></computeroutput>, if the underlying triangulation of the alpha shape is a regular triangulation. </para><para><computeroutput><ref refid="classPeriodic__2TriangulationFaceBase__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Periodic_2_triangulation_2.tag">Periodic_2TriangulationFaceBase_2</ref></computeroutput>, if the underlying triangulation of the alpha shape is a periodic triangulation.</para></xrefdescription></xrefsect></para><para><xrefsect id="hasModels_1_hasModels000001"><xreftitle>Has Models</xreftitle><xrefdescription><para><computeroutput><ref refid="classCGAL_1_1Alpha__shape__face__base__2" kindref="compound">CGAL::Alpha_shape_face_base_2</ref></computeroutput> (templated with the appropriate triangulation face base class).</para></xrefdescription></xrefsect></para>    </detaileddescription>
    <location file="Concepts/AlphaShapeFace_2.h" line="15" column="1" bodyfile="Concepts/AlphaShapeFace_2.h" bodystart="15" bodyend="103"/>
    <listofallmembers>
      <member refid="classAlphaShapeFace__2_1aca6bbab4095de5277589359ee8698c16" prot="public" virt="non-virtual"><scope>AlphaShapeFace_2</scope><name>AlphaShapeFace_2</name></member>
      <member refid="classAlphaShapeFace__2_1a6fc71c1ca5c65fcefbc864a4a170ad3a" prot="public" virt="non-virtual"><scope>AlphaShapeFace_2</scope><name>AlphaShapeFace_2</name></member>
      <member refid="classAlphaShapeFace__2_1a4c6d96bb55478ea76f2cc608d5776b72" prot="public" virt="non-virtual"><scope>AlphaShapeFace_2</scope><name>AlphaShapeFace_2</name></member>
      <member refid="classAlphaShapeFace__2_1a085176477cd3c2e5f5e8fe07df2df687" prot="public" virt="non-virtual"><scope>AlphaShapeFace_2</scope><name>FT</name></member>
      <member refid="classAlphaShapeFace__2_1aa562823b9ed68c3262e5744f3b5e7947" prot="public" virt="non-virtual"><scope>AlphaShapeFace_2</scope><name>get_alpha</name></member>
      <member refid="classAlphaShapeFace__2_1a87d0636b0c59afdcd02fb2cc6ea33498" prot="public" virt="non-virtual"><scope>AlphaShapeFace_2</scope><name>get_ranges</name></member>
      <member refid="classAlphaShapeFace__2_1ac8df1973347ad674ca2d5df8dded6c74" prot="public" virt="non-virtual"><scope>AlphaShapeFace_2</scope><name>Interval_3</name></member>
      <member refid="classAlphaShapeFace__2_1aa8f17c63ceb14823b705841f58ab1e33" prot="public" virt="non-virtual"><scope>AlphaShapeFace_2</scope><name>set_alpha</name></member>
      <member refid="classAlphaShapeFace__2_1a49a7d3bdb04d8b0e330f520f2b6ab5c9" prot="public" virt="non-virtual"><scope>AlphaShapeFace_2</scope><name>set_ranges</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
