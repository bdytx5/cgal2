<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>User Manual</title>
    <detaileddescription>
<para><anchor id="index_1Chapter_CGAL_Ipelets"/><anchor id="index_1chapcgalipelets"/> <simplesect kind="author"><para>Olivier Devillers, S<eacute/>bastien Loriot, and Sylvain Pion</para></simplesect>
</para><sect1 id="index_1CGAL_ipeletsIntroduction">
<title>Introduction</title>
<para>The Ipe extensible drawing editor (<ulink url="http://tclab.kaist.ac.kr/ipe/">http://tclab.kaist.ac.kr/ipe/</ulink>) <ref refid="citelist_1CITEREF_schwarzkopf1995ede" kindref="member">[2]</ref>, <ref refid="citelist_1CITEREF_ipe:man-09" kindref="member">[1]</ref> is a tool used by computational geometry researchers to produce 2D figures for inclusion in articles or presentations. The extensible adjective sheds a light on an important feature: the possibility for users to write small extensions (called <emphasis>ipelets</emphasis>) to interface any algorithm with Ipe. This feature is especially interesting to produce illustrations in a paper describing a new algorithm. This package provides one class that eases the writing of ipelets based on CGAL, reducing the needed knowledge of the API of Ipe. This class is designed to fulfill most of the needs to implement an ipelet for a 2D CGAL algorithm. In addition, this package comes with more than ten complete examples of ipelets: alpha-shape, arrangements, Voronoi diagrams, convex hulls, Hilbert curve, k-order Delaunay, 2D mesh, Minkowski sum, polygon partition, random generators, triangulations <formula id="0">$ \dots$</formula></para></sect1>
<sect1 id="index_1seccgal_ipelets">
<title>CGAL Ipelets</title>
<para>The class <computeroutput><ref refid="classCGAL_1_1Ipelet__base" kindref="compound">Ipelet_base</ref></computeroutput> derives from the class <computeroutput>Ipelets</computeroutput> from Ipe and has one template parameter indicating which kernel must be used within the ipelet. In practice, we recommend to use either <computeroutput><ref refid="classCGAL_1_1Exact__predicates__exact__constructions__kernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Exact_predicates_exact_constructions_kernel</ref></computeroutput> or <computeroutput><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Exact_predicates_inexact_constructions_kernel</ref></computeroutput>.</para><para>Two main methods are provided by the <computeroutput><ref refid="classCGAL_1_1Ipelet__base" kindref="compound">Ipelet_base</ref></computeroutput> class. The first one, <computeroutput>read_active_objects</computeroutput> retrieves all primitives selected in Ipe when calling an ipelet, and converts them into equivalent CGAL objects. The second method, <computeroutput>draw_in_ipe</computeroutput> draws CGAL objects in the Ipe window. These functions handle basic objects such as points, segments, polygons, circles and circular arcs.</para><para>The registration of an ipelet into Ipe can be done using the macro <computeroutput>CGAL_IPELET</computeroutput>. <computeroutput><ref refid="group__PkgCGALIpelets_1ga9e65fa110a08488077255c52e99c910a" kindref="member">CGAL_IPELET(ipelet_class_name)</ref></computeroutput> must follow the definition of the ipelet class, in the same file source file.</para></sect1>
<sect1 id="index_1CGAL_ipeletsExample">
<title>Example</title>
<para>The following example shows how the class <computeroutput><ref refid="classCGAL_1_1Ipelet__base" kindref="compound">Ipelet_base</ref></computeroutput> can be used to easily interface the CGAL 2D Delaunay triangulation with Ipe.</para><para><linebreak/>
<bold>File</bold> <ref refid="CGAL_ipelets_2simple_triangulation_8cpp-example" kindref="compound">CGAL_ipelets/simple_triangulation.cpp</ref> <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_inexact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Delaunay_triangulation_2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/CGAL_Ipelet_base.h&gt;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">my_triangulation{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Exact_predicates_inexact_constructions_kernel</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kernel;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CGAL::Delaunay_triangulation_2&lt;Kernel&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Delaunay;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//Function<sp/>names<sp/>of<sp/>the<sp/>ipelet</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>labels[]<sp/>=<sp/>{<sp/><sp/></highlight><highlight class="stringliteral">&quot;Delaunay&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Help&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//Help<sp/>message<sp/>associated<sp/>to<sp/>the<sp/>first<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>hmsg[]<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;Draw<sp/>a<sp/>Delaunay<sp/>triangulation<sp/>of<sp/>a<sp/>set<sp/>of<sp/>points&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Triangulation_ipelet</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Ipelet__base" kindref="compound">CGAL::Ipelet_base</ref>&lt;Kernel,2&gt;{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//declare<sp/>an<sp/>ipelet<sp/>called<sp/>CGAL<sp/>Delaunay,<sp/>with<sp/>2<sp/>functions<sp/>(including<sp/>help<sp/>message).</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Triangulation_ipelet()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:<ref refid="namespaceCGAL" kindref="compound">CGAL</ref>::Ipelet_base&lt;Kernel,2&gt;(</highlight><highlight class="stringliteral">&quot;CGAL<sp/>Delaunay&quot;</highlight><highlight class="normal">,labels,hmsg){}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>protected_run(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//function<sp/>called<sp/>when<sp/>using<sp/>the<sp/>ipelet.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Triangulation_ipelet::protected_run(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fn)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(fn){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>show_help();</highlight><highlight class="comment">//print<sp/>an<sp/>help<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::list&lt;Point_2&gt;<sp/>pt_lst;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Recovering<sp/>points<sp/>using<sp/>output<sp/>iterator<sp/>of<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Dispatch_or_drop_output_iterator</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>read_active_objects(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CGAL::dispatch_or_drop_output&lt;Point_2&gt;(std::back_inserter(pt_lst))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pt_lst.empty())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>print_error_message(</highlight><highlight class="stringliteral">&quot;No<sp/>mark<sp/>selected&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Delaunay<sp/>dt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>dt.insert(pt_lst.begin(),pt_lst.end());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//draw<sp/>the<sp/>triangulation.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>draw_in_ipe(dt);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight><highlight class="comment">//namespace<sp/>my_triangulation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//register<sp/>the<sp/>ipelet<sp/>in<sp/>Ipe</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__PkgCGALIpelets_1ga9e65fa110a08488077255c52e99c910a" kindref="member">CGAL_IPELET</ref>(my_triangulation::Triangulation_ipelet)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
</programlisting></para><para><image type="html" name="example.png"></image>
 <image type="latex" name="example.png"></image>
</para></sect1>
<sect1 id="index_1CGAL_ipeletsInstallation">
<title>Installation of the Demo Ipelets</title>
<para>Some working ipelets can be found within the demo directory of this package. To install them you need to go to the demo directory of the package and run cmake. The compilation of these demo requires the source tree and the library of Ipe. If your Ipe installation is not detected you need to set the cmake variables <computeroutput>IPE_INCLUDE_DIR</computeroutput> and <computeroutput>IPE_LIBRARIES</computeroutput>. If you want to install ipelets automatically (using <computeroutput>make install</computeroutput> for example) you also need to set the cmake variable <computeroutput>IPELET_INSTALL_DIR</computeroutput>, if the ipelet installation path has not already been detected. These ipelets have been tested with the versions 6.0pre28 to 6.0pre32 of Ipe, as well as with the version 7 (at least up to version 7.10). These ipelets are a good starting point to design your own ipelet. For more details on how to compile an ipelet, please refer to the Ipe manual.</para><para>Below is the list of ipelets provided by the demo:</para></sect1>
<sect1 id="index_1Ipelets_list">
<title>List of provided Ipelets</title>
<sect2 id="index_1alpha_shapes_ipelet">
<title>Alpha Shapes</title>
<para>The input selection must be a set of points or circles (considered as weighted points). The whole spectrum of critical alpha values are computed and a dialog box allows to choose one.</para></sect2>
<sect2 id="index_1arrangement_ipelet">
<title>Arrangement</title>
<para>The input selection can feature segments, circles, and arcs of circles. The selected primitives are split at intersection points and arcs and circles are split at their x-extrema.</para></sect2>
<sect2 id="index_1bbox_restriction_ipelet">
<title>Bounding Box Restriction</title>
<para>The input selection can feature segments, circles and arcs of circles, and at least two points. The selected primitives are clipped to the bounding box of the set of points selected.</para></sect2>
<sect2 id="index_1circle_pencils_ipelet">
<title>Pencils of Circles</title>
<para>The input selection must be three circles or points (considered as zero radius circles).</para><para><itemizedlist>
<listitem>
<para><bold> Circle in pencil, orthogonal to one circle</bold> draws the circle orthogonal to the primary selection belonging to the pencil defined by the two other circles. </para></listitem>
<listitem>
<para><bold> Circle orthogonal to three circles</bold> draws the circle orthogonal to the three selected circles. </para></listitem>
</itemizedlist>
</para></sect2>
<sect2 id="index_1cone_spanners_ipelet">
<title>Cone spanners</title>
<para>The input selection must be a set of points. The value of k is asked in a dialog box.</para><para><itemizedlist>
<listitem>
<para><bold>Theta-k-graph:</bold> Draws a theta-graph with k cones </para></listitem>
<listitem>
<para><bold>Yao-k-graph:</bold> Draws a Yao-graph with k cones </para></listitem>
<listitem>
<para><bold>Half-theta-k-graph with even cones:</bold> Draws an half-theta-graph with the even of k cones. </para></listitem>
<listitem>
<para><bold>Half-Yao-k-graph with even cones:</bold> Draws an half-Yao-graph with the even of k cones. </para></listitem>
<listitem>
<para><bold>Half-theta-k-graph with odd cones:</bold> Draws an half-theta-graph with the odd of k cones. </para></listitem>
<listitem>
<para><bold>Half-Yao-k-graph with odd cones:</bold> Draws an half-Yao-graph with the odd of k cones. </para></listitem>
<listitem>
<para><bold>k cones:</bold> For earch selected point. Draws the k cones around the point. </para></listitem>
</itemizedlist>
</para></sect2>
<sect2 id="index_1diagrams_ipelet">
<title>Diagrams</title>
<para><itemizedlist>
<listitem>
<para><bold> Voronoi:</bold> The input selection can feature points and segments. The Voronoi diagram is computed and clipped to a box a bit larger than the selection. The bisectors between a segment and its endpoints are drawn. The Voronoi diagram partitions the plane depending on the closest point or segment. </para></listitem>
<listitem>
<para><bold> Segment Voronoi skeleton:</bold> Same as the previous one, but the bisectors between a segment and its endpoints are not drawn (the Voronoi region of the segment endpoints are merged with that of the segment) </para></listitem>
<listitem>
<para><bold>Power diagram:</bold> The input selection must feature circles and points (zero radius circles). The power diagram is computed and clipped to a box a bit larger than the selection. The power diagram partitions the plane depending on the circle with smaller power. </para></listitem>
<listitem>
<para><bold> Apollonius:</bold> The input selection must feature circles and points (zero radius circles). The Apollonius diagram is computed and clipped to a box a bit larger than the selection. The Apollonius diagram partitions the plane depending on the closest circle (also called additively weighted Voronoi diagram). </para></listitem>
</itemizedlist>
</para></sect2>
<sect2 id="index_1distance_ipelet">
<title>Distance</title>
<para>The input selection must be two marks. The distance between the two marks is output (for few seconds) in the bottom of Ipe window. Can be computed in points, centimeters, or inches. <itemizedlist>
<listitem>
<para><bold> Distance between two marks (pts):</bold> </para></listitem>
<listitem>
<para><bold> Distance between two marks (cm):</bold> </para></listitem>
<listitem>
<para><bold> Distance between two marks (inch):</bold> </para></listitem>
</itemizedlist>
</para></sect2>
<sect2 id="index_1generator_ipelet">
<title>Generators</title>
<para>A number of points to generate is asked in a dialog box. <itemizedlist>
<listitem>
<para><bold> Points in a disk</bold> generates random points in the selected circle. </para></listitem>
<listitem>
<para><bold> Points on a grid</bold> generates a grid inside a square bounding the selection. </para></listitem>
<listitem>
<para><bold> Points in a square</bold> generates random points inside a square bounding the selection. </para></listitem>
<listitem>
<para><bold> Points on a convex hull</bold> generates a random convex polygon of given size inside a square bounding the selection and draw their convex hull. </para></listitem>
<listitem>
<para><bold> Polygon</bold> generates a random simple polygon inside a square bounding the selection. </para></listitem>
<listitem>
<para><bold> Segments in a square</bold> generates random line segments inside a square bounding the selection. </para></listitem>
<listitem>
<para><bold> Circles (center in a square)</bold> generates random circles whose centers are inside a square bounding the selection. </para></listitem>
</itemizedlist>
</para></sect2>
<sect2 id="index_1hilbert_sort_ipelet">
<title>Hilbert Sort</title>
<para>The input selection must be a set of points. <itemizedlist>
<listitem>
<para><bold> Hilbert sorting curve, median policy</bold> splits the set of points in two at the median, alternatively in x and y directions and draws the curve connecting the sorted points. </para></listitem>
<listitem>
<para><bold> Hilbert sorting curve, middle policy</bold> splits the set of points in two at the middle, alternatively in x and y directions and draws the curve connecting the sorted points. </para></listitem>
</itemizedlist>
</para></sect2>
<sect2 id="index_1hull_ipelet">
<title>Hulls</title>
<para><itemizedlist>
<listitem>
<para><bold> Convex minimal:</bold> The input selection must feature points, segments or circles. The convex hull of the selected primitive is drawn. </para></listitem>
<listitem>
<para><bold>Crust:</bold> The input section must be a set of points. The crust of the point set is drawn (curve reconstruction). </para></listitem>
</itemizedlist>
</para></sect2>
<sect2 id="index_1hyperbolic_ipelet">
<title>Hyperbolic</title>
<para>Tools for hyperbolic geometry in the Poincare disk model.</para><para><itemizedlist>
<listitem>
<para><bold> Line through two points:</bold> The input selection must be the Poincare circle and two points inside the circle. The hyperbolic line through the points is drawn. </para></listitem>
<listitem>
<para><bold> Segment through two points:</bold> The input selection must be the Poincare circle and two points inside the circle. The hyperbolic line segment through the points is drawn. </para></listitem>
<listitem>
<para><bold> Bisector of two points:</bold> The input section must be the Poincare circle and two points inside the circle. The hyperbolic bisector of the points is drawn. </para></listitem>
<listitem>
<para><bold> Circle by center and point:</bold> The input selection must be the Poincare circle and two points inside the circle, one of these points being the primary selection. The hyperbolic circle centered at the primary selection through the other point is drawn. </para></listitem>
<listitem>
<para><bold> Circle center:</bold> The input selection must be the Poincare circle and another circle inside the latter being the primary selection. The hyperbolic center of the primary selection is drawn. </para></listitem>
</itemizedlist>
</para></sect2>
<sect2 id="index_1mesh_2_ipelet">
<title>Mesh_2</title>
<para>The input selection must be a set of polygons defining a domain, and a set of circles defining connected region that are not part of the domains (holes). A mesh of the domain is computed and drawn using the maximal edge length provided asked in a dialog box.</para></sect2>
<sect2 id="index_1minkowski_ipelet">
<title>Minkowski Sum</title>
<para><itemizedlist>
<listitem>
<para><bold>Minkowski Sum:</bold> The input selection must be two simple polygons. The Minkowski sum of the two polygons is computed and drawn. </para></listitem>
<listitem>
<para><bold>Polygon Offset:</bold> The input selection must be a circle and simple polygons. The Minkowski sum of the polygons with the circle is computed and drawn. </para></listitem>
</itemizedlist>
</para></sect2>
<sect2 id="index_1mst_ipelet">
<title>Minimum Spanning Tree</title>
<para>The input selection must be a set of points. The Euclidean minimum spanning tree of the points is computed and drawn.</para></sect2>
<sect2 id="index_1multi_delaunay_ipelet">
<title>k Order Delaunay</title>
<para>The input selection must be a set of points. The order k Voronoi diagram or its dual the order k Delaunay is drawn. <itemizedlist>
<listitem>
<para><bold> Delaunay:</bold> Ordinary Delaunay triangulation. </para></listitem>
<listitem>
<para><bold> Delaunay 2:</bold> Triangulation of middle of Delaunay edges. </para></listitem>
<listitem>
<para><bold> Delaunay 3:</bold> Triangulation of barycenters of some triangles. </para></listitem>
<listitem>
<para><bold> Delaunay n-1:</bold> Dual of farthest neighbor Voronoi diagram. </para></listitem>
<listitem>
<para><bold> Delaunay k:</bold> k is asked in a dialog box. </para></listitem>
<listitem>
<para><bold> Voronoi:</bold> Ordinary Voronoi diagram. </para></listitem>
<listitem>
<para><bold> Voronoi 2:</bold> Order 2 Voronoi diagram. </para></listitem>
<listitem>
<para><bold> Voronoi 3:</bold> Order 3 Voronoi diagram. </para></listitem>
<listitem>
<para><bold> Voronoi n-1:</bold> Farthest neighbor Voronoi diagram. </para></listitem>
<listitem>
<para><bold> Voronoi k:</bold> k is asked in a dialog box. </para></listitem>
</itemizedlist>
</para></sect2>
<sect2 id="index_1multi_regular_ipelet">
<title>k Order Regular</title>
<para>The input selection must be a set of points and circles. The order k power diagram or its dual the order k regular triangulation is drawn. <itemizedlist>
<listitem>
<para><bold>Regular:</bold> Ordinary regular triangulation. </para></listitem>
<listitem>
<para><bold>Regular 2:</bold> Triangulation of middle of edges of the regular triangulation. </para></listitem>
<listitem>
<para><bold>Regular 3:</bold> Triangulation of barycenters of some triangles. </para></listitem>
<listitem>
<para><bold>Regular n-1:</bold> Dual of farthest neighbor power diagram. </para></listitem>
<listitem>
<para><bold>Regular k:</bold> k is asked in a dialog box. </para></listitem>
<listitem>
<para><bold>Power Diagram:</bold> Ordinary power diagram. </para></listitem>
<listitem>
<para><bold>Power Diagram 2:</bold> Order 2 power diagram. </para></listitem>
<listitem>
<para><bold>Power Diagram 3:</bold> Order 3 power diagram. </para></listitem>
<listitem>
<para><bold>Power Diagram n-1:</bold> Farthest neighbor power diagram. </para></listitem>
<listitem>
<para><bold>Power Diagram k:</bold> k is asked in a dialog box. </para></listitem>
</itemizedlist>
</para></sect2>
<sect2 id="index_1partition_ipelet">
<title>Polygon Partition</title>
<para>The input selection must be simple polygons. The polygons are divided using different algorithms. <itemizedlist>
<listitem>
<para><bold> Y monotone partition:</bold> Regions of the partition are <formula id="1">$ y $</formula> monotone </para></listitem>
<listitem>
<para><bold> Greene&apos;s approx Convex Partition:</bold> Regions of the partition are convex. </para></listitem>
<listitem>
<para><bold> Approx Convex Partition:</bold>Regions of the partition are convex. </para></listitem>
<listitem>
<para><bold> Optimal Convex Partition:</bold>Regions of the partition are convex and their number is minimized. </para></listitem>
</itemizedlist>
</para></sect2>
<sect2 id="index_1pca_ipelet">
<title>PCA</title>
<para>The input selection must be a set of points. A line segment giving the principal direction of the selection is drawn.</para></sect2>
<sect2 id="index_1skeleton_ipelet">
<title>Skeleton and Offset</title>
<para>The input selection must be a simple polygon. The straight skeleton and associated offsets of the polygon are drawn. <itemizedlist>
<listitem>
<para><bold> Interior skeleton</bold> draws the interior skeleton. </para></listitem>
<listitem>
<para><bold> Exterior skeleton</bold> draws the exterior skeleton. </para></listitem>
<listitem>
<para><bold> Interior offset</bold> draws an interior offset using the value provided in the dialog box. </para></listitem>
<listitem>
<para><bold> Exterior offset</bold> draws an exterior offset using the value provided in the dialog box. </para></listitem>
<listitem>
<para><bold> Interior offsets</bold> draws several equally spaced interior offsets are drawn using the value provided in the dialog box. </para></listitem>
<listitem>
<para><bold> Exterior offsets</bold> draws several equally spaced exterior offsets using the value provided in the dialog box. </para></listitem>
</itemizedlist>
</para></sect2>
<sect2 id="index_1triangulation_ipelet">
<title>Triangulations</title>
<para><itemizedlist>
<listitem>
<para><bold> Delaunay:</bold> The input selection must be a set of points. The Delaunay triangulation of the points is drawn. </para></listitem>
<listitem>
<para><bold> Constrained Delaunay:</bold> The input selection must be a set of points and line segments. The Delaunay triangulation of the points and segment&apos;s endpoints that respects the constraints is drawn. </para></listitem>
<listitem>
<para><bold>Conforming Delaunay:</bold> The input selection must be a set of points and line segments. Points are added so that the Delaunay of selected points, segment&apos;s endpoints, and added points respects the constraints. The triangulation is drawn. </para></listitem>
<listitem>
<para><bold> Conforming Gabriel:</bold> The input selection must be a set of points and line segments. Points are added so that the pieces of segments have Gabriel property (their diametral disk is empty). The Delaunay triangulation is drawn. </para></listitem>
<listitem>
<para><bold> Regular:</bold> The input selection must be a set of points and circles (weighted points). The regular triangulation (dual of power diagram) of the points and circle&apos;s centers is drawn. </para></listitem>
</itemizedlist>
</para></sect2>
</sect1>
<sect1 id="index_1CGAL_ipeletsDesign">
<title>Design and Implementation History</title>
<para>A first draft of the CGAL ipelets has been implemented during the internship of Nicolas Carrez, in 2005, supervised by Olivier Devillers. Since then, the ipelets have been rewritten and extended by Sebastien Loriot as a stand-alone software with the help of Laurent Rineau. Finally, an enhanced version has been formally contributed to CGAL in 2009 by Sebastien Loriot. Sylvain Pion has participated in the discussion of the overall design, and contributed the Hilbert sort ipelet demo. Olivier Devillers added the pencil of circles and hyperbolic geometry ipelets in 2014. </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
