<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Unique__hash__map" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Unique_hash_map</compoundname>
    <includes local="no">CGAL/Unique_hash_map.h</includes>
    <templateparamlist>
      <param>
        <type>typename <ref refid="classCGAL_1_1Unique__hash__map_1af63468551d4658e1a9dbf550f25bde94" kindref="member">Key</ref></type>
      </param>
      <param>
        <type>typename <ref refid="classCGAL_1_1Unique__hash__map_1aba9153c4534cf39f61d5fb6a4c490855" kindref="member">Data</ref></type>
      </param>
      <param>
        <type>typename <ref refid="classUniqueHashFunction" kindref="compound">UniqueHashFunction</ref></type>
      </param>
      <param>
        <type>typename Allocator</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <description><para>In compliance with stl, the types <computeroutput>key_type</computeroutput>, <computeroutput>data_type</computeroutput>, and <computeroutput>hasher</computeroutput> are defined as well. </para></description>
      <memberdef kind="typedef" id="classCGAL_1_1Unique__hash__map_1af63468551d4658e1a9dbf550f25bde94" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Unique_hash_map&lt; Key, Data, UniqueHashFunction, Allocator &gt;::Key</definition>
        <argsstring></argsstring>
        <name>Key</name>
        <briefdescription>
<para>the <computeroutput>Key</computeroutput> type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Unique_hash_map.h" line="52" column="1" bodyfile="CGAL/Unique_hash_map.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Unique__hash__map_1aba9153c4534cf39f61d5fb6a4c490855" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Unique_hash_map&lt; Key, Data, UniqueHashFunction, Allocator &gt;::Data</definition>
        <argsstring></argsstring>
        <name>Data</name>
        <briefdescription>
<para>the <computeroutput>Data</computeroutput> type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Unique_hash_map.h" line="57" column="1" bodyfile="CGAL/Unique_hash_map.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Unique__hash__map_1a52d93c7ef96fd5c0510379593f13ea7b" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Unique_hash_map&lt; Key, Data, UniqueHashFunction, Allocator &gt;::Hash_function</definition>
        <argsstring></argsstring>
        <name>Hash_function</name>
        <briefdescription>
<para>the unique hash function type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Unique_hash_map.h" line="62" column="1" bodyfile="CGAL/Unique_hash_map.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Unique__hash__map_1a5513613406971453ad8e2b11748dad75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Unique_hash_map&lt; Key, Data, UniqueHashFunction, Allocator &gt;::Unique_hash_map</definition>
        <argsstring>(const Data &amp;default=Data(), std::size_t table_size=1, const Hash_function &amp;fct=Hash_function())</argsstring>
        <name>Unique_hash_map</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Unique__hash__map_1aba9153c4534cf39f61d5fb6a4c490855" kindref="member">Data</ref> &amp;</type>
          <declname>default</declname>
          <defval><ref refid="classCGAL_1_1Unique__hash__map_1aba9153c4534cf39f61d5fb6a4c490855" kindref="member">Data</ref>()</defval>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>table_size</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Unique__hash__map_1a52d93c7ef96fd5c0510379593f13ea7b" kindref="member">Hash_function</ref> &amp;</type>
          <declname>fct</declname>
          <defval><ref refid="classCGAL_1_1Unique__hash__map_1a52d93c7ef96fd5c0510379593f13ea7b" kindref="member">Hash_function</ref>()</defval>
        </param>
        <briefdescription>
<para>creates an injective function from <computeroutput>Key</computeroutput> to the set of unused variables of type <computeroutput>Data</computeroutput>, sets <computeroutput>default_data</computeroutput> to <computeroutput>default</computeroutput>, passes the <computeroutput>table_size</computeroutput> as argument to the internal implementation, and initializes the hash function with <computeroutput>fct</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Unique_hash_map.h" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Unique__hash__map_1a63745eb84b603f76454cadd0ca9997c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Unique_hash_map&lt; Key, Data, UniqueHashFunction, Allocator &gt;::Unique_hash_map</definition>
        <argsstring>(Key first1, Key beyond1, Data first2, const Data &amp;default=Data(), std::size_t table_size=1, const Hash_function &amp;fct=Hash_function())</argsstring>
        <name>Unique_hash_map</name>
        <param>
          <type><ref refid="classCGAL_1_1Unique__hash__map_1af63468551d4658e1a9dbf550f25bde94" kindref="member">Key</ref></type>
          <declname>first1</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Unique__hash__map_1af63468551d4658e1a9dbf550f25bde94" kindref="member">Key</ref></type>
          <declname>beyond1</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Unique__hash__map_1aba9153c4534cf39f61d5fb6a4c490855" kindref="member">Data</ref></type>
          <declname>first2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Unique__hash__map_1aba9153c4534cf39f61d5fb6a4c490855" kindref="member">Data</ref> &amp;</type>
          <declname>default</declname>
          <defval><ref refid="classCGAL_1_1Unique__hash__map_1aba9153c4534cf39f61d5fb6a4c490855" kindref="member">Data</ref>()</defval>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>table_size</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Unique__hash__map_1a52d93c7ef96fd5c0510379593f13ea7b" kindref="member">Hash_function</ref> &amp;</type>
          <declname>fct</declname>
          <defval><ref refid="classCGAL_1_1Unique__hash__map_1a52d93c7ef96fd5c0510379593f13ea7b" kindref="member">Hash_function</ref>()</defval>
        </param>
        <briefdescription>
<para>creates an injective function from <computeroutput>Key</computeroutput> to the set of unused variables of type <computeroutput>Data</computeroutput>, sets <computeroutput>default_data</computeroutput> to <computeroutput>default</computeroutput>, passes the <computeroutput>table_size</computeroutput> as argument to the internal implementation, initializes the hash function with <computeroutput>fct</computeroutput>, and inserts all keys from the range <computeroutput>[first1,beyond1)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The data variable for each inserted <computeroutput>key</computeroutput> is initialized with the corresponding value from the range <computeroutput>[first2, first2 + (beyond1-first1))</computeroutput>. <simplesect kind="pre"><para>The increment operator must be defined for values of type <computeroutput>Key</computeroutput> and for values of type <computeroutput>Data</computeroutput>. <computeroutput>beyond1</computeroutput> must be reachable from <computeroutput>first1</computeroutput> using increments. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Unique_hash_map.h" line="62" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <memberdef kind="function" id="classCGAL_1_1Unique__hash__map_1a5baa9799bc9b9a4cf62cac33848e7f36" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Unique__hash__map_1aba9153c4534cf39f61d5fb6a4c490855" kindref="member">Data</ref></type>
        <definition>Data CGAL::Unique_hash_map&lt; Key, Data, UniqueHashFunction, Allocator &gt;::default_value</definition>
        <argsstring>() const</argsstring>
        <name>default_value</name>
        <briefdescription>
<para>the current <computeroutput>default_value</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Unique_hash_map.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Unique__hash__map_1a564913921c8b63ffa56526b1fff6fe0b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Unique__hash__map_1a52d93c7ef96fd5c0510379593f13ea7b" kindref="member">Hash_function</ref></type>
        <definition>Hash_function CGAL::Unique_hash_map&lt; Key, Data, UniqueHashFunction, Allocator &gt;::hash_function</definition>
        <argsstring>() const</argsstring>
        <name>hash_function</name>
        <briefdescription>
<para>the current hash function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Unique_hash_map.h" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Unique__hash__map_1a2c699f3ddf6cc85175a147960ad6d6f6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Unique_hash_map&lt; Key, Data, UniqueHashFunction, Allocator &gt;::is_defined</definition>
        <argsstring>(const Key &amp;key) const</argsstring>
        <name>is_defined</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Unique__hash__map_1af63468551d4658e1a9dbf550f25bde94" kindref="member">Key</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>returns true if <formula id="4">$ key$</formula> is defined in <computeroutput>*this</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Note that there can be keys defined that have not been inserted explicitly. Their variables are initialized to <computeroutput>default_value</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Unique_hash_map.h" line="121" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Unique__hash__map_1a8b3033ea45a132cb3ad3d0ca975f26ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Unique_hash_map&lt; Key, Data, UniqueHashFunction, Allocator &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>resets <computeroutput>*this</computeroutput> to the injective function from <computeroutput>Key</computeroutput> to the set of unused variables of type <computeroutput>Data</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The <computeroutput>default_data</computeroutput> remains unchanged. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Unique_hash_map.h" line="129" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Unique__hash__map_1af4c88876bc85da338c5d355533d92e32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Unique_hash_map&lt; Key, Data, UniqueHashFunction, Allocator &gt;::clear</definition>
        <argsstring>(const Data &amp;default)</argsstring>
        <name>clear</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Unique__hash__map_1aba9153c4534cf39f61d5fb6a4c490855" kindref="member">Data</ref> &amp;</type>
          <declname>default</declname>
        </param>
        <briefdescription>
<para>resets <computeroutput>*this</computeroutput> to the injective function from <computeroutput>Key</computeroutput> to the set of unused variables of type <computeroutput>Data</computeroutput> and sets <computeroutput>default_data</computeroutput> to <computeroutput>default</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Unique_hash_map.h" line="137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Unique__hash__map_1a889fcf1f892aaff56a8097062b5bc11b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Unique__hash__map_1aba9153c4534cf39f61d5fb6a4c490855" kindref="member">Data</ref> &amp;</type>
        <definition>Data&amp; CGAL::Unique_hash_map&lt; Key, Data, UniqueHashFunction, Allocator &gt;::operator[]</definition>
        <argsstring>(const Key &amp;key)</argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Unique__hash__map_1af63468551d4658e1a9dbf550f25bde94" kindref="member">Key</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>returns a reference to the variable <computeroutput>map</computeroutput><computeroutput>(key)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>key</computeroutput> has not been inserted into <computeroutput>map</computeroutput> before, <computeroutput>key</computeroutput> is inserted and initialized with <computeroutput>default_value</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Unique_hash_map.h" line="145" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Unique__hash__map_1a46fd5bd1fccae662474d83608b225cbb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classCGAL_1_1Unique__hash__map_1aba9153c4534cf39f61d5fb6a4c490855" kindref="member">Data</ref> &amp;</type>
        <definition>const Data&amp; CGAL::Unique_hash_map&lt; Key, Data, UniqueHashFunction, Allocator &gt;::operator[]</definition>
        <argsstring>(const Key &amp;key) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Unique__hash__map_1af63468551d4658e1a9dbf550f25bde94" kindref="member">Key</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>returns a const reference to the variable <computeroutput>*this</computeroutput><computeroutput>(key)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>key</computeroutput> has not been inserted into <computeroutput>*this</computeroutput> before, a const reference to the <computeroutput>default_value</computeroutput> is returned. However, <computeroutput>key</computeroutput> is not inserted into <computeroutput>*this</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Unique_hash_map.h" line="154" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Unique__hash__map_1afbb7e31742f90c8fbcf619950dddbda3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Unique__hash__map_1aba9153c4534cf39f61d5fb6a4c490855" kindref="member">Data</ref></type>
        <definition>Data CGAL::Unique_hash_map&lt; Key, Data, UniqueHashFunction, Allocator &gt;::insert</definition>
        <argsstring>(Key first1, Key beyond1, Data first2)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="classCGAL_1_1Unique__hash__map_1af63468551d4658e1a9dbf550f25bde94" kindref="member">Key</ref></type>
          <declname>first1</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Unique__hash__map_1af63468551d4658e1a9dbf550f25bde94" kindref="member">Key</ref></type>
          <declname>beyond1</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Unique__hash__map_1aba9153c4534cf39f61d5fb6a4c490855" kindref="member">Data</ref></type>
          <declname>first2</declname>
        </param>
        <briefdescription>
<para>inserts all keys from the range <computeroutput>[first1,beyond1)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The data variable for each inserted <computeroutput>key</computeroutput> is initilized with the corresponding value from the range <computeroutput>[first2, first2 + (beyond1-first1))</computeroutput>. Returns <computeroutput>first2 + (beyond1-first1)</computeroutput>. <simplesect kind="pre"><para>The increment operator must be defined for values of type <computeroutput>Key</computeroutput> and for values of type <computeroutput>Data</computeroutput>. <computeroutput>beyond1</computeroutput> must be reachable from <computeroutput>first1</computeroutput> using increments. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Unique_hash_map.h" line="166" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An instance of the class template <computeroutput><ref refid="classCGAL_1_1Unique__hash__map" kindref="compound">Unique_hash_map</ref></computeroutput> is an injective mapping from the set of keys of type <computeroutput>Key</computeroutput> to the set of variables of type <computeroutput>Data</computeroutput>. </para>    </briefdescription>
    <detaileddescription>
<para>New keys can be inserted at any time, however keys cannot be individually deleted.</para><para>An object <computeroutput>hash</computeroutput> of the type <computeroutput><ref refid="classUniqueHashFunction" kindref="compound">UniqueHashFunction</ref></computeroutput> returns a unique integer index <computeroutput>hash(key)</computeroutput> of type <computeroutput>std::size_t</computeroutput> for all objects <formula id="4">$ key$</formula> stored in <computeroutput>map</computeroutput>. The template parameter has as default the <computeroutput><ref refid="structCGAL_1_1Handle__hash__function" kindref="compound">Handle_hash_function</ref></computeroutput> that hashes all types of pointers, handles, iterators, and circulators.</para><para>The parameter <computeroutput>Allocator</computeroutput> has to match the standard allocator requirements, with value type <computeroutput>Data</computeroutput>. This parameter has the default value <computeroutput><ref refid="group__PkgStlExtension_1ga859086d0e8d189c8c967229e024e5e82" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL_ALLOCATOR(Data)</ref></computeroutput>.</para><para>All variables are initialized to <computeroutput>default_data</computeroutput>, a value of type <computeroutput>Data</computeroutput> specified in the definition of <computeroutput>map</computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classUniqueHashFunction" kindref="compound">UniqueHashFunction</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Handle__hash__function" kindref="compound">CGAL::Handle_hash_function</ref></computeroutput></para></simplesect>
<bold>Implementation</bold><linebreak/>
</para><para><computeroutput><ref refid="classCGAL_1_1Unique__hash__map" kindref="compound">Unique_hash_map</ref></computeroutput> is implemented via a chained hashing scheme. Access operations <computeroutput>map</computeroutput><computeroutput>[i]</computeroutput> take expected time <formula id="5">$ O(1)$</formula>. The <computeroutput>table_size</computeroutput> parameter passed to chained hashing can be used to avoid unnecessary rehashing when set to the number of expected elements in the map. The design is derived from the STL <computeroutput>hash_map</computeroutput> and the LEDA type <computeroutput>map</computeroutput>. Its specialization on insertion only and unique hash values allow for a more time- and space-efficient implementation, see also <ref refid="citelist_1CITEREF_mn-lpcgc-00" kindref="member">[2]</ref>, Chapter 5. This implementation makes also use of sentinels that lead to defined keys that have not been inserted. </para>    </detaileddescription>
    <location file="CGAL/Unique_hash_map.h" line="42" column="1" bodyfile="CGAL/Unique_hash_map.h" bodystart="42" bodyend="170"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Unique__hash__map_1a8b3033ea45a132cb3ad3d0ca975f26ad" prot="public" virt="non-virtual"><scope>CGAL::Unique_hash_map</scope><name>clear</name></member>
      <member refid="classCGAL_1_1Unique__hash__map_1af4c88876bc85da338c5d355533d92e32" prot="public" virt="non-virtual"><scope>CGAL::Unique_hash_map</scope><name>clear</name></member>
      <member refid="classCGAL_1_1Unique__hash__map_1aba9153c4534cf39f61d5fb6a4c490855" prot="public" virt="non-virtual"><scope>CGAL::Unique_hash_map</scope><name>Data</name></member>
      <member refid="classCGAL_1_1Unique__hash__map_1a5baa9799bc9b9a4cf62cac33848e7f36" prot="public" virt="non-virtual"><scope>CGAL::Unique_hash_map</scope><name>default_value</name></member>
      <member refid="classCGAL_1_1Unique__hash__map_1a52d93c7ef96fd5c0510379593f13ea7b" prot="public" virt="non-virtual"><scope>CGAL::Unique_hash_map</scope><name>Hash_function</name></member>
      <member refid="classCGAL_1_1Unique__hash__map_1a564913921c8b63ffa56526b1fff6fe0b" prot="public" virt="non-virtual"><scope>CGAL::Unique_hash_map</scope><name>hash_function</name></member>
      <member refid="classCGAL_1_1Unique__hash__map_1afbb7e31742f90c8fbcf619950dddbda3" prot="public" virt="non-virtual"><scope>CGAL::Unique_hash_map</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Unique__hash__map_1a2c699f3ddf6cc85175a147960ad6d6f6" prot="public" virt="non-virtual"><scope>CGAL::Unique_hash_map</scope><name>is_defined</name></member>
      <member refid="classCGAL_1_1Unique__hash__map_1af63468551d4658e1a9dbf550f25bde94" prot="public" virt="non-virtual"><scope>CGAL::Unique_hash_map</scope><name>Key</name></member>
      <member refid="classCGAL_1_1Unique__hash__map_1a889fcf1f892aaff56a8097062b5bc11b" prot="public" virt="non-virtual"><scope>CGAL::Unique_hash_map</scope><name>operator[]</name></member>
      <member refid="classCGAL_1_1Unique__hash__map_1a46fd5bd1fccae662474d83608b225cbb" prot="public" virt="non-virtual"><scope>CGAL::Unique_hash_map</scope><name>operator[]</name></member>
      <member refid="classCGAL_1_1Unique__hash__map_1a5513613406971453ad8e2b11748dad75" prot="public" virt="non-virtual"><scope>CGAL::Unique_hash_map</scope><name>Unique_hash_map</name></member>
      <member refid="classCGAL_1_1Unique__hash__map_1a63745eb84b603f76454cadd0ca9997c3" prot="public" virt="non-virtual"><scope>CGAL::Unique_hash_map</scope><name>Unique_hash_map</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
