<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Triangulation__conformer__2" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Triangulation_conformer_2</compoundname>
    <includes local="no">CGAL/Triangulation_conformer_2.h</includes>
    <templateparamlist>
      <param>
        <type>typename CDT</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__conformer__2_1a34358c284b98cbfaaff6071f34783379" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Triangulation_conformer_2&lt; CDT &gt;::Triangulation_conformer_2</definition>
        <argsstring>(CDT &amp;t)</argsstring>
        <name>Triangulation_conformer_2</name>
        <param>
          <type>CDT &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Create a new conforming maker, working on <computeroutput>t</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_conformer_2.h" line="84" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Conforming methods</header>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__conformer__2_1a0e582e39585911f1e21725d09d7e79a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Triangulation_conformer_2&lt; CDT &gt;::make_conforming_Delaunay</definition>
        <argsstring>()</argsstring>
        <name>make_conforming_Delaunay</name>
        <briefdescription>
<para>Refines the triangulation into a conforming Delaunay triangulation. </para>        </briefdescription>
        <detaileddescription>
<para>After a call to this method, all triangles fulfill the Delaunay property, that is the empty circle property. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_conformer_2.h" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__conformer__2_1a88b6257c7869e084581d13687d6cd0db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Triangulation_conformer_2&lt; CDT &gt;::make_conforming_Gabriel</definition>
        <argsstring>()</argsstring>
        <name>make_conforming_Gabriel</name>
        <briefdescription>
<para>Refines the triangulation into a conforming Gabriel triangulation. </para>        </briefdescription>
        <detaileddescription>
<para>After a call to this method, all constrained edges <formula id="16">$ e$</formula> have the <emphasis>Gabriel property</emphasis>: the circle with diameter <formula id="16">$ e$</formula> does not contain any vertex of the triangulation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_conformer_2.h" line="114" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Checking</header>
      <description><para>The following methods verify that the constrained triangulation is conforming Delaunay or conforming Gabriel.</para><para>These methods scan the whole triangulation and their complexity is proportional to the number of edges. </para></description>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__conformer__2_1ad6953c20395165d685cf32f1b0ac39ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangulation_conformer_2&lt; CDT &gt;::is_conforming_Delaunay</definition>
        <argsstring>()</argsstring>
        <name>is_conforming_Delaunay</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> iff all triangles fulfill the Delaunay property. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_conformer_2.h" line="135" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__conformer__2_1ad01415671edf6c02ad430d431c454ff1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangulation_conformer_2&lt; CDT &gt;::is_conforming_Gabriel</definition>
        <argsstring>()</argsstring>
        <name>is_conforming_Gabriel</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> iff all constrained edges have the Gabriel property: their circumsphere is empty. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_conformer_2.h" line="145" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Step by Step Operations</header>
      <description><para>The <computeroutput><ref refid="classCGAL_1_1Triangulation__conformer__2" kindref="compound">Triangulation_conformer_2</ref></computeroutput> class allows, for debugging or demos, to play the conforming algorithm step by step, using the following methods.</para><para>They exist in two versions, depending on whether you want the triangulation to be conforming Delaunay or conforming Gabriel, respectively. Any call to a <computeroutput>step_by_step_conforming_XX</computeroutput> function requires a previous call to the corresponding function <computeroutput>init_XX</computeroutput> and Gabriel and Delaunay methods can not be mixed between two calls of <computeroutput>init_XX</computeroutput>. </para></description>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__conformer__2_1ab57b70fad698811b3422a86c7ce12f8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Triangulation_conformer_2&lt; CDT &gt;::init_Delaunay</definition>
        <argsstring>()</argsstring>
        <name>init_Delaunay</name>
        <briefdescription>
<para>The method must be called after all points and constrained segments are inserted and before any call to the following methods. </para>        </briefdescription>
        <detaileddescription>
<para>If some points or segments are then inserted in the triangulation, this method must be called again. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_conformer_2.h" line="172" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__conformer__2_1a871e520871f51f4b72c492e675d018e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangulation_conformer_2&lt; CDT &gt;::step_by_step_conforming_Delaunay</definition>
        <argsstring>()</argsstring>
        <name>step_by_step_conforming_Delaunay</name>
        <briefdescription>
<para>Applies one step of the algorithm, by inserting one point, if the algorithm is not done. </para>        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>false</computeroutput> iff no point has been inserted because the algorithm is done. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_conformer_2.h" line="183" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__conformer__2_1ac194eb183081bc9a8d6fff6d85c08512" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Triangulation_conformer_2&lt; CDT &gt;::init_Gabriel</definition>
        <argsstring>()</argsstring>
        <name>init_Gabriel</name>
        <briefdescription>
<para>Analog to <computeroutput>init_Delaunay</computeroutput> for Gabriel conforming. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_conformer_2.h" line="193" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__conformer__2_1ab5ca1906e33a52cc980bcaedde6a5059" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangulation_conformer_2&lt; CDT &gt;::step_by_step_conforming_Gabriel</definition>
        <argsstring>()</argsstring>
        <name>step_by_step_conforming_Gabriel</name>
        <briefdescription>
<para>Analog to <computeroutput><ref refid="classCGAL_1_1Triangulation__conformer__2_1a871e520871f51f4b72c492e675d018e5" kindref="member">step_by_step_conforming_Delaunay()</ref></computeroutput> for Gabriel conforming. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_conformer_2.h" line="203" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__conformer__2_1a29ff0964d908688d9c4b56a72b41698e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangulation_conformer_2&lt; CDT &gt;::is_conforming_done</definition>
        <argsstring>()</argsstring>
        <name>is_conforming_done</name>
        <briefdescription>
<para>Tests if the step by step conforming algorithm is done. </para>        </briefdescription>
        <detaileddescription>
<para>If it returns <computeroutput>true</computeroutput>, the following calls to <computeroutput>step_by_step_conforming_XX</computeroutput> will not insert any points, until some new constrained segments or points are inserted in the triangulation and <computeroutput>init_XX</computeroutput> is called again. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_conformer_2.h" line="216" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The class <computeroutput><ref refid="classCGAL_1_1Triangulation__conformer__2" kindref="compound">Triangulation_conformer_2</ref></computeroutput> is an auxiliary class of <computeroutput><ref refid="classCGAL_1_1Delaunay__mesher__2" kindref="compound">Delaunay_mesher_2</ref>&lt;CDT&gt;</computeroutput>. </para>    </briefdescription>
    <detaileddescription>
<para>It permits to refine a constrained Delaunay triangulation into a conforming Delaunay or conforming Gabriel triangulation. For standard needs, consider using the global functions <computeroutput><ref refid="group__PkgMesh2Functions_1ga05bf108ffbea1545b99a8b899ec5e2dc" kindref="member">make_conforming_Gabriel_2()</ref></computeroutput> and <computeroutput><ref refid="group__PkgMesh2Functions_1gafbe2b6b96e7c8ce9a2816d50cd9bfacf" kindref="member">make_conforming_Delaunay_2()</ref></computeroutput>.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>CDT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a 2D constrained Delaunay triangulation and its geometric traits class must be a model of the concept <computeroutput><ref refid="classConformingDelaunayTriangulationTraits__2" kindref="compound">ConformingDelaunayTriangulationTraits_2</ref></computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<bold>Using This Class</bold><linebreak/>
</para><para>The constructor of the class <computeroutput><ref refid="classCGAL_1_1Triangulation__conformer__2" kindref="compound">Triangulation_conformer_2</ref></computeroutput> takes a reference to a <computeroutput>CDT</computeroutput> as an argument. A call to the method <computeroutput><ref refid="classCGAL_1_1Triangulation__conformer__2_1a0e582e39585911f1e21725d09d7e79a4" kindref="member">make_conforming_Delaunay()</ref></computeroutput> or <computeroutput><ref refid="classCGAL_1_1Triangulation__conformer__2_1a88b6257c7869e084581d13687d6cd0db" kindref="member">make_conforming_Gabriel()</ref></computeroutput> will refine this constrained Delaunay triangulation into a conforming Delaunay or conforming Gabriel triangulation. Note that if, during the life time of the <computeroutput><ref refid="classCGAL_1_1Triangulation__conformer__2" kindref="compound">Triangulation_conformer_2</ref></computeroutput> object, the triangulation is externally modified, any further call to its member methods may lead to undefined behavior. Consider reconstructing a new <computeroutput><ref refid="classCGAL_1_1Triangulation__conformer__2" kindref="compound">Triangulation_conformer_2</ref></computeroutput> object if the triangulation has been modified.</para><para>The conforming methods insert points into constrained edges, thereby splitting them into several sub-constraints. You have access to the initial inserted constraints if you instantiate the template parameter by a <computeroutput><ref refid="classCGAL_1_1Constrained__triangulation__plus__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_2.tag">Constrained_triangulation_plus_2</ref>&lt;CDT&gt;</computeroutput>. </para>    </detaileddescription>
    <location file="CGAL/Triangulation_conformer_2.h" line="75" column="1" bodyfile="CGAL/Triangulation_conformer_2.h" bodystart="75" bodyend="224"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Triangulation__conformer__2_1ab57b70fad698811b3422a86c7ce12f8d" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_conformer_2</scope><name>init_Delaunay</name></member>
      <member refid="classCGAL_1_1Triangulation__conformer__2_1ac194eb183081bc9a8d6fff6d85c08512" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_conformer_2</scope><name>init_Gabriel</name></member>
      <member refid="classCGAL_1_1Triangulation__conformer__2_1ad6953c20395165d685cf32f1b0ac39ba" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_conformer_2</scope><name>is_conforming_Delaunay</name></member>
      <member refid="classCGAL_1_1Triangulation__conformer__2_1a29ff0964d908688d9c4b56a72b41698e" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_conformer_2</scope><name>is_conforming_done</name></member>
      <member refid="classCGAL_1_1Triangulation__conformer__2_1ad01415671edf6c02ad430d431c454ff1" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_conformer_2</scope><name>is_conforming_Gabriel</name></member>
      <member refid="classCGAL_1_1Triangulation__conformer__2_1a0e582e39585911f1e21725d09d7e79a4" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_conformer_2</scope><name>make_conforming_Delaunay</name></member>
      <member refid="classCGAL_1_1Triangulation__conformer__2_1a88b6257c7869e084581d13687d6cd0db" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_conformer_2</scope><name>make_conforming_Gabriel</name></member>
      <member refid="classCGAL_1_1Triangulation__conformer__2_1a871e520871f51f4b72c492e675d018e5" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_conformer_2</scope><name>step_by_step_conforming_Delaunay</name></member>
      <member refid="classCGAL_1_1Triangulation__conformer__2_1ab5ca1906e33a52cc980bcaedde6a5059" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_conformer_2</scope><name>step_by_step_conforming_Gabriel</name></member>
      <member refid="classCGAL_1_1Triangulation__conformer__2_1a34358c284b98cbfaaff6071f34783379" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_conformer_2</scope><name>Triangulation_conformer_2</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
