<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>User Manual</title>
    <detaileddescription>
<para><anchor id="index_1Chapter_2D_Range_and_Neighbor_Search"/><anchor id="index_1chapterPointset2"/> <simplesect kind="authors"><para>Matthias B<aumlaut/>sken</para></simplesect>
</para><sect1 id="index_1Point_set_2Introduction">
<title>Introduction</title>
<para>Geometric queries are fundamental to many applications in computational geometry. The task is to maintain a dynamic set of geometric objects in such a way that certain queries can be performed efficiently. Typical examples of queries are: find out whether a given object is contained in the set, find all objects of the set lying in a given area (e.g. rectangle), find the object closest to a given point or find the pair of objects in the set lying closest to each other. Furthermore, the set should be dynamic in the sense that deletions and insertions of objects can be performed efficiently.</para><para>In computational geometry literature one can find many different data structures for maintaining sets of geometric objects. Most of them are data structures that have been developed to support a single very special kind of query operation. Examples are Voronoi diagrams for answering nearest neighbor searches, range trees for orthogonal range queries, partition trees for more general range queries, hierarchical triangulations for point location and segment trees for intersection queries.</para><para>In many applications, different types of queries have to be performed on the same set of objects. A naive approach to this problem would use a collection of the above mentioned data structures to represent the set of objects and delegate every query operation to the corresponding structure. However, this is completely impractical since it uses too much memory and requires the maintenance of all these data structures in the presence of update operations.</para><para>Data structures that are non-optimal in theory seem to perform quite well in practice for many of these queries. For example, the Delaunay diagram turns out to be a very powerful data structure for storing dynamic sets of points under range and nearest neighbor queries. A first implementation and computational study of using Delaunay diagrams for geometric queries is described by Mehlhorn and N<aumlaut/>her in <ref refid="citelist_1CITEREF_mn-lpcgc-00" kindref="member">[1]</ref>.</para><para>In this section we present a generic variant of a two dimensional point set data type supporting various geometric queries.</para><para>The <computeroutput><ref refid="classCGAL_1_1Point__set__2" kindref="compound">Point_set_2</ref></computeroutput> class in this section is inherited from the two-dimensional CGAL <emphasis>Delaunay Triangulation</emphasis> data type.</para><para>The <computeroutput><ref refid="classCGAL_1_1Point__set__2" kindref="compound">Point_set_2</ref></computeroutput> class depends on two template parameters <computeroutput>T1</computeroutput> and <computeroutput>T2</computeroutput>. They are used as template parameters for the <computeroutput><ref refid="classCGAL_1_1Delaunay__triangulation__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_2.tag">Delaunay_triangulation_2</ref></computeroutput> class <computeroutput><ref refid="classCGAL_1_1Point__set__2" kindref="compound">Point_set_2</ref></computeroutput> is inherited from. <computeroutput>T1</computeroutput> is a model for the geometric traits and <computeroutput>T2</computeroutput> is a model for the triangulation data structure that the Delaunay triangulation expects.</para><para>The <computeroutput><ref refid="classCGAL_1_1Point__set__2" kindref="compound">Point_set_2</ref></computeroutput> class supports the following kinds of queries: <itemizedlist>
<listitem>
<para>circular range search </para></listitem>
<listitem>
<para>triangular range search </para></listitem>
<listitem>
<para>isorectangular range search </para></listitem>
<listitem>
<para>(k) nearest neighbor(s) </para></listitem>
</itemizedlist>
For details about the running times see <ref refid="citelist_1CITEREF_mn-lpcgc-00" kindref="member">[1]</ref>.</para></sect1>
<sect1 id="index_1Point_set_2Example">
<title>Example: Range Search</title>
<para>The following example program demonstrates the various range search operations of the two dimensional point set. First we construct a two dimensional point set <computeroutput>PSet</computeroutput> and initialize it with a few points. Then we perform circular, triangular and isorectangular range search operations on the point set.</para><para><linebreak/>
<bold>File</bold> <ref refid="Point_set_2_2range_search_8cpp-example" kindref="compound">Point_set_2/range_search.cpp</ref> <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_inexact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Point_set_2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Exact_predicates_inexact_constructions_kernel</ref><sp/><sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Point__set__2_1a5ebf4f92a1c799aa8e0401fefefe647d" kindref="member">CGAL::Point_set_2&lt;K&gt;::Vertex_handle</ref><sp/><sp/>Vertex_handle;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Point_2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classCGAL_1_1Point__set__2" kindref="compound">CGAL::Point_set_2&lt;K&gt;</ref><sp/>PSet;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::list&lt;Point_2&gt;<sp/>Lr;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Point_2<sp/>p1(12,14);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Point_2<sp/>p2(-12,14);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Point_2<sp/>p3(2,11);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Point_2<sp/>p4(5,6);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Point_2<sp/>p5(6.7,3.8);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Point_2<sp/>p6(11,20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Point_2<sp/>p7(-5,6);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Point_2<sp/>p8(12,0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Point_2<sp/>p9(4,31);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Point_2<sp/>p10(-10,-10);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Lr.push_back(p1);<sp/>Lr.push_back(p2);<sp/>Lr.push_back(p3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Lr.push_back(p4);<sp/>Lr.push_back(p5);<sp/>Lr.push_back(p6);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Lr.push_back(p7);<sp/>Lr.push_back(p8);<sp/>Lr.push_back(p9);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Lr.push_back(p10);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>PSet.insert(Lr.begin(),Lr.end());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;circular<sp/>range<sp/>search<sp/>!\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classCGAL_1_1Circle__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Circle_2&lt;K&gt;</ref><sp/>rc(p5,p6);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::list&lt;Vertex_handle&gt;<sp/>LV;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>PSet.range_search(rc,<sp/>std::back_inserter(LV));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::list&lt;Vertex_handle&gt;::const_iterator<sp/>it;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(it=LV.begin();it<sp/>!=<sp/>LV.end();<sp/>it++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(*it)-&gt;point()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;triangular<sp/>range<sp/>search<sp/>!\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LV.clear();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>PSet.range_search(p1,p2,p3,<sp/>std::back_inserter(LV));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(it=LV.begin();it<sp/>!=<sp/>LV.end();<sp/>it++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(*it)-&gt;point()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LV.clear();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;isorectangular<sp/>range<sp/>search<sp/>!\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Point_2<sp/>pt1=p10;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Point_2<sp/>pt3=p3;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Point_2<sp/>pt2<sp/>=<sp/>Point_2(pt3.x(),pt1.y());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Point_2<sp/>pt4<sp/>=<sp/>Point_2(pt1.x(),pt3.y());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>PSet.range_search(pt1,pt2,pt3,pt4,<sp/>std::back_inserter(LV));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(it=LV.begin();it<sp/>!=<sp/>LV.end();<sp/>it++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(*it)-&gt;point()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
