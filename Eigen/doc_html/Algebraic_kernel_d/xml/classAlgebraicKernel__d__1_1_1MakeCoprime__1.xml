<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classAlgebraicKernel__d__1_1_1MakeCoprime__1" kind="class" language="C++" prot="public">
    <compoundname>AlgebraicKernel_d_1::MakeCoprime_1</compoundname>
    <includes local="no">Concepts/AlgebraicKernel_d_1--MakeCoprime_1.h</includes>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classAlgebraicKernel__d__1_1_1MakeCoprime__1_1a1a51e4b09382bcb69781df8ca5a79a82" prot="public" static="no">
        <type>bool</type>
        <definition>typedef bool AlgebraicKernel_d_1::MakeCoprime_1::result_type</definition>
        <argsstring></argsstring>
        <name>result_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AlgebraicKernel_d_1--MakeCoprime_1.h" line="34" column="1" bodyfile="Concepts/AlgebraicKernel_d_1--MakeCoprime_1.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <memberdef kind="function" id="classAlgebraicKernel__d__1_1_1MakeCoprime__1_1a78ce7ce9fd252f919aa4a4434f365914" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classAlgebraicKernel__d__1_1_1MakeCoprime__1_1a1a51e4b09382bcb69781df8ca5a79a82" kindref="member">result_type</ref></type>
        <definition>result_type AlgebraicKernel_d_1::MakeCoprime_1::operator()</definition>
        <argsstring>(const AlgebraicKernel_d_1::Polynomial_1 &amp;p1, const AlgebraicKernel_d_1::Polynomial_1 &amp;p2, AlgebraicKernel_d_1::Polynomial_1 &amp;g, AlgebraicKernel_d_1::Polynomial_1 &amp;q1, AlgebraicKernel_d_1::Polynomial_1 &amp;q2)</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="classAlgebraicKernel__d__1_1ae49b9882d6f700d17476e00933ed20f3" kindref="member">AlgebraicKernel_d_1::Polynomial_1</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classAlgebraicKernel__d__1_1ae49b9882d6f700d17476e00933ed20f3" kindref="member">AlgebraicKernel_d_1::Polynomial_1</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type><ref refid="classAlgebraicKernel__d__1_1ae49b9882d6f700d17476e00933ed20f3" kindref="member">AlgebraicKernel_d_1::Polynomial_1</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="classAlgebraicKernel__d__1_1ae49b9882d6f700d17476e00933ed20f3" kindref="member">AlgebraicKernel_d_1::Polynomial_1</ref> &amp;</type>
          <declname>q1</declname>
        </param>
        <param>
          <type><ref refid="classAlgebraicKernel__d__1_1ae49b9882d6f700d17476e00933ed20f3" kindref="member">AlgebraicKernel_d_1::Polynomial_1</ref> &amp;</type>
          <declname>q2</declname>
        </param>
        <briefdescription>
<para>Computes <formula id="36">$ g, q_1, q_2$</formula> as described above. </para>        </briefdescription>
        <detaileddescription>
<para>Returns whether <formula id="31">$ p_1$</formula> and <formula id="32">$ p_2$</formula> where already coprime. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AlgebraicKernel_d_1--MakeCoprime_1.h" line="48" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Computes for a given pair of univariate polynomials <formula id="31">$ p_1$</formula>, <formula id="32">$ p_2$</formula> their common part <formula id="33">$ g$</formula> up to a constant factor and coprime parts <formula id="34">$ q_1$</formula>, <formula id="35">$ q_2$</formula> respectively. </para>    </briefdescription>
    <detaileddescription>
<para> That is, it computes <formula id="36">$ g, q_1, q_2$</formula> such that:</para><para><formula id="37">$ c_1 \cdot p_1 = g \cdot q_1$</formula> for some constant <formula id="38">$ c_1$</formula> and</para><para><formula id="39">$ c_2 \cdot p_2 = g \cdot q_2$</formula> for some constant <formula id="40">$ c_2$</formula>, such that <formula id="34">$ q_1$</formula> and <formula id="35">$ q_2$</formula> are coprime.</para><para>It returns true if <formula id="31">$ p_1$</formula> and <formula id="32">$ p_2$</formula> are already coprime.</para><para><xrefsect id="refines_1_refines000011"><xreftitle>Refines</xreftitle><xrefdescription><para><computeroutput><ref refid="classAdaptableFunctor" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">AdaptableFunctor</ref></computeroutput> with five arguments </para></xrefdescription></xrefsect></para><para><simplesect kind="see"><para><computeroutput><ref refid="classAlgebraicKernel__d__1_1_1IsCoprime__1" kindref="compound">AlgebraicKernel_d_1::IsCoprime_1</ref></computeroutput> </para></simplesect>
</para>    </detaileddescription>
    <location file="Concepts/AlgebraicKernel_d_1--MakeCoprime_1.h" line="25" column="1" bodyfile="Concepts/AlgebraicKernel_d_1--MakeCoprime_1.h" bodystart="25" bodyend="56"/>
    <listofallmembers>
      <member refid="classAlgebraicKernel__d__1_1_1MakeCoprime__1_1a78ce7ce9fd252f919aa4a4434f365914" prot="public" virt="non-virtual"><scope>AlgebraicKernel_d_1::MakeCoprime_1</scope><name>operator()</name></member>
      <member refid="classAlgebraicKernel__d__1_1_1MakeCoprime__1_1a1a51e4b09382bcb69781df8ca5a79a82" prot="public" virt="non-virtual"><scope>AlgebraicKernel_d_1::MakeCoprime_1</scope><name>result_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
