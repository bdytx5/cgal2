<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCircularKernel_1_1ConstructCircularArc__2" kind="class" language="C++" prot="public">
    <compoundname>CircularKernel::ConstructCircularArc_2</compoundname>
    <includes local="no">Concepts/CircularKernel--ConstructCircularArc_2.h</includes>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <description><para>A model of this concept must provide: </para></description>
      <memberdef kind="function" id="classCircularKernel_1_1ConstructCircularArc__2_1a6a0c57abb210f512f69b22d7e5c16e15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCircularKernel_1aaa7a7ee11b2a76b5ef9dda78a15ee3cc" kindref="member">CircularKernel::Circular_arc_2</ref></type>
        <definition>CircularKernel::Circular_arc_2 CircularKernel::ConstructCircularArc_2::operator()</definition>
        <argsstring>(const CircularKernel::Circle_2 &amp;c)</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="classCircularKernel_1aad6380c249a934593a4409f175fc79d2" kindref="member">CircularKernel::Circle_2</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Constructs an arc from a full circle. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/CircularKernel--ConstructCircularArc_2.h" line="18" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCircularKernel_1_1ConstructCircularArc__2_1aaadd733a7dc203cd9acddf47bb21be15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCircularKernel_1aaa7a7ee11b2a76b5ef9dda78a15ee3cc" kindref="member">CircularKernel::Circular_arc_2</ref></type>
        <definition>CircularKernel::Circular_arc_2 CircularKernel::ConstructCircularArc_2::operator()</definition>
        <argsstring>(const CircularKernel::Circle_2 &amp;c, const CircularKernel::Circular_arc_point_2 &amp;p1, const CircularKernel::Circular_arc_point_2 &amp;p2)</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="classCircularKernel_1aad6380c249a934593a4409f175fc79d2" kindref="member">CircularKernel::Circle_2</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classCircularKernel_1a367df286e7cbf5d07067d6587937a164" kindref="member">CircularKernel::Circular_arc_point_2</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classCircularKernel_1a367df286e7cbf5d07067d6587937a164" kindref="member">CircularKernel::Circular_arc_point_2</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Construct the circular arc supported by <computeroutput>c</computeroutput>, whose source is <computeroutput>p1</computeroutput> and whose target is <computeroutput>p2</computeroutput> when traversing the circle in counterclockwise direction. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> lie on <computeroutput>c</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/CircularKernel--ConstructCircularArc_2.h" line="27" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCircularKernel_1_1ConstructCircularArc__2_1aa34fc54778e097a362aa59de2b210fd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCircularKernel_1aaa7a7ee11b2a76b5ef9dda78a15ee3cc" kindref="member">CircularKernel::Circular_arc_2</ref></type>
        <definition>CircularKernel::Circular_arc_2 CircularKernel::ConstructCircularArc_2::operator()</definition>
        <argsstring>(const CircularKernel::Circle_2 &amp;c, const CircularKernel::Circle_2 &amp;c1, bool b1, const CircularKernel::Circle_2 &amp;c2, bool b2)</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="classCircularKernel_1aad6380c249a934593a4409f175fc79d2" kindref="member">CircularKernel::Circle_2</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classCircularKernel_1aad6380c249a934593a4409f175fc79d2" kindref="member">CircularKernel::Circle_2</ref> &amp;</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>b1</declname>
        </param>
        <param>
          <type>const <ref refid="classCircularKernel_1aad6380c249a934593a4409f175fc79d2" kindref="member">CircularKernel::Circle_2</ref> &amp;</type>
          <declname>c2</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>b2</declname>
        </param>
        <briefdescription>
<para>Constructs the unique circular arc whose supporting circle is <computeroutput>c</computeroutput>, and whose source is the intersection of <computeroutput>c</computeroutput> and <computeroutput>c1</computeroutput> with index <computeroutput>b1</computeroutput>, and whose target is the intersection of <computeroutput>c</computeroutput> and <computeroutput>c2</computeroutput> of index <computeroutput>b2</computeroutput>, where intersections are ordered lexicographically, and when traversing the circle in counterclockwise direction. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>c</computeroutput> intersects both <computeroutput>c1</computeroutput> and <computeroutput>c2</computeroutput>, and the arc defined by the intersections has non-zero length. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/CircularKernel--ConstructCircularArc_2.h" line="41" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCircularKernel_1_1ConstructCircularArc__2_1ac66d0275068e22bfe9eeaa3ee00ae887" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCircularKernel_1aaa7a7ee11b2a76b5ef9dda78a15ee3cc" kindref="member">CircularKernel::Circular_arc_2</ref></type>
        <definition>CircularKernel::Circular_arc_2 CircularKernel::ConstructCircularArc_2::operator()</definition>
        <argsstring>(const CircularKernel::Circle_2 &amp;c, const CircularKernel::Line_2 &amp;l1, bool b1, const CircularKernel::Line_2 &amp;l2, bool b2)</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="classCircularKernel_1aad6380c249a934593a4409f175fc79d2" kindref="member">CircularKernel::Circle_2</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classCircularKernel_1ad701c373bfe533230ef67bb115c66972" kindref="member">CircularKernel::Line_2</ref> &amp;</type>
          <declname>l1</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>b1</declname>
        </param>
        <param>
          <type>const <ref refid="classCircularKernel_1ad701c373bfe533230ef67bb115c66972" kindref="member">CircularKernel::Line_2</ref> &amp;</type>
          <declname>l2</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>b2</declname>
        </param>
        <briefdescription>
<para>Same, for intersections defined by lines instead of circles. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/CircularKernel--ConstructCircularArc_2.h" line="49" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCircularKernel_1_1ConstructCircularArc__2_1ace59df25220da793c2729b872dd931e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCircularKernel_1aaa7a7ee11b2a76b5ef9dda78a15ee3cc" kindref="member">CircularKernel::Circular_arc_2</ref></type>
        <definition>CircularKernel::Circular_arc_2 CircularKernel::ConstructCircularArc_2::operator()</definition>
        <argsstring>(const CircularKernel::Point_2 &amp;p, const CircularKernel::Point_2 &amp;q, const CircularKernel::Point_2 &amp;r)</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="classCircularKernel_1a3669ed612db0d62cc4cfe3979c15b351" kindref="member">CircularKernel::Point_2</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCircularKernel_1a3669ed612db0d62cc4cfe3979c15b351" kindref="member">CircularKernel::Point_2</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCircularKernel_1a3669ed612db0d62cc4cfe3979c15b351" kindref="member">CircularKernel::Point_2</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Constructs an arc that is supported by the circle of type <computeroutput><ref refid="classCircularKernel_1aad6380c249a934593a4409f175fc79d2" kindref="member">CircularKernel::Circle_2</ref></computeroutput> passing through the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput> and <computeroutput>r</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The source and target are respectively <computeroutput>p</computeroutput> and <computeroutput>r</computeroutput>, when traversing the supporting circle in the counterclockwise direction. Note that, depending on the orientation of the point triple <computeroutput>(p,q,r)</computeroutput>, <computeroutput>q</computeroutput> may not lie on the arc. <simplesect kind="pre"><para><computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput> are not collinear. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/CircularKernel--ConstructCircularArc_2.h" line="64" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para> </para>    </detaileddescription>
    <location file="Concepts/CircularKernel--ConstructCircularArc_2.h" line="8" column="1" bodyfile="Concepts/CircularKernel--ConstructCircularArc_2.h" bodystart="8" bodyend="71"/>
    <listofallmembers>
      <member refid="classCircularKernel_1_1ConstructCircularArc__2_1a6a0c57abb210f512f69b22d7e5c16e15" prot="public" virt="non-virtual"><scope>CircularKernel::ConstructCircularArc_2</scope><name>operator()</name></member>
      <member refid="classCircularKernel_1_1ConstructCircularArc__2_1aaadd733a7dc203cd9acddf47bb21be15" prot="public" virt="non-virtual"><scope>CircularKernel::ConstructCircularArc_2</scope><name>operator()</name></member>
      <member refid="classCircularKernel_1_1ConstructCircularArc__2_1aa34fc54778e097a362aa59de2b210fd1" prot="public" virt="non-virtual"><scope>CircularKernel::ConstructCircularArc_2</scope><name>operator()</name></member>
      <member refid="classCircularKernel_1_1ConstructCircularArc__2_1ac66d0275068e22bfe9eeaa3ee00ae887" prot="public" virt="non-virtual"><scope>CircularKernel::ConstructCircularArc_2</scope><name>operator()</name></member>
      <member refid="classCircularKernel_1_1ConstructCircularArc__2_1ace59df25220da793c2729b872dd931e7" prot="public" virt="non-virtual"><scope>CircularKernel::ConstructCircularArc_2</scope><name>operator()</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
