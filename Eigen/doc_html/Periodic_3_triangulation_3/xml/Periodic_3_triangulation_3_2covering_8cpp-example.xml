<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="Periodic_3_triangulation_3_2covering_8cpp-example" kind="example">
    <compoundname>Periodic_3_triangulation_3/covering.cpp</compoundname>
    <detaileddescription>
<para><programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_inexact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Periodic_3_Delaunay_triangulation_traits_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Periodic_3_Delaunay_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Exact_predicates_inexact_constructions_kernel</ref><sp/><sp/><sp/><sp/><sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Periodic__3__Delaunay__triangulation__traits__3" kindref="compound">CGAL::Periodic_3_Delaunay_triangulation_traits_3&lt;K&gt;</ref><sp/><sp/><sp/><sp/><sp/>Gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Periodic__3__Delaunay__triangulation__3" kindref="compound">CGAL::Periodic_3_Delaunay_triangulation_3&lt;Gt&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>P3DT3;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>P3DT3::Point<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>P3DT3::Covering_sheets<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Covering_sheets;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>P3DT3<sp/>T;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Input<sp/>point<sp/>grid<sp/>(27<sp/>points)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x=0.<sp/>;<sp/>x<sp/>&lt;<sp/>.9<sp/>;<sp/>x<sp/>+=<sp/>0.33)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y=0.<sp/>;<sp/>y<sp/>&lt;<sp/>.9<sp/>;<sp/>y<sp/>+=<sp/>0.33)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z=0.<sp/>;<sp/>z<sp/>&lt;<sp/>.9<sp/>;<sp/>z<sp/>+=<sp/>0.33)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T.<ref refid="classCGAL_1_1Periodic__3__Delaunay__triangulation__3_1a00517885761d298a85ecccf15f8a9559" kindref="member">insert</ref>(Point(x,y,z));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Covering_sheets<sp/>cs<sp/>=<sp/>T.number_of_sheets();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Current<sp/>covering:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;cs[0]&lt;&lt;</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">&lt;&lt;cs[1]&lt;&lt;</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">&lt;&lt;cs[2]&lt;&lt;std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>T.is_triangulation_in_1_sheet()<sp/>)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>=<sp/>true</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_extensible<sp/>=<sp/>T.is_extensible_triangulation_in_1_sheet_h1()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>T.is_extensible_triangulation_in_1_sheet_h2();<sp/></highlight><highlight class="comment">//<sp/>=<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>T.convert_to_1_sheeted_covering();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cs<sp/>=<sp/>T.number_of_sheets();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Current<sp/>covering:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;cs[0]&lt;&lt;</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">&lt;&lt;cs[1]&lt;&lt;</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">&lt;&lt;cs[2]&lt;&lt;std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>is_extensible<sp/>)<sp/></highlight><highlight class="comment">//<sp/>=<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;It<sp/>is<sp/>safe<sp/>to<sp/>change<sp/>the<sp/>triangulation<sp/>here.&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;It<sp/>is<sp/>NOT<sp/>safe<sp/>to<sp/>change<sp/>the<sp/>triangulation<sp/>here!&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>T.convert_to_27_sheeted_covering();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cs<sp/>=<sp/>T.number_of_sheets();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Current<sp/>covering:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;cs[0]&lt;&lt;</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">&lt;&lt;cs[1]&lt;&lt;</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">&lt;&lt;cs[2]&lt;&lt;std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;It<sp/>is<sp/>(again)<sp/>safe<sp/>to<sp/>modify<sp/>the<sp/>triangulation.&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>    </detaileddescription>
  </compounddef>
</doxygen>
