<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__PkgPointSetShapeDetection3" kind="group">
    <compoundname>PkgPointSetShapeDetection3</compoundname>
    <title>Point Set Shape Detection Reference</title>
    <innerfile refid="Shape__detection__3_8h">Shape_detection_3.h</innerfile>
    <innerfile refid="regularize__planes_8h">regularize_planes.h</innerfile>
    <innerclass refid="classCGAL_1_1Shape__detection__3_1_1Efficient__RANSAC" prot="public">CGAL::Shape_detection_3::Efficient_RANSAC</innerclass>
    <innerclass refid="classCGAL_1_1Shape__detection__3_1_1Region__growing" prot="public">CGAL::Shape_detection_3::Region_growing</innerclass>
    <innerclass refid="structCGAL_1_1Shape__detection__3_1_1Shape__detection__traits" prot="public">CGAL::Shape_detection_3::Shape_detection_traits</innerclass>
    <innerclass refid="classCGAL_1_1Shape__detection__3_1_1Point__to__shape__index__map" prot="public">CGAL::Shape_detection_3::Point_to_shape_index_map</innerclass>
    <innerclass refid="classCGAL_1_1Shape__detection__3_1_1Plane__map" prot="public">CGAL::Shape_detection_3::Plane_map</innerclass>
    <innergroup refid="group__PkgPointSetShapeDetection3Concepts">Concepts</innergroup>
    <innergroup refid="group__PkgPointSetShapeDetection3Shapes">Shapes</innergroup>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgPointSetShapeDetection3_1ga57cdb2c265967f4a6a04b5db3e0828d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename PointMap</type>
          </param>
          <param>
            <type>typename PlaneRange</type>
          </param>
          <param>
            <type>typename PlaneMap</type>
          </param>
          <param>
            <type>typename IndexMap</type>
          </param>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::regularize_planes</definition>
        <argsstring>(const PointRange &amp;points, PointMap point_map, PlaneRange &amp;planes, PlaneMap plane_map, IndexMap index_map, const Kernel &amp;, bool regularize_parallelism, bool regularize_orthogonality, bool regularize_coplanarity, bool regularize_axis_symmetry, double tolerance_angle=25.0, double tolerance_coplanarity=0.01, typename Kernel::Vector_3 symmetry_direction=typename Kernel::Vector_3(0., 0., 1.))</argsstring>
        <name>regularize_planes</name>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>PointMap</type>
          <declname>point_map</declname>
        </param>
        <param>
          <type>PlaneRange &amp;</type>
          <declname>planes</declname>
        </param>
        <param>
          <type>PlaneMap</type>
          <declname>plane_map</declname>
        </param>
        <param>
          <type>IndexMap</type>
          <declname>index_map</declname>
        </param>
        <param>
          <type>const <ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> &amp;</type>
        </param>
        <param>
          <type>bool</type>
          <declname>regularize_parallelism</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>regularize_orthogonality</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>regularize_coplanarity</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>regularize_axis_symmetry</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance_angle</declname>
          <defval>25.0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance_coplanarity</declname>
          <defval>0.01</defval>
        </param>
        <param>
          <type>typename <ref refid="classKernel_1_1Vector__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel::Vector_3</ref></type>
          <declname>symmetry_direction</declname>
          <defval>typename <ref refid="classKernel_1_1Vector__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel::Vector_3</ref>(0., 0., 1.)</defval>
        </param>
        <briefdescription>
<para>Given a set of detected planes with their respective inlier sets, this function enables to regularize the planes: </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>Planes near parallel can be made exactly parallel.</para></listitem><listitem><para>Planes near orthogonal can be made exactly orthogonal.</para></listitem><listitem><para>Planes parallel and near coplanar can be made exactly coplanar.</para></listitem><listitem><para>Planes near symmetrical with a user-defined axis can be made exactly symmetrical.</para></listitem></itemizedlist>
</para><para>Planes are directly modified. Points are left unaltered, as well as their relationships to planes (no transfer of point from a primitive plane to another).</para><para>The implementation follows <ref refid="citelist_1CITEREF_cgal:vla-lod-15" kindref="member">[3]</ref>.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>range of points, model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointPMap</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with value type <computeroutput><ref refid="classKernel_1_1Point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel::Point_3</ref></computeroutput>. It can be omitted if the value type of the iterator of <computeroutput>PointRange</computeroutput> is convertible to <computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Point_3</ref>&lt;<ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref>&gt;</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PlaneRange</parametername>
</parameternamelist>
<parameterdescription>
<para>range of planes, model of <computeroutput><ref refid="classRange" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PlaneMap</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput><ref refid="classWritablePropertyMap" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">WritablePropertyMap</ref></computeroutput> with value type <computeroutput><ref refid="classKernel_1_1Plane__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel::Plane_3</ref></computeroutput>. It can be omitted if the value type of the iterator of <computeroutput>PlaneRange</computeroutput> is convertible to <computeroutput><ref refid="classCGAL_1_1Plane__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Plane_3</ref>&lt;<ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref>&gt;</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IndexMap</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with value type <computeroutput>int</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Geometric traits class. It can be omitted and deduced automatically from the value type of <computeroutput>PointMap</computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>range of points. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>point_map</parametername>
</parameternamelist>
<parameterdescription>
<para>property map: value_type of <computeroutput>typename PointRange::const_iterator</computeroutput> -&gt; <computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Point_3</ref></computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>planes</parametername>
</parameternamelist>
<parameterdescription>
<para>range of planes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plane_map</parametername>
</parameternamelist>
<parameterdescription>
<para>property map: value_type of <computeroutput>typename PlaneRange::iterator</computeroutput> -&gt; <computeroutput><ref refid="classCGAL_1_1Plane__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Plane_3</ref></computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index_map</parametername>
</parameternamelist>
<parameterdescription>
<para>property map: index of point <computeroutput>std::size_t</computeroutput> -&gt; index of plane <computeroutput>int</computeroutput> (-1 if the point is not assigned to a plane)</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regularize_parallelism</parametername>
</parameternamelist>
<parameterdescription>
<para>Select whether parallelism is regularized or not.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regularize_orthogonality</parametername>
</parameternamelist>
<parameterdescription>
<para>Select whether orthogonality is regularized or not.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regularize_coplanarity</parametername>
</parameternamelist>
<parameterdescription>
<para>Select whether coplanarity is regularized or not.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regularize_axis_symmetry</parametername>
</parameternamelist>
<parameterdescription>
<para>Select whether axis symmetry is regularized or not.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tolerance_angle</parametername>
</parameternamelist>
<parameterdescription>
<para>Tolerance of deviation between normal vectors of planes (in degrees) used for parallelism, orthogonality and axis symmetry. <ref refid="structCGAL_1_1Default" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Default</ref> value is 25 degrees.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tolerance_coplanarity</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximal distance between two parallel planes such that they are considered coplanar. <ref refid="structCGAL_1_1Default" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Default</ref> value is 0.01.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>symmetry_direction</parametername>
</parameternamelist>
<parameterdescription>
<para>Chosen axis for symmetry regularization. <ref refid="structCGAL_1_1Default" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Default</ref> value is the Z axis. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/regularize_planes.h" line="612" column="1" bodyfile="CGAL/regularize_planes.h" bodystart="612" bodyend="779"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para> <image type="html" name="shapes_detail.png"></image>
 </para><para> Sven Oesau, Yannick Verdie, Clément Jamin, Pierre Alliez, Florent Lafarge, Simon Giraudot This component implements two primitive shape detection algorithms: efficient RANSAC and region growing. Planes are detected from point sets with unoriented normals. RANSAC also handles the following shapes: sphere, cylinder, cone and torus. Other types of shapes can be detected through implementing a class deriving from the base shape class. <linebreak/>
 </para><para> <bold>Introduced in:</bold> CGAL 4.7<linebreak/>
 <bold>BibTeX:</bold> <ulink url="../Manual/how_to_cite_cgal.html#cgal:ovja-pssd-18b">cgal:ovja-pssd-18b</ulink><linebreak/>
 <bold>License:</bold> <ref refid="preliminaries_1licensesGPL" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">GPL</ref> <linebreak/>
 <bold>Windows Demo:</bold> <ulink url="https://www.cgal.org/demo/4.13/polyhedron_3.zip">Polyhedron demo</ulink><linebreak/>
<bold>Common Demo Dlls:</bold> <ulink url="https://www.cgal.org/demo/4.13/CGAL-demoDLLs.zip">dlls</ulink><linebreak/>
 </para><para></para><para><heading level="2">Concept</heading>
</para><para><itemizedlist>
<listitem><para><computeroutput><ref refid="classShapeDetectionTraits" kindref="compound">ShapeDetectionTraits</ref></computeroutput></para></listitem></itemizedlist>
</para><para><heading level="2">Main Classes</heading>
</para><para><itemizedlist>
<listitem><para><computeroutput><ref refid="structCGAL_1_1Shape__detection__3_1_1Shape__detection__traits" kindref="compound">CGAL::Shape_detection_3::Shape_detection_traits</ref></computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Shape__detection__3_1_1Efficient__RANSAC" kindref="compound">CGAL::Shape_detection_3::Efficient_RANSAC</ref>&lt;Traits&gt;</computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Shape__detection__3_1_1Region__growing" kindref="compound">CGAL::Shape_detection_3::Region_growing</ref>&lt;Traits&gt;</computeroutput></para></listitem></itemizedlist>
</para><para><heading level="2">Shape Interface</heading>
</para><para><itemizedlist>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Shape__detection__3_1_1Shape__base" kindref="compound">CGAL::Shape_detection_3::Shape_base</ref>&lt;Traits&gt;</computeroutput></para></listitem></itemizedlist>
</para><para><heading level="2">Shape Classes</heading>
</para><para><itemizedlist>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Shape__detection__3_1_1Plane" kindref="compound">CGAL::Shape_detection_3::Plane</ref>&lt;Traits&gt;</computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Shape__detection__3_1_1Sphere" kindref="compound">CGAL::Shape_detection_3::Sphere</ref>&lt;Traits&gt;</computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Shape__detection__3_1_1Cylinder" kindref="compound">CGAL::Shape_detection_3::Cylinder</ref>&lt;Traits&gt;</computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Shape__detection__3_1_1Cone" kindref="compound">CGAL::Shape_detection_3::Cone</ref>&lt;Traits&gt;</computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Shape__detection__3_1_1Torus" kindref="compound">CGAL::Shape_detection_3::Torus</ref>&lt;Traits&gt;</computeroutput></para></listitem></itemizedlist>
</para><para><heading level="2">Functions</heading>
</para><para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__PkgPointSetShapeDetection3_1ga57cdb2c265967f4a6a04b5db3e0828d2" kindref="member">CGAL::regularize_planes()</ref></computeroutput></para></listitem></itemizedlist>
</para><para><heading level="2">Property Maps</heading>
</para><para><itemizedlist>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Shape__detection__3_1_1Plane__map" kindref="compound">CGAL::Shape_detection_3::Plane_map</ref>&lt;Traits&gt;</computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Shape__detection__3_1_1Point__to__shape__index__map" kindref="compound">CGAL::Shape_detection_3::Point_to_shape_index_map</ref>&lt;Traits&gt;</computeroutput> </para></listitem></itemizedlist>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
