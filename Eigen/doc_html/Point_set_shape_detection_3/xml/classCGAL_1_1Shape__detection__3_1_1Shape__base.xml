<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Shape__detection__3_1_1Shape__base" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>CGAL::Shape_detection_3::Shape_base</compoundname>
    <derivedcompoundref refid="classCGAL_1_1Shape__detection__3_1_1Cone" prot="public" virt="non-virtual">CGAL::Shape_detection_3::Cone&lt; Traits &gt;</derivedcompoundref>
    <derivedcompoundref refid="classCGAL_1_1Shape__detection__3_1_1Cylinder" prot="public" virt="non-virtual">CGAL::Shape_detection_3::Cylinder&lt; Traits &gt;</derivedcompoundref>
    <derivedcompoundref refid="classCGAL_1_1Shape__detection__3_1_1Plane" prot="public" virt="non-virtual">CGAL::Shape_detection_3::Plane&lt; Traits &gt;</derivedcompoundref>
    <derivedcompoundref refid="classCGAL_1_1Shape__detection__3_1_1Sphere" prot="public" virt="non-virtual">CGAL::Shape_detection_3::Sphere&lt; Traits &gt;</derivedcompoundref>
    <derivedcompoundref refid="classCGAL_1_1Shape__detection__3_1_1Torus" prot="public" virt="non-virtual">CGAL::Shape_detection_3::Torus&lt; Traits &gt;</derivedcompoundref>
    <includes local="no">CGAL/Shape_detection_3/Shape_base.h</includes>
    <templateparamlist>
      <param>
        <type>class Traits</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classCGAL_1_1Shape__detection__3_1_1Shape__base_1a41676c6cbf09964157e1bc618e97a7f2" prot="public" static="no">
        <type>Traits::FT</type>
        <definition>typedef Traits::FT CGAL::Shape_detection_3::Shape_base&lt; Traits &gt;::FT</definition>
        <argsstring></argsstring>
        <name>FT</name>
        <briefdescription>
<para>number type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection_3/Shape_base.h" line="89" column="1" bodyfile="CGAL/Shape_detection_3/Shape_base.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Shape__detection__3_1_1Shape__base_1a4ea604c3d99b4a507b85ba4aec62265e" prot="public" static="no">
        <type>Traits::Point_3</type>
        <definition>typedef Traits::Point_3 CGAL::Shape_detection_3::Shape_base&lt; Traits &gt;::Point_3</definition>
        <argsstring></argsstring>
        <name>Point_3</name>
        <briefdescription>
<para>point type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection_3/Shape_base.h" line="90" column="1" bodyfile="CGAL/Shape_detection_3/Shape_base.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Shape__detection__3_1_1Shape__base_1a07536d8a24b53f966389ab3ee3be9f99" prot="public" static="no">
        <type>Traits::Vector_3</type>
        <definition>typedef Traits::Vector_3 CGAL::Shape_detection_3::Shape_base&lt; Traits &gt;::Vector_3</definition>
        <argsstring></argsstring>
        <name>Vector_3</name>
        <briefdescription>
<para>vector type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection_3/Shape_base.h" line="91" column="1" bodyfile="CGAL/Shape_detection_3/Shape_base.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classCGAL_1_1Shape__detection__3_1_1Shape__base_1a4e56e0ced51dff56a1daa939e4110f06" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CGAL::Shape_detection_3::Shape_base&lt; Traits &gt;::Shape_base</definition>
        <argsstring>()</argsstring>
        <name>Shape_base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection_3/Shape_base.h" line="94" column="1" bodyfile="CGAL/Shape_detection_3/Shape_base.h" bodystart="94" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Shape__detection__3_1_1Shape__base_1a2e0e9dadd8f5f4580dc6c9b773d5c184" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual CGAL::Shape_detection_3::Shape_base&lt; Traits &gt;::~Shape_base</definition>
        <argsstring>()</argsstring>
        <name>~Shape_base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection_3/Shape_base.h" line="103" column="1" bodyfile="CGAL/Shape_detection_3/Shape_base.h" bodystart="103" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Shape__detection__3_1_1Shape__base_1aff91e45525f51360cd950ee4e971cd51" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; std::size_t &gt; &amp;</type>
        <definition>const std::vector&lt;std::size_t&gt;&amp; CGAL::Shape_detection_3::Shape_base&lt; Traits &gt;::indices_of_assigned_points</definition>
        <argsstring>() const</argsstring>
        <name>indices_of_assigned_points</name>
        <briefdescription>
<para>returns the indices of the points in the input range assigned to this shape. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection_3/Shape_base.h" line="108" column="1" bodyfile="CGAL/Shape_detection_3/Shape_base.h" bodystart="108" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Shape__detection__3_1_1Shape__base_1a0fe9112a2d594b1e36ce1116b03b58c1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string CGAL::Shape_detection_3::Shape_base&lt; Traits &gt;::info</definition>
        <argsstring>() const</argsstring>
        <name>info</name>
        <briefdescription>
<para>returns a string containing the shape type and the numerical parameters. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection_3/Shape_base.h" line="116" column="1" bodyfile="CGAL/Shape_detection_3/Shape_base.h" bodystart="116" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Shape__detection__3_1_1Shape__base_1a948956b8efb69599c6001f27a6a7bb78" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classCGAL_1_1Shape__detection__3_1_1Shape__base_1a41676c6cbf09964157e1bc618e97a7f2" kindref="member">FT</ref></type>
        <definition>virtual FT CGAL::Shape_detection_3::Shape_base&lt; Traits &gt;::squared_distance</definition>
        <argsstring>(const Point_3 &amp;p) const =0</argsstring>
        <name>squared_distance</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Shape__detection__3_1_1Shape__base_1a4ea604c3d99b4a507b85ba4aec62265e" kindref="member">Point_3</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Computes the squared Euclidean distance from the query point <computeroutput>p</computeroutput> to the shape. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection_3/Shape_base.h" line="123" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classCGAL_1_1Shape__detection__3_1_1Shape__base_1ad0e66e63238d4351392cd4e74d994b61" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void CGAL::Shape_detection_3::Shape_base&lt; Traits &gt;::create_shape</definition>
        <argsstring>(const std::vector&lt; std::size_t &gt; &amp;indices)=0</argsstring>
        <name>create_shape</name>
        <param>
          <type>const std::vector&lt; std::size_t &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
<para>Constructs the shape based on a minimal set of samples from the input data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection_3/Shape_base.h" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Shape__detection__3_1_1Shape__base_1afdf3b49e7cfe369543e59c70e931443e" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>std::size_t</type>
        <definition>virtual std::size_t CGAL::Shape_detection_3::Shape_base&lt; Traits &gt;::connected_component</definition>
        <argsstring>(std::vector&lt; std::size_t &gt; &amp;indices, FT cluster_epsilon)</argsstring>
        <name>connected_component</name>
        <param>
          <type>std::vector&lt; std::size_t &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Shape__detection__3_1_1Shape__base_1a41676c6cbf09964157e1bc618e97a7f2" kindref="member">FT</ref></type>
          <declname>cluster_epsilon</declname>
        </param>
        <briefdescription>
<para>Determines the largest cluster of inlier points. </para>        </briefdescription>
        <detaileddescription>
<para>A point belongs to a cluster if there is a point in the cluster closer than <computeroutput>cluster_epsilon</computeroutput> distance. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection_3/Shape_base.h" line="137" column="1" bodyfile="CGAL/Shape_detection_3/Shape_base.h" bodystart="137" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Shape__detection__3_1_1Shape__base_1ad0e6f1239a7d861d43bc02236da3835d" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Shape_detection_3::Shape_base&lt; Traits &gt;::connected_component_kdTree</definition>
        <argsstring>(std::vector&lt; std::size_t &gt; &amp;indices, FT cluster_epsilon)</argsstring>
        <name>connected_component_kdTree</name>
        <param>
          <type>std::vector&lt; std::size_t &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Shape__detection__3_1_1Shape__base_1a41676c6cbf09964157e1bc618e97a7f2" kindref="member">FT</ref></type>
          <declname>cluster_epsilon</declname>
        </param>
        <briefdescription>
<para>Determines the largest cluster with a point-to-point distance not larger than <computeroutput>cluster_epsilon</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>This general version performs a region growing within the inliers using a kd-tree. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection_3/Shape_base.h" line="289" column="1" bodyfile="CGAL/Shape_detection_3/Shape_base.h" bodystart="289" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Shape__detection__3_1_1Shape__base_1a3a62082ec192a54aad0c70544c883770" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void CGAL::Shape_detection_3::Shape_base&lt; Traits &gt;::squared_distance</definition>
        <argsstring>(const std::vector&lt; std::size_t &gt; &amp;indices, std::vector&lt; FT &gt; &amp;distances) const =0</argsstring>
        <name>squared_distance</name>
        <param>
          <type>const std::vector&lt; std::size_t &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classCGAL_1_1Shape__detection__3_1_1Shape__base_1a41676c6cbf09964157e1bc618e97a7f2" kindref="member">FT</ref> &gt; &amp;</type>
          <declname>distances</declname>
        </param>
        <briefdescription>
<para>Computes the squared Euclidean distance from a set of points to the shape. </para>        </briefdescription>
        <detaileddescription>
<para>The distances will be stored in the so called parameter. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection_3/Shape_base.h" line="376" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Shape__detection__3_1_1Shape__base_1a94d7c14a713335f4aa00e0b809570d23" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void CGAL::Shape_detection_3::Shape_base&lt; Traits &gt;::cos_to_normal</definition>
        <argsstring>(const std::vector&lt; std::size_t &gt; &amp;indices, std::vector&lt; FT &gt; &amp;angles) const =0</argsstring>
        <name>cos_to_normal</name>
        <param>
          <type>const std::vector&lt; std::size_t &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classCGAL_1_1Shape__detection__3_1_1Shape__base_1a41676c6cbf09964157e1bc618e97a7f2" kindref="member">FT</ref> &gt; &amp;</type>
          <declname>angles</declname>
        </param>
        <briefdescription>
<para>Computes the deviation of the point normal from the surface normal at the projected point in form of the dot product and writes the result into the provided <computeroutput>angles</computeroutput> vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection_3/Shape_base.h" line="384" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Shape__detection__3_1_1Shape__base_1ae466b029cfe3f4100c9b428ad1002fd4" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::size_t</type>
        <definition>virtual std::size_t CGAL::Shape_detection_3::Shape_base&lt; Traits &gt;::minimum_sample_size</definition>
        <argsstring>() const =0</argsstring>
        <name>minimum_sample_size</name>
        <briefdescription>
<para>Returns minimal number of sample points required for construction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection_3/Shape_base.h" line="390" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Shape__detection__3_1_1Shape__base_1ac5899089794266f7ffae93b17e1068fe" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::property_traits&lt; typename Traits::Point_map &gt;::reference</type>
        <definition>boost::property_traits&lt; typename Traits::Point_map &gt;::reference CGAL::Shape_detection_3::Shape_base&lt; Traits &gt;::point</definition>
        <argsstring>(std::size_t i) const</argsstring>
        <name>point</name>
        <param>
          <type>std::size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Retrieves the point location from its index. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection_3/Shape_base.h" line="396" column="1" bodyfile="CGAL/Shape_detection_3/Shape_base.h" bodystart="396" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Shape__detection__3_1_1Shape__base_1af9fb14bacb0764bb33666b466b56b739" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::property_traits&lt; typename Traits::Normal_map &gt;::reference</type>
        <definition>boost::property_traits&lt; typename Traits::Normal_map &gt;::reference CGAL::Shape_detection_3::Shape_base&lt; Traits &gt;::normal</definition>
        <argsstring>(std::size_t i) const</argsstring>
        <name>normal</name>
        <param>
          <type>std::size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Retrieves the normal vector from its index. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection_3/Shape_base.h" line="404" column="1" bodyfile="CGAL/Shape_detection_3/Shape_base.h" bodystart="404" bodyend="406"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Shape__detection__3_1_1Shape__base_1af5b278597e690c4e3abc343d2331fc9d" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Traits &amp;</type>
        <definition>const Traits&amp; CGAL::Shape_detection_3::Shape_base&lt; Traits &gt;::traits</definition>
        <argsstring>() const</argsstring>
        <name>traits</name>
        <briefdescription>
<para>Retrieves the traits class. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection_3/Shape_base.h" line="412" column="1" bodyfile="CGAL/Shape_detection_3/Shape_base.h" bodystart="412" bodyend="415"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base class for shape types defining an interface to construct a shape from a set of points and to compute the point distance and normal deviation from the surface normal. </para>    </briefdescription>
    <detaileddescription>
<para>It is used during detection to identify the inliers from the input data and to extract the largest connected component in inlier points. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="32">
        <label>CGAL::Shape_detection_3::Sphere&lt; Traits &gt;</label>
        <link refid="classCGAL_1_1Shape__detection__3_1_1Sphere"/>
        <childnode refid="28" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31">
        <label>CGAL::Shape_detection_3::Plane&lt; Traits &gt;</label>
        <link refid="classCGAL_1_1Shape__detection__3_1_1Plane"/>
        <childnode refid="28" relation="public-inheritance">
        </childnode>
      </node>
      <node id="30">
        <label>CGAL::Shape_detection_3::Cylinder&lt; Traits &gt;</label>
        <link refid="classCGAL_1_1Shape__detection__3_1_1Cylinder"/>
        <childnode refid="28" relation="public-inheritance">
        </childnode>
      </node>
      <node id="29">
        <label>CGAL::Shape_detection_3::Cone&lt; Traits &gt;</label>
        <link refid="classCGAL_1_1Shape__detection__3_1_1Cone"/>
        <childnode refid="28" relation="public-inheritance">
        </childnode>
      </node>
      <node id="28">
        <label>CGAL::Shape_detection_3::Shape_base&lt; Traits &gt;</label>
        <link refid="classCGAL_1_1Shape__detection__3_1_1Shape__base"/>
      </node>
      <node id="33">
        <label>CGAL::Shape_detection_3::Torus&lt; Traits &gt;</label>
        <link refid="classCGAL_1_1Shape__detection__3_1_1Torus"/>
        <childnode refid="28" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="CGAL/Shape_detection_3/Shape_base.h" line="67" column="1" bodyfile="CGAL/Shape_detection_3/Shape_base.h" bodystart="67" bodyend="719"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Shape__detection__3_1_1Shape__base_1afdf3b49e7cfe369543e59c70e931443e" prot="protected" virt="virtual"><scope>CGAL::Shape_detection_3::Shape_base</scope><name>connected_component</name></member>
      <member refid="classCGAL_1_1Shape__detection__3_1_1Shape__base_1ad0e6f1239a7d861d43bc02236da3835d" prot="protected" virt="non-virtual"><scope>CGAL::Shape_detection_3::Shape_base</scope><name>connected_component_kdTree</name></member>
      <member refid="classCGAL_1_1Shape__detection__3_1_1Shape__base_1a94d7c14a713335f4aa00e0b809570d23" prot="protected" virt="pure-virtual"><scope>CGAL::Shape_detection_3::Shape_base</scope><name>cos_to_normal</name></member>
      <member refid="classCGAL_1_1Shape__detection__3_1_1Shape__base_1ad0e66e63238d4351392cd4e74d994b61" prot="protected" virt="pure-virtual"><scope>CGAL::Shape_detection_3::Shape_base</scope><name>create_shape</name></member>
      <member refid="classCGAL_1_1Shape__detection__3_1_1Shape__base_1a41676c6cbf09964157e1bc618e97a7f2" prot="public" virt="non-virtual"><scope>CGAL::Shape_detection_3::Shape_base</scope><name>FT</name></member>
      <member refid="classCGAL_1_1Shape__detection__3_1_1Shape__base_1aff91e45525f51360cd950ee4e971cd51" prot="public" virt="non-virtual"><scope>CGAL::Shape_detection_3::Shape_base</scope><name>indices_of_assigned_points</name></member>
      <member refid="classCGAL_1_1Shape__detection__3_1_1Shape__base_1a0fe9112a2d594b1e36ce1116b03b58c1" prot="public" virt="virtual"><scope>CGAL::Shape_detection_3::Shape_base</scope><name>info</name></member>
      <member refid="classCGAL_1_1Shape__detection__3_1_1Shape__base_1ae466b029cfe3f4100c9b428ad1002fd4" prot="protected" virt="pure-virtual"><scope>CGAL::Shape_detection_3::Shape_base</scope><name>minimum_sample_size</name></member>
      <member refid="classCGAL_1_1Shape__detection__3_1_1Shape__base_1af9fb14bacb0764bb33666b466b56b739" prot="protected" virt="non-virtual"><scope>CGAL::Shape_detection_3::Shape_base</scope><name>normal</name></member>
      <member refid="classCGAL_1_1Shape__detection__3_1_1Shape__base_1ac5899089794266f7ffae93b17e1068fe" prot="protected" virt="non-virtual"><scope>CGAL::Shape_detection_3::Shape_base</scope><name>point</name></member>
      <member refid="classCGAL_1_1Shape__detection__3_1_1Shape__base_1a4ea604c3d99b4a507b85ba4aec62265e" prot="public" virt="non-virtual"><scope>CGAL::Shape_detection_3::Shape_base</scope><name>Point_3</name></member>
      <member refid="classCGAL_1_1Shape__detection__3_1_1Shape__base_1a4e56e0ced51dff56a1daa939e4110f06" prot="public" virt="non-virtual"><scope>CGAL::Shape_detection_3::Shape_base</scope><name>Shape_base</name></member>
      <member refid="classCGAL_1_1Shape__detection__3_1_1Shape__base_1a948956b8efb69599c6001f27a6a7bb78" prot="public" virt="pure-virtual"><scope>CGAL::Shape_detection_3::Shape_base</scope><name>squared_distance</name></member>
      <member refid="classCGAL_1_1Shape__detection__3_1_1Shape__base_1a3a62082ec192a54aad0c70544c883770" prot="protected" virt="pure-virtual"><scope>CGAL::Shape_detection_3::Shape_base</scope><name>squared_distance</name></member>
      <member refid="classCGAL_1_1Shape__detection__3_1_1Shape__base_1af5b278597e690c4e3abc343d2331fc9d" prot="protected" virt="non-virtual"><scope>CGAL::Shape_detection_3::Shape_base</scope><name>traits</name></member>
      <member refid="classCGAL_1_1Shape__detection__3_1_1Shape__base_1a07536d8a24b53f966389ab3ee3be9f99" prot="public" virt="non-virtual"><scope>CGAL::Shape_detection_3::Shape_base</scope><name>Vector_3</name></member>
      <member refid="classCGAL_1_1Shape__detection__3_1_1Shape__base_1a2e0e9dadd8f5f4580dc6c9b773d5c184" prot="public" virt="virtual"><scope>CGAL::Shape_detection_3::Shape_base</scope><name>~Shape_base</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
