<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__PkgInscribedAreas" kind="group">
    <compoundname>PkgInscribedAreas</compoundname>
    <title>Inscribed Areas Reference</title>
    <innerclass refid="structCGAL_1_1Extremal__polygon__area__traits__2" prot="public">CGAL::Extremal_polygon_area_traits_2</innerclass>
    <innerclass refid="structCGAL_1_1Extremal__polygon__perimeter__traits__2" prot="public">CGAL::Extremal_polygon_perimeter_traits_2</innerclass>
    <innerclass refid="classCGAL_1_1Largest__empty__iso__rectangle__2" prot="public">CGAL::Largest_empty_iso_rectangle_2</innerclass>
    <innergroup refid="group__PkgInscribedAreasConcepts">Concepts</innergroup>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgInscribedAreas_1ga6ae7d07c984fededc523e252beb643eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></type>
          </param>
          <param>
            <type>class <ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::extremal_polygon_2</definition>
        <argsstring>(RandomAccessIterator points_begin, RandomAccessIterator points_end, int k, OutputIterator o, const Traits &amp;t)</argsstring>
        <name>extremal_polygon_2</name>
        <param>
          <type><ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></type>
          <declname>points_begin</declname>
        </param>
        <param>
          <type><ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></type>
          <declname>points_end</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>o</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>computes a maximal (as specified by <computeroutput>t</computeroutput>) inscribed <computeroutput>k</computeroutput>-gon of the convex polygon described by [<computeroutput>points_begin</computeroutput>, <computeroutput>points_end</computeroutput>), writes its vertices to <computeroutput>o</computeroutput> and returns the past-the-end iterator of this sequence. </para>        </briefdescription>
        <detaileddescription>
<para>The function <computeroutput><ref refid="group__PkgInscribedAreas_1ga6ae7d07c984fededc523e252beb643eb" kindref="member">extremal_polygon_2()</ref></computeroutput> computes a maximal <computeroutput>k</computeroutput>-gon that can be inscribed into a given convex polygon. The criterion for maximality and some basic operations have to be specified in an appropriate traits class parameter.</para><para><simplesect kind="pre"><para>the - at least three - points denoted by the range <computeroutput>[points_begin, points_end)</computeroutput> form the boundary of a convex polygon (oriented clock- or counterclockwise). </para></simplesect>
<simplesect kind="pre"><para><computeroutput>k &gt;= t.min_k()</computeroutput>.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Traits</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model for <computeroutput><ref refid="classExtremalPolygonTraits__2" kindref="compound">ExtremalPolygonTraits_2</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>must be an iterator with value type <computeroutput>Traits::Point_2</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>must accepts dereference/assignments of <computeroutput>Traits::Point_2</computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgInscribedAreas_1gadc80e01bb74bc8b33fb22c1e31364e0f" kindref="member">CGAL::maximum_area_inscribed_k_gon_2()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgInscribedAreas_1ga7051f3ca755d0a5d64b42422e99046a6" kindref="member">CGAL::maximum_perimeter_inscribed_k_gon_2()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classExtremalPolygonTraits__2" kindref="compound">ExtremalPolygonTraits_2</ref></computeroutput></para></simplesect>
<bold>Implementation</bold><linebreak/>
</para><para>The implementation uses monotone matrix search <ref refid="citelist_1CITEREF_akmsw-gamsa-87" kindref="member">[1]</ref> and has a worst case running time of <formula id="0">$ O(k \cdot n + n \cdot \log n)$</formula>, where <formula id="1">$ n$</formula> is the number of vertices in <formula id="2">$ P$</formula>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/extremal_polygon_2.h" line="43" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgInscribedAreas_1gadc80e01bb74bc8b33fb22c1e31364e0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></type>
          </param>
          <param>
            <type>class <ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::maximum_area_inscribed_k_gon_2</definition>
        <argsstring>(RandomAccessIterator points_begin, RandomAccessIterator points_end, int k, OutputIterator o)</argsstring>
        <name>maximum_area_inscribed_k_gon_2</name>
        <param>
          <type><ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></type>
          <declname>points_begin</declname>
        </param>
        <param>
          <type><ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></type>
          <declname>points_end</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>computes a maximum area inscribed <computeroutput>k</computeroutput>-gon of the convex polygon described by [<computeroutput>points_begin</computeroutput>, <computeroutput>points_end</computeroutput>), writes its vertices to <computeroutput>o</computeroutput> and returns the past-the-end iterator of this sequence. </para>        </briefdescription>
        <detaileddescription>
<para>Computes a maximum area <computeroutput>k</computeroutput>-gon <formula id="3">$ P_k$</formula> that can be inscribed into a given convex polygon <formula id="2">$ P$</formula>. Note that <itemizedlist>
<listitem>
<para><formula id="3">$ P_k$</formula> is not unique in general, but it can be chosen in such a way that its vertices form a subset of the vertex set of <formula id="2">$ P$</formula> and </para></listitem>
<listitem>
<para>the vertices of a maximum area <computeroutput>k</computeroutput>-gon, where the <computeroutput>k</computeroutput> vertices are to be drawn from a planar point set <formula id="4">$ S$</formula>, lie on the convex hull of <formula id="4">$ S$</formula> i.e. a convex polygon. </para></listitem>
</itemizedlist>
</para><para><simplesect kind="pre"><para>the - at least three - points denoted by the range <computeroutput>[points_begin, points_end)</computeroutput> form the boundary of a convex polygon (oriented clock- or counterclockwise). </para></simplesect>
<simplesect kind="pre"><para><computeroutput>k &gt;= 3</computeroutput>.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>must be an iterator with value type <computeroutput>K::Point_2</computeroutput> where <computeroutput>K</computeroutput> is a model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>must accepts dereference/assignments of <computeroutput>Traits::Point_2</computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgInscribedAreas_1ga7051f3ca755d0a5d64b42422e99046a6" kindref="member">CGAL::maximum_perimeter_inscribed_k_gon_2()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classExtremalPolygonTraits__2" kindref="compound">ExtremalPolygonTraits_2</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Extremal__polygon__area__traits__2" kindref="compound">CGAL::Extremal_polygon_area_traits_2</ref>&lt;K&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Extremal__polygon__perimeter__traits__2" kindref="compound">CGAL::Extremal_polygon_perimeter_traits_2</ref>&lt;K&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgInscribedAreas_1ga6ae7d07c984fededc523e252beb643eb" kindref="member">CGAL::extremal_polygon_2()</ref></computeroutput></para></simplesect>
<bold>Implementation</bold><linebreak/>
</para><para>The implementation uses monotone matrix search <ref refid="citelist_1CITEREF_akmsw-gamsa-87" kindref="member">[1]</ref> and has a worst case running time of <formula id="0">$ O(k \cdot n + n \cdot \log n)$</formula>, where <formula id="1">$ n$</formula> is the number of vertices in <formula id="2">$ P$</formula>.</para><para><bold>Example</bold><linebreak/>
</para><para>The following code generates a random convex polygon <computeroutput>p</computeroutput> with ten vertices and computes the maximum area inscribed five-gon of <computeroutput>p</computeroutput>.</para><para><linebreak/>
<bold>File</bold> <ref refid="Inscribed_areas_2extremal_polygon_2_area_8cpp-example" kindref="compound">Inscribed_areas/extremal_polygon_2_area.cpp</ref> <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Simple_cartesian.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Polygon_2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/point_generators_2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/random_convex_set_2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/extremal_polygon_2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FT;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Simple__cartesian" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Simple_cartesian&lt;FT&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kernel;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classKernel_1_1Point__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel::Point_2</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Index_cont;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CGAL::Polygon_2&lt;Kernel&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Polygon_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CGAL::Random_points_in_square_2&lt;Point&gt;<sp/><sp/><sp/><sp/>Generator;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>10;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>5;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>generate<sp/>random<sp/>convex<sp/>polygon:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Polygon_2<sp/>p;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>CGAL::random_convex_set_2(n,<sp/>std::back_inserter(p),<sp/>Generator(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Generated<sp/>Polygon:\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>p<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>maximum<sp/>area<sp/>incribed<sp/>k-gon<sp/>of<sp/>p:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Polygon_2<sp/>k_gon;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgInscribedAreas_1gadc80e01bb74bc8b33fb22c1e31364e0f" kindref="member">CGAL::maximum_area_inscribed_k_gon_2</ref>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>p.vertices_begin(),<sp/>p.vertices_end(),<sp/>k,<sp/>std::back_inserter(k_gon));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Maximum<sp/>area<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>k<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;-gon:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>k_gon<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/extremal_polygon_2.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgInscribedAreas_1ga7051f3ca755d0a5d64b42422e99046a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></type>
          </param>
          <param>
            <type>class <ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::maximum_perimeter_inscribed_k_gon_2</definition>
        <argsstring>(RandomAccessIterator points_begin, RandomAccessIterator points_end, int k, OutputIterator o)</argsstring>
        <name>maximum_perimeter_inscribed_k_gon_2</name>
        <param>
          <type><ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></type>
          <declname>points_begin</declname>
        </param>
        <param>
          <type><ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></type>
          <declname>points_end</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>computes a maximum perimeter inscribed <computeroutput>k</computeroutput>-gon of the convex polygon described by <computeroutput>[points_begin, points_end)</computeroutput>, writes its vertices to <computeroutput>o</computeroutput> and returns the past-the-end iterator of this sequence. </para>        </briefdescription>
        <detaileddescription>
<para>The function <computeroutput><ref refid="group__PkgInscribedAreas_1ga7051f3ca755d0a5d64b42422e99046a6" kindref="member">maximum_perimeter_inscribed_k_gon_2()</ref></computeroutput> computes a maximum perimeter <computeroutput>k</computeroutput>-gon <formula id="3">$ P_k$</formula> that can be inscribed into a given convex polygon <formula id="2">$ P$</formula>. Note that <itemizedlist>
<listitem>
<para><formula id="3">$ P_k$</formula> is not unique in general, but it can be chosen in such a way that its vertices form a subset of the vertex set of <formula id="2">$ P$</formula> and </para></listitem>
<listitem>
<para>the vertices of a maximum perimeter <computeroutput>k</computeroutput>-gon, where the <computeroutput>k</computeroutput> vertices are to be drawn from a planar point set <formula id="4">$ S$</formula>, lie on the convex hull of <formula id="4">$ S$</formula> i.e. a convex polygon. </para></listitem>
</itemizedlist>
</para><para><simplesect kind="pre"><para>the - at least three - points denoted by the range <computeroutput>[points_begin, points_end)</computeroutput> form the boundary of a convex polygon (oriented clock- or counterclockwise). </para></simplesect>
<simplesect kind="pre"><para><computeroutput>k &gt;= 2</computeroutput>.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>must be an iterator with value type <computeroutput>K::Point_2</computeroutput> where <computeroutput>K</computeroutput> is a model for <computeroutput><ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>must accepts dereference/assignments of <computeroutput>Traits::Point_2</computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
There must be a global function <computeroutput>K::FT CGAL::sqrt(K::FT)</computeroutput> defined that computes the squareroot of a number.</para><para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgInscribedAreas_1gadc80e01bb74bc8b33fb22c1e31364e0f" kindref="member">CGAL::maximum_area_inscribed_k_gon_2()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classExtremalPolygonTraits__2" kindref="compound">ExtremalPolygonTraits_2</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Extremal__polygon__area__traits__2" kindref="compound">CGAL::Extremal_polygon_area_traits_2</ref>&lt;K&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Extremal__polygon__perimeter__traits__2" kindref="compound">CGAL::Extremal_polygon_perimeter_traits_2</ref>&lt;K&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgInscribedAreas_1ga6ae7d07c984fededc523e252beb643eb" kindref="member">CGAL::extremal_polygon_2()</ref></computeroutput></para></simplesect>
<bold>Implementation</bold><linebreak/>
</para><para>The implementation uses monotone matrix search <ref refid="citelist_1CITEREF_akmsw-gamsa-87" kindref="member">[1]</ref> and has a worst case running time of <formula id="0">$ O(k \cdot n + n \cdot \log n)$</formula>, where <formula id="1">$ n$</formula> is the number of vertices in <formula id="2">$ P$</formula>.</para><para><bold>Example</bold><linebreak/>
</para><para>The following code generates a random convex polygon <computeroutput>p</computeroutput> with ten vertices and computes the maximum perimeter inscribed five-gon of <computeroutput>p</computeroutput>.</para><para><linebreak/>
<bold>File</bold> <ref refid="Inscribed_areas_2extremal_polygon_2_perimeter_8cpp-example" kindref="compound">Inscribed_areas/extremal_polygon_2_perimeter.cpp</ref> <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Simple_cartesian.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Polygon_2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/point_generators_2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/random_convex_set_2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/extremal_polygon_2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FT;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Simple__cartesian" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Simple_cartesian&lt;FT&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kernel;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classKernel_1_1Point__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel::Point_2</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Index_cont;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CGAL::Polygon_2&lt;Kernel&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Polygon_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CGAL::Random_points_in_square_2&lt;Point&gt;<sp/><sp/><sp/><sp/>Generator;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>10;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>5;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>generate<sp/>random<sp/>convex<sp/>polygon:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Polygon_2<sp/>p;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>CGAL::random_convex_set_2(n,<sp/>std::back_inserter(p),<sp/>Generator(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Generated<sp/>Polygon:\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>p<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>maximum<sp/>perimeter<sp/>incribed<sp/>k-gon<sp/>of<sp/>p:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Polygon_2<sp/>k_gon;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgInscribedAreas_1ga7051f3ca755d0a5d64b42422e99046a6" kindref="member">CGAL::maximum_perimeter_inscribed_k_gon_2</ref>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>p.vertices_begin(),<sp/>p.vertices_end(),<sp/>k,<sp/>std::back_inserter(k_gon));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Maximum<sp/>perimeter<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>k<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;-gon:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>k_gon<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/extremal_polygon_2.h" line="177" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para> <image type="html" name="ler-detail.png"></image>
   Michael Hoffmann and Eli Packer This package provides algorithms for computing inscribed areas. The algorithms for computing inscribed areas are: the largest inscribed k-gon (area or perimeter) of a convex point set and the largest inscribed iso-rectangle. <linebreak/>
   <bold>Introduced in:</bold> CGAL 1.1<linebreak/>
 <bold>BibTeX:</bold> <ulink url="../Manual/how_to_cite_cgal.html#cgal:hp-ia-18b">cgal:hp-ia-18b</ulink><linebreak/>
 <bold>License:</bold> <ref refid="preliminaries_1licensesGPL" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">GPL</ref> <linebreak/>
 <bold>Windows Demos:</bold> <ulink url="https://www.cgal.org/demo/4.13/polygon.zip">2D Inscribed k-gon as part of Polygon demo</ulink>, <ulink url="https://www.cgal.org/demo/4.13/largest_empty_rect_2.zip">2D Largest Empty Rectangle</ulink><linebreak/>
<bold>Common Demo Dlls:</bold> <ulink url="https://www.cgal.org/demo/4.13/CGAL-demoDLLs.zip">dlls</ulink><linebreak/>
 </para><para><heading level="2">Assertions</heading>
</para><para>The optimization code uses infix <computeroutput>OPTIMISATION</computeroutput> in the assertions, e.g. defining the compiler flag <computeroutput>CGAL_OPTIMISATION_NO_PRECONDITIONS</computeroutput> switches precondition checking off, cf. Section <ref refid="index_1secchecks" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Checks</ref>.</para><para></para><para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__PkgInscribedAreas_1gadc80e01bb74bc8b33fb22c1e31364e0f" kindref="member">CGAL::maximum_area_inscribed_k_gon_2</ref></computeroutput></para></listitem><listitem><para><computeroutput><ref refid="group__PkgInscribedAreas_1ga7051f3ca755d0a5d64b42422e99046a6" kindref="member">CGAL::maximum_perimeter_inscribed_k_gon_2</ref></computeroutput></para></listitem><listitem><para><computeroutput><ref refid="group__PkgInscribedAreas_1ga6ae7d07c984fededc523e252beb643eb" kindref="member">CGAL::extremal_polygon_2</ref></computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Largest__empty__iso__rectangle__2" kindref="compound">CGAL::Largest_empty_iso_rectangle_2</ref>&lt;T&gt;</computeroutput></para></listitem><listitem><para><computeroutput><ref refid="structCGAL_1_1Extremal__polygon__area__traits__2" kindref="compound">CGAL::Extremal_polygon_area_traits_2</ref>&lt;K&gt;</computeroutput></para></listitem><listitem><para><computeroutput><ref refid="structCGAL_1_1Extremal__polygon__perimeter__traits__2" kindref="compound">CGAL::Extremal_polygon_perimeter_traits_2</ref>&lt;K&gt;</computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classExtremalPolygonTraits__2" kindref="compound">ExtremalPolygonTraits_2</ref></computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classLargestEmptyIsoRectangleTraits__2" kindref="compound">LargestEmptyIsoRectangleTraits_2</ref></computeroutput> </para></listitem></itemizedlist>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
