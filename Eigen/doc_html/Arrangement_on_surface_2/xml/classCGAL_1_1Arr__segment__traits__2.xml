<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Arr__segment__traits__2" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Arr_segment_traits_2</compoundname>
    <includes local="no">CGAL/Arr_segment_traits_2.h</includes>
    <templateparamlist>
      <param>
        <type>typename <ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></type>
      </param>
    </templateparamlist>
    <briefdescription>
<para>The traits class <computeroutput><ref refid="classCGAL_1_1Arr__segment__traits__2" kindref="compound">Arr_segment_traits_2</ref></computeroutput> is a model of the <computeroutput><ref refid="classArrangementTraits__2" kindref="compound">ArrangementTraits_2</ref></computeroutput> concept, which allows the construction and maintenance of arrangements of line segments. </para>    </briefdescription>
    <detaileddescription>
<para>It should be parameterized with a CGAL-kernel model that is templated in turn with a number type. To avoid numerical errors and robustness problems, the number type should support exact rational arithmetic - that is, the number type should support the arithmetic operations <formula id="253">$ +$</formula>, <formula id="254">$ -$</formula>, <formula id="255">$ \times$</formula> and <formula id="256">$ \div$</formula> carried out without loss of precision.</para><para>For example, instantiating the traits template with kernels that support exact predicates and exact constructions, such as <computeroutput><ref refid="classCGAL_1_1Exact__predicates__exact__constructions__kernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Exact_predicates_exact_constructions_kernel</ref></computeroutput>, ensures the exact and robust operation of the application. While selecting an inexact kernel when developing a program usually leads to shorter running times, it causes robustness problems in most cases, and thus renders the program useless. The <computeroutput><ref refid="classCGAL_1_1Exact__predicates__exact__constructions__kernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Exact_predicates_exact_constructions_kernel</ref></computeroutput> type is a shortcut for a kernel that uses an exact number type, that is, <computeroutput><ref refid="classCGAL_1_1Gmpq" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">Gmpq</ref></computeroutput> (More precisely, <computeroutput><ref refid="classCGAL_1_1Lazy__exact__nt" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">Lazy_exact_nt</ref>&lt;<ref refid="classCGAL_1_1Gmpq" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">Gmpq</ref>&gt;</computeroutput>), when <computeroutput><ref refid="classCGAL_1_1Gmpq" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">Gmpq</ref></computeroutput> is available. Indeed, this configuration achieves the shortest running times in many cases. If no type is provided for the kernel template parameter, then <computeroutput><ref refid="classCGAL_1_1Exact__predicates__exact__constructions__kernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Exact_predicates_exact_constructions_kernel</ref></computeroutput> will be used by default.</para><para><computeroutput><ref refid="classCGAL_1_1Arr__segment__traits__2" kindref="compound">Arr_segment_traits_2</ref></computeroutput> defines <computeroutput><ref refid="classKernel_1_1Point__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel::Point_2</ref></computeroutput> as its point type. However, it does <emphasis>not</emphasis> define <computeroutput><ref refid="classKernel_1_1Segment__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel::Segment_2</ref></computeroutput> as its curve type, as one may expect. The reason is that the kernel segment is represented by its two endpoints only, while the traits class needs to store extra data with its segments, in order to efficiently operate on them. Nevertheless, the nested <computeroutput>X_monotone_curve_2</computeroutput> and <computeroutput>Curve_2</computeroutput> types (in this case both types refer to the same class, as <emphasis>every</emphasis> line segment is (weakly) <formula id="2">$ x$</formula>-monotone) can however be converted to the type <computeroutput><ref refid="classKernel_1_1Segment__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel::Segment_2</ref></computeroutput>.</para><para><computeroutput><ref refid="classCGAL_1_1Arr__segment__traits__2" kindref="compound">Arr_segment_traits_2</ref></computeroutput> achieves faster running times than the <computeroutput><ref refid="classCGAL_1_1Arr__non__caching__segment__traits__2" kindref="compound">Arr_non_caching_segment_traits_2</ref>&lt;<ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref>&gt;</computeroutput> traits-class, when arrangements with relatively many intersection points are constructed. It also allows for working with less accurate, yet computationally efficient number types, such as <computeroutput><ref refid="classCGAL_1_1Quotient" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">Quotient</ref>&lt;<ref refid="classCGAL_1_1MP__Float" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">MP_Float</ref>&gt;</computeroutput>, which represents floating-point numbers with an unbounded mantissa, but with a bounded exponent. Using this traits class is therefore highly recommended for almost all applications that rely on arrangements of line segments. On the other hand, <computeroutput><ref refid="classCGAL_1_1Arr__segment__traits__2" kindref="compound">Arr_segment_traits_2</ref></computeroutput> uses more space and stores extra data with each segment, so constructing arrangements of huge sets of non-intersecting segments (or segments that intersect very sparsely) could be more efficient with the <computeroutput><ref refid="classCGAL_1_1Arr__non__caching__segment__traits__2" kindref="compound">Arr_non_caching_segment_traits_2</ref></computeroutput> traits-class.</para><para>While <computeroutput><ref refid="classCGAL_1_1Arr__segment__traits__2" kindref="compound">Arr_segment_traits_2</ref></computeroutput> models the concept <computeroutput><ref refid="classArrangementDirectionalXMonotoneTraits__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Boolean_set_operations_2.tag">ArrangementDirectionalXMonotoneTraits_2</ref></computeroutput>, the implementation of the <computeroutput>Are_mergeable_2</computeroutput> operation does not enforce the input curves to have the same direction as a precondition. Moreover, <computeroutput><ref refid="classCGAL_1_1Arr__segment__traits__2" kindref="compound">Arr_segment_traits_2</ref></computeroutput> supports the merging of curves of opposite directions.</para><para><xrefsect id="models_1_models000036"><xreftitle>Is Model Of</xreftitle><xrefdescription><para><computeroutput><ref refid="classArrangementTraits__2" kindref="compound">ArrangementTraits_2</ref></computeroutput> </para><para><computeroutput><ref refid="classArrangementLandmarkTraits__2" kindref="compound">ArrangementLandmarkTraits_2</ref></computeroutput> </para><para><computeroutput><ref refid="classArrangementDirectionalXMonotoneTraits__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Boolean_set_operations_2.tag">ArrangementDirectionalXMonotoneTraits_2</ref></computeroutput></para></xrefdescription></xrefsect></para>    </detaileddescription>
    <location file="CGAL/Arr_segment_traits_2.h" line="64" column="1" bodyfile="CGAL/Arr_segment_traits_2.h" bodystart="64" bodyend="84"/>
    <listofallmembers>
    </listofallmembers>
  </compounddef>
</doxygen>
