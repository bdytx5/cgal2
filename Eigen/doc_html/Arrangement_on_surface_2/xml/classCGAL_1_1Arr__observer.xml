<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Arr__observer" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Arr_observer</compoundname>
    <derivedcompoundref refid="classCGAL_1_1Arr__face__index__map" prot="public" virt="non-virtual">CGAL::Arr_face_index_map&lt; Arrangement &gt;</derivedcompoundref>
    <derivedcompoundref refid="classCGAL_1_1Arr__vertex__index__map" prot="public" virt="non-virtual">CGAL::Arr_vertex_index_map&lt; Arrangement &gt;</derivedcompoundref>
    <includes local="no">CGAL/Arr_observer.h</includes>
    <templateparamlist>
      <param>
        <type>typename Arrangement</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classCGAL_1_1Arr__observer_1adb28438282e8b57e62199eccfb401b95" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Arr_observer&lt; Arrangement &gt;::Arrangement_2</definition>
        <argsstring></argsstring>
        <name>Arrangement_2</name>
        <briefdescription>
<para>the type of the associated arrangement. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="38" column="1" bodyfile="CGAL/Arr_observer.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Arr__observer_1a3598deb997f214bab12715d0d2a7f239" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Arrangement__2_1a0510dde537a06aaefc2fc4d1643d9315" kindref="member">Arrangement_2::Point_2</ref></type>
        <definition>typedef Arrangement_2::Point_2 CGAL::Arr_observer&lt; Arrangement &gt;::Point_2</definition>
        <argsstring></argsstring>
        <name>Point_2</name>
        <briefdescription>
<para>the point type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="43" column="1" bodyfile="CGAL/Arr_observer.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Arr__observer_1afc7143f65600e82af36aafb7aecea6e4" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Arrangement__2_1aebf230ed9d864e22fe7844225f4ebfdc" kindref="member">Arrangement_2::X_monotone_curve_2</ref></type>
        <definition>typedef Arrangement_2::X_monotone_curve_2 CGAL::Arr_observer&lt; Arrangement &gt;::X_monotone_curve_2</definition>
        <argsstring></argsstring>
        <name>X_monotone_curve_2</name>
        <briefdescription>
<para>the <formula id="2">$ x$</formula>-monotone curve type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="48" column="1" bodyfile="CGAL/Arr_observer.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Arr__observer_1af67ecaf27fcf935ba37dcb1229e51c18" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Arrangement__2_1a7dac3eed2224beadf3658495bc671c49" kindref="member">Arrangement_2::Vertex_handle</ref></type>
        <definition>typedef Arrangement_2::Vertex_handle CGAL::Arr_observer&lt; Arrangement &gt;::Vertex_handle</definition>
        <argsstring></argsstring>
        <name>Vertex_handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="53" column="1" bodyfile="CGAL/Arr_observer.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Arr__observer_1a76ae52618160b36148e7f06f31798b5e" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Arrangement__2_1acdb9c49c90f9354f20c56efac599a7fe" kindref="member">Arrangement_2::Halfedge_handle</ref></type>
        <definition>typedef Arrangement_2::Halfedge_handle CGAL::Arr_observer&lt; Arrangement &gt;::Halfedge_handle</definition>
        <argsstring></argsstring>
        <name>Halfedge_handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="58" column="1" bodyfile="CGAL/Arr_observer.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Arr__observer_1a8bad28f8ad6c60686c129debd9d0b744" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Arrangement__2_1ad64170c3b8b8c4af16a4fb742bf56d48" kindref="member">Arrangement_2::Face_handle</ref></type>
        <definition>typedef Arrangement_2::Face_handle CGAL::Arr_observer&lt; Arrangement &gt;::Face_handle</definition>
        <argsstring></argsstring>
        <name>Face_handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="63" column="1" bodyfile="CGAL/Arr_observer.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Arr__observer_1ae33c9136740de935e10da41af87c65d7" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Arrangement__2_1ab4a594c193ca09a672dbe2fcafa090e9" kindref="member">Arrangement_2::Ccb_halfedge_circulator</ref></type>
        <definition>typedef Arrangement_2::Ccb_halfedge_circulator CGAL::Arr_observer&lt; Arrangement &gt;::Ccb_halfedge_circulator</definition>
        <argsstring></argsstring>
        <name>Ccb_halfedge_circulator</name>
        <briefdescription>
<para>represents the boundary of a connected component (CCB). </para>        </briefdescription>
        <detaileddescription>
<para>In particular, holes are represented by a circulator for their outer CCB. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="69" column="1" bodyfile="CGAL/Arr_observer.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1a2c87c1e084894913ace2c4a2f648874b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Arr_observer&lt; Arrangement &gt;::Arr_observer</definition>
        <argsstring>()</argsstring>
        <name>Arr_observer</name>
        <briefdescription>
<para>constructs an observer that is unattached to any arrangement instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="79" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1a053b26e5d0c7bd98e286baf5a920f4ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Arr_observer&lt; Arrangement &gt;::Arr_observer</definition>
        <argsstring>(Arrangement_2 &amp;arr)</argsstring>
        <name>Arr_observer</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1adb28438282e8b57e62199eccfb401b95" kindref="member">Arrangement_2</ref> &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
<para>constructs an observer and attaches it to the given arrangement <computeroutput>arr</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="85" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Modifiers</header>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1a24189123e2b0b8503e94cbcd678ab5a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Arr_observer&lt; Arrangement &gt;::attach</definition>
        <argsstring>(Arrangement_2 &amp;arr)</argsstring>
        <name>attach</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1adb28438282e8b57e62199eccfb401b95" kindref="member">Arrangement_2</ref> &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
<para>attaches the observer to the given arrangement <computeroutput>arr</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1a46161a45c07ab733a18eab8e451b1d9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Arr_observer&lt; Arrangement &gt;::detach</definition>
        <argsstring>()</argsstring>
        <name>detach</name>
        <briefdescription>
<para>detaches the observer from its arrangement. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="100" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Notifications on Global Arrangement Operations</header>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1a7e9e5ce39f05ea9ca54c8171228a9511" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::before_assign</definition>
        <argsstring>(const Arrangement_2 &amp;arr)</argsstring>
        <name>before_assign</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Arr__observer_1adb28438282e8b57e62199eccfb401b95" kindref="member">Arrangement_2</ref> &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
<para>issued just before the attached arrangement is assigned with the contents of another arrangement <computeroutput>arr</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1a7e9c23e423836a5d1941daf0d675cd8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::after_assign</definition>
        <argsstring>()</argsstring>
        <name>after_assign</name>
        <briefdescription>
<para>issued immediately after the attached arrangement has been assigned with the contents of another arrangement. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="117" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1ad470f96aa1c5026fa6ca97bc9b25b03e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::before_clear</definition>
        <argsstring>()</argsstring>
        <name>before_clear</name>
        <briefdescription>
<para>issued just before the attached arrangement is cleared. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="122" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1a23f31d873563a1f95ee507a79fe28db2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::after_clear</definition>
        <argsstring>(Face_handle uf)</argsstring>
        <name>after_clear</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a8bad28f8ad6c60686c129debd9d0b744" kindref="member">Face_handle</ref></type>
          <declname>uf</declname>
        </param>
        <briefdescription>
<para>issued immediately after the attached arrangement has been cleared, so it now consists only of a the unbounded face <computeroutput>uf</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="128" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1acfa9b375cb5ee99be8f768e21a5655b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::before_global_change</definition>
        <argsstring>()</argsstring>
        <name>before_global_change</name>
        <briefdescription>
<para>issued just before a global function starts to modify the attached arrangement. </para>        </briefdescription>
        <detaileddescription>
<para>It is guaranteed that no queries (especially no point-location queries) are issued until the termination of the global function is indicated by <computeroutput><ref refid="classCGAL_1_1Arr__observer_1ac331423844dd56843ea68910b0126269" kindref="member">after_global_change()</ref></computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="136" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1ac331423844dd56843ea68910b0126269" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::after_global_change</definition>
        <argsstring>()</argsstring>
        <name>after_global_change</name>
        <briefdescription>
<para>issued immediately after a global function has stopped modifying the attached arrangement. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="142" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Notifications on Attachment or Detachment</header>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1a344d54e2e6922a3ee16cb2cdb87f3192" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::before_attach</definition>
        <argsstring>(const Arrangement_2 &amp;arr)</argsstring>
        <name>before_attach</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Arr__observer_1adb28438282e8b57e62199eccfb401b95" kindref="member">Arrangement_2</ref> &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
<para>issued just before the observer is attached to the arrangement instance <computeroutput>arr</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="153" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1a028cab4196dafd3a3aa507ec9ea81593" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::after_attach</definition>
        <argsstring>()</argsstring>
        <name>after_attach</name>
        <briefdescription>
<para>issued immediately after the observer has been attached to an arrangement instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="159" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1a896bfecdd794098e76fa8f529553afc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::before_detach</definition>
        <argsstring>()</argsstring>
        <name>before_detach</name>
        <briefdescription>
<para>issued just before the observer is detached from its arrangement instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="164" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1a028cab4196dafd3a3aa507ec9ea81593" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::after_attach</definition>
        <argsstring>()</argsstring>
        <name>after_attach</name>
        <briefdescription>
<para>issued immediately after the observer has been detached from its arrangement instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="170" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Notifications on Local Changes in the Arrangement</header>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1a2d0de569a3cd5154dae84607183b8e5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::before_create_vertex</definition>
        <argsstring>(const Point_2 &amp;p)</argsstring>
        <name>before_create_vertex</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Arr__observer_1a3598deb997f214bab12715d0d2a7f239" kindref="member">Point_2</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>issued just before a new vertex that corresponds to the point <computeroutput>p</computeroutput> is created. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="181" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1a744214b512a0b495de43801cf72e5622" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::after_create_vertex</definition>
        <argsstring>(Vertex_handle v)</argsstring>
        <name>after_create_vertex</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1af67ecaf27fcf935ba37dcb1229e51c18" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>issued immediately after a new vertex <computeroutput>v</computeroutput> has been created. </para>        </briefdescription>
        <detaileddescription>
<para>Note that the vertex still has no incident edges and is not connected to any other vertex. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="188" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1ac2d56fc31bd1f70e9846861117f3dc4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::before_create_boundary_vertex</definition>
        <argsstring>(const X_monotone_curve_2 &amp;cv, Arr_curve_end ind, Arr_parameter_space ps_x, Arr_parameter_space ps_y)</argsstring>
        <name>before_create_boundary_vertex</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Arr__observer_1afc7143f65600e82af36aafb7aecea6e4" kindref="member">X_monotone_curve_2</ref> &amp;</type>
          <declname>cv</declname>
        </param>
        <param>
          <type><ref refid="group__PkgArrangement2Enums_1ga29246893be4be2ad9a8fbc249f49f0b5" kindref="member">Arr_curve_end</ref></type>
          <declname>ind</declname>
        </param>
        <param>
          <type><ref refid="group__kernel__enums_1ga69d3e68aa488b8927506333b04400bdf" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Arr_parameter_space</ref></type>
          <declname>ps_x</declname>
        </param>
        <param>
          <type><ref refid="group__kernel__enums_1ga69d3e68aa488b8927506333b04400bdf" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Arr_parameter_space</ref></type>
          <declname>ps_y</declname>
        </param>
        <briefdescription>
<para>issued just before a new vertex at infinity is created, <computeroutput>cv</computeroutput> is the curve incident to the surface boundary, <computeroutput>ind</computeroutput> is the relevant curve-end, <computeroutput>ps_x</computeroutput> is the boundary condition of the vertex in <formula id="2">$ x$</formula> and <computeroutput>ps_y</computeroutput> is the boundary condition of the vertex in <formula id="104">$ y$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="196" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1a7e98d5f910c9593d44b12ac67acce04d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::after_create_boundary_vertex</definition>
        <argsstring>(Vertex_handle v)</argsstring>
        <name>after_create_boundary_vertex</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1af67ecaf27fcf935ba37dcb1229e51c18" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>issued immediately after a new vertex <computeroutput>v</computeroutput> has been created. </para>        </briefdescription>
        <detaileddescription>
<para>Note that the vertex still has no incident edges and is not connected to any other vertex. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="206" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1a36524d0019b693388a09a5a825f261a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::before_create_edge</definition>
        <argsstring>(const X_monotone_curve_2 &amp;c, Vertex_handle v1, Vertex_handle v2)</argsstring>
        <name>before_create_edge</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Arr__observer_1afc7143f65600e82af36aafb7aecea6e4" kindref="member">X_monotone_curve_2</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1af67ecaf27fcf935ba37dcb1229e51c18" kindref="member">Vertex_handle</ref></type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1af67ecaf27fcf935ba37dcb1229e51c18" kindref="member">Vertex_handle</ref></type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>issued just before a new edge that corresponds to the <formula id="2">$ x$</formula>-monotone curve <computeroutput>c</computeroutput> and connects the vertices <computeroutput>v1</computeroutput> and <computeroutput>v2</computeroutput> is created. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="212" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1afcd0c778cdf377cac2e2f33e52352291" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::after_create_edge</definition>
        <argsstring>(Halfedge_handle e)</argsstring>
        <name>after_create_edge</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a76ae52618160b36148e7f06f31798b5e" kindref="member">Halfedge_handle</ref></type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>issued immediately after a new edge <computeroutput>e</computeroutput> has been created. </para>        </briefdescription>
        <detaileddescription>
<para>The halfedge that is sent to this function is always directed from <computeroutput>v1</computeroutput> to <computeroutput>v2</computeroutput> (see above). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="221" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1a8c798f97511d6020598aa082c211563c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::before_modify_vertex</definition>
        <argsstring>(Vertex_handle v, const Point_2 &amp;p)</argsstring>
        <name>before_modify_vertex</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1af67ecaf27fcf935ba37dcb1229e51c18" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Arr__observer_1a3598deb997f214bab12715d0d2a7f239" kindref="member">Point_2</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>issued just before a vertex <computeroutput>v</computeroutput> is modified to be associated with the point <computeroutput>p</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="227" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1a2698d7eaada8a893ef5cb58cb5130335" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::after_modify_vertex</definition>
        <argsstring>(Vertex_handle v)</argsstring>
        <name>after_modify_vertex</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1af67ecaf27fcf935ba37dcb1229e51c18" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>issued immediately after an existing vertex <computeroutput>v</computeroutput> has been modified. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="233" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1a75a6ba3386ed8c0e093705dd6ae0046c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::before_modify_edge</definition>
        <argsstring>(Halfedge_handle e, const X_monotone_curve_2 &amp;c)</argsstring>
        <name>before_modify_edge</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a76ae52618160b36148e7f06f31798b5e" kindref="member">Halfedge_handle</ref></type>
          <declname>e</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Arr__observer_1afc7143f65600e82af36aafb7aecea6e4" kindref="member">X_monotone_curve_2</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>issued just before an edge <computeroutput>e</computeroutput> is modified to be associated with the <formula id="2">$ x$</formula>-monotone curve <computeroutput>c</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="239" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1af1fceb1deda469f727c49cdf4a1fb045" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::after_modify_edge</definition>
        <argsstring>(Halfedge_handle e)</argsstring>
        <name>after_modify_edge</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a76ae52618160b36148e7f06f31798b5e" kindref="member">Halfedge_handle</ref></type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>issued immediately after an existing edge <computeroutput>e</computeroutput> has been modified. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="245" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1a852c0b7cfe3b8bf7c8b6488599ef6d26" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::before_split_edge</definition>
        <argsstring>(Halfedge_handle e, Vertex_handle v, const X_monotone_curve_2 &amp;c1, const X_monotone_curve_2 &amp;c2)</argsstring>
        <name>before_split_edge</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a76ae52618160b36148e7f06f31798b5e" kindref="member">Halfedge_handle</ref></type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1af67ecaf27fcf935ba37dcb1229e51c18" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Arr__observer_1afc7143f65600e82af36aafb7aecea6e4" kindref="member">X_monotone_curve_2</ref> &amp;</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Arr__observer_1afc7143f65600e82af36aafb7aecea6e4" kindref="member">X_monotone_curve_2</ref> &amp;</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
<para>issued just before an edge <computeroutput>e</computeroutput> is split into two edges that should be associated with the <formula id="2">$ x$</formula>-monotone curves <computeroutput>c1</computeroutput> and <computeroutput>c2</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The vertex <computeroutput>v</computeroutput> corresponds to the split point, and will be used to separate the two resulting edges. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="253" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1aec80ec875c87bcbeded084837096085d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::after_split_edge</definition>
        <argsstring>(Halfedge_handle e1, Halfedge_handle e2)</argsstring>
        <name>after_split_edge</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a76ae52618160b36148e7f06f31798b5e" kindref="member">Halfedge_handle</ref></type>
          <declname>e1</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a76ae52618160b36148e7f06f31798b5e" kindref="member">Halfedge_handle</ref></type>
          <declname>e2</declname>
        </param>
        <briefdescription>
<para>issued immediately after an existing edge has been split into the two given edges <computeroutput>e1</computeroutput> and <computeroutput>e2</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="262" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1a9e09a1011a243b4e26346ebac5738134" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::before_split_fictitious_edge</definition>
        <argsstring>(Halfedge_handle e, Vertex_handle v)</argsstring>
        <name>before_split_fictitious_edge</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a76ae52618160b36148e7f06f31798b5e" kindref="member">Halfedge_handle</ref></type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1af67ecaf27fcf935ba37dcb1229e51c18" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>issued just before a fictitious edge <computeroutput>e</computeroutput> is split into two. </para>        </briefdescription>
        <detaileddescription>
<para>The vertex at infinity <computeroutput>v</computeroutput> corresponds to the split point, and will be used to separate the two resulting edges. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="270" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1a8dc737a249b229d57881220ac2d40ccb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::after_split_fictitious_edge</definition>
        <argsstring>(Halfedge_handle e1, Halfedge_handle e2)</argsstring>
        <name>after_split_fictitious_edge</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a76ae52618160b36148e7f06f31798b5e" kindref="member">Halfedge_handle</ref></type>
          <declname>e1</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a76ae52618160b36148e7f06f31798b5e" kindref="member">Halfedge_handle</ref></type>
          <declname>e2</declname>
        </param>
        <briefdescription>
<para>issued immediately after an existing fictitious edge has been split into the two given fictitious edges <computeroutput>e1</computeroutput> and <computeroutput>e2</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="277" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1af8bf0f44edc4421030fc347af5569415" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::before_split_face</definition>
        <argsstring>(Face_handle f, Halfedge_handle e)</argsstring>
        <name>before_split_face</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a8bad28f8ad6c60686c129debd9d0b744" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a76ae52618160b36148e7f06f31798b5e" kindref="member">Halfedge_handle</ref></type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>issued just before a face <computeroutput>f</computeroutput> is split into two, as a result of the insertion of the edge <computeroutput>e</computeroutput> into the arrangement. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="284" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1ae382d8a32ea9ef3fab11434705f57dea" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::after_split_face</definition>
        <argsstring>(Face_handle f1, Face_handle f2, bool is_hole)</argsstring>
        <name>after_split_face</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a8bad28f8ad6c60686c129debd9d0b744" kindref="member">Face_handle</ref></type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a8bad28f8ad6c60686c129debd9d0b744" kindref="member">Face_handle</ref></type>
          <declname>f2</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_hole</declname>
        </param>
        <briefdescription>
<para>issued immediately after the existing face <computeroutput>f1</computeroutput> has been split, such that a portion of it now forms a new face <computeroutput>f2</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The flag <computeroutput>is_hole</computeroutput> designates whether <computeroutput>f2</computeroutput> forms a hole inside <computeroutput>f1</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="292" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1ac76ea2def9e1a1b3cad55e04bdfaeec6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::before_split_outer_ccb</definition>
        <argsstring>(Face_handle f, Ccb_halfedge_circulator h, Halfedge_handle e)</argsstring>
        <name>before_split_outer_ccb</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a8bad28f8ad6c60686c129debd9d0b744" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1ae33c9136740de935e10da41af87c65d7" kindref="member">Ccb_halfedge_circulator</ref></type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a76ae52618160b36148e7f06f31798b5e" kindref="member">Halfedge_handle</ref></type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>issued just before outer ccb <computeroutput>h</computeroutput> inside a face <computeroutput>f</computeroutput> is split into two, as a result of the removal of the edge <computeroutput>e</computeroutput> from the arrangement. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="300" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1a0d3499ad5079e641658c17bcf73c9604" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::after_split_outer_ccb</definition>
        <argsstring>(Face_handle f, Ccb_halfedge_circulator h1, Ccb_halfedge_circulator h2)</argsstring>
        <name>after_split_outer_ccb</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a8bad28f8ad6c60686c129debd9d0b744" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1ae33c9136740de935e10da41af87c65d7" kindref="member">Ccb_halfedge_circulator</ref></type>
          <declname>h1</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1ae33c9136740de935e10da41af87c65d7" kindref="member">Ccb_halfedge_circulator</ref></type>
          <declname>h2</declname>
        </param>
        <briefdescription>
<para>issued immediately after outer ccb the face <computeroutput>f</computeroutput> has been split, resulting in the two holes <computeroutput>h1</computeroutput> and <computeroutput>h2</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="308" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1aa82dfc3b8b681996da7bc892b74bedbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::before_split_inner_ccb</definition>
        <argsstring>(Face_handle f, Ccb_halfedge_circulator h, Halfedge_handle e)</argsstring>
        <name>before_split_inner_ccb</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a8bad28f8ad6c60686c129debd9d0b744" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1ae33c9136740de935e10da41af87c65d7" kindref="member">Ccb_halfedge_circulator</ref></type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a76ae52618160b36148e7f06f31798b5e" kindref="member">Halfedge_handle</ref></type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>issued just before inner ccb <computeroutput>h</computeroutput> inside a face <computeroutput>f</computeroutput> is split into two, as a result of the removal of the edge <computeroutput>e</computeroutput> from the arrangement. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="316" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1ab71e88ad4734f2e9a442a73c1fb7b340" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::after_split_inner_ccb</definition>
        <argsstring>(Face_handle f, Ccb_halfedge_circulator h1, Ccb_halfedge_circulator h2)</argsstring>
        <name>after_split_inner_ccb</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a8bad28f8ad6c60686c129debd9d0b744" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1ae33c9136740de935e10da41af87c65d7" kindref="member">Ccb_halfedge_circulator</ref></type>
          <declname>h1</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1ae33c9136740de935e10da41af87c65d7" kindref="member">Ccb_halfedge_circulator</ref></type>
          <declname>h2</declname>
        </param>
        <briefdescription>
<para>issued immediately after inner ccb the face <computeroutput>f</computeroutput> has been split, resulting in the two holes <computeroutput>h1</computeroutput> and <computeroutput>h2</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="324" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1a49829eb6ec424ab8457c9f2100976a16" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::before_add_outer_ccb</definition>
        <argsstring>(Face_handle f, Halfedge_handle e)</argsstring>
        <name>before_add_outer_ccb</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a8bad28f8ad6c60686c129debd9d0b744" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a76ae52618160b36148e7f06f31798b5e" kindref="member">Halfedge_handle</ref></type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>issued just before the edge <computeroutput>e</computeroutput> is inserted as a new outer ccb inside the face <computeroutput>f</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="332" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1af84e74019545a25da02b3693009212e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::after_add_outer_ccb</definition>
        <argsstring>(Ccb_halfedge_circulator h)</argsstring>
        <name>after_add_outer_ccb</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1ae33c9136740de935e10da41af87c65d7" kindref="member">Ccb_halfedge_circulator</ref></type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>issued immediately after a new outer ccb <computeroutput>h</computeroutput> has been created. </para>        </briefdescription>
        <detaileddescription>
<para>The outer ccb always consists of a single pair of twin halfedges. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="339" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1a9da457f2633ae8c5ed2ccbb3b4d6294c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::before_add_inner_ccb</definition>
        <argsstring>(Face_handle f, Halfedge_handle e)</argsstring>
        <name>before_add_inner_ccb</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a8bad28f8ad6c60686c129debd9d0b744" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a76ae52618160b36148e7f06f31798b5e" kindref="member">Halfedge_handle</ref></type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>issued just before the edge <computeroutput>e</computeroutput> is inserted as a new inner ccb inside the face <computeroutput>f</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="345" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1a7013b10390b1c83144fb76631af4eff7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::after_add_inner_ccb</definition>
        <argsstring>(Ccb_halfedge_circulator h)</argsstring>
        <name>after_add_inner_ccb</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1ae33c9136740de935e10da41af87c65d7" kindref="member">Ccb_halfedge_circulator</ref></type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>issued immediately after a new inner ccb <computeroutput>h</computeroutput> has been created. </para>        </briefdescription>
        <detaileddescription>
<para>The inner ccb always consists of a single pair of twin halfedges. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="352" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1ad701ab5288529dd132d9b10bb050e733" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::before_add_isolated_vertex</definition>
        <argsstring>(Face_handle f, Vertex_handle v)</argsstring>
        <name>before_add_isolated_vertex</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a8bad28f8ad6c60686c129debd9d0b744" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1af67ecaf27fcf935ba37dcb1229e51c18" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>issued just before the vertex <computeroutput>v</computeroutput> is inserted as an isolated vertex inside the face <computeroutput>f</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="358" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1a5ff4354a944feced9db9adfc5908f7bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::after_add_isolated_vertex</definition>
        <argsstring>(Vertex_handle v)</argsstring>
        <name>after_add_isolated_vertex</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1af67ecaf27fcf935ba37dcb1229e51c18" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>issued immediately after the vertex <computeroutput>v</computeroutput> has been set as an isolated vertex. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="365" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1af394bcad92bd8c77ffbc51d6ca77bcb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::before_merge_edge</definition>
        <argsstring>(Halfedge_handle e1, Halfedge_handle e2, const X_monotone_curve_2 &amp;c)</argsstring>
        <name>before_merge_edge</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a76ae52618160b36148e7f06f31798b5e" kindref="member">Halfedge_handle</ref></type>
          <declname>e1</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a76ae52618160b36148e7f06f31798b5e" kindref="member">Halfedge_handle</ref></type>
          <declname>e2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Arr__observer_1afc7143f65600e82af36aafb7aecea6e4" kindref="member">X_monotone_curve_2</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>issued just before the two edges <computeroutput>e1</computeroutput> and <computeroutput>e2</computeroutput> are merged to form a single edge that will be associated with the <formula id="2">$ x$</formula>-monotone curve <computeroutput>c</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="372" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1ab0dc7d21d8bd972653f2d558a575c1b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::after_merge_edge</definition>
        <argsstring>(Halfedge_handle e)</argsstring>
        <name>after_merge_edge</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a76ae52618160b36148e7f06f31798b5e" kindref="member">Halfedge_handle</ref></type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>issued immediately after two edges have been merged to form the edge <computeroutput>e</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="380" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1acaa185193c45c4b27227266f80249e25" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::before_merge_fictitious_edge</definition>
        <argsstring>(Halfedge_handle e1, Halfedge_handle e2)</argsstring>
        <name>before_merge_fictitious_edge</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a76ae52618160b36148e7f06f31798b5e" kindref="member">Halfedge_handle</ref></type>
          <declname>e1</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a76ae52618160b36148e7f06f31798b5e" kindref="member">Halfedge_handle</ref></type>
          <declname>e2</declname>
        </param>
        <briefdescription>
<para>issued just before the two fictitious edges <computeroutput>e1</computeroutput> and <computeroutput>e2</computeroutput> are merged to form a single fictitious edge. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="386" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1abaf582937ef695a34f41f2c511bece6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::after_merge_fictitious_edge</definition>
        <argsstring>(Halfedge_handle e)</argsstring>
        <name>after_merge_fictitious_edge</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a76ae52618160b36148e7f06f31798b5e" kindref="member">Halfedge_handle</ref></type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>issued immediately after two fictitious edges have been merged to form the fictitious edge <computeroutput>e</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="393" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1aa7140b155d3967c4413ee1d5b3fa701d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::before_merge_face</definition>
        <argsstring>(Face_handle f1, Face_handle f2, Halfedge_handle e)</argsstring>
        <name>before_merge_face</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a8bad28f8ad6c60686c129debd9d0b744" kindref="member">Face_handle</ref></type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a8bad28f8ad6c60686c129debd9d0b744" kindref="member">Face_handle</ref></type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a76ae52618160b36148e7f06f31798b5e" kindref="member">Halfedge_handle</ref></type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>issued just before the two edges <computeroutput>f1</computeroutput> and <computeroutput>f2</computeroutput> are merged to form a single face, following the removal of the edge <computeroutput>e</computeroutput> from the arrangement. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="400" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1ab9f2e0658413da48ec778048e51a80d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::after_merge_face</definition>
        <argsstring>(Face_handle f)</argsstring>
        <name>after_merge_face</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a8bad28f8ad6c60686c129debd9d0b744" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>issued immediately after two faces have been merged to form the face <computeroutput>f</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="408" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1af2531e5f6160a7e6acf9f96fecb5636c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::before_merge_outer_ccb</definition>
        <argsstring>(Face_handle f, Ccb_halfedge_circulator h1, Ccb_halfedge_circulator h2, Halfedge_handle e)</argsstring>
        <name>before_merge_outer_ccb</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a8bad28f8ad6c60686c129debd9d0b744" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1ae33c9136740de935e10da41af87c65d7" kindref="member">Ccb_halfedge_circulator</ref></type>
          <declname>h1</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1ae33c9136740de935e10da41af87c65d7" kindref="member">Ccb_halfedge_circulator</ref></type>
          <declname>h2</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a76ae52618160b36148e7f06f31798b5e" kindref="member">Halfedge_handle</ref></type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>issued just before two outer ccbs <computeroutput>h1</computeroutput> and <computeroutput>h2</computeroutput> inside the face <computeroutput>f</computeroutput> are merged to form a single connected component, following the insertion of the edge <computeroutput>e</computeroutput> into the arrangement. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="415" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1a15ba2086ffaca3142085500dfca162e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::after_merge_outer_ccb</definition>
        <argsstring>(Face_handle f, Ccb_halfedge_circulator h)</argsstring>
        <name>after_merge_outer_ccb</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a8bad28f8ad6c60686c129debd9d0b744" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1ae33c9136740de935e10da41af87c65d7" kindref="member">Ccb_halfedge_circulator</ref></type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>issued immediately after two outer ccbs have been merged to form a single outer ccb <computeroutput>h</computeroutput> inside the face <computeroutput>f</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="424" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1a6b2e82e6972cf9bc4511d5f63ca70240" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::before_merge_inner_ccb</definition>
        <argsstring>(Face_handle f, Ccb_halfedge_circulator h1, Ccb_halfedge_circulator h2, Halfedge_handle e)</argsstring>
        <name>before_merge_inner_ccb</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a8bad28f8ad6c60686c129debd9d0b744" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1ae33c9136740de935e10da41af87c65d7" kindref="member">Ccb_halfedge_circulator</ref></type>
          <declname>h1</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1ae33c9136740de935e10da41af87c65d7" kindref="member">Ccb_halfedge_circulator</ref></type>
          <declname>h2</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a76ae52618160b36148e7f06f31798b5e" kindref="member">Halfedge_handle</ref></type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>issued just before two inner ccbs <computeroutput>h1</computeroutput> and <computeroutput>h2</computeroutput> inside the face <computeroutput>f</computeroutput> are merged to form a single connected component, following the insertion of the edge <computeroutput>e</computeroutput> into the arrangement. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="432" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1a75c8dc04bdb4a999aee65ef27ea1cc27" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::after_merge_inner_ccb</definition>
        <argsstring>(Face_handle f, Ccb_halfedge_circulator h)</argsstring>
        <name>after_merge_inner_ccb</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a8bad28f8ad6c60686c129debd9d0b744" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1ae33c9136740de935e10da41af87c65d7" kindref="member">Ccb_halfedge_circulator</ref></type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>issued immediately after two inner ccbs have been merged to form a single inner ccb <computeroutput>h</computeroutput> inside the face <computeroutput>f</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="441" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1a3fd4859baa5c34c72f019323fd839840" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::before_move_outer_ccb</definition>
        <argsstring>(Face_handle from_f, Face_handle to_f, Ccb_halfedge_circulator h)</argsstring>
        <name>before_move_outer_ccb</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a8bad28f8ad6c60686c129debd9d0b744" kindref="member">Face_handle</ref></type>
          <declname>from_f</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a8bad28f8ad6c60686c129debd9d0b744" kindref="member">Face_handle</ref></type>
          <declname>to_f</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1ae33c9136740de935e10da41af87c65d7" kindref="member">Ccb_halfedge_circulator</ref></type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>issued just before the outer ccb <computeroutput>h</computeroutput> is moved from one face to another. </para>        </briefdescription>
        <detaileddescription>
<para>This can happen if the face <computeroutput>to_f</computeroutput> containing the outer ccb has just been split from <computeroutput>from_f</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="449" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1ad84c137aa8f45995443332a0fced24fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::after_move_outer_ccb</definition>
        <argsstring>(Ccb_halfedge_circulator h)</argsstring>
        <name>after_move_outer_ccb</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1ae33c9136740de935e10da41af87c65d7" kindref="member">Ccb_halfedge_circulator</ref></type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>issued immediately after the outer ccb <computeroutput>h</computeroutput> has been moved to a new face. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="456" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1a81c9cb40596cfb49c6672bd96f5b3833" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::before_move_inner_ccb</definition>
        <argsstring>(Face_handle from_f, Face_handle to_f, Ccb_halfedge_circulator h)</argsstring>
        <name>before_move_inner_ccb</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a8bad28f8ad6c60686c129debd9d0b744" kindref="member">Face_handle</ref></type>
          <declname>from_f</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a8bad28f8ad6c60686c129debd9d0b744" kindref="member">Face_handle</ref></type>
          <declname>to_f</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1ae33c9136740de935e10da41af87c65d7" kindref="member">Ccb_halfedge_circulator</ref></type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>issued just before the inner ccb <computeroutput>h</computeroutput> is moved from one face to another. </para>        </briefdescription>
        <detaileddescription>
<para>This can happen if the face <computeroutput>to_f</computeroutput> containing the inner ccb has just been split from <computeroutput>from_f</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="463" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1a2f8ecd051f810c9f97751076d227e6f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::after_move_inner_ccb</definition>
        <argsstring>(Ccb_halfedge_circulator h)</argsstring>
        <name>after_move_inner_ccb</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1ae33c9136740de935e10da41af87c65d7" kindref="member">Ccb_halfedge_circulator</ref></type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>issued immediately after the inner ccb <computeroutput>h</computeroutput> has been moved to a new face. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="470" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1aeda4cf026fe1b3bd19173d6c0654feb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::before_move_isolated_vertex</definition>
        <argsstring>(Face_handle from_f, Face_handle to_f, Vertex_handle v)</argsstring>
        <name>before_move_isolated_vertex</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a8bad28f8ad6c60686c129debd9d0b744" kindref="member">Face_handle</ref></type>
          <declname>from_f</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a8bad28f8ad6c60686c129debd9d0b744" kindref="member">Face_handle</ref></type>
          <declname>to_f</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1af67ecaf27fcf935ba37dcb1229e51c18" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>issued just before the isolated vertex <computeroutput>v</computeroutput> is moved from one face to another. </para>        </briefdescription>
        <detaileddescription>
<para>This can happen if the face <computeroutput>to_f</computeroutput> containing the isolated vertex has just been split from <computeroutput>from_f</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="478" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1aa36428d76ed3ae715c183cac3ed91a66" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::after_move_isolated_vertex</definition>
        <argsstring>(Vertex_handle v)</argsstring>
        <name>after_move_isolated_vertex</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1af67ecaf27fcf935ba37dcb1229e51c18" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>issued immediately after the isolated vertex <computeroutput>v</computeroutput> has been moved to a new face. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="486" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1ab33ce3375488c57877dc60da6e36fbf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::before_remove_vertex</definition>
        <argsstring>(Vertex_handle v)</argsstring>
        <name>before_remove_vertex</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1af67ecaf27fcf935ba37dcb1229e51c18" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>issued just before the vertex <computeroutput>v</computeroutput> is removed from the arrangement. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="491" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1a3c411ed64d849fd007499cfca5075282" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::after_remove_vertex</definition>
        <argsstring>()</argsstring>
        <name>after_remove_vertex</name>
        <briefdescription>
<para>issued immediately after a vertex has been removed (and deleted) from the arrangement. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="497" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1a6e186bca266bc942812209459eb2a002" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::before_remove_edge</definition>
        <argsstring>(Halfedge_handle e)</argsstring>
        <name>before_remove_edge</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a76ae52618160b36148e7f06f31798b5e" kindref="member">Halfedge_handle</ref></type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>issued just before the edge <computeroutput>e</computeroutput> is removed from the arrangement. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="502" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1a44558e3b3db7ac453fc055e8d7bbdd84" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::after_remove_edge</definition>
        <argsstring>()</argsstring>
        <name>after_remove_edge</name>
        <briefdescription>
<para>issued immediately after an edge has been removed (and deleted) from the arrangement. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="508" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1a6174958dbe94f0434034a3078ebc168d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::before_remove_outer_ccb</definition>
        <argsstring>(Face_handle f, Ccb_halfedge_circulator h)</argsstring>
        <name>before_remove_outer_ccb</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a8bad28f8ad6c60686c129debd9d0b744" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1ae33c9136740de935e10da41af87c65d7" kindref="member">Ccb_halfedge_circulator</ref></type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>issued just before the outer ccb <computeroutput>f</computeroutput> is removed from inside the face <computeroutput>f</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="514" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1a986baccff62b634c68cd7123787c737d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::after_remove_outer_ccb</definition>
        <argsstring>(Face_handle f)</argsstring>
        <name>after_remove_outer_ccb</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a8bad28f8ad6c60686c129debd9d0b744" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>issued immediately after a outer ccb has been removed (and deleted) from inside the face <computeroutput>f</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="521" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1a5b059ccf2df0b60b66caff143699b539" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::before_remove_inner_ccb</definition>
        <argsstring>(Face_handle f, Ccb_halfedge_circulator h)</argsstring>
        <name>before_remove_inner_ccb</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a8bad28f8ad6c60686c129debd9d0b744" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1ae33c9136740de935e10da41af87c65d7" kindref="member">Ccb_halfedge_circulator</ref></type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>issued just before the inner ccb <computeroutput>f</computeroutput> is removed from inside the face <computeroutput>f</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="527" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__observer_1ab530c38f89e02e2eada6d685f2c043e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void CGAL::Arr_observer&lt; Arrangement &gt;::after_remove_inner_ccb</definition>
        <argsstring>(Face_handle f)</argsstring>
        <name>after_remove_inner_ccb</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__observer_1a8bad28f8ad6c60686c129debd9d0b744" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>issued immediately after a inner ccb has been removed (and deleted) from inside the face <computeroutput>f</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_observer.h" line="534" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="classCGAL_1_1Arr__observer_1arr_refarr_obs"/></para><para><computeroutput><ref refid="classCGAL_1_1Arr__observer" kindref="compound">Arr_observer</ref></computeroutput> serves as an abstract base class for all observer classes that are attached to an arrangement instance of type <computeroutput>Arrangement</computeroutput> and receive notifications from the arrangement. This base class handles the attachment of the observer to a given arrangement instance or to the detachment of the observer from this arrangement instance. It also gives a default empty implementation to all notification functions that are invoked by the arrangement to notify the observer on local or global changes it undergoes. The notification functions are all virtual functions, so they can be overridden by the concrete observer classes that inherit from <computeroutput><ref refid="classCGAL_1_1Arr__observer" kindref="compound">Arr_observer</ref></computeroutput>.</para><para>In order to implement a concrete arrangement observer-class, one simply needs to derive from <computeroutput><ref refid="classCGAL_1_1Arr__observer" kindref="compound">Arr_observer</ref></computeroutput> and override the relevant notification functions. For example, if only face-split events are of interest, it is sufficient to override just <computeroutput><ref refid="classCGAL_1_1Arr__observer_1af8bf0f44edc4421030fc347af5569415" kindref="member">before_split_face()</ref></computeroutput> (or just <computeroutput><ref refid="classCGAL_1_1Arr__observer_1ae382d8a32ea9ef3fab11434705f57dea" kindref="member">after_split_face()</ref></computeroutput>). </para>    </detaileddescription>
    <inheritancegraph>
      <node id="233">
        <label>CGAL::Arr_observer&lt; Arrangement &gt;</label>
        <link refid="classCGAL_1_1Arr__observer"/>
      </node>
      <node id="235">
        <label>CGAL::Arr_vertex_index_map&lt; Arrangement &gt;</label>
        <link refid="classCGAL_1_1Arr__vertex__index__map"/>
        <childnode refid="233" relation="public-inheritance">
        </childnode>
      </node>
      <node id="234">
        <label>CGAL::Arr_face_index_map&lt; Arrangement &gt;</label>
        <link refid="classCGAL_1_1Arr__face__index__map"/>
        <childnode refid="233" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="CGAL/Arr_observer.h" line="29" column="1" bodyfile="CGAL/Arr_observer.h" bodystart="29" bodyend="538"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Arr__observer_1a7013b10390b1c83144fb76631af4eff7" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>after_add_inner_ccb</name></member>
      <member refid="classCGAL_1_1Arr__observer_1a5ff4354a944feced9db9adfc5908f7bc" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>after_add_isolated_vertex</name></member>
      <member refid="classCGAL_1_1Arr__observer_1af84e74019545a25da02b3693009212e2" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>after_add_outer_ccb</name></member>
      <member refid="classCGAL_1_1Arr__observer_1a7e9c23e423836a5d1941daf0d675cd8c" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>after_assign</name></member>
      <member refid="classCGAL_1_1Arr__observer_1a028cab4196dafd3a3aa507ec9ea81593" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>after_attach</name></member>
      <member refid="classCGAL_1_1Arr__observer_1a028cab4196dafd3a3aa507ec9ea81593" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>after_attach</name></member>
      <member refid="classCGAL_1_1Arr__observer_1a23f31d873563a1f95ee507a79fe28db2" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>after_clear</name></member>
      <member refid="classCGAL_1_1Arr__observer_1a7e98d5f910c9593d44b12ac67acce04d" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>after_create_boundary_vertex</name></member>
      <member refid="classCGAL_1_1Arr__observer_1afcd0c778cdf377cac2e2f33e52352291" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>after_create_edge</name></member>
      <member refid="classCGAL_1_1Arr__observer_1a744214b512a0b495de43801cf72e5622" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>after_create_vertex</name></member>
      <member refid="classCGAL_1_1Arr__observer_1ac331423844dd56843ea68910b0126269" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>after_global_change</name></member>
      <member refid="classCGAL_1_1Arr__observer_1ab0dc7d21d8bd972653f2d558a575c1b7" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>after_merge_edge</name></member>
      <member refid="classCGAL_1_1Arr__observer_1ab9f2e0658413da48ec778048e51a80d1" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>after_merge_face</name></member>
      <member refid="classCGAL_1_1Arr__observer_1abaf582937ef695a34f41f2c511bece6a" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>after_merge_fictitious_edge</name></member>
      <member refid="classCGAL_1_1Arr__observer_1a75c8dc04bdb4a999aee65ef27ea1cc27" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>after_merge_inner_ccb</name></member>
      <member refid="classCGAL_1_1Arr__observer_1a15ba2086ffaca3142085500dfca162e5" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>after_merge_outer_ccb</name></member>
      <member refid="classCGAL_1_1Arr__observer_1af1fceb1deda469f727c49cdf4a1fb045" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>after_modify_edge</name></member>
      <member refid="classCGAL_1_1Arr__observer_1a2698d7eaada8a893ef5cb58cb5130335" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>after_modify_vertex</name></member>
      <member refid="classCGAL_1_1Arr__observer_1a2f8ecd051f810c9f97751076d227e6f8" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>after_move_inner_ccb</name></member>
      <member refid="classCGAL_1_1Arr__observer_1aa36428d76ed3ae715c183cac3ed91a66" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>after_move_isolated_vertex</name></member>
      <member refid="classCGAL_1_1Arr__observer_1ad84c137aa8f45995443332a0fced24fc" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>after_move_outer_ccb</name></member>
      <member refid="classCGAL_1_1Arr__observer_1a44558e3b3db7ac453fc055e8d7bbdd84" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>after_remove_edge</name></member>
      <member refid="classCGAL_1_1Arr__observer_1ab530c38f89e02e2eada6d685f2c043e9" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>after_remove_inner_ccb</name></member>
      <member refid="classCGAL_1_1Arr__observer_1a986baccff62b634c68cd7123787c737d" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>after_remove_outer_ccb</name></member>
      <member refid="classCGAL_1_1Arr__observer_1a3c411ed64d849fd007499cfca5075282" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>after_remove_vertex</name></member>
      <member refid="classCGAL_1_1Arr__observer_1aec80ec875c87bcbeded084837096085d" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>after_split_edge</name></member>
      <member refid="classCGAL_1_1Arr__observer_1ae382d8a32ea9ef3fab11434705f57dea" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>after_split_face</name></member>
      <member refid="classCGAL_1_1Arr__observer_1a8dc737a249b229d57881220ac2d40ccb" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>after_split_fictitious_edge</name></member>
      <member refid="classCGAL_1_1Arr__observer_1ab71e88ad4734f2e9a442a73c1fb7b340" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>after_split_inner_ccb</name></member>
      <member refid="classCGAL_1_1Arr__observer_1a0d3499ad5079e641658c17bcf73c9604" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>after_split_outer_ccb</name></member>
      <member refid="classCGAL_1_1Arr__observer_1a2c87c1e084894913ace2c4a2f648874b" prot="public" virt="non-virtual"><scope>CGAL::Arr_observer</scope><name>Arr_observer</name></member>
      <member refid="classCGAL_1_1Arr__observer_1a053b26e5d0c7bd98e286baf5a920f4ec" prot="public" virt="non-virtual"><scope>CGAL::Arr_observer</scope><name>Arr_observer</name></member>
      <member refid="classCGAL_1_1Arr__observer_1adb28438282e8b57e62199eccfb401b95" prot="public" virt="non-virtual"><scope>CGAL::Arr_observer</scope><name>Arrangement_2</name></member>
      <member refid="classCGAL_1_1Arr__observer_1a24189123e2b0b8503e94cbcd678ab5a1" prot="public" virt="non-virtual"><scope>CGAL::Arr_observer</scope><name>attach</name></member>
      <member refid="classCGAL_1_1Arr__observer_1a9da457f2633ae8c5ed2ccbb3b4d6294c" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>before_add_inner_ccb</name></member>
      <member refid="classCGAL_1_1Arr__observer_1ad701ab5288529dd132d9b10bb050e733" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>before_add_isolated_vertex</name></member>
      <member refid="classCGAL_1_1Arr__observer_1a49829eb6ec424ab8457c9f2100976a16" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>before_add_outer_ccb</name></member>
      <member refid="classCGAL_1_1Arr__observer_1a7e9e5ce39f05ea9ca54c8171228a9511" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>before_assign</name></member>
      <member refid="classCGAL_1_1Arr__observer_1a344d54e2e6922a3ee16cb2cdb87f3192" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>before_attach</name></member>
      <member refid="classCGAL_1_1Arr__observer_1ad470f96aa1c5026fa6ca97bc9b25b03e" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>before_clear</name></member>
      <member refid="classCGAL_1_1Arr__observer_1ac2d56fc31bd1f70e9846861117f3dc4c" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>before_create_boundary_vertex</name></member>
      <member refid="classCGAL_1_1Arr__observer_1a36524d0019b693388a09a5a825f261a5" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>before_create_edge</name></member>
      <member refid="classCGAL_1_1Arr__observer_1a2d0de569a3cd5154dae84607183b8e5a" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>before_create_vertex</name></member>
      <member refid="classCGAL_1_1Arr__observer_1a896bfecdd794098e76fa8f529553afc0" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>before_detach</name></member>
      <member refid="classCGAL_1_1Arr__observer_1acfa9b375cb5ee99be8f768e21a5655b9" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>before_global_change</name></member>
      <member refid="classCGAL_1_1Arr__observer_1af394bcad92bd8c77ffbc51d6ca77bcb6" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>before_merge_edge</name></member>
      <member refid="classCGAL_1_1Arr__observer_1aa7140b155d3967c4413ee1d5b3fa701d" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>before_merge_face</name></member>
      <member refid="classCGAL_1_1Arr__observer_1acaa185193c45c4b27227266f80249e25" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>before_merge_fictitious_edge</name></member>
      <member refid="classCGAL_1_1Arr__observer_1a6b2e82e6972cf9bc4511d5f63ca70240" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>before_merge_inner_ccb</name></member>
      <member refid="classCGAL_1_1Arr__observer_1af2531e5f6160a7e6acf9f96fecb5636c" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>before_merge_outer_ccb</name></member>
      <member refid="classCGAL_1_1Arr__observer_1a75a6ba3386ed8c0e093705dd6ae0046c" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>before_modify_edge</name></member>
      <member refid="classCGAL_1_1Arr__observer_1a8c798f97511d6020598aa082c211563c" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>before_modify_vertex</name></member>
      <member refid="classCGAL_1_1Arr__observer_1a81c9cb40596cfb49c6672bd96f5b3833" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>before_move_inner_ccb</name></member>
      <member refid="classCGAL_1_1Arr__observer_1aeda4cf026fe1b3bd19173d6c0654feb0" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>before_move_isolated_vertex</name></member>
      <member refid="classCGAL_1_1Arr__observer_1a3fd4859baa5c34c72f019323fd839840" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>before_move_outer_ccb</name></member>
      <member refid="classCGAL_1_1Arr__observer_1a6e186bca266bc942812209459eb2a002" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>before_remove_edge</name></member>
      <member refid="classCGAL_1_1Arr__observer_1a5b059ccf2df0b60b66caff143699b539" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>before_remove_inner_ccb</name></member>
      <member refid="classCGAL_1_1Arr__observer_1a6174958dbe94f0434034a3078ebc168d" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>before_remove_outer_ccb</name></member>
      <member refid="classCGAL_1_1Arr__observer_1ab33ce3375488c57877dc60da6e36fbf8" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>before_remove_vertex</name></member>
      <member refid="classCGAL_1_1Arr__observer_1a852c0b7cfe3b8bf7c8b6488599ef6d26" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>before_split_edge</name></member>
      <member refid="classCGAL_1_1Arr__observer_1af8bf0f44edc4421030fc347af5569415" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>before_split_face</name></member>
      <member refid="classCGAL_1_1Arr__observer_1a9e09a1011a243b4e26346ebac5738134" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>before_split_fictitious_edge</name></member>
      <member refid="classCGAL_1_1Arr__observer_1aa82dfc3b8b681996da7bc892b74bedbe" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>before_split_inner_ccb</name></member>
      <member refid="classCGAL_1_1Arr__observer_1ac76ea2def9e1a1b3cad55e04bdfaeec6" prot="public" virt="virtual"><scope>CGAL::Arr_observer</scope><name>before_split_outer_ccb</name></member>
      <member refid="classCGAL_1_1Arr__observer_1ae33c9136740de935e10da41af87c65d7" prot="public" virt="non-virtual"><scope>CGAL::Arr_observer</scope><name>Ccb_halfedge_circulator</name></member>
      <member refid="classCGAL_1_1Arr__observer_1a46161a45c07ab733a18eab8e451b1d9b" prot="public" virt="non-virtual"><scope>CGAL::Arr_observer</scope><name>detach</name></member>
      <member refid="classCGAL_1_1Arr__observer_1a8bad28f8ad6c60686c129debd9d0b744" prot="public" virt="non-virtual"><scope>CGAL::Arr_observer</scope><name>Face_handle</name></member>
      <member refid="classCGAL_1_1Arr__observer_1a76ae52618160b36148e7f06f31798b5e" prot="public" virt="non-virtual"><scope>CGAL::Arr_observer</scope><name>Halfedge_handle</name></member>
      <member refid="classCGAL_1_1Arr__observer_1a3598deb997f214bab12715d0d2a7f239" prot="public" virt="non-virtual"><scope>CGAL::Arr_observer</scope><name>Point_2</name></member>
      <member refid="classCGAL_1_1Arr__observer_1af67ecaf27fcf935ba37dcb1229e51c18" prot="public" virt="non-virtual"><scope>CGAL::Arr_observer</scope><name>Vertex_handle</name></member>
      <member refid="classCGAL_1_1Arr__observer_1afc7143f65600e82af36aafb7aecea6e4" prot="public" virt="non-virtual"><scope>CGAL::Arr_observer</scope><name>X_monotone_curve_2</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
