<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Arr__accessor" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Arr_accessor</compoundname>
    <includes local="no">CGAL/Arr_accessor.h</includes>
    <templateparamlist>
      <param>
        <type>typename Arrangement</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classCGAL_1_1Arr__accessor_1aeb20c758f42fd8704c32b2270f874a62" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Arr_accessor&lt; Arrangement &gt;::Arrangement_2</definition>
        <argsstring></argsstring>
        <name>Arrangement_2</name>
        <briefdescription>
<para>the type of the associated arrangement. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_accessor.h" line="31" column="1" bodyfile="CGAL/Arr_accessor.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Arr__accessor_1ac6a599eecb92b7650ce56257dde7a277" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Arrangement__2_1a0510dde537a06aaefc2fc4d1643d9315" kindref="member">Arrangement_2::Point_2</ref></type>
        <definition>typedef Arrangement_2::Point_2 CGAL::Arr_accessor&lt; Arrangement &gt;::Point_2</definition>
        <argsstring></argsstring>
        <name>Point_2</name>
        <briefdescription>
<para>the point type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_accessor.h" line="36" column="1" bodyfile="CGAL/Arr_accessor.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Arr__accessor_1a7e96048bbe23996610db25c78d619580" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Arrangement__2_1aebf230ed9d864e22fe7844225f4ebfdc" kindref="member">Arrangement_2::X_monotone_curve_2</ref></type>
        <definition>typedef Arrangement_2::X_monotone_curve_2 CGAL::Arr_accessor&lt; Arrangement &gt;::X_monotone_curve_2</definition>
        <argsstring></argsstring>
        <name>X_monotone_curve_2</name>
        <briefdescription>
<para>the <formula id="2">$ x$</formula>-monotone curve type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_accessor.h" line="41" column="1" bodyfile="CGAL/Arr_accessor.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Arr__accessor_1a46090d27b02964ad0bd08af1bea35320" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Arrangement__2_1a7dac3eed2224beadf3658495bc671c49" kindref="member">Arrangement_2::Vertex_handle</ref></type>
        <definition>typedef Arrangement_2::Vertex_handle CGAL::Arr_accessor&lt; Arrangement &gt;::Vertex_handle</definition>
        <argsstring></argsstring>
        <name>Vertex_handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_accessor.h" line="46" column="1" bodyfile="CGAL/Arr_accessor.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Arr__accessor_1a9c04f2c50d4be02334144acf1bc82b6d" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Arrangement__2_1acdb9c49c90f9354f20c56efac599a7fe" kindref="member">Arrangement_2::Halfedge_handle</ref></type>
        <definition>typedef Arrangement_2::Halfedge_handle CGAL::Arr_accessor&lt; Arrangement &gt;::Halfedge_handle</definition>
        <argsstring></argsstring>
        <name>Halfedge_handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_accessor.h" line="51" column="1" bodyfile="CGAL/Arr_accessor.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Arr__accessor_1a6127cf866cb986cbfb66f662fc2ec21a" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Arrangement__2_1ad64170c3b8b8c4af16a4fb742bf56d48" kindref="member">Arrangement_2::Face_handle</ref></type>
        <definition>typedef Arrangement_2::Face_handle CGAL::Arr_accessor&lt; Arrangement &gt;::Face_handle</definition>
        <argsstring></argsstring>
        <name>Face_handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_accessor.h" line="56" column="1" bodyfile="CGAL/Arr_accessor.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Arr__accessor_1ac28d2028f84f7b052605bdaf16c3b611" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Arrangement__2_1ab4a594c193ca09a672dbe2fcafa090e9" kindref="member">Arrangement_2::Ccb_halfedge_circulator</ref></type>
        <definition>typedef Arrangement_2::Ccb_halfedge_circulator CGAL::Arr_accessor&lt; Arrangement &gt;::Ccb_halfedge_circulator</definition>
        <argsstring></argsstring>
        <name>Ccb_halfedge_circulator</name>
        <briefdescription>
<para>represents the boundary of a connected component (CCB). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_accessor.h" line="61" column="1" bodyfile="CGAL/Arr_accessor.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Arr__accessor_1a0d5063ad5bce6b81f89f85e89eb23422" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Arr_accessor&lt; Arrangement &gt;::Arr_accessor</definition>
        <argsstring>(Arrangement_2 &amp;arr)</argsstring>
        <name>Arr_accessor</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__accessor_1aeb20c758f42fd8704c32b2270f874a62" kindref="member">Arrangement_2</ref> &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
<para>constructs an accessor attached to the given arrangement <computeroutput>arr</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_accessor.h" line="72" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Accessing the Notification Functions</header>
      <memberdef kind="function" id="classCGAL_1_1Arr__accessor_1a14f7754837fdf361013b6025510b3b7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Arr_accessor&lt; Arrangement &gt;::notify_before_global_change</definition>
        <argsstring>()</argsstring>
        <name>notify_before_global_change</name>
        <briefdescription>
<para>notifies the arrangement observer that a global change is going to take place (for the usage of the global functions that operate on arrangements). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_accessor.h" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__accessor_1a6783ae34d5179b5822a16fd90469740a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Arr_accessor&lt; Arrangement &gt;::notify_after_global_change</definition>
        <argsstring>()</argsstring>
        <name>notify_after_global_change</name>
        <briefdescription>
<para>notifies the arrangement observer that a global change has taken place (for the usage of the global functions that operate on arrangements). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_accessor.h" line="92" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Arrangement Predicates</header>
      <memberdef kind="function" id="classCGAL_1_1Arr__accessor_1a43a05d8549efedafdcc2664ed65887c0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arr__accessor_1a9c04f2c50d4be02334144acf1bc82b6d" kindref="member">Halfedge_handle</ref></type>
        <definition>Halfedge_handle CGAL::Arr_accessor&lt; Arrangement &gt;::locate_around_vertex</definition>
        <argsstring>(Vertex_handle v, const X_monotone_curve_2 &amp;c) const</argsstring>
        <name>locate_around_vertex</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__accessor_1a46090d27b02964ad0bd08af1bea35320" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Arr__accessor_1a7e96048bbe23996610db25c78d619580" kindref="member">X_monotone_curve_2</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>locates a place for the curve <computeroutput>c</computeroutput> around the vertex <computeroutput>v</computeroutput> and returns a halfedge whose target is <computeroutput>v</computeroutput>, where c should be inserted between this halfedge and the next halfedge around <computeroutput>v</computeroutput> in a clockwise order. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_accessor.h" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__accessor_1a4adc80bdaa3893fd3fa2f1c0d2cef516" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CGAL::Arr_accessor&lt; Arrangement &gt;::halfedge_distance</definition>
        <argsstring>(Halfedge_const_handle e1, Halfedge_const_handle e2) const</argsstring>
        <name>halfedge_distance</name>
        <param>
          <type>Halfedge_const_handle</type>
          <declname>e1</declname>
        </param>
        <param>
          <type>Halfedge_const_handle</type>
          <declname>e2</declname>
        </param>
        <briefdescription>
<para>counts the number of edges along the path from <computeroutput>e1</computeroutput> to <computeroutput>e2</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>In case the two halfedges do not belong to the same connected component, the function returns (-1). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_accessor.h" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__accessor_1aa329b12181f4a1a62bc37265d344eae8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Arr_accessor&lt; Arrangement &gt;::is_inside_new_face</definition>
        <argsstring>(Halfedge_handle pred1, Halfedge_handle pred2, const X_monotone_curve_2 &amp;c) const</argsstring>
        <name>is_inside_new_face</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__accessor_1a9c04f2c50d4be02334144acf1bc82b6d" kindref="member">Halfedge_handle</ref></type>
          <declname>pred1</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__accessor_1a9c04f2c50d4be02334144acf1bc82b6d" kindref="member">Halfedge_handle</ref></type>
          <declname>pred2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Arr__accessor_1a7e96048bbe23996610db25c78d619580" kindref="member">X_monotone_curve_2</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>determines whether a new halfedge we are about to create, which is to be associated with the curve <computeroutput>c</computeroutput> and directed from <computeroutput>pred1-&gt;target()</computeroutput> to <computeroutput>pred2-&gt;target()</computeroutput>, lies on the inner CCB of the new face that will be created, introducing this new edge. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>pred1-&gt;target()</computeroutput> and <computeroutput>pred2-&gt;target()</computeroutput> are associated with <computeroutput>c</computeroutput>&apos;s endpoints. </para></simplesect>
<simplesect kind="pre"><para><computeroutput>pred1</computeroutput> and <computeroutput>pred2</computeroutput> belong to the same connected component, such that a new face is created by connecting <computeroutput>pred1-&gt;target()</computeroutput> and <computeroutput>pred2-&gt;target()</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_accessor.h" line="125" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__accessor_1ab0212cb1cfcc99e73a6283701f0eec6a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Arr_accessor&lt; Arrangement &gt;::point_is_in</definition>
        <argsstring>(const Point_2 &amp;p, Halfedge_const_handle he) const</argsstring>
        <name>point_is_in</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Arr__accessor_1ac6a599eecb92b7650ce56257dde7a277" kindref="member">Point_2</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>Halfedge_const_handle</type>
          <declname>he</declname>
        </param>
        <briefdescription>
<para>determines whether a given point lies within the region bounded by a boundary of the connected component that <computeroutput>he</computeroutput> belongs to. </para>        </briefdescription>
        <detaileddescription>
<para>Note that if the function returns <computeroutput>true</computeroutput>, then <computeroutput>p</computeroutput> is contained within <computeroutput>he-&gt;face()</computeroutput> (but not on its boundary), or inside one of the holes inside this face, or it may coincide with an isolated vertex in this face. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_accessor.h" line="136" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__accessor_1aa3889732e90b8a9e1acfa3bff37aef7a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Arr_accessor&lt; Arrangement &gt;::is_on_outer_boundary</definition>
        <argsstring>(Halfedge_const_handle he) const</argsstring>
        <name>is_on_outer_boundary</name>
        <param>
          <type>Halfedge_const_handle</type>
          <declname>he</declname>
        </param>
        <briefdescription>
<para>determines whether <computeroutput>he</computeroutput> lies on the outer boundary of its incident face. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_accessor.h" line="143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__accessor_1a66c58ccc4c2112d7783ccdcb23364d17" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Arr_accessor&lt; Arrangement &gt;::is_on_inner_boundary</definition>
        <argsstring>(Halfedge_const_handle he) const</argsstring>
        <name>is_on_inner_boundary</name>
        <param>
          <type>Halfedge_const_handle</type>
          <declname>he</declname>
        </param>
        <briefdescription>
<para>determines whether <computeroutput>he</computeroutput> lies on the inner boundary of its incident face (that is, whether it lies on the boundary of one of the holes in this face). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_accessor.h" line="150" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Arrangement Modifiers</header>
      <memberdef kind="function" id="classCGAL_1_1Arr__accessor_1aec869b4150a9f7a2c16417063912cb69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arr__accessor_1a46090d27b02964ad0bd08af1bea35320" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Arr_accessor&lt; Arrangement &gt;::create_vertex</definition>
        <argsstring>(const Point_2 &amp;p)</argsstring>
        <name>create_vertex</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Arr__accessor_1ac6a599eecb92b7650ce56257dde7a277" kindref="member">Point_2</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>creates a new vertex an associates it with the point <computeroutput>p</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>There is no existing vertex already associated with <computeroutput>p</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_accessor.h" line="161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__accessor_1aa3ced5776d1875190b48847ce373bf14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arr__accessor_1a9c04f2c50d4be02334144acf1bc82b6d" kindref="member">Halfedge_handle</ref></type>
        <definition>Halfedge_handle CGAL::Arr_accessor&lt; Arrangement &gt;::insert_in_face_interior_ex</definition>
        <argsstring>(const X_monotone_curve_2 &amp;c, Face_handle f, Vertex_handle v1, Vertex_handle v2, Comparison_result res)</argsstring>
        <name>insert_in_face_interior_ex</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Arr__accessor_1a7e96048bbe23996610db25c78d619580" kindref="member">X_monotone_curve_2</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__accessor_1a6127cf866cb986cbfb66f662fc2ec21a" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__accessor_1a46090d27b02964ad0bd08af1bea35320" kindref="member">Vertex_handle</ref></type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__accessor_1a46090d27b02964ad0bd08af1bea35320" kindref="member">Vertex_handle</ref></type>
          <declname>v2</declname>
        </param>
        <param>
          <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Comparison_result</ref></type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>inserts the curve <computeroutput>c</computeroutput> as a new hole (inner component) of the face <computeroutput>f</computeroutput>, connecting the two isolated vertices <computeroutput>v1</computeroutput> and <computeroutput>v2</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>res</computeroutput> is the comparison result between these two end-vertices. The function returns a handle for one of the new halfedges corresponding to the inserted curve, directed from <computeroutput>v1</computeroutput> to <computeroutput>v2</computeroutput>. <simplesect kind="pre"><para><computeroutput>v1</computeroutput> and <computeroutput>v2</computeroutput> are associated with <computeroutput>c</computeroutput>&apos;s endpoints, that they lie of <computeroutput>f</computeroutput>&apos;s interior and that and that they have no incident edges. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_accessor.h" line="171" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__accessor_1a754e3bd50e6b6a788af51528c0d441d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arr__accessor_1a9c04f2c50d4be02334144acf1bc82b6d" kindref="member">Halfedge_handle</ref></type>
        <definition>Halfedge_handle CGAL::Arr_accessor&lt; Arrangement &gt;::insert_from_vertex_ex</definition>
        <argsstring>(const X_monotone_curve_2 &amp;c, Halfedge_handle pred, Vertex_handle v, Comparison_result res)</argsstring>
        <name>insert_from_vertex_ex</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Arr__accessor_1a7e96048bbe23996610db25c78d619580" kindref="member">X_monotone_curve_2</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__accessor_1a9c04f2c50d4be02334144acf1bc82b6d" kindref="member">Halfedge_handle</ref></type>
          <declname>pred</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__accessor_1a46090d27b02964ad0bd08af1bea35320" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Comparison_result</ref></type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>inserts the curve <computeroutput>c</computeroutput> into the arrangement, such that one of its endpoints corresponds to an arrangement, which is the target vertex of the halfedge <computeroutput>pred</computeroutput>, such that <computeroutput>c</computeroutput> is inserted to the circular list of halfedges around <computeroutput>pred-&gt;target()</computeroutput> right between <computeroutput>pred</computeroutput> and its successor. </para>        </briefdescription>
        <detaileddescription>
<para>The other end-vertex is given by an isolated vertex <computeroutput>v</computeroutput>, where <computeroutput>res</computeroutput> is the comparison result between <computeroutput>pred-&gt;target()</computeroutput> and <computeroutput>v</computeroutput>. The function returns a handle for one of the new halfedges directed from <computeroutput>pred-&gt;target()</computeroutput> to <computeroutput>v</computeroutput>. <simplesect kind="pre"><para><computeroutput>pred-&gt;target()</computeroutput> and <computeroutput>v</computeroutput> are associated with <computeroutput>c</computeroutput>&apos;s endpoints and that and that <computeroutput>v</computeroutput> has no incident edges. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_accessor.h" line="189" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__accessor_1a109779c99a70e720faf43b3650137160" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arr__accessor_1a9c04f2c50d4be02334144acf1bc82b6d" kindref="member">Halfedge_handle</ref></type>
        <definition>Halfedge_handle CGAL::Arr_accessor&lt; Arrangement &gt;::insert_at_vertices_ex</definition>
        <argsstring>(const X_monotone_curve_2 &amp;c, Halfedge_handle pred1, Halfedge_handle pred2, Comparison_result res, bool &amp;new_face)</argsstring>
        <name>insert_at_vertices_ex</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Arr__accessor_1a7e96048bbe23996610db25c78d619580" kindref="member">X_monotone_curve_2</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__accessor_1a9c04f2c50d4be02334144acf1bc82b6d" kindref="member">Halfedge_handle</ref></type>
          <declname>pred1</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__accessor_1a9c04f2c50d4be02334144acf1bc82b6d" kindref="member">Halfedge_handle</ref></type>
          <declname>pred2</declname>
        </param>
        <param>
          <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Comparison_result</ref></type>
          <declname>res</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>new_face</declname>
        </param>
        <briefdescription>
<para>inserts the curve <computeroutput>c</computeroutput> into the arrangement, such that both <computeroutput>c</computeroutput>&apos;s endpoints correspond to existing arrangement vertices, given by <computeroutput>pred1-&gt;target()</computeroutput> and <computeroutput>pred2-&gt;target()</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>res</computeroutput> is the comparison result between these two end-vertices. The function creates a new halfedge pair that connects the two vertices (with <computeroutput>pred1</computeroutput> and <computeroutput>pred2</computeroutput> indicate the exact place for these halfedges around the two target vertices) and returns a handle for the halfedge directed from <computeroutput>pred1-&gt;target()</computeroutput> to <computeroutput>pred2-&gt;target()</computeroutput>. The output flag <computeroutput>new_face</computeroutput> indicates whether a new face has been created following the insertion of the new curve. <simplesect kind="pre"><para><computeroutput>pred1-&gt;target()</computeroutput> and <computeroutput>pred2-&gt;target()</computeroutput> are associated with <computeroutput>c</computeroutput>&apos;s endpoints and that if a new face is created, then <computeroutput>is_inside_new_face (pred1, pred2, c)</computeroutput> is <computeroutput>true</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_accessor.h" line="207" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__accessor_1af472b54d0719525858a383cc967fd499" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Arr_accessor&lt; Arrangement &gt;::insert_isolated_vertex</definition>
        <argsstring>(Face_handle f, Vertex_handle v)</argsstring>
        <name>insert_isolated_vertex</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__accessor_1a6127cf866cb986cbfb66f662fc2ec21a" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__accessor_1a46090d27b02964ad0bd08af1bea35320" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>inserts <computeroutput>v</computeroutput> as an isolated vertex inside <computeroutput>f</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>v-&gt;point()</computeroutput> is contained in the interior of the given face. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_accessor.h" line="217" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__accessor_1a36c3310ead8225f6f19c078ad2f676b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Arr_accessor&lt; Arrangement &gt;::move_hole</definition>
        <argsstring>(Face_handle f1, Face_handle f2, Ccb_halfedge_circulator hole)</argsstring>
        <name>move_hole</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__accessor_1a6127cf866cb986cbfb66f662fc2ec21a" kindref="member">Face_handle</ref></type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__accessor_1a6127cf866cb986cbfb66f662fc2ec21a" kindref="member">Face_handle</ref></type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__accessor_1ac28d2028f84f7b052605bdaf16c3b611" kindref="member">Ccb_halfedge_circulator</ref></type>
          <declname>hole</declname>
        </param>
        <briefdescription>
<para>moves the given hole from the interior of the face <computeroutput>f1</computeroutput> inside the face <computeroutput>f2</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>hole</computeroutput> is currently contained in <computeroutput>f1</computeroutput> and should be moved to <computeroutput>f2</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_accessor.h" line="224" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__accessor_1ab4d7922d5e7d45bf262d1b4f43566486" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Arr_accessor&lt; Arrangement &gt;::move_isolated_vertex</definition>
        <argsstring>(Face_handle f1, Face_handle f2, Vertex_handle v)</argsstring>
        <name>move_isolated_vertex</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__accessor_1a6127cf866cb986cbfb66f662fc2ec21a" kindref="member">Face_handle</ref></type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__accessor_1a6127cf866cb986cbfb66f662fc2ec21a" kindref="member">Face_handle</ref></type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__accessor_1a46090d27b02964ad0bd08af1bea35320" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>moves the given isolated vertex from the interior of the face <computeroutput>f1</computeroutput> inside the face <computeroutput>f2</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>v</computeroutput> is indeed an isolated vertex currently contained in <computeroutput>f1</computeroutput> and should be moved to <computeroutput>f2</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_accessor.h" line="232" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__accessor_1ae7657411cb05c0179cfeb8adb04a7bb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Arr_accessor&lt; Arrangement &gt;::relocate_in_new_face</definition>
        <argsstring>(Halfedge_handle he)</argsstring>
        <name>relocate_in_new_face</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__accessor_1a9c04f2c50d4be02334144acf1bc82b6d" kindref="member">Halfedge_handle</ref></type>
          <declname>he</declname>
        </param>
        <briefdescription>
<para>relocates all holes and isolated vertices to their proper position immediately after a face has split due to the insertion of a new halfedge, namely after <computeroutput><ref refid="classCGAL_1_1Arr__accessor_1a109779c99a70e720faf43b3650137160" kindref="member">insert_at_vertices_ex()</ref></computeroutput> was invoked and indicated that a new face has been created. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>he</computeroutput> is the halfegde returned by <computeroutput><ref refid="classCGAL_1_1Arr__accessor_1a109779c99a70e720faf43b3650137160" kindref="member">insert_at_vertices_ex()</ref></computeroutput>, such that <computeroutput>he-&gt;twin()-&gt;face</computeroutput> is the face that has just been split and <computeroutput>he-&gt;face()</computeroutput> is the newly created face. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_accessor.h" line="244" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__accessor_1ab4e92dfa2491c092cd3361b1d278960e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Arr_accessor&lt; Arrangement &gt;::relocate_holes_in_new_face</definition>
        <argsstring>(Halfedge_handle he)</argsstring>
        <name>relocate_holes_in_new_face</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__accessor_1a9c04f2c50d4be02334144acf1bc82b6d" kindref="member">Halfedge_handle</ref></type>
          <declname>he</declname>
        </param>
        <briefdescription>
<para>relocates all holes in a new face, as detailed above. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_accessor.h" line="249" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__accessor_1ae858b59f9d266ffbcceb025f31a237aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Arr_accessor&lt; Arrangement &gt;::relocate_isolated_vertices_in_new_face</definition>
        <argsstring>(Halfedge_handle he)</argsstring>
        <name>relocate_isolated_vertices_in_new_face</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__accessor_1a9c04f2c50d4be02334144acf1bc82b6d" kindref="member">Halfedge_handle</ref></type>
          <declname>he</declname>
        </param>
        <briefdescription>
<para>relocates all isolated vertices in a new face, as detailed above. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_accessor.h" line="254" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__accessor_1a6d0f4e0325633a5dd66520dc5839439b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arr__accessor_1a46090d27b02964ad0bd08af1bea35320" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Arr_accessor&lt; Arrangement &gt;::modify_vertex_ex</definition>
        <argsstring>(Vertex_handle v, const Point_2 &amp;p)</argsstring>
        <name>modify_vertex_ex</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__accessor_1a46090d27b02964ad0bd08af1bea35320" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Arr__accessor_1ac6a599eecb92b7650ce56257dde7a277" kindref="member">Point_2</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>modifies the point associated with the vertex <computeroutput>v</computeroutput> (the point may be geometrically different than the one currently associated with <computeroutput>v</computeroutput>). </para>        </briefdescription>
        <detaileddescription>
<para>The function returns a handle to the modified vertex (same as <computeroutput>v</computeroutput>). <simplesect kind="pre"><para>No other arrangement vertex is already associated with <computeroutput>p</computeroutput>. </para></simplesect>
<simplesect kind="pre"><para>The topology of the arrangement does not change after the vertex point is modified. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_accessor.h" line="263" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__accessor_1a45cad54127761fdb2e965dbe25cb1fc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arr__accessor_1a9c04f2c50d4be02334144acf1bc82b6d" kindref="member">Halfedge_handle</ref></type>
        <definition>Halfedge_handle CGAL::Arr_accessor&lt; Arrangement &gt;::modify_edge_ex</definition>
        <argsstring>(Halfedge_handle e, const X_monotone_curve_2 &amp;c)</argsstring>
        <name>modify_edge_ex</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__accessor_1a9c04f2c50d4be02334144acf1bc82b6d" kindref="member">Halfedge_handle</ref></type>
          <declname>e</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Arr__accessor_1a7e96048bbe23996610db25c78d619580" kindref="member">X_monotone_curve_2</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>modifies the <formula id="2">$ x$</formula>-monotone curve associated with the edge <computeroutput>e</computeroutput> (the curve <computeroutput>c</computeroutput> may be geometrically different than the one currently associated with <computeroutput>e</computeroutput>). </para>        </briefdescription>
        <detaileddescription>
<para>The function returns a handle to the modified edge (same as <computeroutput>e</computeroutput>). <simplesect kind="pre"><para>The interior of <computeroutput>c</computeroutput> is disjoint from all existing arrangement vertices and edges. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_accessor.h" line="273" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__accessor_1a5d0435e8ff0b92691d89db19016c103b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arr__accessor_1a9c04f2c50d4be02334144acf1bc82b6d" kindref="member">Halfedge_handle</ref></type>
        <definition>Halfedge_handle CGAL::Arr_accessor&lt; Arrangement &gt;::split_edge_ex</definition>
        <argsstring>(Halfedge_handle he, const Point_2 &amp;p, const X_monotone_curve_2 &amp;c1, const X_monotone_curve_2 &amp;c2)</argsstring>
        <name>split_edge_ex</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__accessor_1a9c04f2c50d4be02334144acf1bc82b6d" kindref="member">Halfedge_handle</ref></type>
          <declname>he</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Arr__accessor_1ac6a599eecb92b7650ce56257dde7a277" kindref="member">Point_2</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Arr__accessor_1a7e96048bbe23996610db25c78d619580" kindref="member">X_monotone_curve_2</ref> &amp;</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Arr__accessor_1a7e96048bbe23996610db25c78d619580" kindref="member">X_monotone_curve_2</ref> &amp;</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
<para>splits a given edge into two at the split point <computeroutput>p</computeroutput>, and associate the x-monotone curves <computeroutput>c1</computeroutput> and <computeroutput>c2</computeroutput> with the resulting edges, such that <computeroutput>c1</computeroutput> connects <computeroutput>he-&gt;source()</computeroutput> with <computeroutput>p</computeroutput> and <computeroutput>c2</computeroutput> connects <computeroutput>p</computeroutput> with <computeroutput>he-&gt;target()</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The function return a handle to the split halfedge directed from <computeroutput>he-&gt;source()</computeroutput> to the split point <computeroutput>p</computeroutput>. <simplesect kind="pre"><para>The endpoints of <computeroutput>c1</computeroutput> and <computeroutput>c2</computeroutput> correspond to <computeroutput>p</computeroutput> and to <computeroutput>he</computeroutput>&apos;s end-vertices, as indicated above. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_accessor.h" line="284" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__accessor_1a4fc4c79d6ac645c2c66e08ea05ed760f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arr__accessor_1a9c04f2c50d4be02334144acf1bc82b6d" kindref="member">Halfedge_handle</ref></type>
        <definition>Halfedge_handle CGAL::Arr_accessor&lt; Arrangement &gt;::split_edge_ex</definition>
        <argsstring>(Halfedge_handle he, Vertex_handle v, const X_monotone_curve_2 &amp;c1, const X_monotone_curve_2 &amp;c2)</argsstring>
        <name>split_edge_ex</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__accessor_1a9c04f2c50d4be02334144acf1bc82b6d" kindref="member">Halfedge_handle</ref></type>
          <declname>he</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arr__accessor_1a46090d27b02964ad0bd08af1bea35320" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Arr__accessor_1a7e96048bbe23996610db25c78d619580" kindref="member">X_monotone_curve_2</ref> &amp;</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Arr__accessor_1a7e96048bbe23996610db25c78d619580" kindref="member">X_monotone_curve_2</ref> &amp;</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
<para>splits a given edge into two at by the vertex <computeroutput>v</computeroutput>, and associate the x-monotone curves <computeroutput>c1</computeroutput> and <computeroutput>c2</computeroutput> with the resulting edges, such that <computeroutput>c1</computeroutput> connects <computeroutput>he-&gt;source()</computeroutput> with <computeroutput>v</computeroutput> and <computeroutput>c2</computeroutput> connects <computeroutput>v</computeroutput> with <computeroutput>he-&gt;target()</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The function return a handle to the split halfedge directed from <computeroutput>he-&gt;source()</computeroutput> to <computeroutput>v</computeroutput>. <simplesect kind="pre"><para>The endpoints of <computeroutput>c1</computeroutput> and <computeroutput>c2</computeroutput> correspond to <computeroutput>v</computeroutput> and to <computeroutput>he</computeroutput>&apos;s end-vertices, as indicated above. It is also assumed that <computeroutput>v</computeroutput> has no incident edges. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_accessor.h" line="297" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arr__accessor_1ad093d1c2de94dc56d95bd1ae4a35a495" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arr__accessor_1a6127cf866cb986cbfb66f662fc2ec21a" kindref="member">Face_handle</ref></type>
        <definition>Face_handle CGAL::Arr_accessor&lt; Arrangement &gt;::remove_edge_ex</definition>
        <argsstring>(Halfedge_handle he, bool remove_source=true, bool remove_target=true)</argsstring>
        <name>remove_edge_ex</name>
        <param>
          <type><ref refid="classCGAL_1_1Arr__accessor_1a9c04f2c50d4be02334144acf1bc82b6d" kindref="member">Halfedge_handle</ref></type>
          <declname>he</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>remove_source</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>remove_target</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>removes the edge <computeroutput>he</computeroutput> from the arrangement, such that if the edge removal causes the creation of a new hole, <computeroutput>he-&gt;target()</computeroutput> lies on the boundary of this hole. </para>        </briefdescription>
        <detaileddescription>
<para>The flags <computeroutput>remove_source</computeroutput> and <computeroutput>remove_target</computeroutput> indicate whether the end-vertices of <computeroutput>he</computeroutput> should be removed as well, in case they have no other incident edges. If the operation causes two faces to merge, the merged face is returned. Otherwise, the face to which the edge was incident is returned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arr_accessor.h" line="310" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="classCGAL_1_1Arr__accessor_1arr_refarr_access"/></para><para><computeroutput><ref refid="classCGAL_1_1Arr__accessor" kindref="compound">Arr_accessor</ref></computeroutput> provides an access to some of the private <computeroutput>Arrangement</computeroutput> functions. Users may use these functions to achieve more efficient programs when they have the exact topological information required by the specialized functions.</para><para>It is however highly recommended to be very careful when using the accessor functions that modify the arrangement. As we have just mentioned, these functions have very specific requirement on their input on one hand, and perform no preconditions on the other hand, so providing incorrect topological input may invalidate the arrangement. </para>    </detaileddescription>
    <location file="CGAL/Arr_accessor.h" line="22" column="1" bodyfile="CGAL/Arr_accessor.h" bodystart="22" bodyend="316"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Arr__accessor_1a0d5063ad5bce6b81f89f85e89eb23422" prot="public" virt="non-virtual"><scope>CGAL::Arr_accessor</scope><name>Arr_accessor</name></member>
      <member refid="classCGAL_1_1Arr__accessor_1aeb20c758f42fd8704c32b2270f874a62" prot="public" virt="non-virtual"><scope>CGAL::Arr_accessor</scope><name>Arrangement_2</name></member>
      <member refid="classCGAL_1_1Arr__accessor_1ac28d2028f84f7b052605bdaf16c3b611" prot="public" virt="non-virtual"><scope>CGAL::Arr_accessor</scope><name>Ccb_halfedge_circulator</name></member>
      <member refid="classCGAL_1_1Arr__accessor_1aec869b4150a9f7a2c16417063912cb69" prot="public" virt="non-virtual"><scope>CGAL::Arr_accessor</scope><name>create_vertex</name></member>
      <member refid="classCGAL_1_1Arr__accessor_1a6127cf866cb986cbfb66f662fc2ec21a" prot="public" virt="non-virtual"><scope>CGAL::Arr_accessor</scope><name>Face_handle</name></member>
      <member refid="classCGAL_1_1Arr__accessor_1a4adc80bdaa3893fd3fa2f1c0d2cef516" prot="public" virt="non-virtual"><scope>CGAL::Arr_accessor</scope><name>halfedge_distance</name></member>
      <member refid="classCGAL_1_1Arr__accessor_1a9c04f2c50d4be02334144acf1bc82b6d" prot="public" virt="non-virtual"><scope>CGAL::Arr_accessor</scope><name>Halfedge_handle</name></member>
      <member refid="classCGAL_1_1Arr__accessor_1a109779c99a70e720faf43b3650137160" prot="public" virt="non-virtual"><scope>CGAL::Arr_accessor</scope><name>insert_at_vertices_ex</name></member>
      <member refid="classCGAL_1_1Arr__accessor_1a754e3bd50e6b6a788af51528c0d441d1" prot="public" virt="non-virtual"><scope>CGAL::Arr_accessor</scope><name>insert_from_vertex_ex</name></member>
      <member refid="classCGAL_1_1Arr__accessor_1aa3ced5776d1875190b48847ce373bf14" prot="public" virt="non-virtual"><scope>CGAL::Arr_accessor</scope><name>insert_in_face_interior_ex</name></member>
      <member refid="classCGAL_1_1Arr__accessor_1af472b54d0719525858a383cc967fd499" prot="public" virt="non-virtual"><scope>CGAL::Arr_accessor</scope><name>insert_isolated_vertex</name></member>
      <member refid="classCGAL_1_1Arr__accessor_1aa329b12181f4a1a62bc37265d344eae8" prot="public" virt="non-virtual"><scope>CGAL::Arr_accessor</scope><name>is_inside_new_face</name></member>
      <member refid="classCGAL_1_1Arr__accessor_1a66c58ccc4c2112d7783ccdcb23364d17" prot="public" virt="non-virtual"><scope>CGAL::Arr_accessor</scope><name>is_on_inner_boundary</name></member>
      <member refid="classCGAL_1_1Arr__accessor_1aa3889732e90b8a9e1acfa3bff37aef7a" prot="public" virt="non-virtual"><scope>CGAL::Arr_accessor</scope><name>is_on_outer_boundary</name></member>
      <member refid="classCGAL_1_1Arr__accessor_1a43a05d8549efedafdcc2664ed65887c0" prot="public" virt="non-virtual"><scope>CGAL::Arr_accessor</scope><name>locate_around_vertex</name></member>
      <member refid="classCGAL_1_1Arr__accessor_1a45cad54127761fdb2e965dbe25cb1fc1" prot="public" virt="non-virtual"><scope>CGAL::Arr_accessor</scope><name>modify_edge_ex</name></member>
      <member refid="classCGAL_1_1Arr__accessor_1a6d0f4e0325633a5dd66520dc5839439b" prot="public" virt="non-virtual"><scope>CGAL::Arr_accessor</scope><name>modify_vertex_ex</name></member>
      <member refid="classCGAL_1_1Arr__accessor_1a36c3310ead8225f6f19c078ad2f676b5" prot="public" virt="non-virtual"><scope>CGAL::Arr_accessor</scope><name>move_hole</name></member>
      <member refid="classCGAL_1_1Arr__accessor_1ab4d7922d5e7d45bf262d1b4f43566486" prot="public" virt="non-virtual"><scope>CGAL::Arr_accessor</scope><name>move_isolated_vertex</name></member>
      <member refid="classCGAL_1_1Arr__accessor_1a6783ae34d5179b5822a16fd90469740a" prot="public" virt="non-virtual"><scope>CGAL::Arr_accessor</scope><name>notify_after_global_change</name></member>
      <member refid="classCGAL_1_1Arr__accessor_1a14f7754837fdf361013b6025510b3b7e" prot="public" virt="non-virtual"><scope>CGAL::Arr_accessor</scope><name>notify_before_global_change</name></member>
      <member refid="classCGAL_1_1Arr__accessor_1ac6a599eecb92b7650ce56257dde7a277" prot="public" virt="non-virtual"><scope>CGAL::Arr_accessor</scope><name>Point_2</name></member>
      <member refid="classCGAL_1_1Arr__accessor_1ab0212cb1cfcc99e73a6283701f0eec6a" prot="public" virt="non-virtual"><scope>CGAL::Arr_accessor</scope><name>point_is_in</name></member>
      <member refid="classCGAL_1_1Arr__accessor_1ab4e92dfa2491c092cd3361b1d278960e" prot="public" virt="non-virtual"><scope>CGAL::Arr_accessor</scope><name>relocate_holes_in_new_face</name></member>
      <member refid="classCGAL_1_1Arr__accessor_1ae7657411cb05c0179cfeb8adb04a7bb8" prot="public" virt="non-virtual"><scope>CGAL::Arr_accessor</scope><name>relocate_in_new_face</name></member>
      <member refid="classCGAL_1_1Arr__accessor_1ae858b59f9d266ffbcceb025f31a237aa" prot="public" virt="non-virtual"><scope>CGAL::Arr_accessor</scope><name>relocate_isolated_vertices_in_new_face</name></member>
      <member refid="classCGAL_1_1Arr__accessor_1ad093d1c2de94dc56d95bd1ae4a35a495" prot="public" virt="non-virtual"><scope>CGAL::Arr_accessor</scope><name>remove_edge_ex</name></member>
      <member refid="classCGAL_1_1Arr__accessor_1a5d0435e8ff0b92691d89db19016c103b" prot="public" virt="non-virtual"><scope>CGAL::Arr_accessor</scope><name>split_edge_ex</name></member>
      <member refid="classCGAL_1_1Arr__accessor_1a4fc4c79d6ac645c2c66e08ea05ed760f" prot="public" virt="non-virtual"><scope>CGAL::Arr_accessor</scope><name>split_edge_ex</name></member>
      <member refid="classCGAL_1_1Arr__accessor_1a46090d27b02964ad0bd08af1bea35320" prot="public" virt="non-virtual"><scope>CGAL::Arr_accessor</scope><name>Vertex_handle</name></member>
      <member refid="classCGAL_1_1Arr__accessor_1a7e96048bbe23996610db25c78d619580" prot="public" virt="non-virtual"><scope>CGAL::Arr_accessor</scope><name>X_monotone_curve_2</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
