<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classArrTraits_1_1CompareXNearLimit__2" kind="class" language="C++" prot="public">
    <compoundname>ArrTraits::CompareXNearLimit_2</compoundname>
    <includes local="no">Concepts/ArrTraits--CompareXNearLimit_2.h</includes>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <description><para>A model of this concept must provide: </para></description>
      <memberdef kind="function" id="classArrTraits_1_1CompareXNearLimit__2_1a79e619edd82c4df23f24a39fd7298b2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Comparison_result</ref></type>
        <definition>Comparison_result ArrTraits::CompareXNearLimit_2::operator()</definition>
        <argsstring>(const ArrTraits::X_monotone_curve_2 &amp;xcv1, const ArrTraits::X_monotone_curve_2 &amp;xcv2, Arr_curve_end ce)</argsstring>
        <name>operator()</name>
        <param>
          <type>const ArrTraits::X_monotone_curve_2 &amp;</type>
          <declname>xcv1</declname>
        </param>
        <param>
          <type>const ArrTraits::X_monotone_curve_2 &amp;</type>
          <declname>xcv2</declname>
        </param>
        <param>
          <type>Arr_curve_end</type>
          <declname>ce</declname>
        </param>
        <briefdescription>
<para>Given two <formula id="2">$ x$</formula>-monotone curves <computeroutput>xcv1</computeroutput> and <computeroutput>xcv2</computeroutput> and an enumeration <computeroutput>ce</computeroutput> that specifies either the minimum ends or the maximum ends of the curves where the curves have a vertical asymptote, compares the <formula id="2">$ x$</formula>-coordinate of the curves near their respective ends. </para>        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>SMALLER</computeroutput>, <computeroutput>EQUAL</computeroutput>, or <computeroutput>LARGER</computeroutput> accordingly. More precisely, compares the <formula id="2">$ x$</formula>-coordinates of the horizontal projection of a point <formula id="46">$ p$</formula> onto <computeroutput>xcv1</computeroutput> and <computeroutput>xcv2</computeroutput>. If <computeroutput>xcv1</computeroutput> and <computeroutput>xcv2</computeroutput> approach the bottom boundary-side, <formula id="46">$ p$</formula> is located far to the bottom, such that the result is invariant under a translation of <formula id="46">$ p$</formula> farther to the bottom. If <computeroutput>xcv1</computeroutput> and <computeroutput>xcv2</computeroutput> approach the top boundary-side, <formula id="46">$ p$</formula> is located far to the top in a similar manner. <simplesect kind="pre"><para>The <formula id="2">$ x$</formula>-coordinates of the limits of the curves at their respective ends are equal. That is, <computeroutput>compare_x_at_limit_2</computeroutput>(<computeroutput>xcv1</computeroutput>, <computeroutput>xcv2</computeroutput>, <computeroutput>ce</computeroutput>) = <computeroutput>EQUAL</computeroutput>. </para></simplesect>
<simplesect kind="pre"><para><computeroutput>parameter_space_in_y_2</computeroutput>(<computeroutput>xcv1</computeroutput>, <computeroutput>ce</computeroutput>) = <computeroutput>parameter_space_in_y_2</computeroutput>(<computeroutput>xcv2</computeroutput>, <computeroutput>ce</computeroutput>). </para></simplesect>
<simplesect kind="pre"><para><computeroutput>parameter_space_in_y_2</computeroutput>(<computeroutput>xcv1</computeroutput>, <computeroutput>ce</computeroutput>) <formula id="288">$ \neq$</formula> <computeroutput>ARR_INTERIOR</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/ArrTraits--CompareXNearLimit_2.h" line="37" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para> <xrefsect id="refines_1_refines000015"><xreftitle>Refines</xreftitle><xrefdescription><para>AdaptableTernaryFunction </para></xrefdescription></xrefsect></para><para><xrefsect id="hasModels_1_hasModels000023"><xreftitle>Has Models</xreftitle><xrefdescription><para><ref refid="classArrangementOpenBoundaryTraits__2_1a86f6712e65df65a28247131749bcba56" kindref="member">ArrangementOpenBoundaryTraits_2::Compare_x_near_limit_2</ref> </para></xrefdescription></xrefsect></para>    </detaileddescription>
    <location file="Concepts/ArrTraits--CompareXNearLimit_2.h" line="12" column="1" bodyfile="Concepts/ArrTraits--CompareXNearLimit_2.h" bodystart="12" bodyend="43"/>
    <listofallmembers>
      <member refid="classArrTraits_1_1CompareXNearLimit__2_1a79e619edd82c4df23f24a39fd7298b2a" prot="public" virt="non-virtual"><scope>ArrTraits::CompareXNearLimit_2</scope><name>operator()</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
