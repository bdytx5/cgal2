<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__PkgBoxIntersectionD__box__self__intersection__all__pairs__d" kind="group">
    <compoundname>PkgBoxIntersectionD_box_self_intersection_all_pairs_d</compoundname>
    <title>CGAL::box_self_intersection_all_pairs_d()</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgBoxIntersectionD__box__self__intersection__all__pairs__d_1ga8aa29688ec201c07f9a9db15e793f920" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIter</type>
          </param>
          <param>
            <type>class Callback</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::box_self_intersection_all_pairs_d</definition>
        <argsstring>(ForwardIter begin, ForwardIter end, Callback callback, CGAL::Box_intersection_d::Topology topology=CGAL::Box_intersection_d::CLOSED)</argsstring>
        <name>box_self_intersection_all_pairs_d</name>
        <param>
          <type>ForwardIter</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>ForwardIter</type>
          <declname>end</declname>
        </param>
        <param>
          <type>Callback</type>
          <declname>callback</declname>
        </param>
        <param>
          <type><ref refid="namespaceCGAL_1_1Box__intersection__d_1ac1b7703e33d0fe5d9d484493189c9cd8" kindref="member">CGAL::Box_intersection_d::Topology</ref></type>
          <declname>topology</declname>
          <defval><ref refid="namespaceCGAL_1_1Box__intersection__d_1ac1b7703e33d0fe5d9d484493189c9cd8af287bd8f3714b65e743d5ec571e89b82" kindref="member">CGAL::Box_intersection_d::CLOSED</ref></defval>
        </param>
        <briefdescription>
<para>Invocation of box intersection with default box traits <computeroutput><ref refid="structCGAL_1_1Box__intersection__d_1_1Box__traits__d" kindref="compound">Box_intersection_d::Box_traits_d</ref>&lt;Box_handle&gt;</computeroutput>, where <computeroutput>Box_handle</computeroutput> corresponds to the iterator value type of <computeroutput>ForwardIter</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/box_intersection_d.h" line="389" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBoxIntersectionD__box__self__intersection__all__pairs__d_1ga5e1f7dfe697fd2c622bb8c8db7ece452" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIter</type>
          </param>
          <param>
            <type>class Callback</type>
          </param>
          <param>
            <type>class BoxTraits</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::box_self_intersection_all_pairs_d</definition>
        <argsstring>(ForwardIter begin, ForwardIter end, Callback callback, BoxTraits box_traits, CGAL::Box_intersection_d::Topology topology=CGAL::Box_intersection_d::CLOSED)</argsstring>
        <name>box_self_intersection_all_pairs_d</name>
        <param>
          <type>ForwardIter</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>ForwardIter</type>
          <declname>end</declname>
        </param>
        <param>
          <type>Callback</type>
          <declname>callback</declname>
        </param>
        <param>
          <type>BoxTraits</type>
          <declname>box_traits</declname>
        </param>
        <param>
          <type><ref refid="namespaceCGAL_1_1Box__intersection__d_1ac1b7703e33d0fe5d9d484493189c9cd8" kindref="member">CGAL::Box_intersection_d::Topology</ref></type>
          <declname>topology</declname>
          <defval><ref refid="namespaceCGAL_1_1Box__intersection__d_1ac1b7703e33d0fe5d9d484493189c9cd8af287bd8f3714b65e743d5ec571e89b82" kindref="member">CGAL::Box_intersection_d::CLOSED</ref></defval>
        </param>
        <briefdescription>
<para>Invocation with custom box traits. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/box_intersection_d.h" line="402" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The function <computeroutput><ref refid="group__PkgBoxIntersectionD__box__self__intersection__all__pairs__d_1ga8aa29688ec201c07f9a9db15e793f920" kindref="member">box_self_intersection_all_pairs_d()</ref></computeroutput> computes the pairwise intersecting boxes in a sequence of iso-oriented boxes in arbitrary dimension. </para>    </briefdescription>
    <detaileddescription>
<para>It does so by comparing all possible pairs of boxes and is thus inferior to the fast <computeroutput><ref refid="group__PkgBoxIntersectionD__box__self__intersection__d_1ga3eed2bdb2a9e49a3fac1bca900087ec7" kindref="member">box_self_intersection_d()</ref></computeroutput> algorithm.</para><para>The sequence of boxes is given with a forward iterator range. The sequence is not modified. For each intersecting pair of boxes a <computeroutput>callback</computeroutput> function object is called with the two intersecting boxes as argument.</para><para>The algorithm is interface compatible with the <computeroutput><ref refid="group__PkgBoxIntersectionD__box__self__intersection__d_1ga3eed2bdb2a9e49a3fac1bca900087ec7" kindref="member">box_self_intersection_d()</ref></computeroutput> function. Similarly, we call the <computeroutput>value_type</computeroutput> of the iterators the <emphasis>box handle</emphasis>, which is either our box type or a pointer type to our box type.</para><para>A <formula id="0">$ d$</formula>-dimensional iso-oriented box is defined as the Cartesian product of <formula id="0">$ d$</formula> intervals. We call the box <emphasis>half-open</emphasis> if the <formula id="0">$ d$</formula> intervals <formula id="1">$ \{ [lo_i,hi_i) \,|\, 0 \leq i &lt; d\}$</formula> are half-open intervals, and we call the box <emphasis>closed</emphasis> if the <formula id="0">$ d$</formula> intervals <formula id="2">$ \{ [lo_i,hi_i] \,|\, 0 \leq i &lt; d\}$</formula> are closed intervals. Note that closed boxes support zero-width boxes and they can intersect at their boundaries, while non-empty half-open boxes always have a positive volume and they only intersect iff their interiors overlap. The distinction between closed or half-open boxes does not require a different representation of boxes, just a different interpretation when comparing boxes, which is selected with the <computeroutput>topology</computeroutput> parameter and its two values, <computeroutput><ref refid="namespaceCGAL_1_1Box__intersection__d_1ac1b7703e33d0fe5d9d484493189c9cd8ae829505cc850e61a5190ade8ad6098b5" kindref="member">Box_intersection_d::HALF_OPEN</ref></computeroutput> and <computeroutput><ref refid="namespaceCGAL_1_1Box__intersection__d_1ac1b7703e33d0fe5d9d484493189c9cd8af287bd8f3714b65e743d5ec571e89b82" kindref="member">Box_intersection_d::CLOSED</ref></computeroutput>.</para><para>The algorithm uses a traits class of the <computeroutput><ref refid="classBoxIntersectionTraits__d" kindref="compound">BoxIntersectionTraits_d</ref></computeroutput> concept to access the boxes. A default traits class is provided that assumes that the box type is a model of the <computeroutput><ref refid="classBoxIntersectionBox__d" kindref="compound">BoxIntersectionBox_d</ref></computeroutput> concept and that the box handle, i.e., the iterators value type, is identical to the box type or a pointer to the box type.</para><para><bold>Requirements</bold><linebreak/>
</para><para><itemizedlist>
<listitem>
<para><computeroutput>ForwardIter</computeroutput> must meet the requirements of <computeroutput><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></computeroutput>. We call its value type <computeroutput>Box_handle</computeroutput> in the following. </para></listitem>
<listitem>
<para><computeroutput>Callback</computeroutput> must be of the <computeroutput>BinaryFunction</computeroutput> concept. The <computeroutput>Box_handle</computeroutput> must be convertible to both argument types. The return type is not used and can be <computeroutput>void</computeroutput>. </para></listitem>
<listitem>
<para>The <computeroutput>Box_handle</computeroutput> must be a model of the <computeroutput><ref refid="classAssignable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">Assignable</ref></computeroutput> concept. </para></listitem>
<listitem>
<para>In addition, if the default box traits is used the <computeroutput>Box_handle</computeroutput> must be a class type <computeroutput>T</computeroutput> or a pointer to a class type <computeroutput>T</computeroutput>, where <computeroutput>T</computeroutput> must be a model of the <computeroutput><ref refid="classBoxIntersectionBox__d" kindref="compound">BoxIntersectionBox_d</ref></computeroutput> concept. In both cases, the default box traits specializes to a suitable implementation. </para></listitem>
<listitem>
<para><computeroutput>BoxTraits</computeroutput> must be of the <computeroutput><ref refid="classBoxIntersectionTraits__d" kindref="compound">BoxIntersectionTraits_d</ref></computeroutput> concept. </para></listitem>
</itemizedlist>
</para><para><simplesect kind="see"><para><ref refid="group__PkgBoxIntersectionD__box__intersection__d" kindref="compound"><computeroutput>CGAL::box_intersection_d()</computeroutput> </ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__PkgBoxIntersectionD__box__self__intersection__d" kindref="compound"><computeroutput>CGAL::box_self_intersection_d()</computeroutput> </ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__PkgBoxIntersectionD__box__intersection__all__pairs__d" kindref="compound"><computeroutput>CGAL::box_intersection_all_pairs_d()</computeroutput> </ref> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Box__intersection__d_1_1Box__traits__d" kindref="compound">CGAL::Box_intersection_d::Box_traits_d</ref>&lt;BoxHandle&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classBoxIntersectionBox__d" kindref="compound">BoxIntersectionBox_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classBoxIntersectionTraits__d" kindref="compound">BoxIntersectionTraits_d</ref></computeroutput></para></simplesect>
<bold>Implementation</bold><linebreak/>
</para><para>The algorithm is trivially testing all pairs and runs therefore in time <formula id="29">$ O(n^2)$</formula> where <formula id="7">$ n$</formula> is the size of the input sequence. This algorithm does not use the id-number of the boxes. </para>    </detaileddescription>
  </compounddef>
</doxygen>
