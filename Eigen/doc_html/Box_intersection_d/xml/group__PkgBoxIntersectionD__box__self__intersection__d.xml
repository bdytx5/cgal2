<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__PkgBoxIntersectionD__box__self__intersection__d" kind="group">
    <compoundname>PkgBoxIntersectionD_box_self_intersection_d</compoundname>
    <title>CGAL::box_self_intersection_d()</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgBoxIntersectionD__box__self__intersection__d_1ga3eed2bdb2a9e49a3fac1bca900087ec7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></type>
          </param>
          <param>
            <type>class Callback</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::box_self_intersection_d</definition>
        <argsstring>(RandomAccessIterator begin, RandomAccessIterator end, Callback callback, std::ptrdiff_t cutoff=10, CGAL::Box_intersection_d::Topology topology=CGAL::Box_intersection_d::CLOSED)</argsstring>
        <name>box_self_intersection_d</name>
        <param>
          <type><ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></type>
          <declname>begin</declname>
        </param>
        <param>
          <type><ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></type>
          <declname>end</declname>
        </param>
        <param>
          <type>Callback</type>
          <declname>callback</declname>
        </param>
        <param>
          <type>std::ptrdiff_t</type>
          <declname>cutoff</declname>
          <defval>10</defval>
        </param>
        <param>
          <type><ref refid="namespaceCGAL_1_1Box__intersection__d_1ac1b7703e33d0fe5d9d484493189c9cd8" kindref="member">CGAL::Box_intersection_d::Topology</ref></type>
          <declname>topology</declname>
          <defval><ref refid="namespaceCGAL_1_1Box__intersection__d_1ac1b7703e33d0fe5d9d484493189c9cd8af287bd8f3714b65e743d5ec571e89b82" kindref="member">CGAL::Box_intersection_d::CLOSED</ref></defval>
        </param>
        <briefdescription>
<para>Invocation of box intersection with default box traits <computeroutput><ref refid="structCGAL_1_1Box__intersection__d_1_1Box__traits__d" kindref="compound">Box_intersection_d::Box_traits_d</ref>&lt;Box_handle&gt;</computeroutput>, where <computeroutput>Box_handle</computeroutput> corresponds to the iterator value type of <computeroutput><ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/box_intersection_d.h" line="524" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBoxIntersectionD__box__self__intersection__d_1gab7247de0821618add6d68ede478528b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></type>
          </param>
          <param>
            <type>class Callback</type>
          </param>
          <param>
            <type>class BoxTraits</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::box_self_intersection_d</definition>
        <argsstring>(RandomAccessIterator begin, RandomAccessIterator end, Callback callback, BoxTraits box_traits, std::ptrdiff_t cutoff=10, CGAL::Box_intersection_d::Topology topology=CGAL::Box_intersection_d::CLOSED)</argsstring>
        <name>box_self_intersection_d</name>
        <param>
          <type><ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></type>
          <declname>begin</declname>
        </param>
        <param>
          <type><ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></type>
          <declname>end</declname>
        </param>
        <param>
          <type>Callback</type>
          <declname>callback</declname>
        </param>
        <param>
          <type>BoxTraits</type>
          <declname>box_traits</declname>
        </param>
        <param>
          <type>std::ptrdiff_t</type>
          <declname>cutoff</declname>
          <defval>10</defval>
        </param>
        <param>
          <type><ref refid="namespaceCGAL_1_1Box__intersection__d_1ac1b7703e33d0fe5d9d484493189c9cd8" kindref="member">CGAL::Box_intersection_d::Topology</ref></type>
          <declname>topology</declname>
          <defval><ref refid="namespaceCGAL_1_1Box__intersection__d_1ac1b7703e33d0fe5d9d484493189c9cd8af287bd8f3714b65e743d5ec571e89b82" kindref="member">CGAL::Box_intersection_d::CLOSED</ref></defval>
        </param>
        <briefdescription>
<para>Invocation with custom box traits. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/box_intersection_d.h" line="537" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The function <computeroutput><ref refid="group__PkgBoxIntersectionD__box__self__intersection__d_1ga3eed2bdb2a9e49a3fac1bca900087ec7" kindref="member">box_self_intersection_d()</ref></computeroutput> computes the pairwise intersecting boxes in a sequence of iso-oriented boxes in arbitrary dimension. </para>    </briefdescription>
    <detaileddescription>
<para>The sequence of boxes is given with as a random-access iterator range and will be reordered in the course of the algorithm. For each intersecting pair of boxes a <computeroutput>callback</computeroutput> function object is called with the two intersecting boxes as argument; the first argument is a box from the sequence, the second argument is a copy of a box from the sequence. The performance of the algorithm can be tuned with a <computeroutput>cutoff</computeroutput> parameter, see the implementation section of the <computeroutput><ref refid="group__PkgBoxIntersectionD__box__intersection__d_1ga5526579aad16bc9c3ed830dd8fc58f6a" kindref="member">box_intersection_d()</ref></computeroutput> function.</para><para>The algorithm creates a second copy of the boxes and reorders the boxes in the course of the algorithm. Now, depending on the size of a box it can be faster to copy the boxes, or to work with pointers to boxes and copy only pointers. We offer automatic support for both options. To simplify the description, let us call the <computeroutput>value_type</computeroutput> of the iterators <emphasis>box handle</emphasis>. The <emphasis>box handle</emphasis> can either be our box type itself or a pointer (or const pointer) to the box type.</para><para>A <formula id="0">$ d$</formula>-dimensional iso-oriented box is defined as the Cartesian product of <formula id="0">$ d$</formula> intervals. We call the box <emphasis>half-open</emphasis> if the <formula id="0">$ d$</formula> intervals <formula id="1">$ \{ [lo_i,hi_i) \,|\, 0 \leq i &lt; d\}$</formula> are half-open intervals, and we call the box <emphasis>closed</emphasis> if the <formula id="0">$ d$</formula> intervals <formula id="2">$ \{ [lo_i,hi_i] \,|\, 0 \leq i &lt; d\}$</formula> are closed intervals. Note that closed boxes support zero-width boxes and they can intersect at their boundaries, while non-empty half-open boxes always have a positive volume and they only intersect iff their interiors overlap. The distinction between closed or half-open boxes does not require a different representation of boxes, just a different interpretation when comparing boxes, which is selected with the <computeroutput>topology</computeroutput> parameter and its two values, <computeroutput><ref refid="namespaceCGAL_1_1Box__intersection__d_1ac1b7703e33d0fe5d9d484493189c9cd8ae829505cc850e61a5190ade8ad6098b5" kindref="member">Box_intersection_d::HALF_OPEN</ref></computeroutput> and <computeroutput><ref refid="namespaceCGAL_1_1Box__intersection__d_1ac1b7703e33d0fe5d9d484493189c9cd8af287bd8f3714b65e743d5ec571e89b82" kindref="member">Box_intersection_d::CLOSED</ref></computeroutput>.</para><para>In addition, a box has a unique <computeroutput>id</computeroutput>-number. It is used to order boxes consistently in each dimension even if boxes have identical coordinates. In consequence, the algorithm guarantees that a pair of intersecting boxes is reported only once. Boxes of equal <computeroutput>id</computeroutput>-number are not reported as intersecting pairs since they are always intersecting trivially.</para><para><simplesect kind="warning"><para>This self-intersection function creates internally a second copy of the box sequence. Note that this implies that an <computeroutput>id</computeroutput>-number based on the address of the box is not acceptable if boxes are copied by value and one must either pass boxes by pointer or use another type of box <computeroutput>id</computeroutput>-number such as <computeroutput>ID_EXPLICIT</computeroutput>.</para></simplesect>
The algorithm uses a traits class of the <computeroutput><ref refid="classBoxIntersectionTraits__d" kindref="compound">BoxIntersectionTraits_d</ref></computeroutput> concept to access the boxes. A default traits class is provided that assumes that the box type is a model of the <computeroutput><ref refid="classBoxIntersectionBox__d" kindref="compound">BoxIntersectionBox_d</ref></computeroutput> concept and that the box handle, i.e., the iterators value type, is identical to the box type or a pointer to the box type.</para><para><bold>Requirements</bold><linebreak/>
</para><para><itemizedlist>
<listitem>
<para><computeroutput><ref refid="classRandomAccessIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></computeroutput> must be a mutable random-access iterator. We call its value type <computeroutput>Box_handle</computeroutput> in the following. </para></listitem>
<listitem>
<para><computeroutput>Callback</computeroutput> must be of the <computeroutput>BinaryFunction</computeroutput> concept. The <computeroutput>Box_handle</computeroutput> must be convertible to both argument types. The return type is not used and can be <computeroutput>void</computeroutput>. </para></listitem>
<listitem>
<para>The <computeroutput>Box_handle</computeroutput> must be a model of the <computeroutput><ref refid="classAssignable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">Assignable</ref></computeroutput> concept. </para></listitem>
<listitem>
<para>In addition, if the default box traits is used the <computeroutput>Box_handle</computeroutput> must be a class type <computeroutput>T</computeroutput> or a pointer to a class type <computeroutput>T</computeroutput>, where <computeroutput>T</computeroutput> must be a model of the <computeroutput><ref refid="classBoxIntersectionBox__d" kindref="compound">BoxIntersectionBox_d</ref></computeroutput> concept. In both cases, the default box traits specializes to a suitable implementation. </para></listitem>
<listitem>
<para><computeroutput>BoxTraits</computeroutput> must be of the <computeroutput><ref refid="classBoxIntersectionTraits__d" kindref="compound">BoxIntersectionTraits_d</ref></computeroutput> concept. </para></listitem>
</itemizedlist>
</para><para><simplesect kind="see"><para><ref refid="group__PkgBoxIntersectionD__box__intersection__d" kindref="compound"><computeroutput>CGAL::box_intersection_d()</computeroutput> </ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__PkgBoxIntersectionD__box__self__intersection__all__pairs__d" kindref="compound"><computeroutput>CGAL::box_self_intersection_all_pairs_d()</computeroutput> </ref> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Box__intersection__d_1_1Box__traits__d" kindref="compound">CGAL::Box_intersection_d::Box_traits_d</ref>&lt;BoxHandle&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classBoxIntersectionBox__d" kindref="compound">BoxIntersectionBox_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classBoxIntersectionTraits__d" kindref="compound">BoxIntersectionTraits_d</ref></computeroutput></para></simplesect>
<bold>Implementation</bold><linebreak/>
</para><para>See the implementation section of the <computeroutput><ref refid="group__PkgBoxIntersectionD__box__intersection__d_1ga5526579aad16bc9c3ed830dd8fc58f6a" kindref="member">box_intersection_d()</ref></computeroutput> function.</para><para><bold>Example</bold><linebreak/>
</para><para>The box implementation provided with <computeroutput><ref refid="classCGAL_1_1Box__intersection__d_1_1Box__d" kindref="compound">Box_intersection_d::Box_d</ref>&lt;double,2&gt;</computeroutput> has a special constructor for the CGAL bounding box type <computeroutput><ref refid="classCGAL_1_1Bbox__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Bbox_2</ref></computeroutput> (and similar for dimension 3). We use this in the example to create <formula id="3">$ 3 \times 3$</formula> <computeroutput>boxes</computeroutput> in a grid layout.</para><para>The default policy of the box type implements the <computeroutput>id</computeroutput>-number with an explicit counter in the boxes, which is the default choice since it always works. We use the <computeroutput>id</computeroutput>-number in our callback function to report the result of the intersection algorithm call. The result will be 20 pairwise intersections, but the order in which they are reported is non-intuitive.</para><para><linebreak/>
<bold>File</bold> <ref refid="Box_intersection_d_2minimal_self_8cpp-example" kindref="compound">Box_intersection_d/minimal_self.cpp</ref> <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/box_intersection_d.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Bbox_2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Box__intersection__d_1_1Box__d" kindref="compound">CGAL::Box_intersection_d::Box_d&lt;double,2&gt;</ref><sp/>Box;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Bbox__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Bbox_2</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Bbox;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>9<sp/>boxes<sp/>of<sp/>a<sp/>grid</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Box<sp/>boxes[9]<sp/>=<sp/>{<sp/>Bbox(<sp/>0,0,1,1),<sp/>Bbox(<sp/>1,0,2,1),<sp/>Bbox(<sp/>2,0,3,1),<sp/></highlight><highlight class="comment">//<sp/>low</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Bbox(<sp/>0,1,1,2),<sp/>Bbox(<sp/>1,1,2,2),<sp/>Bbox(<sp/>2,1,3,2),<sp/></highlight><highlight class="comment">//<sp/>middle</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Bbox(<sp/>0,2,1,3),<sp/>Bbox(<sp/>1,2,2,3),<sp/>Bbox(<sp/>2,2,3,3)};</highlight><highlight class="comment">//<sp/>upper</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>callback(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Box&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Box&amp;<sp/>b<sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;box<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>a.id()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>intersects<sp/>box<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>b.id()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__PkgBoxIntersectionD__box__self__intersection__d_1ga3eed2bdb2a9e49a3fac1bca900087ec7" kindref="member">CGAL::box_self_intersection_d</ref>(<sp/>boxes,<sp/>boxes+9,<sp/>callback);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>    </detaileddescription>
  </compounddef>
</doxygen>
