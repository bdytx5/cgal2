<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__PkgPointSetProcessingIOPly" kind="group">
    <compoundname>PkgPointSetProcessingIOPly</compoundname>
    <title>IO (PLY Format)</title>
    <innerclass refid="structCGAL_1_1PLY__property" prot="public">CGAL::PLY_property</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgPointSetProcessingIOPly_1gae8b88aed53f6aad119c4eae3d5ae48bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointMap</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; PointMap, typename Kernel_traits&lt; typename PointMap::value_type &gt;::<ref refid="classKernel_1a37e4ae60cf3e2e62182652c099ff7242" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel::Construct_point_3</ref>, PLY_property&lt; FT &gt;, PLY_property&lt; FT &gt;, PLY_property&lt; FT &gt; &gt;</type>
        <definition>std::tuple&lt;PointMap, typename Kernel_traits&lt;typename PointMap::value_type&gt;::Kernel::Construct_point_3, PLY_property&lt;FT&gt;, PLY_property&lt;FT&gt;, PLY_property&lt;FT&gt; &gt; CGAL::make_ply_point_reader</definition>
        <argsstring>(PointMap point_map)</argsstring>
        <name>make_ply_point_reader</name>
        <param>
          <type>PointMap</type>
          <declname>point_map</declname>
        </param>
        <briefdescription>
<para>Generates a PLY property handler to read 3D points. </para>        </briefdescription>
        <detaileddescription>
<para>Points are constructed from the input using 3 PLY properties of type <computeroutput>FT</computeroutput> and named <computeroutput>x</computeroutput>, <computeroutput>y</computeroutput> and <computeroutput>z</computeroutput>. <computeroutput>FT</computeroutput> is <computeroutput>float</computeroutput> if the points use <computeroutput><ref refid="structCGAL_1_1Simple__cartesian" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Simple_cartesian</ref>&lt;float&gt;</computeroutput> and <computeroutput>double</computeroutput> otherwise.</para><para><simplesect kind="see"><para><computeroutput><ref refid="namespaceCGAL_1a483fe42bbefcafce8a5d6194573a2715" kindref="member">read_ply_points_with_properties()</ref></computeroutput></para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointMap</parametername>
</parameternamelist>
<parameterdescription>
<para>the property map used to store points. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/read_ply_points.h" line="126" column="1" bodyfile="CGAL/IO/read_ply_points.h" bodystart="126" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessingIOPly_1gaf72517e2162e7a558dfc20741dc6244a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VectorMap</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; VectorMap, typename Kernel_traits&lt; typename VectorMap::value_type &gt;::<ref refid="classKernel_1abf20ed4375d501fdf4d0e139838ca0dc" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel::Construct_vector_3</ref>, PLY_property&lt; FT &gt;, PLY_property&lt; FT &gt;, PLY_property&lt; FT &gt; &gt;</type>
        <definition>std::tuple&lt;VectorMap, typename Kernel_traits&lt;typename VectorMap::value_type&gt;::Kernel::Construct_vector_3, PLY_property&lt;FT&gt;, PLY_property&lt;FT&gt;, PLY_property&lt;FT&gt; &gt; CGAL::make_ply_normal_reader</definition>
        <argsstring>(VectorMap normal_map)</argsstring>
        <name>make_ply_normal_reader</name>
        <param>
          <type>VectorMap</type>
          <declname>normal_map</declname>
        </param>
        <briefdescription>
<para>Generates a PLY property handler to read 3D normal vectors. </para>        </briefdescription>
        <detaileddescription>
<para>Vectors are constructed from the input using 3 PLY properties of type <computeroutput>FT</computeroutput> and named <computeroutput>nx</computeroutput>, <computeroutput>ny</computeroutput> and <computeroutput>nz</computeroutput>. <computeroutput>FT</computeroutput> is <computeroutput>float</computeroutput> if the points use <computeroutput><ref refid="structCGAL_1_1Simple__cartesian" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Simple_cartesian</ref>&lt;float&gt;</computeroutput> and <computeroutput>double</computeroutput> otherwise.</para><para><simplesect kind="see"><para><computeroutput><ref refid="namespaceCGAL_1a483fe42bbefcafce8a5d6194573a2715" kindref="member">read_ply_points_with_properties()</ref></computeroutput></para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>VectorMap</parametername>
</parameternamelist>
<parameterdescription>
<para>the property map used to store vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/read_ply_points.h" line="159" column="1" bodyfile="CGAL/IO/read_ply_points.h" bodystart="159" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessingIOPly_1ga1cff0be3f76b7e5f70dbd4320b06394a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputIteratorValueType</type>
          </param>
          <param>
            <type>typename <ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
          <param>
            <type>typename NamedParameters</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::read_ply_points</definition>
        <argsstring>(std::istream &amp;stream, OutputIterator output, const NamedParameters &amp;np)</argsstring>
        <name>read_ply_points</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>output</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
        </param>
        <briefdescription>
<para>Reads points (positions + normals, if available) from a .ply stream (ASCII or binary). </para>        </briefdescription>
        <detaileddescription>
<para>Potential additional point properties and faces are ignored.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OutputIteratorValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>type of objects that can be put in <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput>. It is default to <computeroutput><ref refid="structCGAL_1_1value__type__traits" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">value_type_traits</ref>&lt;<ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref>&gt;::type</computeroutput> and can be omitted when the default is fine. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>iterator over output points.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>input stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>output iterator over points. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>optional sequence of <ref refid="group__psp__namedparameters" kindref="compound">Named Parameters</ref> among the ones listed below.</para></parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><ref refid="group__psp__namedparameters_1PSP_point_map" kindref="member">point_map</ref></para></entry><entry thead="no"><para>a model of <computeroutput><ref refid="classWritablePropertyMap" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">WritablePropertyMap</ref></computeroutput> with value type <computeroutput>geom_traits::Point_3</computeroutput>. If this parameter is omitted, <computeroutput><ref refid="structCGAL_1_1Identity__property__map" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Property_map.tag">CGAL::Identity_property_map</ref>&lt;geom_traits::Point_3&gt;</computeroutput> is used. </para></entry></row>
<row>
<entry thead="no"><para><ref refid="group__psp__namedparameters_1PSP_normal_map" kindref="member">normal_map</ref></para></entry><entry thead="no"><para>a model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with value type <computeroutput>geom_traits::Vector_3</computeroutput>. If this parameter is omitted, normals in the input stream are ignored. </para></entry></row>
<row>
<entry thead="no"><para><ref refid="group__psp__namedparameters_1PSP_geom_traits" kindref="member">geom_traits</ref></para></entry><entry thead="no"><para>an instance of a geometric traits class, model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para></entry></row>
</table>
</para></listitem>
</variablelist>
</para><para><simplesect kind="return"><para>true on success.</para></simplesect>
<simplesect kind="warning"><para>This function requires a C++11 compiler. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/read_ply_points.h" line="829" column="1" bodyfile="CGAL/IO/read_ply_points.h" bodystart="829" bodyend="858"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessingIOPly_1ga46a5d87f82f7c1f4a210d5e494d72c55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointMap</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; PointMap, PLY_property&lt; FT &gt;, PLY_property&lt; FT &gt;, PLY_property&lt; FT &gt; &gt;</type>
        <definition>std::tuple&lt;PointMap, PLY_property&lt;FT&gt;, PLY_property&lt;FT&gt;, PLY_property&lt;FT&gt; &gt; CGAL::make_ply_point_writer</definition>
        <argsstring>(PointMap point_map)</argsstring>
        <name>make_ply_point_writer</name>
        <param>
          <type>PointMap</type>
          <declname>point_map</declname>
        </param>
        <briefdescription>
<para>Generates a PLY property handler to write 3D points. </para>        </briefdescription>
        <detaileddescription>
<para>Points are written as 3 PLY properties of type <computeroutput>FT</computeroutput> and named <computeroutput>x</computeroutput>, <computeroutput>y</computeroutput> and <computeroutput>z</computeroutput>. <computeroutput>FT</computeroutput> is <computeroutput>float</computeroutput> if the points use <computeroutput><ref refid="structCGAL_1_1Simple__cartesian" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Simple_cartesian</ref>&lt;float&gt;</computeroutput> and <computeroutput>double</computeroutput> otherwise.</para><para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessingIOPly_1gaa9c84f9edcad73c46d9838618de9878e" kindref="member">write_ply_points_with_properties()</ref></computeroutput></para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointMap</parametername>
</parameternamelist>
<parameterdescription>
<para>the property map used to store points. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/write_ply_points.h" line="69" column="1" bodyfile="CGAL/IO/write_ply_points.h" bodystart="69" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessingIOPly_1ga29439e01c9a1e3e5f4898bd81ccdb689" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VectorMap</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; VectorMap, PLY_property&lt; FT &gt;, PLY_property&lt; FT &gt;, PLY_property&lt; FT &gt; &gt;</type>
        <definition>std::tuple&lt;VectorMap, PLY_property&lt;FT&gt;, PLY_property&lt;FT&gt;, PLY_property&lt;FT&gt; &gt; CGAL::make_ply_normal_writer</definition>
        <argsstring>(VectorMap normal_map)</argsstring>
        <name>make_ply_normal_writer</name>
        <param>
          <type>VectorMap</type>
          <declname>normal_map</declname>
        </param>
        <briefdescription>
<para>Generates a PLY property handler to write 3D normal vectors. </para>        </briefdescription>
        <detaileddescription>
<para>Vectors are written as 3 PLY properties of type <computeroutput>FT</computeroutput> and named <computeroutput>nx</computeroutput>, <computeroutput>ny</computeroutput> and <computeroutput>nz</computeroutput>. <computeroutput>FT</computeroutput> is <computeroutput>float</computeroutput> if the vectors use <computeroutput><ref refid="structCGAL_1_1Simple__cartesian" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Simple_cartesian</ref>&lt;float&gt;</computeroutput> and <computeroutput>double</computeroutput> otherwise.</para><para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessingIOPly_1gaa9c84f9edcad73c46d9838618de9878e" kindref="member">write_ply_points_with_properties()</ref></computeroutput></para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>VectorMap</parametername>
</parameternamelist>
<parameterdescription>
<para>the property map used to store vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/write_ply_points.h" line="98" column="1" bodyfile="CGAL/IO/write_ply_points.h" bodystart="98" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessingIOPly_1gaa9c84f9edcad73c46d9838618de9878e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>PropertyHandler</declname>
            <defname>PropertyHandler</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::write_ply_points_with_properties</definition>
        <argsstring>(std::ostream &amp;stream, const PointRange &amp;points, PropertyHandler &amp;&amp;... properties)</argsstring>
        <name>write_ply_points_with_properties</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
          <briefdescription><para>output stream. </para></briefdescription>
        </param>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
          <briefdescription><para>input point range. </para></briefdescription>
        </param>
        <param>
          <type>PropertyHandler &amp;&amp;...</type>
          <declname>properties</declname>
          <briefdescription><para>parameter pack of property handlers </para></briefdescription>
        </param>
        <briefdescription>
<para>Saves the range of <computeroutput>points</computeroutput> with properties to a .ply stream. </para>        </briefdescription>
        <detaileddescription>
<para>PLY is either ASCII or binary depending on the value of <computeroutput>CGAL::get_mode(stream)</computeroutput>.</para><para>Properties are handled through a variadic list of property handlers. A <computeroutput>PropertyHandler</computeroutput> can either be:</para><para><itemizedlist>
<listitem><para>A <computeroutput>std::pair&lt;PropertyMap, <ref refid="structCGAL_1_1PLY__property" kindref="compound">PLY_property</ref>&lt;T&gt; &gt;</computeroutput> if the user wants to write a scalar value T as a PLY property (for example, writing an <computeroutput>int</computeroutput> variable as an <computeroutput>int</computeroutput> PLY property).</para></listitem><listitem><para>A <computeroutput>std::tuple&lt;PropertyMap, <ref refid="structCGAL_1_1PLY__property" kindref="compound">PLY_property</ref>&lt;T&gt;...&gt;</computeroutput> if the user wants to write a complex object as several PLY properties. In that case, a specialization of <computeroutput><ref refid="classCGAL_1_1Output__rep" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Stream_support.tag">Output_rep</ref></computeroutput> must be provided for <computeroutput>PropertyMap::value_type</computeroutput> that handles both ASCII and binary output (see <computeroutput><ref refid="group__PkgIOstreams_1gaf0ca61609ab0738a82652842880b2674" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Stream_support.tag">CGAL::get_mode()</ref></computeroutput>).</para></listitem></itemizedlist>
</para><para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessingIOPly_1ga46a5d87f82f7c1f4a210d5e494d72c55" kindref="member">make_ply_point_writer()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessingIOPly_1ga29439e01c9a1e3e5f4898bd81ccdb689" kindref="member">make_ply_normal_writer()</ref></computeroutput></para></simplesect>
<simplesect kind="warning"><para>This function requires a C++11 compiler.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>point_map</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PropertyHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>handlers to recover properties.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> on success. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/write_ply_points.h" line="366" column="1" bodyfile="CGAL/IO/write_ply_points.h" bodystart="366" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessingIOPly_1ga10908ae5e7b2d585bc973fe14a694a25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::write_ply_points</definition>
        <argsstring>(std::ostream &amp;stream, const PointRange &amp;points, const NamedParameters &amp;np)</argsstring>
        <name>write_ply_points</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
        </param>
        <briefdescription>
<para>Saves the range of <computeroutput>points</computeroutput> (positions + normals, if available) to a .ply stream. </para>        </briefdescription>
        <detaileddescription>
<para>PLY is either ASCII or binary depending on the value of <computeroutput>CGAL::get_mode(stream)</computeroutput>.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>point_map</computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>output stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>input point range. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>optional sequence of <ref refid="group__psp__namedparameters" kindref="compound">Named Parameters</ref> among the ones listed below.</para></parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><ref refid="group__psp__namedparameters_1PSP_point_map" kindref="member">point_map</ref></para></entry><entry thead="no"><para>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with value type <computeroutput>geom_traits::Point_3</computeroutput>. If this parameter is omitted, <computeroutput><ref refid="structCGAL_1_1Identity__property__map" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Property_map.tag">CGAL::Identity_property_map</ref>&lt;geom_traits::Point_3&gt;</computeroutput> is used. </para></entry></row>
<row>
<entry thead="no"><para><ref refid="group__psp__namedparameters_1PSP_normal_map" kindref="member">normal_map</ref></para></entry><entry thead="no"><para>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with value type <computeroutput>geom_traits::Vector_3</computeroutput>. If this parameter is omitted, normals are not written to the output stream. </para></entry></row>
<row>
<entry thead="no"><para><ref refid="group__psp__namedparameters_1PSP_geom_traits" kindref="member">geom_traits</ref></para></entry><entry thead="no"><para>an instance of a geometric traits class, model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para></entry></row>
</table>
</para></listitem>
</variablelist>
</para><para><simplesect kind="return"><para>true on success. </para></simplesect>
<simplesect kind="warning"><para>This function requires a C++11 compiler. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/write_ply_points.h" line="427" column="1" bodyfile="CGAL/IO/write_ply_points.h" bodystart="427" bodyend="453"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Read and write points (with or without additional properties) in PLY format. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
