<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__PkgPointSetProcessingIOLas" kind="group">
    <compoundname>PkgPointSetProcessingIOLas</compoundname>
    <title>IO (LAS Format)</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgPointSetProcessingIOLas_1ga215c73a41ddab1c7bf1d35b23786a9ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointMap</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; PointMap, typename Kernel_traits&lt; typename PointMap::value_type &gt;::<ref refid="classKernel_1a37e4ae60cf3e2e62182652c099ff7242" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel::Construct_point_3</ref>, LAS_property::X, LAS_property::Y, LAS_property::Z &gt;</type>
        <definition>std::tuple&lt;PointMap, typename Kernel_traits&lt;typename PointMap::value_type&gt;::Kernel::Construct_point_3, LAS_property::X, LAS_property::Y, LAS_property::Z &gt; CGAL::make_las_point_reader</definition>
        <argsstring>(PointMap point_map)</argsstring>
        <name>make_las_point_reader</name>
        <param>
          <type>PointMap</type>
          <declname>point_map</declname>
        </param>
        <briefdescription>
<para>Generates a LAS property handler to read 3D points. </para>        </briefdescription>
        <detaileddescription>
<para>Points are constructed from the input the using 3 LAS properties <computeroutput>LAS_property::X</computeroutput>, <computeroutput>LAS_property::Y</computeroutput> and <computeroutput>LAS_property::Z</computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessingIOLas_1gaf02431d387cc9b00ed932a41b164d389" kindref="member">read_las_points_with_properties()</ref></computeroutput></para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointMap</parametername>
</parameternamelist>
<parameterdescription>
<para>the property map used to store points. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/read_las_points.h" line="151" column="1" bodyfile="CGAL/IO/read_las_points.h" bodystart="151" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessingIOLas_1gaf02431d387cc9b00ed932a41b164d389" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputIteratorValueType</type>
          </param>
          <param>
            <type>typename <ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>PropertyHandler</declname>
            <defname>PropertyHandler</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::read_las_points_with_properties</definition>
        <argsstring>(std::istream &amp;stream, OutputIterator output, PropertyHandler &amp;&amp;... properties)</argsstring>
        <name>read_las_points_with_properties</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>output</declname>
        </param>
        <param>
          <type>PropertyHandler &amp;&amp;...</type>
          <declname>properties</declname>
        </param>
        <briefdescription>
<para>Reads user-selected points properties from a .las or .laz stream. </para>        </briefdescription>
        <detaileddescription>
<para>Potential additional properties are ignored.</para><para>Properties are handled through a variadic list of property handlers. A <computeroutput>PropertyHandler</computeroutput> can either be:</para><para><itemizedlist>
<listitem><para>A <computeroutput>std::pair&lt;PropertyMap, LAS_property::Tag &gt;</computeroutput> if the user wants to read a LAS property as a scalar value <computeroutput>LAS_property::Tag::type</computeroutput> (for example, storing an <computeroutput>int</computeroutput> LAS property into an <computeroutput>int</computeroutput> variable).</para></listitem><listitem><para>A <computeroutput>std::tuple&lt;PropertyMap, Constructor, LAS_property::Tag...&gt;</computeroutput> if the user wants to use one or several LAS properties to construct a complex object (for example, storing 4 <computeroutput>unsigned short</computeroutput> LAS properties into a Color object that can for example be a <computeroutput><ref refid="classCGAL_1_1cpp11_1_1array" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::cpp11::array</ref>&lt;unsigned short, 4&gt;</computeroutput>). In that case, the second element of the tuple should be a functor that constructs the value type of <computeroutput>PropertyMap</computeroutput> from N objects of of type <computeroutput>LAS_property::Tag::type</computeroutput>.</para></listitem></itemizedlist>
</para><para>The LAS standard defines a fixed set of properties accessible through the following tag classes:</para><para><itemizedlist>
<listitem><para><computeroutput>LAS_property::X</computeroutput> with type <computeroutput>double</computeroutput></para></listitem><listitem><para><computeroutput>LAS_property::Y</computeroutput> with type <computeroutput>double</computeroutput></para></listitem><listitem><para><computeroutput>LAS_property::Z</computeroutput> with type <computeroutput>double</computeroutput></para></listitem><listitem><para><computeroutput>LAS_property::Intensity</computeroutput> with type <computeroutput>unsigned short</computeroutput></para></listitem><listitem><para><computeroutput>LAS_property::Return_number</computeroutput> with type <computeroutput>unsigned char</computeroutput></para></listitem><listitem><para><computeroutput>LAS_property::Number_of_returns</computeroutput> with type <computeroutput>unsigned char</computeroutput></para></listitem><listitem><para><computeroutput>LAS_property::Scan_direction_flag</computeroutput> with type <computeroutput>unsigned char</computeroutput></para></listitem><listitem><para><computeroutput>LAS_property::Edge_of_flight_line</computeroutput> with type <computeroutput>unsigned char</computeroutput></para></listitem><listitem><para><computeroutput>LAS_property::Classification</computeroutput> with type <computeroutput>unsigned char</computeroutput></para></listitem><listitem><para><computeroutput>LAS_property::Synthetic_flag</computeroutput> with type <computeroutput>unsigned char</computeroutput></para></listitem><listitem><para><computeroutput>LAS_property::Keypoint_flag</computeroutput> with type <computeroutput>unsigned char</computeroutput></para></listitem><listitem><para><computeroutput>LAS_property::Withheld_flag</computeroutput> with type <computeroutput>unsigned char</computeroutput></para></listitem><listitem><para><computeroutput>LAS_property::Scan_angle</computeroutput> with type <computeroutput>double</computeroutput></para></listitem><listitem><para><computeroutput>LAS_property::User_data</computeroutput> with type <computeroutput>unsigned char</computeroutput></para></listitem><listitem><para><computeroutput>LAS_property::Point_source_ID</computeroutput> with type <computeroutput>unsigned short</computeroutput></para></listitem><listitem><para><computeroutput>LAS_property::Deleted_flag</computeroutput> with type <computeroutput>unsigned int</computeroutput></para></listitem><listitem><para><computeroutput>LAS_property::GPS_time</computeroutput> with type <computeroutput>double</computeroutput></para></listitem><listitem><para><computeroutput>LAS_property::R</computeroutput> with type <computeroutput>unsigned short</computeroutput></para></listitem><listitem><para><computeroutput>LAS_property::G</computeroutput> with type <computeroutput>unsigned short</computeroutput></para></listitem><listitem><para><computeroutput>LAS_property::B</computeroutput> with type <computeroutput>unsigned short</computeroutput></para></listitem><listitem><para><computeroutput>LAS_property::I</computeroutput> with type <computeroutput>unsigned short</computeroutput></para></listitem></itemizedlist>
</para><para><simplesect kind="warning"><para>This function requires a C++11 compiler.</para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessingIOLas_1ga215c73a41ddab1c7bf1d35b23786a9ef" kindref="member">make_las_point_reader()</ref></computeroutput></para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OutputIteratorValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>type of objects that can be put in <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput>. It is default to <computeroutput><ref refid="structCGAL_1_1value__type__traits" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">value_type_traits</ref>&lt;<ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref>&gt;::type</computeroutput> and can be omitted when the default is fine. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>iterator over output points. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PropertyHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>handlers to recover properties.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> on success. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/read_las_points.h" line="391" column="1" bodyfile="CGAL/IO/read_las_points.h" bodystart="391" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessingIOLas_1ga638b30c7234beb453a3e3fd31dad267d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputIteratorValueType</type>
          </param>
          <param>
            <type>typename <ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
          <param>
            <type>typename NamedParameters</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::read_las_points</definition>
        <argsstring>(std::istream &amp;stream, OutputIterator output, const NamedParameters &amp;np)</argsstring>
        <name>read_las_points</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>output</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
        </param>
        <briefdescription>
<para>Reads points (position only) from a .las or .laz stream. </para>        </briefdescription>
        <detaileddescription>
<para>Potential additional properties are ignored.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OutputIteratorValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>type of objects that can be put in <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput>. It is default to <computeroutput><ref refid="structCGAL_1_1value__type__traits" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">value_type_traits</ref>&lt;<ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref>&gt;::type</computeroutput> and can be omitted when the default is fine. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>iterator over output points.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>input stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>output iterator over points.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>optional sequence of <ref refid="group__psp__namedparameters" kindref="compound">Named Parameters</ref> among the ones listed below.</para></parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><ref refid="group__psp__namedparameters_1PSP_point_map" kindref="member">point_map</ref></para></entry><entry thead="no"><para>a model of <computeroutput><ref refid="classWritablePropertyMap" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">WritablePropertyMap</ref></computeroutput> with value type <computeroutput>geom_traits::Point_3</computeroutput>. If this parameter is omitted, <computeroutput><ref refid="structCGAL_1_1Identity__property__map" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Property_map.tag">CGAL::Identity_property_map</ref>&lt;geom_traits::Point_3&gt;</computeroutput> is used. </para></entry></row>
<row>
<entry thead="no"><para><ref refid="group__psp__namedparameters_1PSP_geom_traits" kindref="member">geom_traits</ref></para></entry><entry thead="no"><para>an instance of a geometric traits class, model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para></entry></row>
</table>
</para></listitem>
</variablelist>
</para><para><simplesect kind="return"><para>true on success.</para></simplesect>
<simplesect kind="warning"><para>This function requires a C++11 compiler. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/read_las_points.h" line="463" column="1" bodyfile="CGAL/IO/read_las_points.h" bodystart="463" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessingIOLas_1ga83b0dddee3caa3b31851511e54805ae9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointMap</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; PointMap, LAS_property::X, LAS_property::Y, LAS_property::Z &gt;</type>
        <definition>std::tuple&lt;PointMap, LAS_property::X, LAS_property::Y, LAS_property::Z &gt; CGAL::make_las_point_writer</definition>
        <argsstring>(PointMap point_map)</argsstring>
        <name>make_las_point_writer</name>
        <param>
          <type>PointMap</type>
          <declname>point_map</declname>
        </param>
        <briefdescription>
<para>Generates a LAS property handler to write 3D points. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessingIOLas_1gab458d5161d933b236ac42b03366ffeb7" kindref="member">write_las_points_with_properties()</ref></computeroutput></para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointMap</parametername>
</parameternamelist>
<parameterdescription>
<para>the property map used to store points. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/write_las_points.h" line="84" column="1" bodyfile="CGAL/IO/write_las_points.h" bodystart="84" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessingIOLas_1gab458d5161d933b236ac42b03366ffeb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename PointMap</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>PropertyHandler</declname>
            <defname>PropertyHandler</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::write_las_points_with_properties</definition>
        <argsstring>(std::ostream &amp;stream, const PointRange &amp;points, std::tuple&lt; PointMap, LAS_property::X, LAS_property::Y, LAS_property::Z &gt; point_property, PropertyHandler &amp;&amp;... properties)</argsstring>
        <name>write_las_points_with_properties</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
          <briefdescription><para>output stream. </para></briefdescription>
        </param>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
          <briefdescription><para>input point range. </para></briefdescription>
        </param>
        <param>
          <type>std::tuple&lt; PointMap, LAS_property::X, LAS_property::Y, LAS_property::Z &gt;</type>
          <declname>point_property</declname>
          <briefdescription><para>property handler for points </para></briefdescription>
        </param>
        <param>
          <type>PropertyHandler &amp;&amp;...</type>
          <declname>properties</declname>
          <briefdescription><para>parameter pack of property handlers </para></briefdescription>
        </param>
        <briefdescription>
<para>Saves the range of <computeroutput>points</computeroutput> with properties to a .las stream. </para>        </briefdescription>
        <detaileddescription>
<para>Properties are handled through a variadic list of property handlers. A <computeroutput>PropertyHandle</computeroutput> is a <computeroutput>std::pair&lt;PropertyMap, LAS_property::Tag &gt;</computeroutput> used to write a scalar value <computeroutput>LAS_property::Tag::type</computeroutput> as a LAS property (for example, writing an <computeroutput>int</computeroutput> vairable as an <computeroutput>int</computeroutput> LAS property). An exception is used for points that are written using a <computeroutput>std::tuple</computeroutput> object.</para><para>See documentation of <computeroutput><ref refid="group__PkgPointSetProcessingIOLas_1gaf02431d387cc9b00ed932a41b164d389" kindref="member">read_las_points_with_properties()</ref></computeroutput> for the list of available <computeroutput>LAS_property::Tag</computeroutput> classes.</para><para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessingIOLas_1ga83b0dddee3caa3b31851511e54805ae9" kindref="member">make_las_point_writer()</ref></computeroutput></para></simplesect>
<simplesect kind="warning"><para>This function requires a C++11 compiler.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>point_map</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointMap</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with a value_type = <computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Point_3</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PropertyHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>handlers to recover properties.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> on success. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/write_las_points.h" line="201" column="1" bodyfile="CGAL/IO/write_las_points.h" bodystart="201" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessingIOLas_1gaa96a32cc42a0706e2f7dc74b2fc8be72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::write_las_points</definition>
        <argsstring>(std::ostream &amp;stream, const PointRange &amp;points, const NamedParameters &amp;np)</argsstring>
        <name>write_las_points</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
        </param>
        <briefdescription>
<para>Saves the range of <computeroutput>points</computeroutput> (positions only) to a .las stream. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>point_map</computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>output stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>input point range. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>optional sequence of <ref refid="group__psp__namedparameters" kindref="compound">Named Parameters</ref> among the ones listed below.</para></parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><ref refid="group__psp__namedparameters_1PSP_point_map" kindref="member">point_map</ref></para></entry><entry thead="no"><para>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with value type <computeroutput>geom_traits::Point_3</computeroutput>. If this parameter is omitted, <computeroutput><ref refid="structCGAL_1_1Identity__property__map" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Property_map.tag">CGAL::Identity_property_map</ref>&lt;geom_traits::Point_3&gt;</computeroutput> is used. </para></entry></row>
<row>
<entry thead="no"><para><ref refid="group__psp__namedparameters_1PSP_geom_traits" kindref="member">geom_traits</ref></para></entry><entry thead="no"><para>an instance of a geometric traits class, model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para></entry></row>
</table>
</para></listitem>
</variablelist>
</para><para><simplesect kind="return"><para>true on success. </para></simplesect>
<simplesect kind="warning"><para>This function requires a C++11 compiler. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/write_las_points.h" line="283" column="1" bodyfile="CGAL/IO/write_las_points.h" bodystart="283" bodyend="294"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Read and write points (with or without additional properties) in LAS format. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
