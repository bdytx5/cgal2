<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classTriangulationDataStructure__3" kind="class" language="C++" prot="public">
    <compoundname>TriangulationDataStructure_3</compoundname>
    <includes local="no">Concepts/TriangulationDataStructure_3.h</includes>
    <innerclass refid="classTriangulationDataStructure__3_1_1Cell" prot="public">TriangulationDataStructure_3::Cell</innerclass>
    <innerclass refid="classTriangulationDataStructure__3_1_1Vertex" prot="public">TriangulationDataStructure_3::Vertex</innerclass>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classTriangulationDataStructure__3_1a5aab662af4b4d622a6637bcc499ae856" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type TriangulationDataStructure_3::Vertex</definition>
        <argsstring></argsstring>
        <name>Vertex</name>
        <briefdescription>
<para>Vertex type, requirements are described in <computeroutput><ref refid="classTriangulationDataStructure__3_1_1Vertex" kindref="compound">TriangulationDataStructure_3::Vertex</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="86" column="1" bodyfile="Concepts/TriangulationDataStructure_3.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classTriangulationDataStructure__3_1af926ae089b98995f9b422ce8fa6ff845" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type TriangulationDataStructure_3::Cell</definition>
        <argsstring></argsstring>
        <name>Cell</name>
        <briefdescription>
<para>Cell type, requirements are described in <computeroutput><ref refid="classTriangulationDataStructure__3_1_1Cell" kindref="compound">TriangulationDataStructure_3::Cell</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="91" column="1" bodyfile="Concepts/TriangulationDataStructure_3.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classTriangulationDataStructure__3_1aeed82501e302344871322b11dfe789c8" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type TriangulationDataStructure_3::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <briefdescription>
<para>Size type (unsigned integral type) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="96" column="1" bodyfile="Concepts/TriangulationDataStructure_3.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classTriangulationDataStructure__3_1ab791157d8612460243bcb2a804d91990" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type TriangulationDataStructure_3::difference_type</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
<para>Difference type (signed integral type) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="101" column="1" bodyfile="Concepts/TriangulationDataStructure_3.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type TriangulationDataStructure_3::Vertex_handle</definition>
        <argsstring></argsstring>
        <name>Vertex_handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="106" column="1" bodyfile="Concepts/TriangulationDataStructure_3.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type TriangulationDataStructure_3::Cell_handle</definition>
        <argsstring></argsstring>
        <name>Cell_handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="111" column="1" bodyfile="Concepts/TriangulationDataStructure_3.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classTriangulationDataStructure__3_1a540c1ac639e9ac22317900eba52dc92a" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type TriangulationDataStructure_3::Concurrency_tag</definition>
        <argsstring></argsstring>
        <name>Concurrency_tag</name>
        <briefdescription>
<para>Can be <computeroutput><ref refid="structCGAL_1_1Sequential__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::Sequential_tag</ref></computeroutput> or <computeroutput><ref refid="structCGAL_1_1Parallel__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::Parallel_tag</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>If it is <computeroutput><ref refid="structCGAL_1_1Parallel__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::Parallel_tag</ref></computeroutput>, the following functions can be called concurrently: <computeroutput>create_vertex</computeroutput>, <computeroutput>create_cell</computeroutput>, <computeroutput>delete_vertex</computeroutput>, <computeroutput>delete_cell</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="118" column="1" bodyfile="Concepts/TriangulationDataStructure_3.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classTriangulationDataStructure__3_1ad163ec1adb59e5a96a33af14adb57a1b" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>using TriangulationDataStructure_3::Rebind_vertex =  unspecified_type</definition>
        <argsstring></argsstring>
        <name>Rebind_vertex</name>
        <briefdescription>
<para></para><para>This template class allows to get the type of a triangulation data structure that only changes the vertex type. </para>        </briefdescription>
        <detaileddescription>
<para>It has to define a type <computeroutput>Rebind_vertex&lt;Vb2&gt;::Other</computeroutput> which is a <emphasis>rebound</emphasis> triangulation data structure, that is, the one whose <computeroutput><ref refid="classTriangulationDSVertexBase__3" kindref="compound">TriangulationDSVertexBase_3</ref></computeroutput> will be <computeroutput>Vb2</computeroutput>. <simplesect kind="note"><para>It can be implemented using a nested template class.  </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="130" column="1" bodyfile="Concepts/TriangulationDataStructure_3.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classTriangulationDataStructure__3_1a63f6460e7b1650f2291c514cd4ae65ab" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>using TriangulationDataStructure_3::Rebind_cell =  unspecified_type</definition>
        <argsstring></argsstring>
        <name>Rebind_cell</name>
        <briefdescription>
<para></para><para>This template class allows to get the type of a triangulation data structure that only changes the cell type. </para>        </briefdescription>
        <detaileddescription>
<para>It has to define a type <computeroutput>Rebind_cell&lt;Cb2&gt;::Other</computeroutput> which is a <emphasis>rebound</emphasis> triangulation data structure, that is, the one whose <computeroutput><ref refid="classTriangulationDSCellBase__3" kindref="compound">TriangulationDSCellBase_3</ref></computeroutput> will be <computeroutput>Cb2</computeroutput>. <simplesect kind="note"><para>It can be implemented using a nested template class.  </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="142" column="1" bodyfile="Concepts/TriangulationDataStructure_3.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classTriangulationDataStructure__3_1af31db7673a6d7d28c0bb90a3115ac695" prot="public" static="no">
        <type>Triple&lt; <ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref>, int, int &gt;</type>
        <definition>typedef Triple&lt;Cell_handle, int, int&gt; TriangulationDataStructure_3::Edge</definition>
        <argsstring></argsstring>
        <name>Edge</name>
        <briefdescription>
<para><computeroutput>(c,i,j)</computeroutput> is the edge of cell <computeroutput>c</computeroutput> whose vertices indices are <computeroutput>i</computeroutput> and <computeroutput>j</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>(See Section <ref refid="index_1TDS3secintro" kindref="member">Representation</ref>.) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="149" column="1" bodyfile="Concepts/TriangulationDataStructure_3.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classTriangulationDataStructure__3_1ad6a20b45e66dfb690bfcdb8438e9fcae" prot="public" static="no">
        <type>std::pair&lt; <ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref>, int &gt;</type>
        <definition>typedef std::pair&lt;Cell_handle, int&gt; TriangulationDataStructure_3::Facet</definition>
        <argsstring></argsstring>
        <name>Facet</name>
        <briefdescription>
<para><computeroutput>(c,i)</computeroutput> is the facet of <computeroutput>c</computeroutput> opposite to the vertex of index <computeroutput>i</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>(See Section <ref refid="index_1TDS3secintro" kindref="member">Representation</ref>.) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="156" column="1" bodyfile="Concepts/TriangulationDataStructure_3.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Iterators</header>
      <description><para>The following iterators allow one to visit all the vertices, edges, facets and cells of the triangulation data structure.</para><para>They are all bidirectional, non-mutable iterators. Iterators are convertible to the corresponding handles, thus the user can pass them directly as arguments to the functions. </para></description>
      <memberdef kind="typedef" id="classTriangulationDataStructure__3_1ad5569527522d61afa9ee6d0b1ccf616b" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type TriangulationDataStructure_3::Cell_iterator</definition>
        <argsstring></argsstring>
        <name>Cell_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="171" column="1" bodyfile="Concepts/TriangulationDataStructure_3.h" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classTriangulationDataStructure__3_1afd7664318d4d5d63854431a94aa0dd23" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type TriangulationDataStructure_3::Facet_iterator</definition>
        <argsstring></argsstring>
        <name>Facet_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="176" column="1" bodyfile="Concepts/TriangulationDataStructure_3.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classTriangulationDataStructure__3_1aa314ce18e3fd0f233caef717885bd066" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type TriangulationDataStructure_3::Edge_iterator</definition>
        <argsstring></argsstring>
        <name>Edge_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="181" column="1" bodyfile="Concepts/TriangulationDataStructure_3.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classTriangulationDataStructure__3_1acb978840c1782a8402bb7b825a5fede8" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type TriangulationDataStructure_3::Vertex_iterator</definition>
        <argsstring></argsstring>
        <name>Vertex_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="186" column="1" bodyfile="Concepts/TriangulationDataStructure_3.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Circulators</header>
      <description><para>The following circulators allow us to visit all the cells and facets incident to a given edge.</para><para>They are bidirectional and non-mutable.Circulators are convertible to the corresponding handles, thus the user can pass them directly as arguments to the functions. </para></description>
      <memberdef kind="typedef" id="classTriangulationDataStructure__3_1af25db0138461ba0d50dc0fa532b36c89" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type TriangulationDataStructure_3::Facet_circulator</definition>
        <argsstring></argsstring>
        <name>Facet_circulator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="202" column="1" bodyfile="Concepts/TriangulationDataStructure_3.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classTriangulationDataStructure__3_1abe06d3b8d13078a7b917f785be9ca79f" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type TriangulationDataStructure_3::Cell_circulator</definition>
        <argsstring></argsstring>
        <name>Cell_circulator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="207" column="1" bodyfile="Concepts/TriangulationDataStructure_3.h" bodystart="207" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a429b60de3f9efac2dea244a598406e54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TriangulationDataStructure_3::TriangulationDataStructure_3</definition>
        <argsstring>()</argsstring>
        <name>TriangulationDataStructure_3</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="217" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a3361b1108ee78cdc13f54a37c29a44be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TriangulationDataStructure_3::TriangulationDataStructure_3</definition>
        <argsstring>(const TriangulationDataStructure_3 &amp;tds1)</argsstring>
        <name>TriangulationDataStructure_3</name>
        <param>
          <type>const <ref refid="classTriangulationDataStructure__3" kindref="compound">TriangulationDataStructure_3</ref> &amp;</type>
          <declname>tds1</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>        </briefdescription>
        <detaileddescription>
<para>All vertices and cells are duplicated. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="222" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a9e2525beb055eacec49c6bb5a1198fa3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__3" kindref="compound">TriangulationDataStructure_3</ref> &amp;</type>
        <definition>TriangulationDataStructure_3&amp; TriangulationDataStructure_3::operator=</definition>
        <argsstring>(const TriangulationDataStructure_3 &amp;tds1)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classTriangulationDataStructure__3" kindref="compound">TriangulationDataStructure_3</ref> &amp;</type>
          <declname>tds1</declname>
        </param>
        <briefdescription>
<para>Assignment operator. </para>        </briefdescription>
        <detaileddescription>
<para>All vertices and cells are duplicated, and the former data structure of <computeroutput>tds</computeroutput> is deleted. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="228" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a9414a96a16309179ad08a0f42f196e2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle TriangulationDataStructure_3::copy_tds</definition>
        <argsstring>(const TriangulationDataStructure_3 &amp;tds1, Vertex_handle v=Vertex_handle())</argsstring>
        <name>copy_tds</name>
        <param>
          <type>const <ref refid="classTriangulationDataStructure__3" kindref="compound">TriangulationDataStructure_3</ref> &amp;</type>
          <declname>tds1</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
          <defval><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref>()</defval>
        </param>
        <briefdescription>
<para><computeroutput>tds1</computeroutput> is copied into <computeroutput>tds</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>v != <ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle()</ref></computeroutput>, the vertex of <computeroutput>tds</computeroutput> corresponding to <computeroutput>v</computeroutput> is returned, otherwise <computeroutput><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle()</ref></computeroutput> is returned. <simplesect kind="pre"><para>The optional argument <computeroutput>v</computeroutput> is a vertex of <computeroutput>tds1</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="237" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1aac784b676421bd590612bb08c0a84f89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TDS_src</type>
          </param>
          <param>
            <type>class ConvertVertex</type>
          </param>
          <param>
            <type>class ConvertCell</type>
          </param>
        </templateparamlist>
        <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref> tds</type>
        <definition>Vertex_handle tds TriangulationDataStructure_3::copy_tds</definition>
        <argsstring>(const TDS_src &amp;tds_src, typename TDS_src::Vertex_handle v, const ConvertVertex &amp;convert_vertex, const ConvertCell &amp;convert_cell)</argsstring>
        <name>copy_tds</name>
        <param>
          <type>const TDS_src &amp;</type>
          <declname>tds_src</declname>
        </param>
        <param>
          <type>typename TDS_src::Vertex_handle</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const ConvertVertex &amp;</type>
          <declname>convert_vertex</declname>
        </param>
        <param>
          <type>const ConvertCell &amp;</type>
          <declname>convert_cell</declname>
        </param>
        <briefdescription>
<para><computeroutput>tds_src</computeroutput> is copied into <computeroutput>this</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>As the vertex and cell types might be different and incompatible, the creation of new cells and vertices is made thanks to the functors <computeroutput>convert_vertex</computeroutput> and <computeroutput>convert_cell</computeroutput>, that convert vertex and cell types. For each vertex <computeroutput>v_src</computeroutput> in <computeroutput>tds_src</computeroutput>, the corresponding vertex <computeroutput>v_tgt</computeroutput> in <computeroutput>this</computeroutput> is a copy of the vertex returned by <computeroutput>convert_vertex(v_src)</computeroutput>. The same operations are done for cells with the functor convert_cell. If <computeroutput>v != TDS_src::Vertex_handle()</computeroutput>, a handle to the vertex created in <computeroutput>this</computeroutput> that is the copy of <computeroutput>v</computeroutput> is returned, otherwise <computeroutput><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle()</ref></computeroutput> is returned.</para><para><itemizedlist>
<listitem><para>A model of <computeroutput>ConvertVertex</computeroutput> must provide two operator()&apos;s that are responsible for converting the source vertex <computeroutput>v_src</computeroutput> into the target vertex:<itemizedlist>
<listitem><para><computeroutput><ref refid="classTriangulationDataStructure__3_1_1Vertex" kindref="compound">Vertex</ref> operator()(const TDS_src::Vertex&amp; v_src) const;</computeroutput> This operator is used to create the vertex from <computeroutput>v_src</computeroutput>.</para></listitem><listitem><para><computeroutput>void operator()(const TDS_src::Vertex&amp; v_src, Vertex&amp; v_tgt) const;</computeroutput> This operator is meant to be used in case heavy data should transferred to <computeroutput>v_tgt</computeroutput>.</para></listitem></itemizedlist>
</para></listitem><listitem><para>A model of ConvertCell must provide two operator()&apos;s that are responsible for converting the source cell <computeroutput>c_src</computeroutput> into the target cell:<itemizedlist>
<listitem><para><computeroutput><ref refid="classTriangulationDataStructure__3_1_1Cell" kindref="compound">Cell</ref> operator()(const TDS_src::Cell&amp; c_src) const;</computeroutput> This operator is used to create the cell from <computeroutput>c_src</computeroutput>.</para></listitem><listitem><para><computeroutput>void operator()(const TDS_src::Cell&amp; c_src, Cell&amp; c_tgt) const;</computeroutput> This operator is meant to be used in case heavy data should transferred to <computeroutput>c_tgt</computeroutput>.</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para><para><simplesect kind="pre"><para>The optional argument <computeroutput>v</computeroutput> is a vertex of <computeroutput>tds_src</computeroutput> or is <computeroutput><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle()</ref></computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="260" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a2b9adb172f8a7414752511edcd3f0c89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TriangulationDataStructure_3::swap</definition>
        <argsstring>(TriangulationDataStructure_3 &amp;tds1)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3" kindref="compound">TriangulationDataStructure_3</ref> &amp;</type>
          <declname>tds1</declname>
        </param>
        <briefdescription>
<para>Swaps <computeroutput>tds</computeroutput> and <computeroutput>tds1</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>There is no copy of cells and vertices, thus this method runs in constant time. This method should be preferred to <computeroutput>tds</computeroutput>=<computeroutput>tds1</computeroutput> or <computeroutput>tds</computeroutput>(<computeroutput>tds1</computeroutput>) when <computeroutput>tds1</computeroutput> is deleted after that. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="268" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1ae0069b70358e63a4e3c044b2f64e929d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TriangulationDataStructure_3::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Deletes all cells and vertices. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>tds</computeroutput> is reset as a triangulation data structure constructed by the default constructor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="274" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Access Functions</header>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a6a21ee61cf45df8c86f61b5d31720d0e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TriangulationDataStructure_3::dimension</definition>
        <argsstring>() const</argsstring>
        <name>dimension</name>
        <briefdescription>
<para>The dimension of the triangulated topological sphere. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="284" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a856ac86dc9d70d550ee73b74af9a5e5f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__3_1aeed82501e302344871322b11dfe789c8" kindref="member">size_type</ref></type>
        <definition>size_type TriangulationDataStructure_3::number_of_vertices</definition>
        <argsstring>() const</argsstring>
        <name>number_of_vertices</name>
        <briefdescription>
<para>The number of vertices. </para>        </briefdescription>
        <detaileddescription>
<para>Note that the triangulation data structure has one more vertex than an associated geometric triangulation, if there is one, since the infinite vertex is a standard vertex and is thus also counted. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="292" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1ab08bb26d4005108eb943c4e08d5018ff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__3_1aeed82501e302344871322b11dfe789c8" kindref="member">size_type</ref></type>
        <definition>size_type TriangulationDataStructure_3::number_of_cells</definition>
        <argsstring>() const</argsstring>
        <name>number_of_cells</name>
        <briefdescription>
<para>The number of cells. </para>        </briefdescription>
        <detaileddescription>
<para>Returns 0 if <computeroutput>tds</computeroutput>.<computeroutput><ref refid="classTriangulationDataStructure__3_1a6a21ee61cf45df8c86f61b5d31720d0e" kindref="member">dimension()</ref></computeroutput> <formula id="16">$ &lt;3$</formula>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="297" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Non constant-time access functions</header>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a4ed740a0373ab4ba1f3c8a4899c2281b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__3_1aeed82501e302344871322b11dfe789c8" kindref="member">size_type</ref></type>
        <definition>size_type TriangulationDataStructure_3::number_of_facets</definition>
        <argsstring>() const</argsstring>
        <name>number_of_facets</name>
        <briefdescription>
<para>The number of facets. </para>        </briefdescription>
        <detaileddescription>
<para>Returns 0 if <computeroutput>tds</computeroutput>.<computeroutput><ref refid="classTriangulationDataStructure__3_1a6a21ee61cf45df8c86f61b5d31720d0e" kindref="member">dimension()</ref></computeroutput> <formula id="17">$ &lt;2$</formula>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="307" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a2caedcb8a15d82292e09bf1c750bced6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__3_1aeed82501e302344871322b11dfe789c8" kindref="member">size_type</ref></type>
        <definition>size_type TriangulationDataStructure_3::number_of_edges</definition>
        <argsstring>() const</argsstring>
        <name>number_of_edges</name>
        <briefdescription>
<para>The number of edges. </para>        </briefdescription>
        <detaileddescription>
<para>Returns 0 if <computeroutput>tds</computeroutput>.<computeroutput><ref refid="classTriangulationDataStructure__3_1a6a21ee61cf45df8c86f61b5d31720d0e" kindref="member">dimension()</ref></computeroutput> <formula id="18">$ &lt;1$</formula>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="312" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Setting</header>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a6cfb301e7a48e171e8ee272fa52d94c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TriangulationDataStructure_3::set_dimension</definition>
        <argsstring>(int n)</argsstring>
        <name>set_dimension</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>This is an advanced function. </para>        </briefdescription>
        <detaileddescription>
<para></para><para>Sets the dimension to <computeroutput>n</computeroutput>.  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="325" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Queries</header>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1aa65f1686e98e1c839e438f178e5b5c45" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TriangulationDataStructure_3::is_vertex</definition>
        <argsstring>(Vertex_handle v) const</argsstring>
        <name>is_vertex</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Tests whether <computeroutput>v</computeroutput> is a vertex of <computeroutput>tds</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="335" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a8c9bdf0042b86083f3a72d983a941743" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TriangulationDataStructure_3::is_edge</definition>
        <argsstring>(Cell_handle c, int i, int j) const</argsstring>
        <name>is_edge</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Tests whether <computeroutput>(c,i,j)</computeroutput> is an edge of <computeroutput>tds</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Answers <computeroutput>false</computeroutput> when <computeroutput><ref refid="classTriangulationDataStructure__3_1a6a21ee61cf45df8c86f61b5d31720d0e" kindref="member">dimension()</ref></computeroutput> <formula id="18">$ &lt;1$</formula> . <simplesect kind="pre"><para><formula id="19">$ i,j \in\{0,1,2,3\}$</formula> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="342" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a687158d9dd7f24fe6bbd794db2a9f59c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TriangulationDataStructure_3::is_edge</definition>
        <argsstring>(Vertex_handle u, Vertex_handle v, Cell_handle &amp;c, int &amp;i, int &amp;j) const</argsstring>
        <name>is_edge</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Tests whether <computeroutput>(u,v)</computeroutput> is an edge of <computeroutput>tds</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>If the edge is found, it computes a cell <computeroutput>c</computeroutput> having this edge and the indices <computeroutput>i</computeroutput> and <computeroutput>j</computeroutput> of the vertices <computeroutput>u</computeroutput> and <computeroutput>v</computeroutput>, in this order. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="349" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1af420049d742ceffb903d3ed48aa684e0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TriangulationDataStructure_3::is_edge</definition>
        <argsstring>(Vertex_handle u, Vertex_handle v) const</argsstring>
        <name>is_edge</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Tests whether <computeroutput>(u,v)</computeroutput> is an edge of <computeroutput>tds</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="355" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1ad22e99a146edae0ee1b2d01e911724ec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TriangulationDataStructure_3::is_facet</definition>
        <argsstring>(Cell_handle c, int i) const</argsstring>
        <name>is_facet</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Tests whether <computeroutput>(c,i)</computeroutput> is a facet of <computeroutput>tds</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Answers <computeroutput>false</computeroutput> when <computeroutput><ref refid="classTriangulationDataStructure__3_1a6a21ee61cf45df8c86f61b5d31720d0e" kindref="member">dimension()</ref></computeroutput> <formula id="17">$ &lt;2$</formula> . <simplesect kind="pre"><para><formula id="20">$ i \in\{0,1,2,3\}$</formula> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="362" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1aed2a512ad3c5ed2c8fdc31fbbb029fc9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TriangulationDataStructure_3::is_facet</definition>
        <argsstring>(Vertex_handle u, Vertex_handle v, Vertex_handle w, Cell_handle &amp;c, int &amp;i, int &amp;j, int &amp;k) const</argsstring>
        <name>is_facet</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>Tests whether <computeroutput>(u,v,w)</computeroutput> is a facet of <computeroutput>tds</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>If the facet is found, it computes a cell <computeroutput>c</computeroutput> having this facet and the indices <computeroutput>i</computeroutput>, <computeroutput>j</computeroutput> and <computeroutput>k</computeroutput> of the vertices <computeroutput>u</computeroutput>, <computeroutput>v</computeroutput> and <computeroutput>w</computeroutput>, in this order. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="370" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a995ab79f782886252430b1f61f89b288" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TriangulationDataStructure_3::is_cell</definition>
        <argsstring>(Cell_handle c) const</argsstring>
        <name>is_cell</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Tests whether <computeroutput>c</computeroutput> is a cell of <computeroutput>tds</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Answers <computeroutput>false</computeroutput> when <computeroutput><ref refid="classTriangulationDataStructure__3_1a6a21ee61cf45df8c86f61b5d31720d0e" kindref="member">dimension()</ref></computeroutput> <formula id="16">$ &lt;3$</formula> . </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="377" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a9916351c37824546ffb8131414ce4658" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TriangulationDataStructure_3::is_cell</definition>
        <argsstring>(Vertex_handle u, Vertex_handle v, Vertex_handle w, Vertex_handle t, Cell_handle &amp;c, int &amp;i, int &amp;j, int &amp;k, int &amp;l) const</argsstring>
        <name>is_cell</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>k</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Tests whether <computeroutput>(u,v,w,t)</computeroutput> is a cell of <computeroutput>tds</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>If the cell <computeroutput>c</computeroutput> is found, it computes the indices <computeroutput>i</computeroutput>, <computeroutput>j</computeroutput>, <computeroutput>k</computeroutput> and <computeroutput>l</computeroutput> of the vertices <computeroutput>u</computeroutput>, <computeroutput>v</computeroutput>, <computeroutput>w</computeroutput> and <computeroutput>t</computeroutput> in <computeroutput>c</computeroutput>, in this order. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="385" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>has_vertex</header>
      <description><para>There is a method <computeroutput>has_vertex</computeroutput> in the cell class.</para><para>The analogous methods for facets are defined here. </para></description>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a04230a686b1b95c72453becaa7aadfcb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TriangulationDataStructure_3::has_vertex</definition>
        <argsstring>(const Facet &amp;f, Vertex_handle v, int &amp;j) const</argsstring>
        <name>has_vertex</name>
        <param>
          <type>const <ref refid="classTriangulationDataStructure__3_1ad6a20b45e66dfb690bfcdb8438e9fcae" kindref="member">Facet</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>If <computeroutput>v</computeroutput> is a vertex of <computeroutput>f</computeroutput>, then <computeroutput>j</computeroutput> is the index of <computeroutput>v</computeroutput> in the cell <computeroutput>f.first</computeroutput>, and the method returns <computeroutput>true</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>tds</computeroutput>.<ref refid="classTriangulationDataStructure__3_1a6a21ee61cf45df8c86f61b5d31720d0e" kindref="member">dimension()</ref>=3 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="397" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a3be306b371a30dc354367514124935fd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TriangulationDataStructure_3::has_vertex</definition>
        <argsstring>(Cell_handle c, int i, Vertex_handle v, int &amp;j) const</argsstring>
        <name>has_vertex</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Same for facet <computeroutput>(c,i)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Computes the index <computeroutput>j</computeroutput> of <computeroutput>v</computeroutput> in <computeroutput>c</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="403" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1ad9accafc62ec371daa387d58f237691d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TriangulationDataStructure_3::has_vertex</definition>
        <argsstring>(const Facet &amp;f, Vertex_handle v) const</argsstring>
        <name>has_vertex</name>
        <param>
          <type>const <ref refid="classTriangulationDataStructure__3_1ad6a20b45e66dfb690bfcdb8438e9fcae" kindref="member">Facet</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="408" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a2b067e245a8d0da60d8d3be2e148a3dc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TriangulationDataStructure_3::has_vertex</definition>
        <argsstring>(Cell_handle c, int i, Vertex_handle v) const</argsstring>
        <name>has_vertex</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Same as the first two methods, but these two methods do not return the index of the vertex. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="414" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Equality Tests</header>
      <description><para>The following three methods test whether two facets have the same vertices. </para></description>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a4e7c5fa5f7dfec7732ef659bd196734d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TriangulationDataStructure_3::are_equal</definition>
        <argsstring>(const Facet &amp;f, const Facet &amp;g) const</argsstring>
        <name>are_equal</name>
        <param>
          <type>const <ref refid="classTriangulationDataStructure__3_1ad6a20b45e66dfb690bfcdb8438e9fcae" kindref="member">Facet</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const <ref refid="classTriangulationDataStructure__3_1ad6a20b45e66dfb690bfcdb8438e9fcae" kindref="member">Facet</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="425" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1ab098c18e338af91ae9d4dc5a34a3ecab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TriangulationDataStructure_3::are_equal</definition>
        <argsstring>(Cell_handle c, int i, Cell_handle n, int j) const</argsstring>
        <name>are_equal</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="430" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1af77651103747471b0f1b7d7b5c05ea32" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TriangulationDataStructure_3::are_equal</definition>
        <argsstring>(const Facet &amp;f, Cell_handle n, int j) const</argsstring>
        <name>are_equal</name>
        <param>
          <type>const <ref refid="classTriangulationDataStructure__3_1ad6a20b45e66dfb690bfcdb8438e9fcae" kindref="member">Facet</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>For these three methods: </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>tds</computeroutput>.<ref refid="classTriangulationDataStructure__3_1a6a21ee61cf45df8c86f61b5d31720d0e" kindref="member">dimension()</ref>=3. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="435" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Flips</header>
      <description><para>Two kinds of flips exist for a three-dimensional triangulation.</para><para>They are reciprocal. To be flipped, an edge must be incident to three tetrahedra. During the flip, these three tetrahedra disappear and two tetrahedra appear. Figure <ref refid="classTriangulationDataStructure__3_1TDS3figflips" kindref="member">TDS3figflips</ref> (left) shows the edge that is flipped as bold dashed, and one of its three incident facets is shaded. On the right, the facet shared by the two new tetrahedra is shaded.</para><para><anchor id="classTriangulationDataStructure__3_1TDS3figflips"/><image type="html" name="flips.png">Flips.</image>
<image type="latex" name="flips.png">Flips.</image>
 The following methods guarantee the validity of the resulting 3D combinatorial triangulation. Moreover the flip operations do not invalidate the vertex handles, and only invalidate the cell handles of the affected cells.</para><para><emphasis>Flips for a 2d triangulation are not implemented yet</emphasis> </para></description>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a5837d666e4198f707f862003c1ffa033" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TriangulationDataStructure_3::flip</definition>
        <argsstring>(Edge e)</argsstring>
        <name>flip</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1af31db7673a6d7d28c0bb90a3115ac695" kindref="member">Edge</ref></type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="467" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1ae1dff464b3bce22c391f6e655b5add2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TriangulationDataStructure_3::flip</definition>
        <argsstring>(Cell_handle c, int i, int j)</argsstring>
        <name>flip</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Before flipping, these methods check that edge <computeroutput>e=(c,i,j)</computeroutput> is flippable (which is quite expensive). </para>        </briefdescription>
        <detaileddescription>
<para>They return <computeroutput>false</computeroutput> or <computeroutput>true</computeroutput> according to this test. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="474" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a2033a88a5e9e76580b52c483b49e94a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TriangulationDataStructure_3::flip_flippable</definition>
        <argsstring>(Edge e)</argsstring>
        <name>flip_flippable</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1af31db7673a6d7d28c0bb90a3115ac695" kindref="member">Edge</ref></type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="479" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1ab17d9dbb42f3fdb48b768d2756fea15d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TriangulationDataStructure_3::flip_flippable</definition>
        <argsstring>(Cell_handle c, int i, int j)</argsstring>
        <name>flip_flippable</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Should be preferred to the previous methods when the edge is known to be flippable. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The edge is flippable. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="486" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a35035785fb40f4580413e53289ce168e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TriangulationDataStructure_3::flip</definition>
        <argsstring>(Facet f)</argsstring>
        <name>flip</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1ad6a20b45e66dfb690bfcdb8438e9fcae" kindref="member">Facet</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="491" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a2ad2941984c1eac5561665700bfd60b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TriangulationDataStructure_3::flip</definition>
        <argsstring>(Cell_handle c, int i)</argsstring>
        <name>flip</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Before flipping, these methods check that facet <computeroutput>f=(c,i)</computeroutput> is flippable (which is quite expensive). </para>        </briefdescription>
        <detaileddescription>
<para>They return <computeroutput>false</computeroutput> or <computeroutput>true</computeroutput> according to this test. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="498" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1abdf5a4004ecc08decbaa69992e6a5652" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TriangulationDataStructure_3::flip_flippable</definition>
        <argsstring>(Facet f)</argsstring>
        <name>flip_flippable</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1ad6a20b45e66dfb690bfcdb8438e9fcae" kindref="member">Facet</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="503" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a0891ed2a1907f79a1d5427b77521d23a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TriangulationDataStructure_3::flip_flippable</definition>
        <argsstring>(Cell_handle c, int i)</argsstring>
        <name>flip_flippable</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Should be preferred to the previous methods when the facet is known to be flippable. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The facet is flippable. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="510" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Insertions</header>
      <description><para>The following modifier member functions guarantee the combinatorial validity of the resulting triangulation. </para></description>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1ad6076fbc62d2df3e7ff80f10477e45e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle TriangulationDataStructure_3::insert_in_cell</definition>
        <argsstring>(Cell_handle c)</argsstring>
        <name>insert_in_cell</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Creates a new vertex, inserts it in cell <computeroutput>c</computeroutput> and returns its handle. </para>        </briefdescription>
        <detaileddescription>
<para>The cell <computeroutput>c</computeroutput> is split into four new cells, each of these cells being formed by the new vertex and a facet of <computeroutput>c</computeroutput>. <simplesect kind="pre"><para><computeroutput>tds</computeroutput>.<computeroutput><ref refid="classTriangulationDataStructure__3_1a6a21ee61cf45df8c86f61b5d31720d0e" kindref="member">dimension()</ref></computeroutput> <formula id="21">$ = 3$</formula> and <computeroutput>c</computeroutput> is a cell of <computeroutput>tds</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="524" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1ac3992727684758e91ea72b04613691af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle TriangulationDataStructure_3::insert_in_facet</definition>
        <argsstring>(const Facet &amp;f)</argsstring>
        <name>insert_in_facet</name>
        <param>
          <type>const <ref refid="classTriangulationDataStructure__3_1ad6a20b45e66dfb690bfcdb8438e9fcae" kindref="member">Facet</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Creates a new vertex, inserts it in facet <computeroutput>f</computeroutput> and returns its handle. </para>        </briefdescription>
        <detaileddescription>
<para>In dimension 3, the two incident cells are split into 3 new cells; in dimension 2, the facet is split into 3 facets. <simplesect kind="pre"><para><computeroutput>tds</computeroutput>.<computeroutput><ref refid="classTriangulationDataStructure__3_1a6a21ee61cf45df8c86f61b5d31720d0e" kindref="member">dimension()</ref></computeroutput> <formula id="22">$ \geq2$</formula> and <computeroutput>f</computeroutput> is a facet of <computeroutput>tds</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="532" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1aa2c26664c41c84945b9988216fa9a2b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle TriangulationDataStructure_3::insert_in_facet</definition>
        <argsstring>(Cell_handle c, int i)</argsstring>
        <name>insert_in_facet</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Creates a new vertex, inserts it in facet <computeroutput>i</computeroutput> of <computeroutput>c</computeroutput> and returns its handle. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>tds</computeroutput>.<computeroutput><ref refid="classTriangulationDataStructure__3_1a6a21ee61cf45df8c86f61b5d31720d0e" kindref="member">dimension()</ref></computeroutput> <formula id="22">$ \geq2$</formula>, <formula id="20">$ i \in\{0,1,2,3\}$</formula> in dimension 3, <formula id="23">$ i=3$</formula> in dimension 2 and <computeroutput>(c,i)</computeroutput> is a facet of <computeroutput>tds</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="539" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a83e0de38dc74a748306453573e5bcfb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle TriangulationDataStructure_3::insert_in_edge</definition>
        <argsstring>(Edge e)</argsstring>
        <name>insert_in_edge</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1af31db7673a6d7d28c0bb90a3115ac695" kindref="member">Edge</ref></type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Creates a new vertex, inserts it in edge <computeroutput>e</computeroutput> and returns its handle. </para>        </briefdescription>
        <detaileddescription>
<para>In dimension 3, all the incident cells are split into 2 new cells; in dimension 2, the 2 incident facets are split into 2 new facets; in dimension 1, the edge is split into 2 new edges. <simplesect kind="pre"><para><computeroutput>tds</computeroutput>.<computeroutput><ref refid="classTriangulationDataStructure__3_1a6a21ee61cf45df8c86f61b5d31720d0e" kindref="member">dimension()</ref></computeroutput> <formula id="24">$ \geq1$</formula> and <computeroutput>e</computeroutput> is an edge of <computeroutput>tds</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="549" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1aff296730457731bb243ed50f62178017" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle TriangulationDataStructure_3::insert_in_edge</definition>
        <argsstring>(Cell_handle c, int i, int j)</argsstring>
        <name>insert_in_edge</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Creates a new vertex, inserts it in edge <formula id="25">$ (i,j)$</formula> of <computeroutput>c</computeroutput> and returns its handle. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>tds</computeroutput>.<computeroutput><ref refid="classTriangulationDataStructure__3_1a6a21ee61cf45df8c86f61b5d31720d0e" kindref="member">dimension()</ref></computeroutput> <formula id="24">$ \geq1$</formula>. <formula id="26">$ i\neq j$</formula>, <formula id="19">$ i,j \in\{0,1,2,3\}$</formula> in dimension 3, <formula id="27">$ i,j \in\{0,1,2\}$</formula> in dimension 2, <formula id="28">$ i,j \in\{0,1\}$</formula> in dimension 1 and <computeroutput>(c,i,j)</computeroutput> is an edge of <computeroutput>tds</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="556" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a94f00b8fe946834c47f544016d2d7a5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle TriangulationDataStructure_3::insert_increase_dimension</definition>
        <argsstring>(Vertex_handle star=Vertex_handle())</argsstring>
        <name>insert_increase_dimension</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
          <declname>star</declname>
          <defval><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref>()</defval>
        </param>
        <briefdescription>
<para>Transforms a triangulation of the sphere <formula id="10">$ S^d$</formula> of <formula id="11">$ \mathbb{R}^{d+1}$</formula> into the triangulation of the sphere <formula id="29">$ S^{d+1}$</formula> of <formula id="30">$ \mathbb{R}^{d+2}$</formula> by adding a new vertex <computeroutput>v</computeroutput>: <computeroutput>v</computeroutput> is linked to all the vertices to triangulate one of the two half-spheres of dimension <formula id="31">$ (d+1)$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="classTriangulationDataStructure__3_1_1Vertex" kindref="compound">Vertex</ref> <computeroutput>star</computeroutput> is used to triangulate the second half-sphere (when there is an associated geometric triangulation, <computeroutput>star</computeroutput> is in fact the vertex associated with its infinite vertex). See Figure <ref refid="classTriangulationDataStructure__3_1TDS3figtopoinsert_outside_affine_hull" kindref="member">TDS3figtopoinsert_outside_affine_hull</ref>.</para><para>The numbering of the cells is such that, if <computeroutput>f</computeroutput> was a face of maximal dimension in the initial triangulation, then <computeroutput>(f,v)</computeroutput> (in this order) is the corresponding face in the new triangulation. This method can be used to insert the first two vertices in an empty triangulation.</para><para>A handle to <computeroutput>v</computeroutput> is returned. <simplesect kind="pre"><para><computeroutput>tds</computeroutput>.<computeroutput><ref refid="classTriangulationDataStructure__3_1a6a21ee61cf45df8c86f61b5d31720d0e" kindref="member">dimension()</ref></computeroutput> <formula id="32">$ = d &lt; 3$</formula>. When <computeroutput>tds</computeroutput>.<computeroutput><ref refid="classTriangulationDataStructure__3_1a856ac86dc9d70d550ee73b74af9a5e5f" kindref="member">number_of_vertices()</ref></computeroutput> <formula id="33">$ &gt;0$</formula>, <formula id="34">$ star \neq$</formula> <computeroutput><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle()</ref></computeroutput> and <computeroutput>star</computeroutput> is a vertex of <computeroutput>tds</computeroutput>.</para></simplesect>
<anchor id="classTriangulationDataStructure__3_1TDS3figtopoinsert_outside_affine_hull"/> <image type="html" name="topo-insert_outside_affine_hull.png">insert_increase_dimension (1-dimensional case).</image>
<image type="latex" name="topo-insert_outside_affine_hull.png">insert_increase_dimension (1-dimensional case).</image>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="585" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a48ff04c7b5755a4b82f28cb1b6507328" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CellIt</type>
          </param>
        </templateparamlist>
        <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle TriangulationDataStructure_3::insert_in_hole</definition>
        <argsstring>(CellIt cell_begin, CellIt cell_end, Cell_handle begin, int i)</argsstring>
        <name>insert_in_hole</name>
        <param>
          <type>CellIt</type>
          <declname>cell_begin</declname>
        </param>
        <param>
          <type>CellIt</type>
          <declname>cell_end</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref></type>
          <declname>begin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Creates a new vertex by starring a hole. </para>        </briefdescription>
        <detaileddescription>
<para>It takes an iterator range [<computeroutput>cell_begin</computeroutput>; <computeroutput>cell_end</computeroutput>[ of <computeroutput>Cell_handles</computeroutput> which specifies a set of connected cells (resp. facets in dimension 2) describing a hole. (<computeroutput>begin</computeroutput>, <computeroutput>i</computeroutput>) is a facet (resp. an edge) on the boundary of the hole, that is, <computeroutput>begin</computeroutput> belongs to the set of cells (resp. facets) previously described, and <computeroutput>begin-&gt;neighbor(i)</computeroutput> does not. Then this function deletes all the cells (resp. facets) describing the hole, creates a new vertex <computeroutput>v</computeroutput>, and for each facet (resp. edge) on the boundary of the hole, creates a new cell (resp. facet) with <computeroutput>v</computeroutput> as vertex. <computeroutput>v</computeroutput> is returned. <simplesect kind="pre"><para><computeroutput>tds</computeroutput>.<computeroutput><ref refid="classTriangulationDataStructure__3_1a6a21ee61cf45df8c86f61b5d31720d0e" kindref="member">dimension()</ref></computeroutput> <formula id="22">$ \geq2$</formula>, the set of cells (resp. facets) is connected, and its boundary is connected. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="600" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a4d56ad9d2d2646e093e2288203b1a294" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CellIt</type>
          </param>
        </templateparamlist>
        <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle TriangulationDataStructure_3::insert_in_hole</definition>
        <argsstring>(CellIt cell_begin, CellIt cell_end, Cell_handle begin, int i, Vertex_handle newv)</argsstring>
        <name>insert_in_hole</name>
        <param>
          <type>CellIt</type>
          <declname>cell_begin</declname>
        </param>
        <param>
          <type>CellIt</type>
          <declname>cell_end</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref></type>
          <declname>begin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
          <declname>newv</declname>
        </param>
        <briefdescription>
<para>Same as above, except that <computeroutput>newv</computeroutput> will be used as the new vertex, which must have been allocated previously with e.g. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>create_vertex</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="608" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Removal</header>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a65b1f8ca49810b63670f5a77bfc64c87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TriangulationDataStructure_3::remove_decrease_dimension</definition>
        <argsstring>(Vertex_handle v, Vertex_handle w=v)</argsstring>
        <name>remove_decrease_dimension</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
          <declname>w</declname>
          <defval>v</defval>
        </param>
        <briefdescription>
<para>This operation is the reciprocal of <computeroutput><ref refid="classTriangulationDataStructure__3_1a94f00b8fe946834c47f544016d2d7a5d" kindref="member">insert_increase_dimension()</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>It transforms a triangulation of the sphere <formula id="10">$ S^d$</formula> of <formula id="11">$ \mathbb{R}^{d+1}$</formula> into the triangulation of the sphere <formula id="35">$ S^{d-1}$</formula> of <formula id="36">$ \mathbb{R}^{d}$</formula> by removing the vertex <computeroutput>v</computeroutput>. Delete the cells incident to <computeroutput>w</computeroutput>, keep the others. <simplesect kind="pre"><para><computeroutput>tds</computeroutput>.<computeroutput><ref refid="classTriangulationDataStructure__3_1a6a21ee61cf45df8c86f61b5d31720d0e" kindref="member">dimension()</ref></computeroutput> <formula id="37">$ = d \geq-1$</formula>. <computeroutput>tds</computeroutput>.<computeroutput>degree(v)</computeroutput> <formula id="38">$ =$</formula> <computeroutput>degree(w)</computeroutput> <formula id="38">$ =$</formula> <computeroutput>tds</computeroutput>.<computeroutput><ref refid="classTriangulationDataStructure__3_1a856ac86dc9d70d550ee73b74af9a5e5f" kindref="member">number_of_vertices()</ref></computeroutput> <formula id="39">$ -1$</formula>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="624" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a9a875e6aae5e58d5273441c9fd8efc0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref></type>
        <definition>Cell_handle TriangulationDataStructure_3::remove_from_maximal_dimension_simplex</definition>
        <argsstring>(Vertex_handle v)</argsstring>
        <name>remove_from_maximal_dimension_simplex</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Removes <computeroutput>v</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The incident simplices of maximal dimension incident to <computeroutput>v</computeroutput> are replaced by a single simplex of the same dimension. This operation is exactly the reciprocal to <computeroutput>tds</computeroutput>.<computeroutput>insert_in_cell(v)</computeroutput> in dimension 3, <computeroutput>tds</computeroutput>.<computeroutput>insert_in_facet(v)</computeroutput> in dimension 2, and <computeroutput>tds</computeroutput>.<computeroutput>insert_in_edge(v)</computeroutput> in dimension 1. <simplesect kind="pre"><para><computeroutput>tds</computeroutput>.<computeroutput>degree(v)</computeroutput> <formula id="38">$ =$</formula> <computeroutput>tds</computeroutput>.<computeroutput><ref refid="classTriangulationDataStructure__3_1a6a21ee61cf45df8c86f61b5d31720d0e" kindref="member">dimension()</ref>+1</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="635" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Dimension Manipulation</header>
      <description><para>The following operation, <computeroutput>decrease_dimension</computeroutput>, is necessary when the displacement of a vertex decreases the dimension of the triangulation. </para></description>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a82b76871ce5b51b831e4e40d9d34a9fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TriangulationDataStructure_3::decrease_dimension</definition>
        <argsstring>(Cell_handle c, int i)</argsstring>
        <name>decrease_dimension</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>The link of a vertex <formula id="40">$ v$</formula> is formed by the facets disjoint from <formula id="40">$ v$</formula> that are included in the cells incident to <formula id="40">$ v$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>When the link of <computeroutput>v = c-&gt;vertex(i)</computeroutput> contains all the other vertices, <computeroutput>decrease_dimension</computeroutput> crushes the triangulation of the sphere <formula id="10">$ S^d$</formula> of <formula id="11">$ \mathbb{R}^{d+1}$</formula> onto the triangulation of the sphere <formula id="35">$ S^{d-1}$</formula> of <formula id="36">$ \mathbb{R}^{d}$</formula> formed by the link of <computeroutput>v</computeroutput> augmented with the vertex <computeroutput>v</computeroutput> itself, for <formula id="41">$ d$</formula>==2,3; this one is placed on the facet <computeroutput>(c, i)</computeroutput> (see Fig. <ref refid="classTriangulationDataStructure__3_1TDS3dim_down" kindref="member">TDS3dim_down</ref>). <simplesect kind="pre"><para>The dimension must be 2 or 3. The degree of <computeroutput>v</computeroutput> must be equal to the total number of vertices of the triangulation data structure minus 1.</para></simplesect>
<anchor id="classTriangulationDataStructure__3_1TDS3dim_down"/><image type="html" name="tds-dim_down.png"></image>
 <image type="latex" name="tds-dim_down.png"></image>
</para><para><center><bold>From an <formula id="10">$ S^d$</formula> data structure to an <formula id="35">$ S^{d-1}$</formula> data structure (top: <formula id="42">$ d==2$</formula>, bottom: <formula id="43">$ d==3$</formula>). </bold></center> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="661" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Other modifiers</header>
      <description><para>The following modifiers can affect the validity of the triangulation data structure. </para></description>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1af501f165455a2411543d6ec2542fea8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TriangulationDataStructure_3::reorient</definition>
        <argsstring>()</argsstring>
        <name>reorient</name>
        <briefdescription>
<para>This is an advanced function. </para>        </briefdescription>
        <detaileddescription>
<para></para><para>Changes the orientation of all cells of the triangulation data structure.  <simplesect kind="pre"><para><computeroutput>tds</computeroutput>.<computeroutput><ref refid="classTriangulationDataStructure__3_1a6a21ee61cf45df8c86f61b5d31720d0e" kindref="member">dimension()</ref></computeroutput> <formula id="24">$ \geq1$</formula>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="676" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a0fc1c3d4aa69c6411d240989dec0d7ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle TriangulationDataStructure_3::create_vertex</definition>
        <argsstring>(const Vertex &amp;v=Vertex())</argsstring>
        <name>create_vertex</name>
        <param>
          <type>const <ref refid="classTriangulationDataStructure__3_1_1Vertex" kindref="compound">Vertex</ref> &amp;</type>
          <declname>v</declname>
          <defval><ref refid="classTriangulationDataStructure__3_1_1Vertex" kindref="compound">Vertex</ref>()</defval>
        </param>
        <briefdescription>
<para>This is an advanced function. </para>        </briefdescription>
        <detaileddescription>
<para></para><para>Adds a copy of the vertex <computeroutput>v</computeroutput> to the triangulation data structure.  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="684" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a3a98706a756a31b0c10274cd6540dbd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle TriangulationDataStructure_3::create_vertex</definition>
        <argsstring>(Vertex_handle v)</argsstring>
        <name>create_vertex</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>This is an advanced function. </para>        </briefdescription>
        <detaileddescription>
<para></para><para>Creates a vertex which is a copy of the one pointed to by <computeroutput>v</computeroutput> and adds it to the triangulation data structure.  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="693" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a1432860206073c24ca43dbbdfb13b26e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref></type>
        <definition>Cell_handle TriangulationDataStructure_3::create_cell</definition>
        <argsstring>(const Cell &amp;c=Cell())</argsstring>
        <name>create_cell</name>
        <param>
          <type>const <ref refid="classTriangulationDataStructure__3_1_1Cell" kindref="compound">Cell</ref> &amp;</type>
          <declname>c</declname>
          <defval><ref refid="classTriangulationDataStructure__3_1_1Cell" kindref="compound">Cell</ref>()</defval>
        </param>
        <briefdescription>
<para>This is an advanced function. </para>        </briefdescription>
        <detaileddescription>
<para></para><para>Adds a copy of the cell <computeroutput>c</computeroutput> to the triangulation data structure.  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="701" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a17b4a21b9f6b95334baa18fdb5598dbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref></type>
        <definition>Cell_handle TriangulationDataStructure_3::create_cell</definition>
        <argsstring>(Cell_handle c)</argsstring>
        <name>create_cell</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>This is an advanced function. </para>        </briefdescription>
        <detaileddescription>
<para></para><para>Creates a cell which is a copy of the one pointed to by <computeroutput>c</computeroutput> and adds it to the triangulation data structure.  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="710" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1aec0d8528e29ce73226d66d44237cf8c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref></type>
        <definition>Cell_handle TriangulationDataStructure_3::create_cell</definition>
        <argsstring>(Vertex_handle v0, Vertex_handle v1, Vertex_handle v2, Vertex_handle v3)</argsstring>
        <name>create_cell</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
          <declname>v0</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
          <declname>v2</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
          <declname>v3</declname>
        </param>
        <briefdescription>
<para>This is an advanced function. </para>        </briefdescription>
        <detaileddescription>
<para></para><para>Creates a cell and adds it into the triangulation data structure. Initializes the vertices of the cell, its neighbor handles being initialized with the default constructed handle.  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="720" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1aee7bebae22e4fe9094b744d8ea54d28b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref></type>
        <definition>Cell_handle TriangulationDataStructure_3::create_cell</definition>
        <argsstring>(Vertex_handle v0, Vertex_handle v1, Vertex_handle v2, Vertex_handle v3, Cell_handle n0, Cell_handle n1, Cell_handle n2, Cell_handle n3)</argsstring>
        <name>create_cell</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
          <declname>v0</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
          <declname>v2</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
          <declname>v3</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref></type>
          <declname>n0</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref></type>
          <declname>n1</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref></type>
          <declname>n2</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref></type>
          <declname>n3</declname>
        </param>
        <briefdescription>
<para>This is an advanced function. </para>        </briefdescription>
        <detaileddescription>
<para></para><para>Creates a cell, initializes its vertices and neighbors, and adds it into the triangulation data structure.  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="730" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1ab3dc7f89e6aa9416f152a8f9f901ab2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TriangulationDataStructure_3::delete_vertex</definition>
        <argsstring>(Vertex_handle v)</argsstring>
        <name>delete_vertex</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>This is an advanced function. </para>        </briefdescription>
        <detaileddescription>
<para></para><para>Removes the vertex from the triangulation data structure.  <simplesect kind="pre"><para>The vertex is a vertex of <computeroutput>tds</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="742" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a44ca0c152b6d24a9d070b93d1c25f99e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TriangulationDataStructure_3::delete_cell</definition>
        <argsstring>(Cell_handle c)</argsstring>
        <name>delete_cell</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>This is an advanced function. </para>        </briefdescription>
        <detaileddescription>
<para></para><para>Removes the cell from the triangulation data structure.  <simplesect kind="pre"><para>The cell is a cell of <computeroutput>tds</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="751" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a869aea4305f17ad19adad642729e363c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class VertexIt</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void TriangulationDataStructure_3::delete_vertices</definition>
        <argsstring>(VertexIt first, VertexIt last)</argsstring>
        <name>delete_vertices</name>
        <param>
          <type>VertexIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>VertexIt</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>This is an advanced function. </para>        </briefdescription>
        <detaileddescription>
<para></para><para>Calls <computeroutput>delete_vertex</computeroutput> over an iterator range of value type <computeroutput>Vertex_handle</computeroutput>.  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="760" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a646b6bd66cd85422f294e60068629d3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CellIt</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void TriangulationDataStructure_3::delete_cells</definition>
        <argsstring>(CellIt first, CellIt last)</argsstring>
        <name>delete_cells</name>
        <param>
          <type>CellIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>CellIt</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>This is an advanced function. </para>        </briefdescription>
        <detaileddescription>
<para></para><para>Calls <computeroutput>delete_cell</computeroutput> over an iterator range of value type <computeroutput>Cell_handle</computeroutput>.  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="769" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Traversing the triangulation</header>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a5d92b7f62a307c8afb8abb1592fdd0d8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__3_1ad5569527522d61afa9ee6d0b1ccf616b" kindref="member">Cell_iterator</ref></type>
        <definition>Cell_iterator TriangulationDataStructure_3::cells_begin</definition>
        <argsstring>() const</argsstring>
        <name>cells_begin</name>
        <briefdescription>
<para>Returns <computeroutput><ref refid="classTriangulationDataStructure__3_1a6ce5cc0108e2af2ead45de9da8bf13f1" kindref="member">cells_end()</ref></computeroutput> when <computeroutput>tds.dimension()</computeroutput> <formula id="16">$ &lt;3$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="779" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a6ce5cc0108e2af2ead45de9da8bf13f1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__3_1ad5569527522d61afa9ee6d0b1ccf616b" kindref="member">Cell_iterator</ref></type>
        <definition>Cell_iterator TriangulationDataStructure_3::cells_end</definition>
        <argsstring>() const</argsstring>
        <name>cells_end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="784" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a9b0197c963274f1fb57c8014545fdef8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__3_1ad5569527522d61afa9ee6d0b1ccf616b" kindref="member">Cell_iterator</ref></type>
        <definition>Cell_iterator TriangulationDataStructure_3::raw_cells_begin</definition>
        <argsstring>() const</argsstring>
        <name>raw_cells_begin</name>
        <briefdescription>
<para>Low-level access to the cells, does not return <computeroutput><ref refid="classTriangulationDataStructure__3_1a6ce5cc0108e2af2ead45de9da8bf13f1" kindref="member">cells_end()</ref></computeroutput> when <computeroutput>tds.dimension()</computeroutput> <formula id="16">$ &lt;3$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="790" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1ab0569b5ce85fb023a323bf07b67c3f9d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__3_1ad5569527522d61afa9ee6d0b1ccf616b" kindref="member">Cell_iterator</ref></type>
        <definition>Cell_iterator TriangulationDataStructure_3::raw_cells_end</definition>
        <argsstring>() const</argsstring>
        <name>raw_cells_end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="795" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a2c32481f3e373ea2bbf7921c92d59dab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__3_1afd7664318d4d5d63854431a94aa0dd23" kindref="member">Facet_iterator</ref></type>
        <definition>Facet_iterator TriangulationDataStructure_3::facets_begin</definition>
        <argsstring>() const</argsstring>
        <name>facets_begin</name>
        <briefdescription>
<para>Returns <computeroutput><ref refid="classTriangulationDataStructure__3_1ac3bfe63c6a5202f262527bb03527139f" kindref="member">facets_end()</ref></computeroutput> when <computeroutput>tds.dimension()</computeroutput> <formula id="17">$ &lt;2$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="800" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1ac3bfe63c6a5202f262527bb03527139f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__3_1afd7664318d4d5d63854431a94aa0dd23" kindref="member">Facet_iterator</ref></type>
        <definition>Facet_iterator TriangulationDataStructure_3::facets_end</definition>
        <argsstring>() const</argsstring>
        <name>facets_end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="805" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a44c01272dd513e710d5d5727767b3b2f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__3_1aa314ce18e3fd0f233caef717885bd066" kindref="member">Edge_iterator</ref></type>
        <definition>Edge_iterator TriangulationDataStructure_3::edges_begin</definition>
        <argsstring>() const</argsstring>
        <name>edges_begin</name>
        <briefdescription>
<para>Returns <computeroutput><ref refid="classTriangulationDataStructure__3_1a7dbaf55983cfdb81b1d7f43ac7f46699" kindref="member">edges_end()</ref></computeroutput> when <computeroutput>tds.dimension()</computeroutput> <formula id="18">$ &lt;1$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="810" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a7dbaf55983cfdb81b1d7f43ac7f46699" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__3_1aa314ce18e3fd0f233caef717885bd066" kindref="member">Edge_iterator</ref></type>
        <definition>Edge_iterator TriangulationDataStructure_3::edges_end</definition>
        <argsstring>() const</argsstring>
        <name>edges_end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="815" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a6c6e2b3dc6856094a8d8d39e3b6f41ee" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__3_1acb978840c1782a8402bb7b825a5fede8" kindref="member">Vertex_iterator</ref></type>
        <definition>Vertex_iterator TriangulationDataStructure_3::vertices_begin</definition>
        <argsstring>() const</argsstring>
        <name>vertices_begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="820" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1abf0911ecc801a5df71737c95ad29c968" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__3_1acb978840c1782a8402bb7b825a5fede8" kindref="member">Vertex_iterator</ref></type>
        <definition>Vertex_iterator TriangulationDataStructure_3::vertices_end</definition>
        <argsstring>() const</argsstring>
        <name>vertices_end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="825" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Cell and facet circulators</header>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a93f8ab30228b2a515a5c9cdacd9d4d36" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__3_1abe06d3b8d13078a7b917f785be9ca79f" kindref="member">Cell_circulator</ref></type>
        <definition>Cell_circulator TriangulationDataStructure_3::incident_cells</definition>
        <argsstring>(const Edge &amp;e) const</argsstring>
        <name>incident_cells</name>
        <param>
          <type>const <ref refid="classTriangulationDataStructure__3_1af31db7673a6d7d28c0bb90a3115ac695" kindref="member">Edge</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Starts at an arbitrary cell incident to <computeroutput>e</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>tds.dimension()</computeroutput> <formula id="44">$ =3$</formula> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="836" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a531c8eef5aa5ab9c49ab328c014a679e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__3_1abe06d3b8d13078a7b917f785be9ca79f" kindref="member">Cell_circulator</ref></type>
        <definition>Cell_circulator TriangulationDataStructure_3::incident_cells</definition>
        <argsstring>(Cell_handle c, int i, int j) const</argsstring>
        <name>incident_cells</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>As above for edge <computeroutput>(i,j)</computeroutput> of <computeroutput>c</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="841" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1afbba273c688d4e08cf713b21f48e09a0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__3_1abe06d3b8d13078a7b917f785be9ca79f" kindref="member">Cell_circulator</ref></type>
        <definition>Cell_circulator TriangulationDataStructure_3::incident_cells</definition>
        <argsstring>(const Edge &amp;e, Cell_handle start) const</argsstring>
        <name>incident_cells</name>
        <param>
          <type>const <ref refid="classTriangulationDataStructure__3_1af31db7673a6d7d28c0bb90a3115ac695" kindref="member">Edge</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref></type>
          <declname>start</declname>
        </param>
        <briefdescription>
<para>Starts at cell <computeroutput>start</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>tds.dimension()</computeroutput> <formula id="44">$ =3$</formula> and <computeroutput>start</computeroutput> is incident to <computeroutput>e</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="847" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a175cb1f4a6f826b99caf57915abb85f1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__3_1abe06d3b8d13078a7b917f785be9ca79f" kindref="member">Cell_circulator</ref></type>
        <definition>Cell_circulator TriangulationDataStructure_3::incident_cells</definition>
        <argsstring>(Cell_handle c, int i, int j, Cell_handle start) const</argsstring>
        <name>incident_cells</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref></type>
          <declname>start</declname>
        </param>
        <briefdescription>
<para>As above for edge <computeroutput>(i,j)</computeroutput> of <computeroutput>c</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="852" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1ab1cdee0d617236024e0de968236ad4ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__3_1af25db0138461ba0d50dc0fa532b36c89" kindref="member">Facet_circulator</ref></type>
        <definition>Facet_circulator TriangulationDataStructure_3::incident_facets</definition>
        <argsstring>(Edge e) const</argsstring>
        <name>incident_facets</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1af31db7673a6d7d28c0bb90a3115ac695" kindref="member">Edge</ref></type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Starts at an arbitrary facet incident to <computeroutput>e</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Only defined in dimension 3, though are defined also in dimension 2: there are only two facets sahring an edge in dimension 2.</para><para><simplesect kind="pre"><para><computeroutput>tds.dimension()</computeroutput> <formula id="44">$ =3$</formula> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="863" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a33f555feb22c135bbc059a2235a7c414" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__3_1af25db0138461ba0d50dc0fa532b36c89" kindref="member">Facet_circulator</ref></type>
        <definition>Facet_circulator TriangulationDataStructure_3::incident_facets</definition>
        <argsstring>(Cell_handle c, int i, int j) const</argsstring>
        <name>incident_facets</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>As above for edge <computeroutput>(i,j)</computeroutput> of <computeroutput>c</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Only defined in dimension 3, though are defined also in dimension 2: there are only two facets sahring an edge in dimension 2. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="871" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a094ce9ce6cd049c07288bb02acb52c9e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__3_1af25db0138461ba0d50dc0fa532b36c89" kindref="member">Facet_circulator</ref></type>
        <definition>Facet_circulator TriangulationDataStructure_3::incident_facets</definition>
        <argsstring>(Edge e, Facet start) const</argsstring>
        <name>incident_facets</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1af31db7673a6d7d28c0bb90a3115ac695" kindref="member">Edge</ref></type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1ad6a20b45e66dfb690bfcdb8438e9fcae" kindref="member">Facet</ref></type>
          <declname>start</declname>
        </param>
        <briefdescription>
<para>Starts at facet <computeroutput>start</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Only defined in dimension 3, though are defined also in dimension 2: there are only two facets sahring an edge in dimension 2.</para><para><simplesect kind="pre"><para><computeroutput>start</computeroutput> is incident to <computeroutput>e</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="881" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a51abc6426d5df4a8766e56c50abfb53e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__3_1af25db0138461ba0d50dc0fa532b36c89" kindref="member">Facet_circulator</ref></type>
        <definition>Facet_circulator TriangulationDataStructure_3::incident_facets</definition>
        <argsstring>(Edge e, Cell_handle start, int f) const</argsstring>
        <name>incident_facets</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1af31db7673a6d7d28c0bb90a3115ac695" kindref="member">Edge</ref></type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref></type>
          <declname>start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Starts at facet of index <computeroutput>f</computeroutput> in <computeroutput>start</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Only defined in dimension 3, though are defined also in dimension 2: there are only two facets sahring an edge in dimension 2. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="889" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1aafbfaffeb28ea8414aee1763271aff93" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__3_1af25db0138461ba0d50dc0fa532b36c89" kindref="member">Facet_circulator</ref></type>
        <definition>Facet_circulator TriangulationDataStructure_3::incident_facets</definition>
        <argsstring>(Cell_handle c, int i, int j, Facet start) const</argsstring>
        <name>incident_facets</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1ad6a20b45e66dfb690bfcdb8438e9fcae" kindref="member">Facet</ref></type>
          <declname>start</declname>
        </param>
        <briefdescription>
<para>As above for edge <computeroutput>(i,j)</computeroutput> of <computeroutput>c</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Only defined in dimension 3, though are defined also in dimension 2: there are only two facets sahring an edge in dimension 2. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="897" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a60d2859f025d619b4b4779b5a1dae01f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__3_1af25db0138461ba0d50dc0fa532b36c89" kindref="member">Facet_circulator</ref></type>
        <definition>Facet_circulator TriangulationDataStructure_3::incident_facets</definition>
        <argsstring>(Cell_handle c, int i, int j, Cell_handle start, int f) const</argsstring>
        <name>incident_facets</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref></type>
          <declname>start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>As above for edge <computeroutput>(i,j)</computeroutput> of <computeroutput>c</computeroutput> and facet <computeroutput>(start,f)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Only defined in dimension 3, though are defined also in dimension 2: there are only two facets sahring an edge in dimension 2. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="906" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Traversal of the incident cells, facets and edges, and the adjacent vertices of a given vertex</header>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a909d34e5c177dd9a76b357adbd051e5b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator TriangulationDataStructure_3::incident_cells</definition>
        <argsstring>(Vertex_handle v, OutputIterator cells) const</argsstring>
        <name>incident_cells</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>cells</declname>
        </param>
        <briefdescription>
<para>Copies the <computeroutput>Cell_handle</computeroutput>s of all cells incident to <computeroutput>v</computeroutput> to the output iterator <computeroutput>cells</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the resulting output iterator. <simplesect kind="pre"><para><computeroutput>tds.dimension()</computeroutput> <formula id="44">$ =3$</formula>, <computeroutput>v</computeroutput> <formula id="45">$ \neq$</formula> <computeroutput><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle()</ref></computeroutput>, <computeroutput>tds.is_vertex(v)</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="922" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a69b083dd2feb9e6c0d289cad5c963851" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator TriangulationDataStructure_3::incident_facets</definition>
        <argsstring>(Vertex_handle v, OutputIterator facets) const</argsstring>
        <name>incident_facets</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>facets</declname>
        </param>
        <briefdescription>
<para>Copies the <computeroutput>Facet</computeroutput>s incident to <computeroutput>v</computeroutput> to the output iterator <computeroutput>facets</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the resulting output iterator. <simplesect kind="pre"><para><computeroutput>tds.dimension()</computeroutput> <formula id="46">$ &gt;1$</formula>, <computeroutput>v</computeroutput> <formula id="45">$ \neq$</formula> <computeroutput><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle()</ref></computeroutput>, <computeroutput>tds.is_vertex(v)</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="932" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a3d79d5f7d68a1f793d59939b128d52d5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator TriangulationDataStructure_3::incident_edges</definition>
        <argsstring>(Vertex_handle v, OutputIterator edges) const</argsstring>
        <name>incident_edges</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>edges</declname>
        </param>
        <briefdescription>
<para>Copies all <computeroutput>Edge</computeroutput>s incident to <computeroutput>v</computeroutput> to the output iterator <computeroutput>edges</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the resulting output iterator. <simplesect kind="pre"><para><computeroutput>tds.dimension()</computeroutput> <formula id="33">$ &gt;0$</formula>, <computeroutput>v</computeroutput> <formula id="45">$ \neq$</formula> <computeroutput><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle()</ref></computeroutput>, <computeroutput>tds.is_vertex(v)</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="941" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a5eb7787bb7661329a9b4e7ad3fc608ae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator TriangulationDataStructure_3::adjacent_vertices</definition>
        <argsstring>(Vertex_handle v, OutputIterator vertices) const</argsstring>
        <name>adjacent_vertices</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>vertices</declname>
        </param>
        <briefdescription>
<para>Copies the <computeroutput>Vertex_handle</computeroutput>s of all vertices adjacent to <computeroutput>v</computeroutput> to the output iterator <computeroutput>vertices</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>tds.dimension()</computeroutput> <formula id="47">$ &lt;0$</formula>, then do nothing. Returns the resulting output iterator. <simplesect kind="pre"><para><computeroutput>v</computeroutput> <formula id="45">$ \neq$</formula> <computeroutput><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle()</ref></computeroutput>, <computeroutput>tds.is_vertex(v)</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="951" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a51fce32aa7abf3d757bcabcebd22f2fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__3_1aeed82501e302344871322b11dfe789c8" kindref="member">size_type</ref></type>
        <definition>size_type TriangulationDataStructure_3::degree</definition>
        <argsstring>(Vertex_handle v) const</argsstring>
        <name>degree</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Returns the degree of a vertex, that is, the number of incident vertices. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>v</computeroutput> <formula id="45">$ \neq$</formula> <computeroutput><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle()</ref></computeroutput>, <computeroutput>tds.is_vertex(v)</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="957" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Traversal between adjacent cells</header>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a51dc4a918b2e1afe4f4fd93531ed337b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TriangulationDataStructure_3::mirror_index</definition>
        <argsstring>(Cell_handle c, int i) const</argsstring>
        <name>mirror_index</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns the index of <computeroutput>c</computeroutput> in its <formula id="48">$ i^{th}$</formula> neighbor. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><formula id="49">$ i \in\{0, 1, 2, 3\}$</formula>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="968" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a3c950698b86bc0abdc39260766235784" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle TriangulationDataStructure_3::mirror_vertex</definition>
        <argsstring>(Cell_handle c, int i) const</argsstring>
        <name>mirror_vertex</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns the vertex of the <formula id="48">$ i^{th}$</formula> neighbor of <computeroutput>c</computeroutput> that is opposite to <computeroutput>c</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><formula id="49">$ i \in\{0, 1, 2, 3\}$</formula>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="975" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1af386d55822ab1d47703f4500d642a7f2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__3_1ad6a20b45e66dfb690bfcdb8438e9fcae" kindref="member">Facet</ref></type>
        <definition>Facet TriangulationDataStructure_3::mirror_facet</definition>
        <argsstring>(Facet f) const</argsstring>
        <name>mirror_facet</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1ad6a20b45e66dfb690bfcdb8438e9fcae" kindref="member">Facet</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Returns the same facet seen from the other adjacent cell. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="980" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Checking</header>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1aa4c8fbaf1a700327e28d57c0c360f9b2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TriangulationDataStructure_3::is_valid</definition>
        <argsstring>(bool verbose=false) const</argsstring>
        <name>is_valid</name>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>This is a function for debugging purpose. </para>        </briefdescription>
        <detaileddescription>
<para></para><para>Checks the combinatorial validity of the triangulation by checking the local validity of all its cells and vertices (see functions below). (See Section <ref refid="index_1TDS3secintro" kindref="member">Representation</ref>.) Moreover, the Euler relation is tested.</para><para>When <computeroutput>verbose</computeroutput> is set to <computeroutput>true</computeroutput>, messages are printed to give a precise indication on the kind of invalidity encountered.  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="999" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1aa7ed0a72d1846f651dfd1590ad9d44cf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TriangulationDataStructure_3::is_valid</definition>
        <argsstring>(Vertex_handle v, bool verbose=false) const</argsstring>
        <name>is_valid</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>This is a function for debugging purpose. </para>        </briefdescription>
        <detaileddescription>
<para></para><para>Checks the local validity of the adjacency relations of the triangulation. It also calls the <computeroutput>is_valid</computeroutput> member function of the vertex. When <computeroutput>verbose</computeroutput> is set to <computeroutput>true</computeroutput>, messages are printed to give a precise indication on the kind of invalidity encountered.  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="1010" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a4161bdabd710d608994ff86527a79088" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TriangulationDataStructure_3::is_valid</definition>
        <argsstring>(Cell_handle c, bool verbose=false) const</argsstring>
        <name>is_valid</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>This is a function for debugging purpose. </para>        </briefdescription>
        <detaileddescription>
<para></para><para>Checks the local validity of the adjacency relations of the triangulation. It also calls the <computeroutput>is_valid</computeroutput> member function of the cell. When <computeroutput>verbose</computeroutput> is set to <computeroutput>true</computeroutput>, messages are printed to give a precise indication on the kind of invalidity encountered.  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="1021" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1a674d4f4d02e85cfbe30e5ca3bd769d69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>istream &amp;</type>
        <definition>istream&amp; TriangulationDataStructure_3::operator&gt;&gt;</definition>
        <argsstring>(istream &amp;is, TriangulationDataStructure_3 &amp;tds)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__3" kindref="compound">TriangulationDataStructure_3</ref> &amp;</type>
          <declname>tds</declname>
        </param>
        <briefdescription>
<para>Reads a combinatorial triangulation from <computeroutput>is</computeroutput> and assigns it to <computeroutput>tds</computeroutput> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="1026" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__3_1ad90ce2e95e385e8709301609ef32c2a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream&amp; TriangulationDataStructure_3::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const TriangulationDataStructure_3 &amp;tds)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classTriangulationDataStructure__3" kindref="compound">TriangulationDataStructure_3</ref> &amp;</type>
          <declname>tds</declname>
        </param>
        <briefdescription>
<para>Writes <computeroutput>tds</computeroutput> into the stream <computeroutput>os</computeroutput> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_3.h" line="1031" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>3D-triangulation data structures are meant to maintain the combinatorial information for 3D-geometric triangulations. </para>    </briefdescription>
    <detaileddescription>
<para> In CGAL, a triangulation data structure is a container of cells ( <formula id="0">$ 3$</formula>-faces) and vertices ( <formula id="1">$ 0$</formula>-faces). Following the standard vocabulary of simplicial complexes, an <formula id="2">$ i$</formula>-face <formula id="3">$ f_i$</formula> and a <formula id="4">$ j$</formula>-face <formula id="5">$ f_j$</formula> <formula id="6">$ (0 \leq j &lt; i \leq 3)$</formula> are said to be <emphasis>incident</emphasis> in the triangulation if <formula id="5">$ f_j$</formula> is a (sub)face of <formula id="3">$ f_i$</formula>, and two <formula id="2">$ i$</formula>-faces <formula id="7">$ (0 \leq i \leq 3)$</formula> are said to be <emphasis>adjacent</emphasis> if they share a common incident (sub)face.</para><para>Each cell gives access to its four incident vertices and to its four adjacent cells. Each vertex gives direct access to one of its incident cells, which is sufficient to retrieve all the incident cells when needed.</para><para>The four vertices of a cell are indexed with 0, 1, 2 and 3. The neighbors of a cell are also indexed with 0, 1, 2, 3 in such a way that the neighbor indexed by <formula id="2">$ i$</formula> is opposite to the vertex with the same index (see <ref refid="index_1fig__TDS3figrepres" kindref="member">fig__TDS3figrepres</ref>).</para><para>Edges ( <formula id="8">$ 1$</formula>-faces) and facets ( <formula id="9">$ 2$</formula>-faces) are not explicitly represented: a facet is given by a cell and an index (the facet <computeroutput>i</computeroutput> of a cell <computeroutput>c</computeroutput> is the facet of <computeroutput>c</computeroutput> that is opposite to the vertex of index <computeroutput>i</computeroutput>) and an edge is given by a cell and two indices (the edge <computeroutput>(i,j)</computeroutput> of a cell <computeroutput>c</computeroutput> is the edge whose endpoints are the vertices of indices <computeroutput>i</computeroutput> and <computeroutput>j</computeroutput> of <computeroutput>c</computeroutput>).</para><para>As CGAL explicitly deals with all degenerate cases, a 3D-triangulation data structure in CGAL can handle the cases when the dimension of the triangulation is lower than 3 (see Section <ref refid="index_1TDS3secintro" kindref="member">Representation</ref>).</para><para>Thus, a 3D-triangulation data structure can store a triangulation of a topological sphere <formula id="10">$ S^d$</formula> of <formula id="11">$ \mathbb{R}^{d+1}$</formula>, for any <formula id="12">$ d \in \{-1,0,1,2,3\}$</formula>.<linebreak/>
</para><para>The second template parameter of the basic triangulation class (see Chapter <ref refid="index_1chapterTriangulation3" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_3.tag">3D Triangulations</ref>) <computeroutput><ref refid="classCGAL_1_1Triangulation__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_3.tag">CGAL::Triangulation_3</ref></computeroutput> is a triangulation data structure class. (See Chapter <ref refid="index_1chapterTDS3" kindref="member">chapterTDS3</ref>.)</para><para>To ensure all the <emphasis>flexibility</emphasis> of the class <computeroutput><ref refid="classCGAL_1_1Triangulation__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_3.tag">CGAL::Triangulation_3</ref></computeroutput>, a model of a triangulation data structure must be templated by the base vertex and the base cell classes (see <ref refid="index_1TDS3secintro" kindref="member">Representation</ref>): <computeroutput><ref refid="classTriangulationDataStructure__3" kindref="compound">TriangulationDataStructure_3</ref>&lt;<ref refid="classTriangulationVertexBase__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_3.tag">TriangulationVertexBase_3</ref>,<ref refid="classTriangulationCellBase__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_3.tag">TriangulationCellBase_3</ref>&gt;</computeroutput>. The optional functionalities related to geometry are compulsory for this use as a template parameter of <computeroutput><ref refid="classCGAL_1_1Triangulation__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_3.tag">CGAL::Triangulation_3</ref></computeroutput>.</para><para>A class that satisfies the requirements for a triangulation data structure class must provide the following types and operations.</para><para><bold>I/O</bold><linebreak/>
</para><para>The information stored in the <computeroutput>iostream</computeroutput> is: the dimension, the number of vertices, the number of cells, the indices of the vertices of each cell, then the indices of the neighbors of each cell, where the index corresponds to the preceding list of cells. When dimension &lt; 3, the same information is stored for faces of maximal dimension instead of cells.</para><para><xrefsect id="hasModels_1_hasModels000001"><xreftitle>Has Models</xreftitle><xrefdescription><para><computeroutput><ref refid="classCGAL_1_1Triangulation__data__structure__3" kindref="compound">CGAL::Triangulation_data_structure_3</ref></computeroutput> </para></xrefdescription></xrefsect></para><para><simplesect kind="see"><para><computeroutput><ref refid="classTriangulationDataStructure__3_1_1Vertex" kindref="compound">TriangulationDataStructure_3::Vertex</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classTriangulationDataStructure__3_1_1Cell" kindref="compound">TriangulationDataStructure_3::Cell</ref></computeroutput> </para></simplesect>
</para>    </detaileddescription>
    <location file="Concepts/TriangulationDataStructure_3.h" line="77" column="1" bodyfile="Concepts/TriangulationDataStructure_3.h" bodystart="77" bodyend="1035"/>
    <listofallmembers>
      <member refid="classTriangulationDataStructure__3_1a5eb7787bb7661329a9b4e7ad3fc608ae" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>adjacent_vertices</name></member>
      <member refid="classTriangulationDataStructure__3_1a4e7c5fa5f7dfec7732ef659bd196734d" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>are_equal</name></member>
      <member refid="classTriangulationDataStructure__3_1ab098c18e338af91ae9d4dc5a34a3ecab" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>are_equal</name></member>
      <member refid="classTriangulationDataStructure__3_1af77651103747471b0f1b7d7b5c05ea32" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>are_equal</name></member>
      <member refid="classTriangulationDataStructure__3_1af926ae089b98995f9b422ce8fa6ff845" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>Cell</name></member>
      <member refid="classTriangulationDataStructure__3_1abe06d3b8d13078a7b917f785be9ca79f" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>Cell_circulator</name></member>
      <member refid="classTriangulationDataStructure__3_1ab0d95391bd3516f74b1fd105df5b9628" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>Cell_handle</name></member>
      <member refid="classTriangulationDataStructure__3_1ad5569527522d61afa9ee6d0b1ccf616b" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>Cell_iterator</name></member>
      <member refid="classTriangulationDataStructure__3_1a5d92b7f62a307c8afb8abb1592fdd0d8" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>cells_begin</name></member>
      <member refid="classTriangulationDataStructure__3_1a6ce5cc0108e2af2ead45de9da8bf13f1" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>cells_end</name></member>
      <member refid="classTriangulationDataStructure__3_1ae0069b70358e63a4e3c044b2f64e929d" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>clear</name></member>
      <member refid="classTriangulationDataStructure__3_1a540c1ac639e9ac22317900eba52dc92a" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>Concurrency_tag</name></member>
      <member refid="classTriangulationDataStructure__3_1a9414a96a16309179ad08a0f42f196e2e" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>copy_tds</name></member>
      <member refid="classTriangulationDataStructure__3_1aac784b676421bd590612bb08c0a84f89" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>copy_tds</name></member>
      <member refid="classTriangulationDataStructure__3_1a1432860206073c24ca43dbbdfb13b26e" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>create_cell</name></member>
      <member refid="classTriangulationDataStructure__3_1a17b4a21b9f6b95334baa18fdb5598dbc" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>create_cell</name></member>
      <member refid="classTriangulationDataStructure__3_1aec0d8528e29ce73226d66d44237cf8c7" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>create_cell</name></member>
      <member refid="classTriangulationDataStructure__3_1aee7bebae22e4fe9094b744d8ea54d28b" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>create_cell</name></member>
      <member refid="classTriangulationDataStructure__3_1a0fc1c3d4aa69c6411d240989dec0d7ff" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>create_vertex</name></member>
      <member refid="classTriangulationDataStructure__3_1a3a98706a756a31b0c10274cd6540dbd2" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>create_vertex</name></member>
      <member refid="classTriangulationDataStructure__3_1a82b76871ce5b51b831e4e40d9d34a9fd" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>decrease_dimension</name></member>
      <member refid="classTriangulationDataStructure__3_1a51fce32aa7abf3d757bcabcebd22f2fe" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>degree</name></member>
      <member refid="classTriangulationDataStructure__3_1a44ca0c152b6d24a9d070b93d1c25f99e" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>delete_cell</name></member>
      <member refid="classTriangulationDataStructure__3_1a646b6bd66cd85422f294e60068629d3a" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>delete_cells</name></member>
      <member refid="classTriangulationDataStructure__3_1ab3dc7f89e6aa9416f152a8f9f901ab2e" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>delete_vertex</name></member>
      <member refid="classTriangulationDataStructure__3_1a869aea4305f17ad19adad642729e363c" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>delete_vertices</name></member>
      <member refid="classTriangulationDataStructure__3_1ab791157d8612460243bcb2a804d91990" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>difference_type</name></member>
      <member refid="classTriangulationDataStructure__3_1a6a21ee61cf45df8c86f61b5d31720d0e" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>dimension</name></member>
      <member refid="classTriangulationDataStructure__3_1af31db7673a6d7d28c0bb90a3115ac695" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>Edge</name></member>
      <member refid="classTriangulationDataStructure__3_1aa314ce18e3fd0f233caef717885bd066" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>Edge_iterator</name></member>
      <member refid="classTriangulationDataStructure__3_1a44c01272dd513e710d5d5727767b3b2f" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>edges_begin</name></member>
      <member refid="classTriangulationDataStructure__3_1a7dbaf55983cfdb81b1d7f43ac7f46699" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>edges_end</name></member>
      <member refid="classTriangulationDataStructure__3_1ad6a20b45e66dfb690bfcdb8438e9fcae" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>Facet</name></member>
      <member refid="classTriangulationDataStructure__3_1af25db0138461ba0d50dc0fa532b36c89" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>Facet_circulator</name></member>
      <member refid="classTriangulationDataStructure__3_1afd7664318d4d5d63854431a94aa0dd23" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>Facet_iterator</name></member>
      <member refid="classTriangulationDataStructure__3_1a2c32481f3e373ea2bbf7921c92d59dab" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>facets_begin</name></member>
      <member refid="classTriangulationDataStructure__3_1ac3bfe63c6a5202f262527bb03527139f" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>facets_end</name></member>
      <member refid="classTriangulationDataStructure__3_1a5837d666e4198f707f862003c1ffa033" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>flip</name></member>
      <member refid="classTriangulationDataStructure__3_1ae1dff464b3bce22c391f6e655b5add2b" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>flip</name></member>
      <member refid="classTriangulationDataStructure__3_1a35035785fb40f4580413e53289ce168e" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>flip</name></member>
      <member refid="classTriangulationDataStructure__3_1a2ad2941984c1eac5561665700bfd60b4" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>flip</name></member>
      <member refid="classTriangulationDataStructure__3_1a2033a88a5e9e76580b52c483b49e94a5" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>flip_flippable</name></member>
      <member refid="classTriangulationDataStructure__3_1ab17d9dbb42f3fdb48b768d2756fea15d" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>flip_flippable</name></member>
      <member refid="classTriangulationDataStructure__3_1abdf5a4004ecc08decbaa69992e6a5652" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>flip_flippable</name></member>
      <member refid="classTriangulationDataStructure__3_1a0891ed2a1907f79a1d5427b77521d23a" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>flip_flippable</name></member>
      <member refid="classTriangulationDataStructure__3_1a04230a686b1b95c72453becaa7aadfcb" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>has_vertex</name></member>
      <member refid="classTriangulationDataStructure__3_1a3be306b371a30dc354367514124935fd" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>has_vertex</name></member>
      <member refid="classTriangulationDataStructure__3_1ad9accafc62ec371daa387d58f237691d" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>has_vertex</name></member>
      <member refid="classTriangulationDataStructure__3_1a2b067e245a8d0da60d8d3be2e148a3dc" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>has_vertex</name></member>
      <member refid="classTriangulationDataStructure__3_1a93f8ab30228b2a515a5c9cdacd9d4d36" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>incident_cells</name></member>
      <member refid="classTriangulationDataStructure__3_1a531c8eef5aa5ab9c49ab328c014a679e" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>incident_cells</name></member>
      <member refid="classTriangulationDataStructure__3_1afbba273c688d4e08cf713b21f48e09a0" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>incident_cells</name></member>
      <member refid="classTriangulationDataStructure__3_1a175cb1f4a6f826b99caf57915abb85f1" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>incident_cells</name></member>
      <member refid="classTriangulationDataStructure__3_1a909d34e5c177dd9a76b357adbd051e5b" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>incident_cells</name></member>
      <member refid="classTriangulationDataStructure__3_1a3d79d5f7d68a1f793d59939b128d52d5" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>incident_edges</name></member>
      <member refid="classTriangulationDataStructure__3_1ab1cdee0d617236024e0de968236ad4ad" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>incident_facets</name></member>
      <member refid="classTriangulationDataStructure__3_1a33f555feb22c135bbc059a2235a7c414" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>incident_facets</name></member>
      <member refid="classTriangulationDataStructure__3_1a094ce9ce6cd049c07288bb02acb52c9e" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>incident_facets</name></member>
      <member refid="classTriangulationDataStructure__3_1a51abc6426d5df4a8766e56c50abfb53e" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>incident_facets</name></member>
      <member refid="classTriangulationDataStructure__3_1aafbfaffeb28ea8414aee1763271aff93" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>incident_facets</name></member>
      <member refid="classTriangulationDataStructure__3_1a60d2859f025d619b4b4779b5a1dae01f" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>incident_facets</name></member>
      <member refid="classTriangulationDataStructure__3_1a69b083dd2feb9e6c0d289cad5c963851" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>incident_facets</name></member>
      <member refid="classTriangulationDataStructure__3_1ad6076fbc62d2df3e7ff80f10477e45e7" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>insert_in_cell</name></member>
      <member refid="classTriangulationDataStructure__3_1a83e0de38dc74a748306453573e5bcfb5" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>insert_in_edge</name></member>
      <member refid="classTriangulationDataStructure__3_1aff296730457731bb243ed50f62178017" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>insert_in_edge</name></member>
      <member refid="classTriangulationDataStructure__3_1ac3992727684758e91ea72b04613691af" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>insert_in_facet</name></member>
      <member refid="classTriangulationDataStructure__3_1aa2c26664c41c84945b9988216fa9a2b4" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>insert_in_facet</name></member>
      <member refid="classTriangulationDataStructure__3_1a48ff04c7b5755a4b82f28cb1b6507328" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>insert_in_hole</name></member>
      <member refid="classTriangulationDataStructure__3_1a4d56ad9d2d2646e093e2288203b1a294" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>insert_in_hole</name></member>
      <member refid="classTriangulationDataStructure__3_1a94f00b8fe946834c47f544016d2d7a5d" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>insert_increase_dimension</name></member>
      <member refid="classTriangulationDataStructure__3_1a995ab79f782886252430b1f61f89b288" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>is_cell</name></member>
      <member refid="classTriangulationDataStructure__3_1a9916351c37824546ffb8131414ce4658" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>is_cell</name></member>
      <member refid="classTriangulationDataStructure__3_1a8c9bdf0042b86083f3a72d983a941743" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>is_edge</name></member>
      <member refid="classTriangulationDataStructure__3_1a687158d9dd7f24fe6bbd794db2a9f59c" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>is_edge</name></member>
      <member refid="classTriangulationDataStructure__3_1af420049d742ceffb903d3ed48aa684e0" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>is_edge</name></member>
      <member refid="classTriangulationDataStructure__3_1ad22e99a146edae0ee1b2d01e911724ec" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>is_facet</name></member>
      <member refid="classTriangulationDataStructure__3_1aed2a512ad3c5ed2c8fdc31fbbb029fc9" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>is_facet</name></member>
      <member refid="classTriangulationDataStructure__3_1aa4c8fbaf1a700327e28d57c0c360f9b2" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>is_valid</name></member>
      <member refid="classTriangulationDataStructure__3_1aa7ed0a72d1846f651dfd1590ad9d44cf" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>is_valid</name></member>
      <member refid="classTriangulationDataStructure__3_1a4161bdabd710d608994ff86527a79088" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>is_valid</name></member>
      <member refid="classTriangulationDataStructure__3_1aa65f1686e98e1c839e438f178e5b5c45" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>is_vertex</name></member>
      <member refid="classTriangulationDataStructure__3_1af386d55822ab1d47703f4500d642a7f2" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>mirror_facet</name></member>
      <member refid="classTriangulationDataStructure__3_1a51dc4a918b2e1afe4f4fd93531ed337b" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>mirror_index</name></member>
      <member refid="classTriangulationDataStructure__3_1a3c950698b86bc0abdc39260766235784" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>mirror_vertex</name></member>
      <member refid="classTriangulationDataStructure__3_1ab08bb26d4005108eb943c4e08d5018ff" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>number_of_cells</name></member>
      <member refid="classTriangulationDataStructure__3_1a2caedcb8a15d82292e09bf1c750bced6" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>number_of_edges</name></member>
      <member refid="classTriangulationDataStructure__3_1a4ed740a0373ab4ba1f3c8a4899c2281b" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>number_of_facets</name></member>
      <member refid="classTriangulationDataStructure__3_1a856ac86dc9d70d550ee73b74af9a5e5f" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>number_of_vertices</name></member>
      <member refid="classTriangulationDataStructure__3_1ad90ce2e95e385e8709301609ef32c2a2" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>operator&lt;&lt;</name></member>
      <member refid="classTriangulationDataStructure__3_1a9e2525beb055eacec49c6bb5a1198fa3" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>operator=</name></member>
      <member refid="classTriangulationDataStructure__3_1a674d4f4d02e85cfbe30e5ca3bd769d69" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>operator&gt;&gt;</name></member>
      <member refid="classTriangulationDataStructure__3_1a9b0197c963274f1fb57c8014545fdef8" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>raw_cells_begin</name></member>
      <member refid="classTriangulationDataStructure__3_1ab0569b5ce85fb023a323bf07b67c3f9d" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>raw_cells_end</name></member>
      <member refid="classTriangulationDataStructure__3_1a63f6460e7b1650f2291c514cd4ae65ab" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>Rebind_cell</name></member>
      <member refid="classTriangulationDataStructure__3_1ad163ec1adb59e5a96a33af14adb57a1b" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>Rebind_vertex</name></member>
      <member refid="classTriangulationDataStructure__3_1a65b1f8ca49810b63670f5a77bfc64c87" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>remove_decrease_dimension</name></member>
      <member refid="classTriangulationDataStructure__3_1a9a875e6aae5e58d5273441c9fd8efc0f" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>remove_from_maximal_dimension_simplex</name></member>
      <member refid="classTriangulationDataStructure__3_1af501f165455a2411543d6ec2542fea8d" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>reorient</name></member>
      <member refid="classTriangulationDataStructure__3_1a6cfb301e7a48e171e8ee272fa52d94c7" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>set_dimension</name></member>
      <member refid="classTriangulationDataStructure__3_1aeed82501e302344871322b11dfe789c8" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>size_type</name></member>
      <member refid="classTriangulationDataStructure__3_1a2b9adb172f8a7414752511edcd3f0c89" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>swap</name></member>
      <member refid="classTriangulationDataStructure__3_1a429b60de3f9efac2dea244a598406e54" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>TriangulationDataStructure_3</name></member>
      <member refid="classTriangulationDataStructure__3_1a3361b1108ee78cdc13f54a37c29a44be" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>TriangulationDataStructure_3</name></member>
      <member refid="classTriangulationDataStructure__3_1a5aab662af4b4d622a6637bcc499ae856" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>Vertex</name></member>
      <member refid="classTriangulationDataStructure__3_1a9073bf95270d94eb9887ca816ef8fa04" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>Vertex_handle</name></member>
      <member refid="classTriangulationDataStructure__3_1acb978840c1782a8402bb7b825a5fede8" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>Vertex_iterator</name></member>
      <member refid="classTriangulationDataStructure__3_1a6c6e2b3dc6856094a8d8d39e3b6f41ee" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>vertices_begin</name></member>
      <member refid="classTriangulationDataStructure__3_1abf0911ecc801a5df71737c95ad29c968" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_3</scope><name>vertices_end</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
