<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="manual" kind="page">
    <compoundname>manual</compoundname>
    <title>Organization of the Manual</title>
    <detaileddescription>
<para></para><para><simplesect kind="author"><para>CGAL Editorial Board</para></simplesect>
<heading level="1">Organization of the Manual </heading>
</para><para>This manual is organized in several parts covering the many domains of computational geometry. Each part consists of several chapters, and each chapter is split into a <emphasis>User Manual</emphasis> and a <emphasis>Reference Manual</emphasis>. The User Manual gives the general idea and comes with examples. The Reference Manual presents the Api of the various classes and functions.</para><para>The manual has a <ref refid="packages" kindref="compound">Package Overview</ref> with a short paragraph explaining what each package is about, what license it has, and on which other packages it depends. It further provides links to precompiled demo programs for the Windows platform.</para><para>The manual further has a class index, as well as a search box in the upper right of each page. The scope of the search box is the package you currently look at and the packages it depends on, or it is the whole manual when you are in a top level page such as the package overview.</para><para><heading level="1">Organization of the Reference Manual </heading>
</para><para>The CGAL library is a library of class templates. Consequently, we express the requirements on template arguments by specifying <emphasis>concepts</emphasis> and by providing <emphasis>models</emphasis> for concepts. See <ref refid="tutorial_hello_world_1intro_concept" kindref="member">here</ref> for an explanation of concept/model.</para><para>The reference manual has pages for concepts and for models, and just as classes can be derived from other classes, concepts can <emphasis>refine</emphasis> other concepts, by adding requirements.</para><para>When a class is a model of a concept, its reference manual page has a link to the concept, and the API is mainly documented on the reference manual page of the concept. As a concept may refine another concept, the full API of a class is sometimes distributed over the pages of base classes and over the pages of several concepts.</para><para>Let&apos;s have a look at the vertex type of 3D triangulations.</para><para><anchor id="manual_1fig__Manual_Fig_concept_model"/><image type="html" name="ConceptModel.svg"></image>
 <image type="latex" name="ConceptModel.svg" width="15cm"></image>
  <ref refid="manual_1fig__Manual_Fig_concept_model" kindref="member">fig__Manual_Fig_concept_model</ref> Models and concepts.  <linebreak/>
</para><para>The class <computeroutput><ref refid="classCGAL_1_1Triangulation__vertex__base__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_3.tag">CGAL::Triangulation_vertex_base_3</ref></computeroutput> derives from the class <computeroutput><ref refid="classCGAL_1_1Triangulation__ds__vertex__base__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/TDS_3.tag">CGAL::Triangulation_ds_vertex_base_3</ref></computeroutput>. The two classes are models of the concepts <computeroutput><ref refid="classTriangulationVertexBase__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_3.tag">TriangulationVertexBase_3</ref></computeroutput> and <computeroutput><ref refid="classTriangulationDSVertexBase__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/TDS_3.tag">TriangulationDSVertexBase_3</ref></computeroutput>, respectively. The former concept refines the latter.</para><para>In the reference manual pages of these concepts and models only the methods and types which are not greyed in <ref refid="manual_1fig__Manual_Fig_concept_model" kindref="member">fig__Manual_Fig_concept_model</ref> are documented. Inherited methods are only documented in the base class. And methods that must be implemented in order to be a model of a concept are only documented in the concept.</para><para>As pointed out in Section <ref refid="tutorial_hello_world_1intro_concept" kindref="member">Concepts and Models</ref> the notion of a <emphasis>concept</emphasis> is about requirements, and it can be a required global function or a required traits class. </para>    </detaileddescription>
  </compounddef>
</doxygen>
