<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="devman_namespaces" kind="page">
    <compoundname>devman_namespaces</compoundname>
    <title>Namespaces</title>
    <detaileddescription>
<para><simplesect kind="author"><para>Stefan Schirra</para></simplesect>
Names, in particular (member) function names and class names should be descriptive and easily remembered. So it is not surprising that different libraries or packages choose the same name for corresponding or similar classes and functions. A common approach to solving the naming problem is to add a prefix, for example, OpenGL adds <computeroutput>gl</computeroutput> and FLTK adds <computeroutput>fl</computeroutput>. LEDA uses prefix <computeroutput>leda_</computeroutput></para><para>to some extent, but you have to tell LEDA not to make the corresponding unprefixed names available as well.CGAL&apos;s makefile does this by setting <computeroutput>-DLEDA_PREFIX</computeroutput>. Initially, CGAL used prefix <computeroutput>CGAL_</computeroutput>. At the beginning of 1999, it was decided to drop prefix <computeroutput>CGAL_</computeroutput> and to introduce namespace <computeroutput><ref refid="namespaceCGAL" kindref="compound">CGAL</ref></computeroutput>.</para><sect1 id="devman_namespaces_1Developer_manualNamespaceCGAL">
<title>Namespace CGAL</title>
<para>All names introduced by CGAL should be in namespace <computeroutput><ref refid="namespaceCGAL" kindref="compound">CGAL</ref></computeroutput>, <emphasis>e.g.</emphasis>: <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;something&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceCGAL" kindref="compound">CGAL</ref><sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">My_new_cgal_class<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">My_new_cgal_class<sp/></highlight></codeline>
<codeline><highlight class="normal">my_new_function(<sp/>My_new_cgal_class&amp;<sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>CGAL</highlight></codeline>
</programlisting> Make sure not to have include statements nested between <computeroutput> namespace <ref refid="namespaceCGAL" kindref="compound">CGAL</ref> { </computeroutput> and <computeroutput> } // namespace <ref refid="namespaceCGAL" kindref="compound">CGAL</ref></computeroutput>. Otherwise all names defined in the file included will be added to namespace <computeroutput><ref refid="namespaceCGAL" kindref="compound">CGAL</ref></computeroutput>.</para></sect1>
<sect1 id="devman_namespaces_1Developer_manualNamespaceinternal">
<title>Namespace internal</title>
<para>All names introduced by CGAL which are not documented to the user should be under an <computeroutput>internal</computeroutput> subnamespace of <computeroutput><ref refid="namespaceCGAL" kindref="compound">CGAL</ref></computeroutput>, <emphasis>e.g.</emphasis>: <programlisting><codeline><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceCGAL" kindref="compound">CGAL</ref><sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">My_undocumented_class<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>my_new_function(<sp/>My_undocumented_class&amp;<sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>CGAL::internal</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceCGAL" kindref="compound">CGAL</ref><sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Package<sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">tags<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Some_further_class_local_to_Package;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}}}}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>CGAL::internal::Package::tags</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="devman_namespaces_1Developer_manualNoteonglobaltemplatefunctions">
<title>Note on global template functions</title>
<para>According to the resolutions of the following issues in the forthcoming C++-standard ( <ulink url="http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#225">225</ulink>, <ulink url="http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#226">226</ulink> <ulink url="http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#229">229</ulink>. ): <computeroutput>Unless otherwise specified, no global or non-member function in the standard library shall use a function from another namespace which is found through argument-dependent name lookup </computeroutput>, the namespace <computeroutput>CGAL::NTS</computeroutput> does not need to be used anymore (currently <computeroutput>CGAL_NTS</computeroutput> macro boils down to <computeroutput><ref refid="namespaceCGAL" kindref="compound">CGAL</ref>::</computeroutput>).</para></sect1>
<sect1 id="devman_namespaces_1Developer_manualRequirementsandrecommendations_1">
<title>Requirements and recommendations</title>
<para>Requirements: <itemizedlist>
<listitem>
<para>all names defined by CGAL are in namespace <computeroutput><ref refid="namespaceCGAL" kindref="compound">CGAL</ref></computeroutput> (including namespaces nested in namespace <computeroutput><ref refid="namespaceCGAL" kindref="compound">CGAL</ref></computeroutput>). </para></listitem>
<listitem>
<para>explicitly prefix calls to template functions of <ref refid="namespaceCGAL" kindref="compound">CGAL</ref> (such as <computeroutput>square</computeroutput>, <computeroutput>sign</computeroutput>, <computeroutput>abs</computeroutput>, <formula id="12">$ \dots$</formula> ) by <computeroutput><ref refid="namespaceCGAL" kindref="compound">CGAL</ref>::</computeroutput> to ensure the functions used are the one from CGAL and not one from another library. If you want to allow an optimized function from another library to be used, then you should not qualify the call and document it explicitly (if appropriate). </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
