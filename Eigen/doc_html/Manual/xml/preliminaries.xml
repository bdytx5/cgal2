<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="preliminaries" kind="page">
    <compoundname>preliminaries</compoundname>
    <title>Preliminaries</title>
    <detaileddescription>
<para></para><para><simplesect kind="author"><para>CGAL Editorial Board</para></simplesect>
This chapter lists the licenses under which the CGAL datastructures and algorithms are distributed. The chapter further explains how to control inlining, thread safety, code deprecation, checking of pre- and postconditions, and how to alter the failure behavior.</para><sect1 id="preliminaries_1licenseIssues">
<title>License Issues</title>
<para>CGAL is distributed under a dual license scheme, that is under the Gpl/Lgpl open source license, as well as under commercial licenses.</para><para>CGAL consists of different parts covered by different open source licenses. In this section we explain the essence of the different licenses, as well as the rationale why we have chosen them.</para><para>The fact that CGAL is Open Source software does not mean that users are free to do whatever they want with the software. Using the software means to accept the license, which has the status of a contract between the user and the owner of the CGAL software.</para><sect2 id="preliminaries_1licensesGPL">
<title>GPL</title>
<para>The Gpl is an Open Source license that, if you distribute your software based on Gpled CGAL data structures,you are obliged to distribute the source code of your software under the Gpl.</para><para>The exact license terms can be found at the Free Software Foundation web site: <ulink url="http://www.gnu.org/copyleft/gpl.html">http://www.gnu.org/copyleft/gpl.html</ulink>.</para></sect2>
<sect2 id="preliminaries_1licensesLGPL">
<title>LGPL</title>
<para>The Lgpl is an Open Source license that obliges you to distribute modifications you make on CGAL software accessible to the users. In contrast to the Gpl, there is no obligation to make the source code of software you build on top of Lgpled CGAL data structures</para><para>The exact license terms can be found at the Free Software Foundation web site: <ulink url="http://www.gnu.org/copyleft/lesser.html">http://www.gnu.org/copyleft/lesser.html</ulink>.</para></sect2>
<sect2 id="preliminaries_1licensesRationale">
<title>Rationale of the License Choice</title>
<para>We have chosen the Gpl and the Lgpl as they are well known and well understood open source licenses. The former restricts commercial use, and the latter allows to promote software as de facto standard so that people can build new higher level data structures on top.</para><para>Therefore, the packages forming a foundation layer are distributed under the Lgpl, and the higher level packages under the Gpl. The package overview states for each package under which license it is distributed.</para></sect2>
<sect2 id="preliminaries_1licensesCommercial">
<title>Commercial Licenses</title>
<para>Users who cannot comply with the Open Source license terms can buy individual data structures under various commercial licenses from GeometryFactory: <ulink url="http://www.geometryfactory.com/">http://www.geometryfactory.com/</ulink>. License fees paid by commercial customers are reinvested in R&amp;D performed by the CGAL project partners, as well as in evolutive maintenance.</para></sect2>
<sect2 id="preliminaries_1licenseCheck">
<title>License Checking</title>
<para>Users who have a commercial license for specific packages can check that they do not accidentally use packages for which they do not have a commercial license. The same holds for users who want to be sure that they only use packages of CGAL released under the Lgpl.</para><para>To enable checking, users have to define one of the following macros:</para><para><table rows="3" cols="2"><row>
<entry thead="yes"><para>Macro Name </para></entry><entry thead="yes"><para>Effect  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>CGAL_LICENSE_WARNING</computeroutput> </para></entry><entry thead="no"><para>get a warning during the compilation </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>CGAL_LICENSE_ERROR</computeroutput> </para></entry><entry thead="no"><para>get an error during the compilation </para></entry></row>
</table>
</para><para>The license checking is not a mean to control users as no information is collected or transmitted.</para></sect2>
</sect1>
<sect1 id="preliminaries_1markingSpecialFunctionality">
<title>Marking of Special Functionality</title>
<para>In this manual you will encounter sections marked as follows.</para><sect2 id="preliminaries_1advanced_features">
<title>Advanced Features</title>
<para>Some functionality is considered more advanced, for example because it is relatively low-level, or requires special care to be properly used.</para><para></para><para>Such functionality is identified this way in the manual. </para></sect2>
<sect2 id="preliminaries_1debugging_support">
<title>Debugging Support Features</title>
<para>Usually related to advanced features that for example may not guarantee class invariants, some functionality is provided that helps debugging, for example by performing invariants checks on demand.</para><para></para><para>Such functionality is identified this way in the manual. </para></sect2>
<sect2 id="preliminaries_1deprecated_code">
<title>Deprecated Code</title>
<para>Sometimes, the CGAL project decides that a feature is deprecated. This means that it still works in the current release, but it will be removed in the next, or a subsequent release. This can happen when we have found a better way to do something, and we would like to reduce the maintenance cost of CGAL at some point in the future. There is a trade-off between maintaining backward compatibility and implementing new features more easily.</para><para>In order to help users manage the changes to apply to their code, we attempt to make CGAL code emit warnings when deprecated code is used. This can be done using some compiler specific features. Those warnings can be disabled by defining the macro <computeroutput>CGAL_NO_DEPRECATION_WARNINGS</computeroutput>. On top of this, we also provide a macro, <computeroutput>CGAL_NO_DEPRECATED_CODE</computeroutput>, which, when defined, disables all deprecated features. This allows users to easily test if their code relies on deprecated features.</para></sect2>
</sect1>
<sect1 id="preliminaries_1Preliminaries_namespace">
<title>Namespace CGAL</title>
<para>All names introduced by CGAL, especially those documented in these manuals, are in a namespace called <computeroutput><ref refid="namespaceCGAL" kindref="compound">CGAL</ref></computeroutput>, which is in global scope. A user can either qualify names from CGAL by adding <computeroutput><ref refid="namespaceCGAL" kindref="compound">CGAL</ref>::</computeroutput>, e.g., <computeroutput><ref refid="classCGAL_1_1Point__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Point_2</ref>&lt; <ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Exact_predicates_inexact_constructions_kernel</ref> &gt;</computeroutput>, make a single name from CGAL visible in a scope via a <computeroutput>using</computeroutput> statement, e.g., <computeroutput>using <ref refid="classCGAL_1_1Point__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Point_2</ref>;</computeroutput>, and then use this name unqualified in this scope, or even make all names from namespace <computeroutput><ref refid="namespaceCGAL" kindref="compound">CGAL</ref></computeroutput> visible in a scope with <computeroutput>using namespace <ref refid="namespaceCGAL" kindref="compound">CGAL</ref>;</computeroutput>. The latter, however, is likely to give raise to name conflicts and is therefore not recommended.</para></sect1>
<sect1 id="preliminaries_1Preliminaries_thread_safety">
<title>Thread Safety</title>
<para>CGAL is progressively being made thread-safe. The guidelines which are followed are:</para><para><itemizedlist>
<listitem><para>it should be possible to use different objects in different threads at the same time (of the same type or not),</para></listitem><listitem><para>it is not safe to access the same object from different threads at the same time, unless otherwise specified in the class documentation.</para></listitem></itemizedlist>
</para><para>If the macro <computeroutput>CGAL_HAS_THREADS</computeroutput> is not defined, then CGAL assumes it can use any thread-unsafe code (such as static variables). By default, this macro is not defined, unless <computeroutput>BOOST_HAS_THREADS</computeroutput> or <computeroutput>_OPENMP</computeroutput> is defined. It is possible to force its definition on the command line, and it is possible to prevent its default definition by setting <computeroutput>CGAL_HAS_NO_THREADS</computeroutput> from the command line.</para></sect1>
<sect1 id="preliminaries_1Preliminaries_cc0x">
<title>C++11 Support</title>
<para>CGAL is based on the C++ standard released in 1998 (and later refined in 2003). A new major version of this standard has been released, and is refered to as C++11. Some compilers and standard library implementations already provide some of the functionality of this new standard, as a preview. For example, GCC provides a command-line switch (<computeroutput>-std=c++0x</computeroutput> or or <computeroutput>-std=c++11</computeroutput> depending on the compiler version) which enables some of those features.</para><para>CGAL attempts to support this mode progressively, and already makes use of some of these features if they are available, although no extensive support has been implemented yet.</para></sect1>
<sect1 id="preliminaries_1Preliminaries_functor">
<title>Functor Return Types</title>
<para>CGAL functors support the <ulink url="https://www.boost.org/doc/libs/release/libs/utility/utility.htm#result_of">result_of</ulink> protocol. If a functor <computeroutput>F</computeroutput> has the same return type across all overloads of <computeroutput>operator()</computeroutput>, the nested type <computeroutput>F::result_type</computeroutput> is defined to be that type. Otherwise the return type of calling the functor with an argument of type <computeroutput>Arg</computeroutput> can be accessed through <ref refid="structCGAL_1_1cpp11_1_1result__of_1a0116f3bad73d2c51520c134dffbf1449" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag"><computeroutput>CGAL::cpp11::result_of&lt;F(Arg)&gt;::type</computeroutput> </ref>.</para></sect1>
<sect1 id="preliminaries_1preliminaries_secchecks">
<title>Checks</title>
<para>Much of the CGAL code contains assert statements for preconditions, and postconditions of functions as well as in the code. These assertions can be switched on and off per package and the user can change the error behaviour. For details see Section <ref refid="index_1secchecks" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Checks</ref> of Chapter <ref refid="index_1Chapter_STL_Extensions_for_CGAL" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Chapter_STL_Extensions_for_CGAL</ref>.</para></sect1>
<sect1 id="preliminaries_1seccgal_version">
<title>Identifying the Version of CGAL</title>
<para><computeroutput>&lt;CGAL/config.h&gt;</computeroutput></para><para>Every release of CGAL defines the following preprocessor macros:</para><para><variablelist>
<varlistentry><term><computeroutput>CGAL_VERSION_STR</computeroutput> </term></varlistentry>
<listitem><para>a textual description of the current release (e.g., or 3.3 or 3.2.1 or 3.2.1-I-15) as a string literal </para></listitem>
<varlistentry><term><computeroutput>CGAL_VERSION_NR</computeroutput> </term></varlistentry>
<listitem><para>a numerical description of the current release such that more recent releases have higher number.</para><para>More precisely, it is defined as <computeroutput>1MMmmbiiii</computeroutput>, where <computeroutput>MM</computeroutput> is the major release number (e.g. 03), <computeroutput>mm</computeroutput> is the minor release number (e.g. 02), <computeroutput>b</computeroutput> is the bug-fix release number (e.g. 0), and <computeroutput>iiii</computeroutput> is the internal release number (e.g. 0001). For public releases, the latter is defined as 1000. Examples: for the public release 3.2.4 this number is 1030241000; for internal release 3.2-I-1, it is 1030200001. Note that this scheme was modified around 3.2-I-30.  </para></listitem>
<varlistentry><term><computeroutput>CGAL_VERSION_NUMBER(M,m,b)</computeroutput> </term></varlistentry>
<listitem><para>a function macro computing the version number macro from the M.m.b release version. Note that the internal release number is dropped here. Example: <computeroutput>CGAL_VERSION_NUMBER(3,2,4)</computeroutput> is equal to 1030241000.  </para></listitem>
</variablelist>
</para><para>The macro <computeroutput>CGAL_VERSION</computeroutput> is deprecated. It is the same as <computeroutput>CGAL_VERSION_STR</computeroutput>, but not as a string literal.</para></sect1>
<sect1 id="preliminaries_1Preliminaries_flags">
<title>Compile-time Flags to Control Inlining</title>
<para>Making functions inlined can, at times, improve the efficiency of your code. However this is not always the case and it can differ for a single function depending on the application in which it is used. Thus CGAL defines a set of compile-time macros that can be used to control whether certain functions are designated as inlined functions or not. The following table lists the macros and their default values, which are set in one of the CGAL include files.</para><para><table rows="7" cols="2"><row>
<entry thead="yes"><para>Macro Name </para></entry><entry thead="yes"><para>Default  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>CGAL_KERNEL_INLINE</computeroutput> </para></entry><entry thead="no"><para>inline </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>CGAL_KERNEL_MEDIUM_INLINE</computeroutput> </para></entry><entry thead="no"><para></para></entry></row>
<row>
<entry thead="no"><para><computeroutput>CGAL_KERNEL_LARGE_INLINE</computeroutput> </para></entry><entry thead="no"><para></para></entry></row>
<row>
<entry thead="no"><para><computeroutput>CGAL_MEDIUM_INLINE</computeroutput> </para></entry><entry thead="no"><para>inline </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>CGAL_LARGE_INLINE</computeroutput> </para></entry><entry thead="no"><para></para></entry></row>
<row>
<entry thead="no"><para><computeroutput>CGAL_HUGE_INLINE</computeroutput> </para></entry><entry thead="no"><para></para></entry></row>
</table>
If you wish to change the value of one or more of these macros, you can simply give it a new value when compiling. For example, to make functions that use the macro <computeroutput>CGAL_KERNEL_MEDIUM_INLINE</computeroutput> inline functions, you should set the value of this macro to <computeroutput>inline</computeroutput> instead of the default blank.</para><para>Note that setting inline manually is very fragile, especially in a template context. It is usually better to let the compiler select by himself which functions should be inlined or not. </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
