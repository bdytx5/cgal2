<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>User Manual</title>
    <detaileddescription>
<para><anchor id="index_1Chapter_2D_Triangulation_Data_Structure"/>  <simplesect kind="authors"><para>Sylvain Pion and Mariette Yvinec</para></simplesect>
</para><sect1 id="index_1TDS_2D_Definition">
<title>Definition</title>
<para>A triangulation data structure is a data structure designed to handle the representation of a two dimensional triangulation. The concept of triangulation data structure was primarily designed to serve as a data structure for CGAL 2D triangulation classes which are triangulations embedded in a plane. However it appears that the concept is more general and can be used for any orientable triangulated surface without boundary, whatever may be the dimensionality of the space the triangulation is embedded in.</para><sect2 id="index_1TDS_2ADataStructureBasedonFacesandVertices">
<title>A Data Structure Based on Faces and Vertices</title>
<para>The representation of CGAL 2D triangulations is based on faces and vertices, Edges are only implicitly represented trough the adjacency relations between two faces.</para><para>The triangulation data structure can be seen as a container for faces and vertices maintaining incidence and adjacency relations among them.</para><para>Each triangular face gives access to its three incident vertices and to its three adjacent faces. Each vertex gives access to one of its incident faces and through that face to the circular list of its incident faces.</para><para>The three vertices of a face are indexed with 0, 1 and 2. The neighbors of a face are also indexed with 0,1,2 in such a way that the neighbor indexed by <computeroutput>i</computeroutput> is opposite to the vertex with the same index. See <ref refid="index_1fig__TDS_2D_Fig_neighbors1" kindref="member">fig__TDS_2D_Fig_neighbors1</ref>, the functions <computeroutput>ccw(i)</computeroutput> and <computeroutput>cw(i)</computeroutput> shown on this figure compute respectively <formula id="3">$ i+1$</formula> and <formula id="8">$ i-1$</formula> modulo 3.</para><para>Each edge has two implicit representations: the edge of a face <computeroutput>f</computeroutput> which is opposed to the vertex indexed <computeroutput>i</computeroutput>, can be represented as well as an edge of the <computeroutput>neighbor(i)</computeroutput> of <computeroutput>f</computeroutput>.</para><para><anchor id="index_1fig__TDS_2D_Fig_neighbors1"/><image type="html" name="rep_bis.png"></image>
 <image type="latex" name="rep_bis.png" width="15cm"></image>
  <ref refid="index_1fig__TDS_2D_Fig_neighbors1" kindref="member">fig__TDS_2D_Fig_neighbors1</ref>  <linebreak/>
</para><para>This kind or representation of simplicial complexes extends in any dimension. More precisely, in dimension <formula id="9">$ d$</formula>, the data structure will explicitly represents cells (i. e. faces of maximal dimension) and vertices (i. e. faces of dimension 0). All faces of dimension between <formula id="10">$ 1$</formula> and <formula id="11">$ d-1$</formula> will have an implicit representation. The 2D triangulation data structure can represent simplicial complexes of dimension 2, 1 or 0.</para></sect2>
<sect2 id="index_1TDS_2TheSetofFacesandVertices">
<title>The Set of Faces and Vertices</title>
<para>The set of faces maintained by a 2D triangulation data structure is such that each edge is incident to two faces. In other words, the set of maintained faces is topologically equivalent to a two-dimensional triangulated sphere.</para><para>This rules extends to lower dimensional triangulation data structure arising in degenerate cases or when the triangulations have less than three vertices. A one dimensional triangulation structure maintains a set of vertices and edges which forms a ring topologically equivalent to a <formula id="10">$ 1$</formula>-sphere.</para><para>A zero dimensional triangulation data structure only includes two adjacent vertices that is topologically equivalent to a <formula id="12">$ 0$</formula>-sphere.</para></sect2>
</sect1>
<sect1 id="index_1TDS_2D_Concept">
<title>The Concept of Triangulation Data Structure</title>
<para>A model of <computeroutput><ref refid="classTriangulationDataStructure__2" kindref="compound">TriangulationDataStructure_2</ref></computeroutput> can be seen has a container for the faces and vertices of the triangulation. This class is also responsible for the combinatorial integrity of the triangulation. This means that the triangulation data structure maintains proper incidence and adjacency relations among the vertices and faces of a triangulation while combinatorial modifications of the triangulation are performed. The term combinatorial modification refers to operations which do not involve any knowledge about the geometric embedding of the triangulation. For example, the insertion of a new vertex in a given face, or in a given edge, the suppression of a vertex of degree three, the flip of two edge are examples of combinatorial operation performed at the data structure level.</para><para>The triangulation data structure is required to provide: <itemizedlist>
<listitem>
<para>the types <computeroutput>Vertex</computeroutput> and <computeroutput>Face</computeroutput> for the vertices and faces of the triangulations </para></listitem>
<listitem>
<para>the type <computeroutput>Vertex_handle</computeroutput> and <computeroutput>Face_handle</computeroutput> which are models of the concept <computeroutput><ref refid="classHandle" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circulator.tag">Handle</ref></computeroutput> and through which the vertices and faces are accessed. </para></listitem>
<listitem>
<para>iterators to visit all the vertices, edges and faces of the triangulation, </para></listitem>
<listitem>
<para>circulators to visit all the vertices, edges and faces incident to a given vertex </para></listitem>
</itemizedlist>
</para><para>The triangulation data structure is responsible for the creation and removal of faces and vertices (memory management). It provides function that gives the number of faces, edges and vertices of the triangulation.</para><para>The triangulation data structure provides member functions to perform the following combinatorial transformation of the triangulation:</para><para><itemizedlist>
<listitem>
<para>flip of two adjacent faces, </para></listitem>
<listitem>
<para>addition of a new vertex splitting a given face see <ref refid="index_1fig__TDS_2D_Fig_insertion" kindref="member">fig__TDS_2D_Fig_insertion</ref>, </para></listitem>
<listitem>
<para>addition of a new vertex splitting a given edge, </para></listitem>
<listitem>
<para>addition of a new vertex raising by one the dimension of a degenerate - lower dimensional triangulation, </para></listitem>
<listitem>
<para>removal of a vertex incident to three faces, </para></listitem>
<listitem>
<para>removal of a vertex lowering the dimension of the triangulation </para></listitem>
</itemizedlist>
</para><para><anchor id="index_1fig__TDS_2D_Fig_insertion"/><image type="html" name="Three.png"></image>
 <image type="latex" name="Three.png" width="15cm"></image>
  <ref refid="index_1fig__TDS_2D_Fig_insertion" kindref="member">fig__TDS_2D_Fig_insertion</ref> Insertion of a new vertex, splitting a face  <linebreak/>
</para></sect1>
<sect1 id="index_1TDS_2D_default">
<title>The Default Triangulation Data Structure</title>
<para>CGAL provides the class <computeroutput><ref refid="classCGAL_1_1Triangulation__data__structure__2" kindref="compound">Triangulation_data_structure_2</ref>&lt;Vb,Fb&gt;</computeroutput> as a default triangulation data structure.</para><sect2 id="index_1TDS_2Flexibility">
<title>Flexibility</title>
<para>In order to provide flexibility, the default triangulation data structure is templated by two parameters which stand respectively for a vertex base class and a face base class. The concept <computeroutput><ref refid="classTriangulationDSVertexBase__2" kindref="compound">TriangulationDSVertexBase_2</ref></computeroutput> and <computeroutput><ref refid="classTriangulationDSFaceBase__2" kindref="compound">TriangulationDSFaceBase_2</ref></computeroutput> describe the requirements for the vertex and face classes of a triangulation data structure.</para><para>This design allows the user to plug in the triangulation data structure his own vertex or face classes tuned for his application.</para></sect2>
<sect2 id="index_1TDS_2TheCyclicDependencyofTemplateParameters">
<title>The Cyclic Dependency of Template Parameters</title>
<para>Since adjacency and incidence relation are stored in vertices and faces, the vertex and face classes have to know the types of handles on faces and vertices provided by the triangulation data structure. Therefore, vertex and face classes need to be templated by the triangulation data structure. Because the triangulation data structure is itself templated by the vertex and face classes this induces a cyclic dependency. See <ref refid="index_1fig__TDS_2D_Fig_three_levels_2" kindref="member">fig__TDS_2D_Fig_three_levels_2</ref>.</para><para><anchor id="index_1fig__TDS_2D_Fig_three_levels_2"/><image type="html" name="threelevels2.png"></image>
 <image type="latex" name="threelevels2.png" width="15cm"></image>
  <ref refid="index_1fig__TDS_2D_Fig_three_levels_2" kindref="member">fig__TDS_2D_Fig_three_levels_2</ref> The cyclic dependency in triangulations software design.  <linebreak/>
</para></sect2>
<sect2 id="index_1TDS_2TheRebindMechanism">
<title>The Rebind Mechanism</title>
<para>The solution proposed by CGAL to resolve this cyclic dependency is based on a rebind mechanism similar to the mechanism used in the standard allocator class std::allocator. The vertex and face classes plugged in the instantiation of a triangulation data structure are themselves instantiated with a fake data structure. The triangulation data structure will then rebind these classes, plugging itself at the place of the fake data structure, before using them to derive the vertex and face classes. The rebinding is performed through a nested template class <computeroutput>Rebind_TDS</computeroutput> in the vertex and face class, which provide the rebound class as a type called <computeroutput>Other</computeroutput>.</para><para>Here is how it works schematically. First, here is the rebinding taking place in the triangulation data structure.</para><para><programlisting><codeline><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Vb,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Fb<sp/>&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Triangulation_data_structure</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Triangulation_data_structure&lt;Vb,Fb&gt;<sp/>Self;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Rebind<sp/>the<sp/>vertex<sp/>and<sp/>face<sp/>base<sp/>to<sp/>the<sp/>actual<sp/>TDS<sp/>(Self).</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Vb::template<sp/>Rebind_TDS&lt;Self&gt;::Other<sp/>VertexBase;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Fb::template<sp/>Rebind_TDS&lt;Self&gt;::Other<sp/>FaceBase;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>...<sp/>further<sp/>internal<sp/>machinery<sp/>leads<sp/>to<sp/>the<sp/>final<sp/>public<sp/>types:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>...<sp/>Vertex;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>...<sp/>Face;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>...<sp/>Vertex_handle;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>...<sp/>Face_handle;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para><para>Then, here is the vertex class with its nested <computeroutput>Rebind_TDS</computeroutput> template class and its template parameter set by default to an an internal type faking a triangulation data structure.</para><para><programlisting><codeline><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TDS<sp/>=<sp/>an<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">ernal<sp/>type<sp/>faking<sp/>a<sp/>triangulation<sp/>data<sp/>structure<sp/>&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Vertex_base</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TDS2<sp/>&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Rebind_TDS<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Vertex_base&lt;TDS2&gt;<sp/>Other;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para><para>Imagine an analog <computeroutput>Face_base</computeroutput> class. The triangulation data structure is then instantiated as follows:</para><para><programlisting><codeline><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Triangulation_data_structure&lt;<sp/>Vertex_base&lt;&gt;,<sp/>Face_base&lt;&gt;<sp/>&gt;<sp/>TDS;</highlight></codeline>
</programlisting></para></sect2>
<sect2 id="index_1TDS_2MakingUseoftheFlexibility">
<title>Making Use of the Flexibility</title>
<para>There are several possibilities to make use of the flexibility offered by the triangulation data structure. <itemizedlist>
<listitem>
<para>First, when the user needs to have, in vertices and faces, additional information which do not depend on types defined by the triangulated data structure, predefined classes <computeroutput><ref refid="classCGAL_1_1Triangulation__vertex__base__with__info__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_2.tag">Triangulation_vertex_base_with_info_2</ref></computeroutput> and <computeroutput><ref refid="classCGAL_1_1Triangulation__face__base__with__info__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_2.tag">Triangulation_face_base_with_info_2</ref></computeroutput> can be plugged in. Those classes have a template parameter <computeroutput>Info</computeroutput> to be instantiated by a user defined type. They store a data member of this type and gives access to it. </para></listitem>
<listitem>
<para>Second, the user can derive his own base classes from the default base classes: <computeroutput><ref refid="classCGAL_1_1Triangulation__ds__vertex__base__2" kindref="compound">Triangulation_ds_vertex_base_2</ref></computeroutput>, and <computeroutput><ref refid="classCGAL_1_1Triangulation__ds__face__base__2" kindref="compound">Triangulation_ds_face_base_2</ref></computeroutput> are the default base classes to be plugged in a triangulation data structure used alone. Triangulation classes requires a data structure in which other base classes have been plugged it. The default base classes for most of the triangulation classes are <computeroutput><ref refid="classCGAL_1_1Triangulation__vertex__base__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_2.tag">Triangulation_vertex_base_2</ref></computeroutput>, and <computeroutput><ref refid="classCGAL_1_1Triangulation__face__base__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_2.tag">Triangulation_face_base_2</ref></computeroutput> are the default base classes to be used when the triangulation data structure is plugged in a triangulation class.</para><para>When derivation is used, the rebind mechanism is slightly more involved, because it is necessary to rebind the base class itself. However the user will be able to use in his classes references to types provided by the triangulation data structure. For example,</para><para><programlisting><codeline><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Gt,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Vb<sp/>=<sp/>CGAL::Triangulation_vertex_base_2&lt;Gt&gt;<sp/>&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">My_vertex_base<sp/></highlight></codeline>
<codeline><highlight class="normal">:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Vb</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal">public<sp/>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TDS2<sp/>&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Rebind_TDS<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Vb::template<sp/>Rebind_TDS&lt;TDS2&gt;::Other<sp/>Vb2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>My_vertex_base&lt;Gt,Vb2&gt;<sp/>Other;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Vb::Triangulation_data_structure<sp/>Tds;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tds::Vertex_handle<sp/>Vertex_handle;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>......</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para><para></para></listitem>
<listitem>
<para>Finally, the user can write his own base classes. If the triangulation data structure is used alone, the requirements for the base classes are described by the concepts <computeroutput><ref refid="classTriangulationDSVertexBase__2" kindref="compound">TriangulationDSVertexBase_2</ref></computeroutput> and <computeroutput><ref refid="classTriangulationDSFaceBase__2" kindref="compound">TriangulationDSFaceBase_2</ref></computeroutput>. If the triangulation data structure is plugged into a triangulation class, the concepts for the vertex and base classes depends on the triangulation class. The most basic concepts, valid for basic and Delaunay triangulations are <computeroutput><ref refid="classTriangulationVertexBase__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_2.tag">TriangulationVertexBase_2</ref></computeroutput> and <computeroutput><ref refid="classTriangulationFaceBase__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_2.tag">TriangulationFaceBase_2</ref></computeroutput>. </para></listitem>
</itemizedlist>
</para><para>See Section <ref refid="index_1Section_2D_Triangulations_Flexibility" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_2.tag">Flexibility</ref> of the chapter on 2D triangulations for examples which make use of the flexilibity of the triangulation data structure. </para></sect2>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
