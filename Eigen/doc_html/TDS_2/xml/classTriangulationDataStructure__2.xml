<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classTriangulationDataStructure__2" kind="class" language="C++" prot="public">
    <compoundname>TriangulationDataStructure_2</compoundname>
    <includes local="no">Concepts/TriangulationDataStructure_2.h</includes>
    <innerclass refid="classTriangulationDataStructure__2_1_1Face" prot="public">TriangulationDataStructure_2::Face</innerclass>
    <innerclass refid="classTriangulationDataStructure__2_1_1Vertex" prot="public">TriangulationDataStructure_2::Vertex</innerclass>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classTriangulationDataStructure__2_1a7d10270889c4a88d354170eb09cac15b" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type TriangulationDataStructure_2::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <briefdescription>
<para>Size type (unsigned integral type) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="84" column="1" bodyfile="Concepts/TriangulationDataStructure_2.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classTriangulationDataStructure__2_1a565c9c783af8db3cb4cb3226c8983d18" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type TriangulationDataStructure_2::difference_type</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
<para>Difference type (signed integral type) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="89" column="1" bodyfile="Concepts/TriangulationDataStructure_2.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classTriangulationDataStructure__2_1a0aa9124e3895188fafe9d1bae244c671" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type TriangulationDataStructure_2::Vertex</definition>
        <argsstring></argsstring>
        <name>Vertex</name>
        <briefdescription>
<para>The vertex type, requirements for this type are described in concept <computeroutput><ref refid="classTriangulationDataStructure__2_1_1Vertex" kindref="compound">TriangulationDataStructure_2::Vertex</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="94" column="1" bodyfile="Concepts/TriangulationDataStructure_2.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classTriangulationDataStructure__2_1a65140c8c5ac748cbaea2ec06e619bb31" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type TriangulationDataStructure_2::Face</definition>
        <argsstring></argsstring>
        <name>Face</name>
        <briefdescription>
<para>The face type, requirements for this type are described in concept <computeroutput><ref refid="classTriangulationDataStructure__2_1_1Face" kindref="compound">TriangulationDataStructure_2::Face</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="99" column="1" bodyfile="Concepts/TriangulationDataStructure_2.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type TriangulationDataStructure_2::Vertex_handle</definition>
        <argsstring></argsstring>
        <name>Vertex_handle</name>
        <briefdescription>
<para><ref refid="classHandle" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circulator.tag">Handle</ref> to a vertex. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="models_1_models000004"><xreftitle>Is Model Of</xreftitle><xrefdescription><para><computeroutput><ref refid="classHandle" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circulator.tag">Handle</ref></computeroutput> </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="105" column="1" bodyfile="Concepts/TriangulationDataStructure_2.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type TriangulationDataStructure_2::Face_handle</definition>
        <argsstring></argsstring>
        <name>Face_handle</name>
        <briefdescription>
<para><ref refid="classHandle" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circulator.tag">Handle</ref> to a face. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="models_1_models000005"><xreftitle>Is Model Of</xreftitle><xrefdescription><para><computeroutput><ref refid="classHandle" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Circulator.tag">Handle</ref></computeroutput> </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="111" column="1" bodyfile="Concepts/TriangulationDataStructure_2.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classTriangulationDataStructure__2_1aaa0fd1b942e8f77242980a1526f0432a" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>using TriangulationDataStructure_2::Rebind_vertex =  unspecified_type</definition>
        <argsstring></argsstring>
        <name>Rebind_vertex</name>
        <briefdescription>
<para>This template class allows to get the type of a triangulation data structure that only changes the vertex type. </para>        </briefdescription>
        <detaileddescription>
<para>It has to define a type <computeroutput>Rebind_vertex&lt;Vb2&gt;::Other</computeroutput> which is a <emphasis>rebound</emphasis> triangulation data structure, that is, the one whose <computeroutput><ref refid="classTriangulationDSVertexBase__2" kindref="compound">TriangulationDSVertexBase_2</ref></computeroutput> will be <computeroutput>Vb2</computeroutput>. <simplesect kind="note"><para>It can be implemented using a nested template class. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="121" column="1" bodyfile="Concepts/TriangulationDataStructure_2.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classTriangulationDataStructure__2_1a3c76543ca42798e62d41182da94c84d4" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>using TriangulationDataStructure_2::Rebind_face =  unspecified_type</definition>
        <argsstring></argsstring>
        <name>Rebind_face</name>
        <briefdescription>
<para>This template class allows to get the type of a triangulation data structure that only changes the face type. </para>        </briefdescription>
        <detaileddescription>
<para>It has to define a type <computeroutput>Rebind_face&lt;Fb2&gt;::Other</computeroutput> which is a <emphasis>rebound</emphasis> triangulation data structure, that is, the one whose <computeroutput><ref refid="classTriangulationDSFaceBase__2" kindref="compound">TriangulationDSFaceBase_2</ref></computeroutput> will be <computeroutput>Fb2</computeroutput>. <simplesect kind="note"><para>It can be implemented using a nested template class. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="131" column="1" bodyfile="Concepts/TriangulationDataStructure_2.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classTriangulationDataStructure__2_1a35f5c887003a6d08b6cef13228c89bd6" prot="public" static="no">
        <type>std::pair&lt; <ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle</ref>, int &gt;</type>
        <definition>typedef std::pair&lt;Face_handle,int&gt; TriangulationDataStructure_2::Edge</definition>
        <argsstring></argsstring>
        <name>Edge</name>
        <briefdescription>
<para>The edge type. </para>        </briefdescription>
        <detaileddescription>
<para>The <computeroutput>Edge(f,i)</computeroutput> is edge common to faces <computeroutput>f</computeroutput> and <computeroutput>f.neighbor(i)</computeroutput>. It is also the edge joining the vertices <computeroutput>vertex(cw(i))</computeroutput> and <computeroutput>vertex(ccw(i))</computeroutput> of <computeroutput>f</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="139" column="1" bodyfile="Concepts/TriangulationDataStructure_2.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Iterators and Circulators</header>
      <description><para>The iterators allow one to visit all the vertices, edges and faces of a triangulation data structure.</para><para>The circulators allow to visit all the edges or faces incident to a given vertex and all the vertices adjacent to a given vertex.</para><para>The iterators and circulators are bidirectional and non mutable, and they are convertible to the corresponding handles, thus they can be passed directly as argument to the functions expecting a handle.</para><para>A face circulator is invalidated by any modification of the face it points to. An edge circulator is invalidated by any modification of any of the two faces incident to the edge pointed to. A vertex circulator that turns around vertex <computeroutput>v</computeroutput> and that has as value a handle to vertex <computeroutput>w</computeroutput>, is invalidated by any modification of anyone of the two faces incident to <computeroutput>v</computeroutput> and <computeroutput>w</computeroutput>. </para></description>
      <memberdef kind="typedef" id="classTriangulationDataStructure__2_1a2167cfd48d39dc2ad85d39f355684053" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type TriangulationDataStructure_2::Face_iterator</definition>
        <argsstring></argsstring>
        <name>Face_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="169" column="1" bodyfile="Concepts/TriangulationDataStructure_2.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classTriangulationDataStructure__2_1afc52f72175928ce9ab6957d5240d8e93" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type TriangulationDataStructure_2::Edge_iterator</definition>
        <argsstring></argsstring>
        <name>Edge_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="174" column="1" bodyfile="Concepts/TriangulationDataStructure_2.h" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classTriangulationDataStructure__2_1a5e0bf301cc9b87e2f08e6b14fe7a6e1e" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type TriangulationDataStructure_2::Vertex_iterator</definition>
        <argsstring></argsstring>
        <name>Vertex_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="179" column="1" bodyfile="Concepts/TriangulationDataStructure_2.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classTriangulationDataStructure__2_1af2c4e62d51b2bdb20278eb30983d3887" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type TriangulationDataStructure_2::Face_circulator</definition>
        <argsstring></argsstring>
        <name>Face_circulator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="184" column="1" bodyfile="Concepts/TriangulationDataStructure_2.h" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classTriangulationDataStructure__2_1a07c67f7254e9bfa267fe6acccbb679e4" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type TriangulationDataStructure_2::Edge_circulator</definition>
        <argsstring></argsstring>
        <name>Edge_circulator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="189" column="1" bodyfile="Concepts/TriangulationDataStructure_2.h" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classTriangulationDataStructure__2_1a90489ea61ac1032f2604b0dd45554d16" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type TriangulationDataStructure_2::Vertex_circulator</definition>
        <argsstring></argsstring>
        <name>Vertex_circulator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="194" column="1" bodyfile="Concepts/TriangulationDataStructure_2.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1a9f288ad9a4aac24acef467aa3c53cb56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TriangulationDataStructure_2::TriangulationDataStructure_2</definition>
        <argsstring>()</argsstring>
        <name>TriangulationDataStructure_2</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="204" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1a132fbb48443b73b9dcd5da0d0f6ff8c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TriangulationDataStructure_2::TriangulationDataStructure_2</definition>
        <argsstring>(const TriangulationDataStructure_2 &amp;tds1)</argsstring>
        <name>TriangulationDataStructure_2</name>
        <param>
          <type>const <ref refid="classTriangulationDataStructure__2" kindref="compound">TriangulationDataStructure_2</ref> &amp;</type>
          <declname>tds1</declname>
        </param>
        <briefdescription>
<para>Copy constructor, performing a deep copy, that is all vertices and faces are duplicated. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="209" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1a6ea9c56a78bb548eb0c94c32a7c5a928" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__2" kindref="compound">TriangulationDataStructure_2</ref> &amp;</type>
        <definition>TriangulationDataStructure_2&amp; TriangulationDataStructure_2::operator=</definition>
        <argsstring>(const TriangulationDataStructure_2 &amp;tds1)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classTriangulationDataStructure__2" kindref="compound">TriangulationDataStructure_2</ref> &amp;</type>
          <declname>tds1</declname>
        </param>
        <briefdescription>
<para>Assignment. </para>        </briefdescription>
        <detaileddescription>
<para>All the vertices and faces of <computeroutput>tds1</computeroutput> are duplicated in the triangulation data structure. Former faces and vertices of the triangulation data structure , if any, are deleted. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="218" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1aa72cb156f03318c585fefbf8ccf522b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle TriangulationDataStructure_2::copy_tds</definition>
        <argsstring>(const TriangulationDataStructure_2 &amp;tds1, Vertex_handle v=Vertex_handle())</argsstring>
        <name>copy_tds</name>
        <param>
          <type>const <ref refid="classTriangulationDataStructure__2" kindref="compound">TriangulationDataStructure_2</ref> &amp;</type>
          <declname>tds1</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
          <defval><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref>()</defval>
        </param>
        <briefdescription>
<para><computeroutput>tds1</computeroutput> is copied into the triangulation data structure. </para>        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>v != <ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle()</ref></computeroutput>, the vertex of the triangulation data structure corresponding to <computeroutput>v</computeroutput> is returned, otherwise <computeroutput><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle()</ref></computeroutput> is returned. <simplesect kind="pre"><para>The optional argument <computeroutput>v</computeroutput> is a vertex of <computeroutput>tds1</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="229" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1aa60dbbb48b6e4fcb8ae73acfbed52aa4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TDS_src</type>
          </param>
          <param>
            <type>class ConvertVertex</type>
          </param>
          <param>
            <type>class ConvertFace</type>
          </param>
        </templateparamlist>
        <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref> tds</type>
        <definition>Vertex_handle tds TriangulationDataStructure_2::copy_tds</definition>
        <argsstring>(const TDS_src &amp;tds_src, typename TDS_src::Vertex_handle v, const ConvertVertex &amp;convert_vertex, const ConvertFace &amp;convert_face)</argsstring>
        <name>copy_tds</name>
        <param>
          <type>const TDS_src &amp;</type>
          <declname>tds_src</declname>
        </param>
        <param>
          <type>typename TDS_src::Vertex_handle</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const ConvertVertex &amp;</type>
          <declname>convert_vertex</declname>
        </param>
        <param>
          <type>const ConvertFace &amp;</type>
          <declname>convert_face</declname>
        </param>
        <briefdescription>
<para><computeroutput>tds_src</computeroutput> is copied into <computeroutput>this</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>As the vertex and face types might be different and incompatible, the creation of new faces and vertices is made thanks to the functors <computeroutput>convert_vertex</computeroutput> and <computeroutput>convert_face</computeroutput>, that convert vertex and face types. For each vertex <computeroutput>v_src</computeroutput> in <computeroutput>tds_src</computeroutput>, the corresponding vertex <computeroutput>v_tgt</computeroutput> in <computeroutput>this</computeroutput> is a copy of the vertex returned by <computeroutput>convert_vertex(v_src)</computeroutput>. The same operations are done for faces with the functor convert_face. If <computeroutput>v != TDS_src::Vertex_handle()</computeroutput>, a handle to the vertex created in <computeroutput>this</computeroutput> that is the copy of <computeroutput>v</computeroutput> is returned, otherwise <computeroutput><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle()</ref></computeroutput> is returned.</para><para><itemizedlist>
<listitem><para>A model of <computeroutput>ConvertVertex</computeroutput> must provide two operator()&apos;s that are responsible for converting the source vertex <computeroutput>v_src</computeroutput> into the target vertex:<itemizedlist>
<listitem><para><computeroutput><ref refid="classTriangulationDataStructure__2_1_1Vertex" kindref="compound">Vertex</ref> operator()(const TDS_src::Vertex&amp; v_src);</computeroutput> This operator is used to create the vertex from <computeroutput>v_src</computeroutput>.</para></listitem><listitem><para><computeroutput>void operator()(const TDS_src::Vertex&amp; v_src, Vertex&amp; v_tgt);</computeroutput> This operator is meant to be used in case heavy data should transferred to <computeroutput>v_tgt</computeroutput>.</para></listitem></itemizedlist>
</para></listitem><listitem><para>A model of ConvertFace must provide two operator()&apos;s that are responsible for converting the source face <computeroutput>f_src</computeroutput> into the target face:<itemizedlist>
<listitem><para><computeroutput><ref refid="classTriangulationDataStructure__2_1_1Face" kindref="compound">Face</ref> operator()(const TDS_src::Face&amp; f_src);</computeroutput> This operator is used to create the face from <computeroutput>f_src</computeroutput>.</para></listitem><listitem><para><computeroutput>void operator()(const TDS_src::Face&amp; f_src, Face&amp; f_tgt);</computeroutput> This operator is meant to be used in case heavy data should transferred to <computeroutput>f_tgt</computeroutput>.</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para><para><simplesect kind="pre"><para>The optional argument <computeroutput>v</computeroutput> is a vertex of <computeroutput>tds_src</computeroutput> or is <computeroutput><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle()</ref></computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="252" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1aa14ee5ea9c40dc9d96aac5d4ac65c763" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TriangulationDataStructure_2::swap</definition>
        <argsstring>(TriangulationDataStructure_2 &amp;tds1)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__2" kindref="compound">TriangulationDataStructure_2</ref> &amp;</type>
          <declname>tds1</declname>
        </param>
        <briefdescription>
<para>Swaps the triangulation data structure and <computeroutput>tds1</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Should be preferred to an assignment or copy constructor when <computeroutput>tds1</computeroutput> is deleted after that. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="259" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1a8f6632b30fe78d78a0bf1dc48121b864" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TriangulationDataStructure_2::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Deletes all faces and all finite vertices. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="264" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Access Functions</header>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1ac673bcb1a6a1f0dede9b8531428f829a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TriangulationDataStructure_2::dimension</definition>
        <argsstring>() const</argsstring>
        <name>dimension</name>
        <briefdescription>
<para>This is an advanced function. </para>        </briefdescription>
        <detaileddescription>
<para></para><para>returns the dimension of the triangulation data structure.  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="277" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1a1f2c5704c0b0760d40c016622237b310" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__2_1a7d10270889c4a88d354170eb09cac15b" kindref="member">size_type</ref></type>
        <definition>size_type TriangulationDataStructure_2::number_of_vertices</definition>
        <argsstring>() const</argsstring>
        <name>number_of_vertices</name>
        <briefdescription>
<para>returns the number of vertices in the triangulation data structure. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="282" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1ad039da7c4f1cd4f69a9251ca7d5a0a89" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__2_1a7d10270889c4a88d354170eb09cac15b" kindref="member">size_type</ref></type>
        <definition>size_type TriangulationDataStructure_2::number_of_faces</definition>
        <argsstring>() const</argsstring>
        <name>number_of_faces</name>
        <briefdescription>
<para>returns the number of two dimensional faces in the triangulation data structure. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="287" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1a1f54704a38e01f3d3d419df742fbd2df" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__2_1a7d10270889c4a88d354170eb09cac15b" kindref="member">size_type</ref></type>
        <definition>size_type TriangulationDataStructure_2::number_of_edges</definition>
        <argsstring>() const</argsstring>
        <name>number_of_edges</name>
        <briefdescription>
<para>returns the number of edges in the triangulation data structure. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="292" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1ad99d34bb8b2808faf5d933cdbdee43ed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__2_1a7d10270889c4a88d354170eb09cac15b" kindref="member">size_type</ref></type>
        <definition>size_type TriangulationDataStructure_2::number_of_full_dim_faces</definition>
        <argsstring>() const</argsstring>
        <name>number_of_full_dim_faces</name>
        <briefdescription>
<para>returns the number of full dimensional faces, i.e. faces of dimension equal to the dimension of the triangulation data structure. </para>        </briefdescription>
        <detaileddescription>
<para>This is the actual number of faces stored in the triangulation data structure. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="300" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Setting</header>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1a861781a2a086f4da073baf4f9d1b9e56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TriangulationDataStructure_2::set_dimension</definition>
        <argsstring>(int n)</argsstring>
        <name>set_dimension</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>sets the dimension. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="310" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Queries</header>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1a2ac5fda50ae9109e621d613e86e70ffd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TriangulationDataStructure_2::is_vertex</definition>
        <argsstring>(Vertex_handle v) const</argsstring>
        <name>is_vertex</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if <computeroutput>v</computeroutput> is a vertex of the triangulation data structure. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="321" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1a8a6a9a22207ed25cd6ea3f9af7fd044a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TriangulationDataStructure_2::is_edge</definition>
        <argsstring>(Face_handle fh, int i) const</argsstring>
        <name>is_edge</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle</ref></type>
          <declname>fh</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if <computeroutput>(fh,i)</computeroutput> is an edge of the triangulation data structure. </para>        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>false</computeroutput> when <computeroutput><ref refid="classTriangulationDataStructure__2_1ac673bcb1a6a1f0dede9b8531428f829a" kindref="member">dimension()</ref> &lt; 1</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="327" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1ad36e9d2b21d26a8c94f1c239edd3721f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TriangulationDataStructure_2::is_edge</definition>
        <argsstring>(Vertex_handle va, Vertex_handle vb) const</argsstring>
        <name>is_edge</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
          <declname>va</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
          <declname>vb</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if <computeroutput>(va, vb)</computeroutput> is an edge of the triangulation data structure. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="333" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1a7242cf44c0cb7ab7558ef439c626fd63" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TriangulationDataStructure_2::is_edge</definition>
        <argsstring>(Vertex_handle va, Vertex_handle vb, Face_handle &amp;fr, int &amp;i) const</argsstring>
        <name>is_edge</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
          <declname>va</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
          <declname>vb</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle</ref> &amp;</type>
          <declname>fr</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if <computeroutput>(va, vb)</computeroutput> is an edge of the triangulation data structure. </para>        </briefdescription>
        <detaileddescription>
<para>In addition, if true is returned <computeroutput>fr</computeroutput> and <computeroutput>i</computeroutput> are set such that the pair <computeroutput>(fr,i)</computeroutput> is the description of the ordered edge <computeroutput>(va, vb)</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="343" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1a3ecf4a4259e3b3ddf45fe77f046b7c68" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TriangulationDataStructure_2::is_face</definition>
        <argsstring>(Face_handle fh) const</argsstring>
        <name>is_face</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle</ref></type>
          <declname>fh</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if <computeroutput>fh</computeroutput> is a face of the triangulation data structure. </para>        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>false</computeroutput> when <computeroutput><ref refid="classTriangulationDataStructure__2_1ac673bcb1a6a1f0dede9b8531428f829a" kindref="member">dimension()</ref> &lt; 2</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="350" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1a26405ccdfafe00e4e96fdbc5fb1ea960" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TriangulationDataStructure_2::is_face</definition>
        <argsstring>(Vertex_handle v1, Vertex_handle v2, Vertex_handle v3) const</argsstring>
        <name>is_face</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
          <declname>v2</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
          <declname>v3</declname>
        </param>
        <briefdescription>
<para><computeroutput>true</computeroutput> if there is a face having <computeroutput>v1</computeroutput>, <computeroutput>v2</computeroutput>, and <computeroutput>v3</computeroutput> as vertices. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="356" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1af8c23daa8de19f31d3ef416c21ce8c64" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TriangulationDataStructure_2::is_face</definition>
        <argsstring>(Vertex_handle v1, Vertex_handle v2, Vertex_handle v3, Face_handle &amp;fr) const</argsstring>
        <name>is_face</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
          <declname>v2</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
          <declname>v3</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle</ref> &amp;</type>
          <declname>fr</declname>
        </param>
        <briefdescription>
<para><computeroutput>true</computeroutput> if there is a face having <computeroutput>v1</computeroutput>, <computeroutput>v2</computeroutput>, and <computeroutput>v3</computeroutput> as vertices. </para>        </briefdescription>
        <detaileddescription>
<para>In addition, if <computeroutput>true</computeroutput> is returned, <computeroutput>fr</computeroutput> is a handle to the face with <computeroutput>v1</computeroutput>, <computeroutput>v2</computeroutput> and <computeroutput>v3</computeroutput> as vertices. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="367" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Traversing the Triangulation</header>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1af43f4ce903ac7922b61bc70126c449cd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__2_1a2167cfd48d39dc2ad85d39f355684053" kindref="member">Face_iterator</ref></type>
        <definition>Face_iterator TriangulationDataStructure_2::faces_begin</definition>
        <argsstring>() const</argsstring>
        <name>faces_begin</name>
        <briefdescription>
<para>visits all faces. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="379" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1a95f6e461c99a85fd924bfa3ccdb1bdec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__2_1a2167cfd48d39dc2ad85d39f355684053" kindref="member">Face_iterator</ref></type>
        <definition>Face_iterator TriangulationDataStructure_2::faces_end</definition>
        <argsstring>() const</argsstring>
        <name>faces_end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="384" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1aca2cf5fe31a245d7cd686c426b6e26c2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__2_1a5e0bf301cc9b87e2f08e6b14fe7a6e1e" kindref="member">Vertex_iterator</ref></type>
        <definition>Vertex_iterator TriangulationDataStructure_2::vertices_begin</definition>
        <argsstring>() const</argsstring>
        <name>vertices_begin</name>
        <briefdescription>
<para>visits all vertices. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="389" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1a938a4d0dbb7010e863386d277f8d3dac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__2_1a5e0bf301cc9b87e2f08e6b14fe7a6e1e" kindref="member">Vertex_iterator</ref></type>
        <definition>Vertex_iterator TriangulationDataStructure_2::vertices_end</definition>
        <argsstring>() const</argsstring>
        <name>vertices_end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="394" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1ac74aedceb106834a659d587788f94102" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__2_1afc52f72175928ce9ab6957d5240d8e93" kindref="member">Edge_iterator</ref></type>
        <definition>Edge_iterator TriangulationDataStructure_2::edges_begin</definition>
        <argsstring>() const</argsstring>
        <name>edges_begin</name>
        <briefdescription>
<para>visits all edges. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="399" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1adbb31f8c9540d73b3078c1b087b5192b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__2_1afc52f72175928ce9ab6957d5240d8e93" kindref="member">Edge_iterator</ref></type>
        <definition>Edge_iterator TriangulationDataStructure_2::edges_end</definition>
        <argsstring>() const</argsstring>
        <name>edges_end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="404" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1a5a7ebcb29a5935056a945cd606544859" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__2_1a90489ea61ac1032f2604b0dd45554d16" kindref="member">Vertex_circulator</ref></type>
        <definition>Vertex_circulator TriangulationDataStructure_2::incident_vertices</definition>
        <argsstring>(Vertex_handle v, Face_handle f=Face_handle()) const</argsstring>
        <name>incident_vertices</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
          <defval><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>If the face <computeroutput>f</computeroutput> is given, it has to be incident to be a face incident to <computeroutput>v</computeroutput> and the circulator begins with the vertex <computeroutput>f-&gt;vertex(ccw(i))</computeroutput> if <computeroutput>i</computeroutput> is the index of <computeroutput>v</computeroutput> in <computeroutput>f</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="410" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1a3e86d6b60d00d8d897aacfc6761fa2db" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__2_1a07c67f7254e9bfa267fe6acccbb679e4" kindref="member">Edge_circulator</ref></type>
        <definition>Edge_circulator TriangulationDataStructure_2::incident_edges</definition>
        <argsstring>(Vertex_handle v, Face_handle f=Face_handle()) const</argsstring>
        <name>incident_edges</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
          <defval><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>If the face <computeroutput>f</computeroutput> is given, it has to be a face of incident to <computeroutput>v</computeroutput> and the circulator begins with the edge <computeroutput>(f,cw(i))</computeroutput> of <computeroutput>f</computeroutput> if <computeroutput>i</computeroutput> is the index of <computeroutput>v</computeroutput> in <computeroutput>f</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="417" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1a7c143f88656a46d6e1a168b88fe24337" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__2_1af2c4e62d51b2bdb20278eb30983d3887" kindref="member">Face_circulator</ref></type>
        <definition>Face_circulator TriangulationDataStructure_2::incident_faces</definition>
        <argsstring>(Vertex_handle v, Face_handle f=Face_handle()) const</argsstring>
        <name>incident_faces</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
          <defval><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>If the face <computeroutput>f</computeroutput> is given, it has to be a face of incident to <computeroutput>v</computeroutput> and the circulator begins with the face <computeroutput>f</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="423" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1ad20be283df999243125420d3b01675b4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle TriangulationDataStructure_2::mirror_vertex</definition>
        <argsstring>(Face_handle f, int i) const</argsstring>
        <name>mirror_vertex</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>returns vertex of <computeroutput>f-&gt;neighbor(i)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="428" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1afe5741e96a47ef691ddf3a1abcc1780f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TriangulationDataStructure_2::mirror_index</definition>
        <argsstring>(Face_handle f, int i) const</argsstring>
        <name>mirror_index</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>returns the index of <computeroutput>f</computeroutput> as a neighbor of <computeroutput>f-&gt;neighbor(i)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="433" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1afe6bc558fc5653ebebc0a162bc37734b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__2_1a35f5c887003a6d08b6cef13228c89bd6" kindref="member">Edge</ref></type>
        <definition>Edge TriangulationDataStructure_2::mirror_edge</definition>
        <argsstring>(Edge e) const</argsstring>
        <name>mirror_edge</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1a35f5c887003a6d08b6cef13228c89bd6" kindref="member">Edge</ref></type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>returns the same edge seen from the other adjacent face. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="438" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Modifiers</header>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1a95d7eb28d7dbb53dda17629f034f26bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TriangulationDataStructure_2::flip</definition>
        <argsstring>(Face_handle f, int i)</argsstring>
        <name>flip</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>exchanges the edge incident to <computeroutput>f</computeroutput> and <computeroutput>f-&gt;neighbor(i)</computeroutput> with the other diagonal of the quadrilateral formed by <computeroutput>f</computeroutput> and <computeroutput>f-&gt;neighbor(i)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><image type="html" name="Flip.png">Flip</image>
<image type="latex" name="Flip.png">Flip</image>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="454" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1af2134bef02ecbf3e9579399171692c40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle TriangulationDataStructure_2::insert_first</definition>
        <argsstring>()</argsstring>
        <name>insert_first</name>
        <briefdescription>
<para>creates the first vertex and returns a handle to it. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="460" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1a4f012375ff68726e5f5e045d5ddedda9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle TriangulationDataStructure_2::insert_second</definition>
        <argsstring>()</argsstring>
        <name>insert_second</name>
        <briefdescription>
<para>creates the second vertex and returns a handle to it. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="466" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1a26c64d100afae15e5b278492162511eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle TriangulationDataStructure_2::insert_in_edge</definition>
        <argsstring>(Face_handle f, int i)</argsstring>
        <name>insert_in_edge</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>adds a vertex <computeroutput>v</computeroutput> splitting edge <computeroutput>i</computeroutput> of face <computeroutput>f</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Return a handle to <computeroutput>v</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="473" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1a669f30d643d75fe04c3b7deb184e901b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle TriangulationDataStructure_2::insert_in_face</definition>
        <argsstring>(Face_handle f)</argsstring>
        <name>insert_in_face</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>adds a vertex <computeroutput>v</computeroutput> splitting face <computeroutput>f</computeroutput> in three. </para>        </briefdescription>
        <detaileddescription>
<para>Face <computeroutput>f</computeroutput> is modified, two new faces are created. Return a handle to <computeroutput>v</computeroutput> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="481" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1a695fe155aae3412b32bd7fd1671550c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle TriangulationDataStructure_2::insert_dim_up</definition>
        <argsstring>(Vertex_handle w, bool orient=true)</argsstring>
        <name>insert_dim_up</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
          <declname>w</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>orient</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>adds a vertex <computeroutput>v</computeroutput>, increasing by one the dimension of the triangulation data structure. </para>        </briefdescription>
        <detaileddescription>
<para>Vertex <computeroutput>v</computeroutput> and the existing vertex <computeroutput>w</computeroutput> are linked to all the vertices of the triangulation data structure. The Boolean <computeroutput>orient</computeroutput> decides the final orientation of all faces. A handle to vertex <computeroutput>v</computeroutput> is returned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="492" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1aada45d9966cf8e47469460d7c5a4af1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TriangulationDataStructure_2::remove_degree_3</definition>
        <argsstring>(Vertex_handle v, Face_handle f=Face_handle())</argsstring>
        <name>remove_degree_3</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
          <defval><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle</ref>()</defval>
        </param>
        <briefdescription>
<para>removes a vertex of degree 3. </para>        </briefdescription>
        <detaileddescription>
<para>Two of the incident faces are destroyed, the third one is modified. If parameter <computeroutput>f</computeroutput> is specified, it has to be a face incident to <computeroutput>v</computeroutput> and will be the modified face. <simplesect kind="pre"><para>Vertex <computeroutput>v</computeroutput> is a finite vertex with degree 3 and, if specified, face <computeroutput>f</computeroutput> is incident to <computeroutput>v</computeroutput>.</para></simplesect>
<image type="html" name="Three.png">Insertion</image>
<image type="latex" name="Three.png">Insertion</image>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="505" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1ab2ccc76bb386f5f09be81c243f344468" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TriangulationDataStructure_2::remove_second</definition>
        <argsstring>(Vertex_handle v)</argsstring>
        <name>remove_second</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>removes the before last vertex. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="511" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1a99b8b44d9560009a06df4c5be25b3cad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TriangulationDataStructure_2::remove_first</definition>
        <argsstring>(Vertex_handle v)</argsstring>
        <name>remove_first</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>removes the last vertex. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="516" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1a1751ff6d75fba4ada95fcd04e78efe3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TriangulationDataStructure_2::remove_dim_down</definition>
        <argsstring>(Vertex_handle v)</argsstring>
        <name>remove_dim_down</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>removes vertex <computeroutput>v</computeroutput> incident to all other vertices and decreases by one the dimension of the triangulation data structure. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>If the dimension is 2, the number of vertices is more than 3, if the dimension is 1, the number of vertices is 2. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="523" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1a1fd682a0c0ecb9aa31b0626d92abeb06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TriangulationDataStructure_2::dim_down</definition>
        <argsstring>(Face_handle f, int i)</argsstring>
        <name>dim_down</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>must be called when the displacement of a vertex decreases the dimension of the triangulation data structure. </para>        </briefdescription>
        <detaileddescription>
<para>The link of a vertex <computeroutput>v</computeroutput> is formed by the edges disjoint from <computeroutput>v</computeroutput> that are included in the faces incident to <computeroutput>v</computeroutput>. When the link of <computeroutput>v = f-&gt;vertex(i)</computeroutput> contains all the other vertices of the two-dimensional triangulation data structure ( <formula id="1">$ \mathbb{S}^2$</formula>), <computeroutput><ref refid="classTriangulationDataStructure__2_1a1fd682a0c0ecb9aa31b0626d92abeb06" kindref="member">dim_down()</ref></computeroutput> crushes the two-dimensional data-structure ( <formula id="1">$ \mathbb{S}^2$</formula>) onto the one-dimensional data structure ( <formula id="2">$ \mathbb{S}^1$</formula>) formed by the link of <computeroutput>v</computeroutput> augmented with the vertex <computeroutput>v</computeroutput> itself; this one is placed on the edge <computeroutput>(f, i)</computeroutput> (see Figure <ref refid="classTriangulationDataStructure__2_1figtdsdim_down_2" kindref="member">figtdsdim_down_2</ref>). <simplesect kind="pre"><para><computeroutput><ref refid="classTriangulationDataStructure__2_1ac673bcb1a6a1f0dede9b8531428f829a" kindref="member">dimension()</ref></computeroutput> must be equal to <computeroutput>2</computeroutput>, the degree of <computeroutput>f-&gt;vertex(i)</computeroutput> must be equal to the total number of vertices minus 1.</para></simplesect>
<anchor id="classTriangulationDataStructure__2_1figtdsdim_down_2"/><image type="html" name="tds-dim_down.png">From a two-dimensional data structure to a one-dimensional data structure.</image>
<image type="latex" name="tds-dim_down.png">From a two-dimensional data structure to a one-dimensional data structure.</image>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="542" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Advanced Modifiers</header>
      <description><para>The following modifiers are required for convenience of the advanced user.</para><para>They do not guarantee the combinatorial validity of the resulting triangulation data structure. </para></description>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1a7e1be0c88bbda220a8b9b67d48f77c52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FaceIt</type>
          </param>
        </templateparamlist>
        <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle TriangulationDataStructure_2::insert_in_hole</definition>
        <argsstring>(FaceIt face_begin, FaceIt face_end)</argsstring>
        <name>insert_in_hole</name>
        <param>
          <type>FaceIt</type>
          <declname>face_begin</declname>
        </param>
        <param>
          <type>FaceIt</type>
          <declname>face_end</declname>
        </param>
        <briefdescription>
<para>creates a new vertex <computeroutput>v</computeroutput> and uses it to star a hole. </para>        </briefdescription>
        <detaileddescription>
<para>Given a set of faces &apos;F&apos; describing a simply connected hole (i.e., a topological disk), the function deletes all the faces in <computeroutput>F</computeroutput>, creates a new vertex <computeroutput>v</computeroutput> and for each edge on the boundary of the hole creates a new face with <computeroutput>v</computeroutput> as a vertex. The input is an iterator range <computeroutput>[face_begin, face_end[</computeroutput> of <computeroutput>Face_handle</computeroutput>s over the connected faces in <computeroutput>F</computeroutput>. The handle to the new vertex <computeroutput>v</computeroutput> is returned.</para><para><simplesect kind="pre"><para><computeroutput>tds.dimension() = 2</computeroutput> and the set of faces has the topology of a disk. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="565" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1aafd32179c31513aa3045027701ef4efa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FaceIt</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void TriangulationDataStructure_2::insert_in_hole</definition>
        <argsstring>(Vertex_handle new_v, FaceIt face_begin, FaceIt face_end)</argsstring>
        <name>insert_in_hole</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
          <declname>new_v</declname>
        </param>
        <param>
          <type>FaceIt</type>
          <declname>face_begin</declname>
        </param>
        <param>
          <type>FaceIt</type>
          <declname>face_end</declname>
        </param>
        <briefdescription>
<para>same as above, except that <computeroutput>new_v</computeroutput> will be used as the new vertex, which must have been allocated previously, for example with <computeroutput>create_vertex</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="572" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1ae3574acca0b1f9c41126c838ca367612" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class EdgeIt</type>
          </param>
        </templateparamlist>
        <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle TriangulationDataStructure_2::star_hole</definition>
        <argsstring>(EdgeIt edge_begin, EdgeIt edge_end)</argsstring>
        <name>star_hole</name>
        <param>
          <type>EdgeIt</type>
          <declname>edge_begin</declname>
        </param>
        <param>
          <type>EdgeIt</type>
          <declname>edge_end</declname>
        </param>
        <briefdescription>
<para>creates a new vertex <computeroutput>v</computeroutput> and use it to star the hole whose boundary is described by the sequence of edges <computeroutput>[edge_begin, edge_end)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Returns a handle to the vertex. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="580" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1af9c4cbf7760a49a29abe7edf78d55f02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class EdgeIt</type>
          </param>
          <param>
            <type>class FaceIt</type>
          </param>
        </templateparamlist>
        <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle TriangulationDataStructure_2::star_hole</definition>
        <argsstring>(EdgeIt edge_begin, EdgeIt edge_end, FaceIt face_begin, FaceIt face_end)</argsstring>
        <name>star_hole</name>
        <param>
          <type>EdgeIt</type>
          <declname>edge_begin</declname>
        </param>
        <param>
          <type>EdgeIt</type>
          <declname>edge_end</declname>
        </param>
        <param>
          <type>FaceIt</type>
          <declname>face_begin</declname>
        </param>
        <param>
          <type>FaceIt</type>
          <declname>face_end</declname>
        </param>
        <briefdescription>
<para>same as above, except that, to build the new faces, the algorithm first recycles faces in the sequence <computeroutput>[face_begin, face_end)</computeroutput> and create new ones when the sequence is exhausted. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="587" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1a471e260a33ca3ae4ba6e5f8b83ff8141" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class EdgeIt</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void TriangulationDataStructure_2::star_hole</definition>
        <argsstring>(Vertex_handle v, EdgeIt edge_begin, EdgeIt edge_end)</argsstring>
        <name>star_hole</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type>EdgeIt</type>
          <declname>edge_begin</declname>
        </param>
        <param>
          <type>EdgeIt</type>
          <declname>edge_end</declname>
        </param>
        <briefdescription>
<para>uses vertex v to star the hole whose boundary is described by the sequence of edges <computeroutput>[edge_begin, edge_end)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="598" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1a04becf102ce2b426d144d06806faa71a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class EdgeIt</type>
          </param>
          <param>
            <type>class FaceIt</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void TriangulationDataStructure_2::star_hole</definition>
        <argsstring>(Vertex_handle v, EdgeIt edge_begin, EdgeIt edge_end, FaceIt face_begin, FaceIt face_end)</argsstring>
        <name>star_hole</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type>EdgeIt</type>
          <declname>edge_begin</declname>
        </param>
        <param>
          <type>EdgeIt</type>
          <declname>edge_end</declname>
        </param>
        <param>
          <type>FaceIt</type>
          <declname>face_begin</declname>
        </param>
        <param>
          <type>FaceIt</type>
          <declname>face_end</declname>
        </param>
        <briefdescription>
<para>same as above, recycling faces in the sequence <computeroutput>[face_begin, face_end)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="604" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1a08f69614ca15c07eb91ebd26a6c9f0d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TriangulationDataStructure_2::make_hole</definition>
        <argsstring>(Vertex_handle v, List_edges &amp;hole)</argsstring>
        <name>make_hole</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type>List_edges &amp;</type>
          <declname>hole</declname>
        </param>
        <briefdescription>
<para>removes the vertex v, and store in <computeroutput>hole</computeroutput> the list of edges on the boundary of the hole. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="614" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1a0141b0e129a4b8791c6f287f1e441163" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle TriangulationDataStructure_2::create_vertex</definition>
        <argsstring>()</argsstring>
        <name>create_vertex</name>
        <briefdescription>
<para>adds a new vertex. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="619" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1a536bf5c112528de8277690b6480a9c69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle</ref></type>
        <definition>Face_handle TriangulationDataStructure_2::create_face</definition>
        <argsstring>(Face_handle f1, int i1, Face_handle f2, int i2, Face_handle f3, int i3)</argsstring>
        <name>create_face</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle</ref></type>
          <declname>f1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i1</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle</ref></type>
          <declname>f2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i2</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle</ref></type>
          <declname>f3</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i3</declname>
        </param>
        <briefdescription>
<para>adds a face which is the neighbor <computeroutput>i1</computeroutput> of <computeroutput>f1</computeroutput>, <computeroutput>i2</computeroutput> of <computeroutput>f2</computeroutput> and <computeroutput>i3</computeroutput> of <computeroutput>f3</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="625" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1afd3c351ce878cb39b7b227fdbd6ae37f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle</ref></type>
        <definition>Face_handle TriangulationDataStructure_2::create_face</definition>
        <argsstring>(Face_handle f1, int i1, Face_handle f2, int i2)</argsstring>
        <name>create_face</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle</ref></type>
          <declname>f1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i1</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle</ref></type>
          <declname>f2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i2</declname>
        </param>
        <briefdescription>
<para>adds a face which is the neighbor <computeroutput>i1</computeroutput> of <computeroutput>f1</computeroutput>, and the neighbor <computeroutput>i2</computeroutput> of <computeroutput>f2</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="632" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1aa19927bfcb94d2a39063c12985b00b74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle</ref></type>
        <definition>Face_handle TriangulationDataStructure_2::create_face</definition>
        <argsstring>(Face_handle f1, int i1, Vertex_handle v)</argsstring>
        <name>create_face</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle</ref></type>
          <declname>f1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i1</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>adds a face which is the neighbor <computeroutput>i1</computeroutput> of <computeroutput>f1</computeroutput>, and has <computeroutput>v</computeroutput> as vertex. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="638" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1addbb62187c6e92c70afd95a7da8011d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle</ref></type>
        <definition>Face_handle TriangulationDataStructure_2::create_face</definition>
        <argsstring>(Vertex_handle v1, Vertex_handle v2, Vertex_handle v3)</argsstring>
        <name>create_face</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
          <declname>v2</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
          <declname>v3</declname>
        </param>
        <briefdescription>
<para>adds a face with vertices <computeroutput>v1</computeroutput>, <computeroutput>v2</computeroutput> and <computeroutput>v3</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="643" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1ac3f7d1c401137f52c4c5c9b6abef9425" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle</ref></type>
        <definition>Face_handle TriangulationDataStructure_2::create_face</definition>
        <argsstring>(Vertex_handle v1, Vertex_handle v2, Vertex_handle v3, Face_handle f1, Face_handle f2, Face_handle f3)</argsstring>
        <name>create_face</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
          <declname>v2</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
          <declname>v3</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle</ref></type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle</ref></type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle</ref></type>
          <declname>f3</declname>
        </param>
        <briefdescription>
<para>adds a face with vertices <computeroutput>v1</computeroutput>, <computeroutput>v2</computeroutput> and <computeroutput>v3</computeroutput>, and neighbors <computeroutput>f1</computeroutput>, <computeroutput>f2</computeroutput>, <computeroutput>f3</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="649" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1a61b744ad53b31d9fac07c3220e908132" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle</ref></type>
        <definition>Face_handle TriangulationDataStructure_2::create_face</definition>
        <argsstring>()</argsstring>
        <name>create_face</name>
        <briefdescription>
<para>adds a face whose vertices and neighbors are set to <computeroutput><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle()</ref></computeroutput> and <computeroutput><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle()</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="655" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1a646bb444118872dab4afa3b88a4f72ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TriangulationDataStructure_2::delete_face</definition>
        <argsstring>(Face_handle)</argsstring>
        <name>delete_face</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle</ref></type>
        </param>
        <briefdescription>
<para>deletes a face. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="660" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1a253217ecb2496119e95cff787a447265" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TriangulationDataStructure_2::delete_vertex</definition>
        <argsstring>(Vertex_handle)</argsstring>
        <name>delete_vertex</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
        </param>
        <briefdescription>
<para>deletes a vertex. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="665" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Miscellaneous</header>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1abe929a571cc5fd2b20825053704243a9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TriangulationDataStructure_2::ccw</definition>
        <argsstring>(int i) const</argsstring>
        <name>ccw</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>returns <formula id="3">$ i+1$</formula> modulo 3, with <formula id="4">$ 0\leq i \leq2$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="675" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1ac194f4b9ed7d0fc7b0cfc95c9ed49b0d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TriangulationDataStructure_2::cw</definition>
        <argsstring>(int i) const</argsstring>
        <name>cw</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>returns <formula id="5">$ i+2$</formula> modulo 3, with <formula id="4">$ 0\leq i \leq2$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="680" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1addd3db2766b6edc86a042599f364a396" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TriangulationDataStructure_2::is_valid</definition>
        <argsstring>()</argsstring>
        <name>is_valid</name>
        <briefdescription>
<para>checks the combinatorial validity of the triangulation data structure: call the <computeroutput><ref refid="classTriangulationDataStructure__2_1addd3db2766b6edc86a042599f364a396" kindref="member">is_valid()</ref></computeroutput> member function for each vertex and each face, checks the number of vertices and the Euler relation between numbers of vertices, faces and edges. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="688" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1aac6a35b7db040f73f8f837c2b1a22a58" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__2_1a7d10270889c4a88d354170eb09cac15b" kindref="member">size_type</ref></type>
        <definition>size_type TriangulationDataStructure_2::degree</definition>
        <argsstring>(Vertex_handle v) const</argsstring>
        <name>degree</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Returns the degree of <computeroutput>v</computeroutput> in the triangulation data structure. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="693" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1ad8ac5d4088e48597a086a21d12bdec27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TriangulationDataStructure_2::file_output</definition>
        <argsstring>(ostream &amp;os, Vertex_handle v=Vertex_handle(), bool skip_first=false)</argsstring>
        <name>file_output</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
          <defval><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>skip_first</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>writes the triangulation data structure into the stream <computeroutput>os</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>v</computeroutput> is not <computeroutput><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle()</ref></computeroutput>, vertex <computeroutput>v</computeroutput> is output first or skipped if <computeroutput>skip_first</computeroutput> is true. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="700" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1ae4bef59e1878c8201f805ad8b413d18f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle TriangulationDataStructure_2::file_input</definition>
        <argsstring>(istream &amp;is, bool skip_first=false)</argsstring>
        <name>file_input</name>
        <param>
          <type>istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>skip_first</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>inputs the triangulation data structure from file and returns a handle to the first input vertex. </para>        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>skip_first</computeroutput> is true, it is assumed that the first vertex has been omitted when output. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="707" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1afecbc9acbef46241a1e2206c2fd7eafd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>istream &amp;</type>
        <definition>istream&amp; TriangulationDataStructure_2::operator&gt;&gt;</definition>
        <argsstring>(istream &amp;is, TriangulationDataStructure_3 &amp;tds)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>TriangulationDataStructure_3 &amp;</type>
          <declname>tds</declname>
        </param>
        <briefdescription>
<para>reads a combinatorial triangulation data structure from <computeroutput>is</computeroutput> and assigns it to tthe triangulation data structure. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="712" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1a1b29a2bfcab0fd9e8e789661b2b4eb43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream&amp; TriangulationDataStructure_2::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const TriangulationDataStructure_3 &amp;tds)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const TriangulationDataStructure_3 &amp;</type>
          <declname>tds</declname>
        </param>
        <briefdescription>
<para>writes <computeroutput>tds</computeroutput> into the stream <computeroutput>os</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="717" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The concept <computeroutput><ref refid="classTriangulationDataStructure__2" kindref="compound">TriangulationDataStructure_2</ref></computeroutput> describes the requirements for the second template parameter of the basic triangulation class <computeroutput>Triangulation_2&lt;Traits,Tds&gt;</computeroutput> and of all other 2D triangulation classes. </para>    </briefdescription>
    <detaileddescription>
<para> The concept can be seen as a container for the faces and vertices of the triangulation. The concept <computeroutput><ref refid="classTriangulationDataStructure__2" kindref="compound">TriangulationDataStructure_2</ref></computeroutput> includes two sub-concepts <computeroutput><ref refid="classTriangulationDataStructure__2_1_1Vertex" kindref="compound">TriangulationDataStructure_2::Vertex</ref></computeroutput> and <computeroutput><ref refid="classTriangulationDataStructure__2_1_1Face" kindref="compound">TriangulationDataStructure_2::Face</ref></computeroutput>.</para><para>The <computeroutput><ref refid="classTriangulationDataStructure__2" kindref="compound">TriangulationDataStructure_2</ref></computeroutput> maintains incidence and adjacency relations among vertices and faces.</para><para>Each triangular face gives access to its three incident vertices and to its three adjacent faces. Each vertex gives access to one of its incident faces and through that face to the circular list of its incident faces.</para><para>The three vertices of a face are indexed with 0, 1, and 2. The neighbors of a face are also indexed with 0, 1, and 2 in such a way that the neighbor indexed by <computeroutput>i</computeroutput> is opposite to the vertex with the same index.</para><para>Each edge has two implicit representations : the edge of a face <computeroutput>f</computeroutput> which is opposed to the vertex indexed <computeroutput>i</computeroutput>, can be represented as well as an edge of the <computeroutput>neighbor(i)</computeroutput> of <computeroutput>f</computeroutput>. See <ref refid="index_1fig__TDS_2D_Fig_neighbors1" kindref="member">fig__TDS_2D_Fig_neighbors1</ref>.</para><para>The triangulation data structure is responsible for the combinatorial integrity of the triangulation. This means that the triangulation data structure allows to perform some combinatorial operations on the triangulation and guarantees the maintenance on proper incidence and adjacency relations among the vertices and faces. The term combinatorial operations means that those operations are purely topological and do not depend on the geometric embedding. Insertion of a new vertex in a given face, or in a given edge, suppression of a vertex of degree three, flip of two edges are examples of combinatorial operations.</para><para><bold>I/O</bold><linebreak/>
</para><para>The information output in the <computeroutput>iostream</computeroutput> is: the dimension, the number of (finite) vertices, the number of (finite) faces. Then comes for each vertex, the non combinatorial information stored in that vertex if any. Then comes for each faces, the indices of its vertices and the non combinatorial information (if any) stored in this face. Then comes for each face again the indices of the neighboring faces. The index of an item (vertex of face) the rank of this item in the output order. When dimension <formula id="0">$ &lt;$</formula> 2, the same information is output for faces of maximal dimension instead of faces.</para><para><xrefsect id="hasModels_1_hasModels000001"><xreftitle>Has Models</xreftitle><xrefdescription><para><computeroutput><ref refid="classCGAL_1_1Triangulation__data__structure__2" kindref="compound">CGAL::Triangulation_data_structure_2</ref>&lt;Vb,Fb&gt;</computeroutput> </para></xrefdescription></xrefsect></para><para><simplesect kind="see"><para><computeroutput><ref refid="classTriangulationDataStructure__2_1_1Face" kindref="compound">TriangulationDataStructure_2::Face</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classTriangulationDataStructure__2_1_1Vertex" kindref="compound">TriangulationDataStructure_2::Vertex</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Triangulation__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_2.tag">CGAL::Triangulation_2</ref>&lt;Traits,Tds&gt;</computeroutput> </para></simplesect>
</para>    </detaileddescription>
    <location file="Concepts/TriangulationDataStructure_2.h" line="75" column="1" bodyfile="Concepts/TriangulationDataStructure_2.h" bodystart="75" bodyend="721"/>
    <listofallmembers>
      <member refid="classTriangulationDataStructure__2_1abe929a571cc5fd2b20825053704243a9" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>ccw</name></member>
      <member refid="classTriangulationDataStructure__2_1a8f6632b30fe78d78a0bf1dc48121b864" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>clear</name></member>
      <member refid="classTriangulationDataStructure__2_1aa72cb156f03318c585fefbf8ccf522b0" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>copy_tds</name></member>
      <member refid="classTriangulationDataStructure__2_1aa60dbbb48b6e4fcb8ae73acfbed52aa4" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>copy_tds</name></member>
      <member refid="classTriangulationDataStructure__2_1a536bf5c112528de8277690b6480a9c69" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>create_face</name></member>
      <member refid="classTriangulationDataStructure__2_1afd3c351ce878cb39b7b227fdbd6ae37f" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>create_face</name></member>
      <member refid="classTriangulationDataStructure__2_1aa19927bfcb94d2a39063c12985b00b74" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>create_face</name></member>
      <member refid="classTriangulationDataStructure__2_1addbb62187c6e92c70afd95a7da8011d9" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>create_face</name></member>
      <member refid="classTriangulationDataStructure__2_1ac3f7d1c401137f52c4c5c9b6abef9425" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>create_face</name></member>
      <member refid="classTriangulationDataStructure__2_1a61b744ad53b31d9fac07c3220e908132" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>create_face</name></member>
      <member refid="classTriangulationDataStructure__2_1a0141b0e129a4b8791c6f287f1e441163" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>create_vertex</name></member>
      <member refid="classTriangulationDataStructure__2_1ac194f4b9ed7d0fc7b0cfc95c9ed49b0d" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>cw</name></member>
      <member refid="classTriangulationDataStructure__2_1aac6a35b7db040f73f8f837c2b1a22a58" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>degree</name></member>
      <member refid="classTriangulationDataStructure__2_1a646bb444118872dab4afa3b88a4f72ce" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>delete_face</name></member>
      <member refid="classTriangulationDataStructure__2_1a253217ecb2496119e95cff787a447265" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>delete_vertex</name></member>
      <member refid="classTriangulationDataStructure__2_1a565c9c783af8db3cb4cb3226c8983d18" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>difference_type</name></member>
      <member refid="classTriangulationDataStructure__2_1a1fd682a0c0ecb9aa31b0626d92abeb06" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>dim_down</name></member>
      <member refid="classTriangulationDataStructure__2_1ac673bcb1a6a1f0dede9b8531428f829a" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>dimension</name></member>
      <member refid="classTriangulationDataStructure__2_1a35f5c887003a6d08b6cef13228c89bd6" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>Edge</name></member>
      <member refid="classTriangulationDataStructure__2_1a07c67f7254e9bfa267fe6acccbb679e4" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>Edge_circulator</name></member>
      <member refid="classTriangulationDataStructure__2_1afc52f72175928ce9ab6957d5240d8e93" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>Edge_iterator</name></member>
      <member refid="classTriangulationDataStructure__2_1ac74aedceb106834a659d587788f94102" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>edges_begin</name></member>
      <member refid="classTriangulationDataStructure__2_1adbb31f8c9540d73b3078c1b087b5192b" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>edges_end</name></member>
      <member refid="classTriangulationDataStructure__2_1a65140c8c5ac748cbaea2ec06e619bb31" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>Face</name></member>
      <member refid="classTriangulationDataStructure__2_1af2c4e62d51b2bdb20278eb30983d3887" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>Face_circulator</name></member>
      <member refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>Face_handle</name></member>
      <member refid="classTriangulationDataStructure__2_1a2167cfd48d39dc2ad85d39f355684053" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>Face_iterator</name></member>
      <member refid="classTriangulationDataStructure__2_1af43f4ce903ac7922b61bc70126c449cd" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>faces_begin</name></member>
      <member refid="classTriangulationDataStructure__2_1a95f6e461c99a85fd924bfa3ccdb1bdec" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>faces_end</name></member>
      <member refid="classTriangulationDataStructure__2_1ae4bef59e1878c8201f805ad8b413d18f" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>file_input</name></member>
      <member refid="classTriangulationDataStructure__2_1ad8ac5d4088e48597a086a21d12bdec27" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>file_output</name></member>
      <member refid="classTriangulationDataStructure__2_1a95d7eb28d7dbb53dda17629f034f26bb" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>flip</name></member>
      <member refid="classTriangulationDataStructure__2_1a3e86d6b60d00d8d897aacfc6761fa2db" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>incident_edges</name></member>
      <member refid="classTriangulationDataStructure__2_1a7c143f88656a46d6e1a168b88fe24337" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>incident_faces</name></member>
      <member refid="classTriangulationDataStructure__2_1a5a7ebcb29a5935056a945cd606544859" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>incident_vertices</name></member>
      <member refid="classTriangulationDataStructure__2_1a695fe155aae3412b32bd7fd1671550c7" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>insert_dim_up</name></member>
      <member refid="classTriangulationDataStructure__2_1af2134bef02ecbf3e9579399171692c40" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>insert_first</name></member>
      <member refid="classTriangulationDataStructure__2_1a26c64d100afae15e5b278492162511eb" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>insert_in_edge</name></member>
      <member refid="classTriangulationDataStructure__2_1a669f30d643d75fe04c3b7deb184e901b" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>insert_in_face</name></member>
      <member refid="classTriangulationDataStructure__2_1a7e1be0c88bbda220a8b9b67d48f77c52" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>insert_in_hole</name></member>
      <member refid="classTriangulationDataStructure__2_1aafd32179c31513aa3045027701ef4efa" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>insert_in_hole</name></member>
      <member refid="classTriangulationDataStructure__2_1a4f012375ff68726e5f5e045d5ddedda9" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>insert_second</name></member>
      <member refid="classTriangulationDataStructure__2_1a8a6a9a22207ed25cd6ea3f9af7fd044a" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>is_edge</name></member>
      <member refid="classTriangulationDataStructure__2_1ad36e9d2b21d26a8c94f1c239edd3721f" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>is_edge</name></member>
      <member refid="classTriangulationDataStructure__2_1a7242cf44c0cb7ab7558ef439c626fd63" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>is_edge</name></member>
      <member refid="classTriangulationDataStructure__2_1a3ecf4a4259e3b3ddf45fe77f046b7c68" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>is_face</name></member>
      <member refid="classTriangulationDataStructure__2_1a26405ccdfafe00e4e96fdbc5fb1ea960" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>is_face</name></member>
      <member refid="classTriangulationDataStructure__2_1af8c23daa8de19f31d3ef416c21ce8c64" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>is_face</name></member>
      <member refid="classTriangulationDataStructure__2_1addd3db2766b6edc86a042599f364a396" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>is_valid</name></member>
      <member refid="classTriangulationDataStructure__2_1a2ac5fda50ae9109e621d613e86e70ffd" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>is_vertex</name></member>
      <member refid="classTriangulationDataStructure__2_1a08f69614ca15c07eb91ebd26a6c9f0d3" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>make_hole</name></member>
      <member refid="classTriangulationDataStructure__2_1afe6bc558fc5653ebebc0a162bc37734b" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>mirror_edge</name></member>
      <member refid="classTriangulationDataStructure__2_1afe5741e96a47ef691ddf3a1abcc1780f" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>mirror_index</name></member>
      <member refid="classTriangulationDataStructure__2_1ad20be283df999243125420d3b01675b4" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>mirror_vertex</name></member>
      <member refid="classTriangulationDataStructure__2_1a1f54704a38e01f3d3d419df742fbd2df" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>number_of_edges</name></member>
      <member refid="classTriangulationDataStructure__2_1ad039da7c4f1cd4f69a9251ca7d5a0a89" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>number_of_faces</name></member>
      <member refid="classTriangulationDataStructure__2_1ad99d34bb8b2808faf5d933cdbdee43ed" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>number_of_full_dim_faces</name></member>
      <member refid="classTriangulationDataStructure__2_1a1f2c5704c0b0760d40c016622237b310" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>number_of_vertices</name></member>
      <member refid="classTriangulationDataStructure__2_1a1b29a2bfcab0fd9e8e789661b2b4eb43" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>operator&lt;&lt;</name></member>
      <member refid="classTriangulationDataStructure__2_1a6ea9c56a78bb548eb0c94c32a7c5a928" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>operator=</name></member>
      <member refid="classTriangulationDataStructure__2_1afecbc9acbef46241a1e2206c2fd7eafd" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>operator&gt;&gt;</name></member>
      <member refid="classTriangulationDataStructure__2_1a3c76543ca42798e62d41182da94c84d4" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>Rebind_face</name></member>
      <member refid="classTriangulationDataStructure__2_1aaa0fd1b942e8f77242980a1526f0432a" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>Rebind_vertex</name></member>
      <member refid="classTriangulationDataStructure__2_1aada45d9966cf8e47469460d7c5a4af1d" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>remove_degree_3</name></member>
      <member refid="classTriangulationDataStructure__2_1a1751ff6d75fba4ada95fcd04e78efe3a" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>remove_dim_down</name></member>
      <member refid="classTriangulationDataStructure__2_1a99b8b44d9560009a06df4c5be25b3cad" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>remove_first</name></member>
      <member refid="classTriangulationDataStructure__2_1ab2ccc76bb386f5f09be81c243f344468" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>remove_second</name></member>
      <member refid="classTriangulationDataStructure__2_1a861781a2a086f4da073baf4f9d1b9e56" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>set_dimension</name></member>
      <member refid="classTriangulationDataStructure__2_1a7d10270889c4a88d354170eb09cac15b" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>size_type</name></member>
      <member refid="classTriangulationDataStructure__2_1ae3574acca0b1f9c41126c838ca367612" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>star_hole</name></member>
      <member refid="classTriangulationDataStructure__2_1af9c4cbf7760a49a29abe7edf78d55f02" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>star_hole</name></member>
      <member refid="classTriangulationDataStructure__2_1a471e260a33ca3ae4ba6e5f8b83ff8141" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>star_hole</name></member>
      <member refid="classTriangulationDataStructure__2_1a04becf102ce2b426d144d06806faa71a" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>star_hole</name></member>
      <member refid="classTriangulationDataStructure__2_1aa14ee5ea9c40dc9d96aac5d4ac65c763" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>swap</name></member>
      <member refid="classTriangulationDataStructure__2_1a9f288ad9a4aac24acef467aa3c53cb56" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>TriangulationDataStructure_2</name></member>
      <member refid="classTriangulationDataStructure__2_1a132fbb48443b73b9dcd5da0d0f6ff8c0" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>TriangulationDataStructure_2</name></member>
      <member refid="classTriangulationDataStructure__2_1a0aa9124e3895188fafe9d1bae244c671" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>Vertex</name></member>
      <member refid="classTriangulationDataStructure__2_1a90489ea61ac1032f2604b0dd45554d16" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>Vertex_circulator</name></member>
      <member refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>Vertex_handle</name></member>
      <member refid="classTriangulationDataStructure__2_1a5e0bf301cc9b87e2f08e6b14fe7a6e1e" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>Vertex_iterator</name></member>
      <member refid="classTriangulationDataStructure__2_1aca2cf5fe31a245d7cd686c426b6e26c2" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>vertices_begin</name></member>
      <member refid="classTriangulationDataStructure__2_1a938a4d0dbb7010e863386d277f8d3dac" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2</scope><name>vertices_end</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
