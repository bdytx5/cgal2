<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classTriangulationDataStructure__2_1_1Vertex" kind="class" language="C++" prot="public">
    <compoundname>TriangulationDataStructure_2::Vertex</compoundname>
    <includes local="no">Concepts/TriangulationDataStructure_2.h</includes>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <description><para>The class <computeroutput><ref refid="classTriangulationDataStructure__2_1_1Vertex" kindref="compound">TriangulationDataStructure_2::Vertex</ref></computeroutput> defines the same types as the triangulation data structure except the iterators. </para></description>
      <memberdef kind="typedef" id="classTriangulationDataStructure__2_1_1Vertex_1a847e8ad61ed531fc145d66ea1c72c4e6" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type TriangulationDataStructure_2::Vertex::Point</definition>
        <argsstring></argsstring>
        <name>Point</name>
        <briefdescription>
<para><emphasis>Optional for the triangulation data structure used alone</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="762" column="1" bodyfile="Concepts/TriangulationDataStructure_2.h" bodystart="762" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Access Functions</header>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1_1Vertex_1ab7c62471f7e3f49b515925b2839ed3b4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__2_1_1Vertex_1a847e8ad61ed531fc145d66ea1c72c4e6" kindref="member">Point</ref></type>
        <definition>Point TriangulationDataStructure_2::Vertex::point</definition>
        <argsstring>() const</argsstring>
        <name>point</name>
        <briefdescription>
<para>returns the geometric information of the vertex. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="772" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1_1Vertex_1acc05e17d93418b5359d9e4bb49ee39dd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle</ref></type>
        <definition>Face_handle TriangulationDataStructure_2::Vertex::face</definition>
        <argsstring>() const</argsstring>
        <name>face</name>
        <briefdescription>
<para>returns a face of the triangulation having <computeroutput>*this</computeroutput> as a vertex. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="777" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Setting</header>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1_1Vertex_1a212f384bfae185039334e0222963390e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TriangulationDataStructure_2::Vertex::set_point</definition>
        <argsstring>(const Point &amp;p)</argsstring>
        <name>set_point</name>
        <param>
          <type>const <ref refid="classTriangulationDataStructure__2_1_1Vertex_1a847e8ad61ed531fc145d66ea1c72c4e6" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>This is an advanced function. </para>        </briefdescription>
        <detaileddescription>
<para></para><para>sets the geometric information to <computeroutput>p</computeroutput>.  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="790" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1_1Vertex_1afd01d17dbe34f6208c74e8b3b72a4d25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TriangulationDataStructure_2::Vertex::set_face</definition>
        <argsstring>(Face_handle f)</argsstring>
        <name>set_face</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>This is an advanced function. </para>        </briefdescription>
        <detaileddescription>
<para></para><para>sets the incident face to <computeroutput>f</computeroutput>.  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="798" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Checking</header>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1_1Vertex_1aca2f7cd2d42e804e40cd19a3ae272760" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TriangulationDataStructure_2::Vertex::is_valid</definition>
        <argsstring>(bool verbose=false) const</argsstring>
        <name>is_valid</name>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Checks the validity of the vertex. </para>        </briefdescription>
        <detaileddescription>
<para>Must check that its incident face has this vertex. The validity of the base vertex is also checked.</para><para>When <computeroutput>verbose</computeroutput> is set to <computeroutput>true</computeroutput>, messages are printed to give a precise indication on the kind of invalidity encountered. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="812" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1_1Vertex_1a7054c1d9844123bb3b8ade3a2fb3597b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream&amp; TriangulationDataStructure_2::Vertex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, TriangulationDataStructure_2::Vertex &amp;v)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1_1Vertex" kindref="compound">TriangulationDataStructure_2::Vertex</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Inputs the non-combinatorial information possibly stored in the vertex. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="817" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1_1Vertex_1ab3c9f32e3da099935bd6b45905a67dd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; TriangulationDataStructure_2::Vertex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const TriangulationDataStructure_2::Vertex &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classTriangulationDataStructure__2_1_1Vertex" kindref="compound">TriangulationDataStructure_2::Vertex</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Outputs the non combinatorial operation possibly stored in the vertex. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="823" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The concept <computeroutput><ref refid="classTriangulationDataStructure__2_1_1Vertex" kindref="compound">TriangulationDataStructure_2::Vertex</ref></computeroutput> describes the type used by a <computeroutput><ref refid="classTriangulationDataStructure__2" kindref="compound">TriangulationDataStructure_2</ref></computeroutput> to store the vertices. </para>    </briefdescription>
    <detaileddescription>
<para> Some of the requirements listed below are of geometric nature and are <emphasis>optional</emphasis> when using the triangulation data structure class alone. They became required when the triangulation data structure is plugged into a triangulation.</para><para><bold>Creation</bold><linebreak/>
</para><para>In order to obtain new vertices or destruct unused vertices, the user must call the <computeroutput><ref refid="classTriangulationDataStructure__2_1a0141b0e129a4b8791c6f287f1e441163" kindref="member">create_vertex()</ref></computeroutput> and <computeroutput><ref refid="classTriangulationDataStructure__2_1a253217ecb2496119e95cff787a447265" kindref="member">delete_vertex()</ref></computeroutput> methods of the triangulation data structure.</para><para><xrefsect id="hasModels_1_hasModels000002"><xreftitle>Has Models</xreftitle><xrefdescription><para><computeroutput><ref refid="classCGAL_1_1Triangulation__ds__vertex__base__2" kindref="compound">CGAL::Triangulation_ds_vertex_base_2</ref>&lt;Tds&gt;</computeroutput> </para></xrefdescription></xrefsect></para><para><simplesect kind="see"><para><computeroutput><ref refid="classTriangulationDataStructure__2" kindref="compound">TriangulationDataStructure_2</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classTriangulationDataStructure__2_1_1Face" kindref="compound">TriangulationDataStructure_2::Face</ref></computeroutput> </para></simplesect>
</para>    </detaileddescription>
    <location file="Concepts/TriangulationDataStructure_2.h" line="750" column="1" bodyfile="Concepts/TriangulationDataStructure_2.h" bodystart="750" bodyend="827"/>
    <listofallmembers>
      <member refid="classTriangulationDataStructure__2_1_1Vertex_1acc05e17d93418b5359d9e4bb49ee39dd" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2::Vertex</scope><name>face</name></member>
      <member refid="classTriangulationDataStructure__2_1_1Vertex_1aca2f7cd2d42e804e40cd19a3ae272760" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2::Vertex</scope><name>is_valid</name></member>
      <member refid="classTriangulationDataStructure__2_1_1Vertex_1ab3c9f32e3da099935bd6b45905a67dd1" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2::Vertex</scope><name>operator&lt;&lt;</name></member>
      <member refid="classTriangulationDataStructure__2_1_1Vertex_1a7054c1d9844123bb3b8ade3a2fb3597b" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2::Vertex</scope><name>operator&gt;&gt;</name></member>
      <member refid="classTriangulationDataStructure__2_1_1Vertex_1ab7c62471f7e3f49b515925b2839ed3b4" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2::Vertex</scope><name>point</name></member>
      <member refid="classTriangulationDataStructure__2_1_1Vertex_1a847e8ad61ed531fc145d66ea1c72c4e6" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2::Vertex</scope><name>Point</name></member>
      <member refid="classTriangulationDataStructure__2_1_1Vertex_1afd01d17dbe34f6208c74e8b3b72a4d25" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2::Vertex</scope><name>set_face</name></member>
      <member refid="classTriangulationDataStructure__2_1_1Vertex_1a212f384bfae185039334e0222963390e" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2::Vertex</scope><name>set_point</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
