<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classTriangulationDataStructure__2_1_1Face" kind="class" language="C++" prot="public">
    <compoundname>TriangulationDataStructure_2::Face</compoundname>
    <includes local="no">Concepts/TriangulationDataStructure_2.h</includes>
      <sectiondef kind="user-defined">
      <header>Vertex Access Functions</header>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1_1Face_1ac4d03671704cd164b279706a098fdf5e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle TriangulationDataStructure_2::Face::vertex</definition>
        <argsstring>(int i) const</argsstring>
        <name>vertex</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>returns the vertex <computeroutput>i</computeroutput> of the face. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><formula id="4">$ 0\leq i \leq2$</formula>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="881" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1_1Face_1a6eb7604b34382662ce9d91afd6794158" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TriangulationDataStructure_2::Face::index</definition>
        <argsstring>(Vertex_handle v) const</argsstring>
        <name>index</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns the index of vertex <computeroutput>v</computeroutput> in the face. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>v</computeroutput> is a vertex of the face. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="886" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1_1Face_1a29ca980cb7f59f9289ea45afe1689968" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TriangulationDataStructure_2::Face::has_vertex</definition>
        <argsstring>(Vertex_handle v) const</argsstring>
        <name>has_vertex</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if <computeroutput>v</computeroutput> is a vertex of the face. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="891" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1_1Face_1ac4682fe0601375bc41161ab85dd0638f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TriangulationDataStructure_2::Face::has_vertex</definition>
        <argsstring>(Vertex_handle v, int &amp;i) const</argsstring>
        <name>has_vertex</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if <computeroutput>v</computeroutput> is a vertex of the face, and computes the index <computeroutput>i</computeroutput> of <computeroutput>v</computeroutput> in the face. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="897" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Neighbor Access Functions</header>
      <description><para>The neighbor with index <computeroutput>i</computeroutput> is the neighbor which is opposite to the vertex with index <computeroutput>i</computeroutput>. </para></description>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1_1Face_1a096a50bd226daf09826eeacf54727f0e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle</ref></type>
        <definition>Face_handle TriangulationDataStructure_2::Face::neighbor</definition>
        <argsstring>(int i) const</argsstring>
        <name>neighbor</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>returns the neighbor <computeroutput>i</computeroutput> of the face. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><formula id="4">$ 0\leq i \leq2$</formula>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="911" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1_1Face_1a5aa50eef18c1028fe5349f5ea9f95b9b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TriangulationDataStructure_2::Face::index</definition>
        <argsstring>(Face_handle n) const</argsstring>
        <name>index</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>returns the index of face <computeroutput>n</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>n</computeroutput> is a neighbor of the face. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="917" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1_1Face_1a248da6d997dd52b29e2a000e42cba81b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TriangulationDataStructure_2::Face::has_neighbor</definition>
        <argsstring>(Face_handle n) const</argsstring>
        <name>has_neighbor</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if <computeroutput>n</computeroutput> is a neighbor of the face. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="922" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1_1Face_1a920621eea88704704e7e0161ba52434c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TriangulationDataStructure_2::Face::has_neighbor</definition>
        <argsstring>(Face_handle n, int &amp;i) const</argsstring>
        <name>has_neighbor</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if <computeroutput>n</computeroutput> is a neighbor of the face, and compute the index <computeroutput>i</computeroutput> of <computeroutput>n</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="928" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Setting</header>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1_1Face_1a0fd24935e0e88d1dd82999ac39049683" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TriangulationDataStructure_2::Face::set_vertex</definition>
        <argsstring>(int i, Vertex_handle v)</argsstring>
        <name>set_vertex</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>sets vertex <computeroutput>i</computeroutput> to be <computeroutput>v</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><formula id="4">$ 0\leq i \leq2$</formula>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="940" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1_1Face_1a5f56017ba94076066b81ad414901f59e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TriangulationDataStructure_2::Face::set_neighbor</definition>
        <argsstring>(int i, Face_handle n)</argsstring>
        <name>set_neighbor</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>sets neighbor <computeroutput>i</computeroutput> to be <computeroutput>n</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><formula id="4">$ 0\leq i \leq2$</formula>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="947" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1_1Face_1adf8c99bc8d0fec51302312d7add1d12c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TriangulationDataStructure_2::Face::set_vertices</definition>
        <argsstring>()</argsstring>
        <name>set_vertices</name>
        <briefdescription>
<para>sets the vertex handles to <computeroutput><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle()</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="952" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1_1Face_1a33ee3a7845f56e99fe64d72bf242d740" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TriangulationDataStructure_2::Face::set_vertices</definition>
        <argsstring>(Vertex_handle v0, Vertex_handle v1, Vertex_handle v2)</argsstring>
        <name>set_vertices</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
          <declname>v0</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1aa0eddf634888b0cd48e4c5ae32347da7" kindref="member">Vertex_handle</ref></type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>sets the vertex handles. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="957" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1_1Face_1acaf1da27d9c65f5cded387ec3ac84ba8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TriangulationDataStructure_2::Face::set_neighbors</definition>
        <argsstring>()</argsstring>
        <name>set_neighbors</name>
        <briefdescription>
<para>sets the neighbors handles to <computeroutput><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle()</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="962" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1_1Face_1a3badf3084f558e21b8804fe79f8a3b86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TriangulationDataStructure_2::Face::set_neighbors</definition>
        <argsstring>(Face_handle n0, Face_handle n1, Face_handle n2)</argsstring>
        <name>set_neighbors</name>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle</ref></type>
          <declname>n0</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle</ref></type>
          <declname>n1</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1a26b05b7b5d0dae837594d2a7d1fd050b" kindref="member">Face_handle</ref></type>
          <declname>n2</declname>
        </param>
        <briefdescription>
<para>sets the neighbors handles. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="967" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Checking</header>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1_1Face_1a3b1f5ec335754d2b7660fbcaa64a1742" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TriangulationDataStructure_2::Face::is_valid</definition>
        <argsstring>() const</argsstring>
        <name>is_valid</name>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if the function <computeroutput><ref refid="classTriangulationDataStructure__2_1_1Face_1a3b1f5ec335754d2b7660fbcaa64a1742" kindref="member">is_valid()</ref></computeroutput> of the base class returns <computeroutput>true</computeroutput> and if, for each index <formula id="6">$ i$</formula>, <formula id="7">$ 0 \le i &lt; 3$</formula>, the face is a neighbor of its neighboring face <computeroutput>neighbor(i)</computeroutput> and shares with this neighbor the vertices <computeroutput>cw(i)</computeroutput> and <computeroutput>ccw(i)</computeroutput> in correct reverse order. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="984" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Miscellaneous</header>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1_1Face_1a921dda66b44c954b4110518e63da0fe1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TriangulationDataStructure_2::Face::ccw</definition>
        <argsstring>(int i) const</argsstring>
        <name>ccw</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns <formula id="3">$ i+1$</formula> modulo 3, with <formula id="4">$ 0\leq i \leq2$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="994" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1_1Face_1a049f6aad0b7303c8a9a6051857148355" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TriangulationDataStructure_2::Face::cw</definition>
        <argsstring>(int i) const</argsstring>
        <name>cw</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns <formula id="5">$ i+2$</formula> modulo 3, with <formula id="4">$ 0\leq i \leq2$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="999" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1_1Face_1a50fbb7e7339bfe807f139efcbc27b3c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream&amp; TriangulationDataStructure_2::Face::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, TriangulationDataStructure_2::Face &amp;f)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classTriangulationDataStructure__2_1_1Face" kindref="compound">TriangulationDataStructure_2::Face</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Inputs any non combinatorial information possibly stored in the face. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="1004" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classTriangulationDataStructure__2_1_1Face_1ab1be208c8d46377715c91ec5284dfa85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; TriangulationDataStructure_2::Face::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const TriangulationDataStructure_2::Face &amp;f)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classTriangulationDataStructure__2_1_1Face" kindref="compound">TriangulationDataStructure_2::Face</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Outputs any non combinatorial information possibly stored in the face. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/TriangulationDataStructure_2.h" line="1009" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The concept <computeroutput><ref refid="classTriangulationDataStructure__2_1_1Face" kindref="compound">TriangulationDataStructure_2::Face</ref></computeroutput> describes the types used to store the faces face class of a <computeroutput><ref refid="classTriangulationDataStructure__2" kindref="compound">TriangulationDataStructure_2</ref></computeroutput>. A <computeroutput><ref refid="classTriangulationDataStructure__2_1_1Face" kindref="compound">TriangulationDataStructure_2::Face</ref></computeroutput> stores three handles to its three vertices and three handles to its three neighbors. The vertices are indexed 0,1, and 2 in counterclockwise order. The neighbor indexed <computeroutput>i</computeroutput> lies opposite to vertex <computeroutput>i</computeroutput>. </para>    </briefdescription>
    <detaileddescription>
<para> In degenerate cases, when the triangulation data structure stores a simplicial complex of dimension <computeroutput>0</computeroutput> and <computeroutput>1</computeroutput>, the type <computeroutput><ref refid="classTriangulationDataStructure__2_1_1Face" kindref="compound">TriangulationDataStructure_2::Face</ref></computeroutput> is used to store the faces of maximal dimension of the complex, i.e., a vertex in dimension <computeroutput>0</computeroutput>, an edge in dimension <computeroutput>1</computeroutput>. Only vertices and neighbors with index <computeroutput>0</computeroutput> are set in the first case, only vertices and neighbors with index <computeroutput>0</computeroutput> or <computeroutput>1</computeroutput> are set in the second case.</para><para><bold>Types</bold><linebreak/>
</para><para>The class <computeroutput><ref refid="classTriangulationDataStructure__2_1_1Face" kindref="compound">TriangulationDataStructure_2::Face</ref></computeroutput> defines the same types as the triangulation data structure except the iterators and the circulators.</para><para><bold>Creation</bold><linebreak/>
</para><para>The methods <computeroutput><ref refid="classTriangulationDataStructure__2_1a61b744ad53b31d9fac07c3220e908132" kindref="member">create_face()</ref></computeroutput> and <computeroutput><ref refid="classTriangulationDataStructure__2_1a646bb444118872dab4afa3b88a4f72ce" kindref="member">delete_face()</ref></computeroutput> have to be used to define new faces and to delete no longer used faces.</para><para><xrefsect id="hasModels_1_hasModels000003"><xreftitle>Has Models</xreftitle><xrefdescription><para><computeroutput><ref refid="classCGAL_1_1Triangulation__ds__face__base__2" kindref="compound">CGAL::Triangulation_ds_face_base_2</ref>&lt;Tds&gt;</computeroutput></para></xrefdescription></xrefsect></para><para><simplesect kind="see"><para><computeroutput><ref refid="classTriangulationDataStructure__2" kindref="compound">TriangulationDataStructure_2</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classTriangulationDataStructure__2_1_1Vertex" kindref="compound">TriangulationDataStructure_2::Vertex</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classTriangulationFaceBase__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Triangulation_2.tag">TriangulationFaceBase_2</ref></computeroutput> </para></simplesect>
</para>    </detaileddescription>
    <location file="Concepts/TriangulationDataStructure_2.h" line="871" column="1" bodyfile="Concepts/TriangulationDataStructure_2.h" bodystart="871" bodyend="1013"/>
    <listofallmembers>
      <member refid="classTriangulationDataStructure__2_1_1Face_1a921dda66b44c954b4110518e63da0fe1" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2::Face</scope><name>ccw</name></member>
      <member refid="classTriangulationDataStructure__2_1_1Face_1a049f6aad0b7303c8a9a6051857148355" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2::Face</scope><name>cw</name></member>
      <member refid="classTriangulationDataStructure__2_1_1Face_1a248da6d997dd52b29e2a000e42cba81b" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2::Face</scope><name>has_neighbor</name></member>
      <member refid="classTriangulationDataStructure__2_1_1Face_1a920621eea88704704e7e0161ba52434c" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2::Face</scope><name>has_neighbor</name></member>
      <member refid="classTriangulationDataStructure__2_1_1Face_1a29ca980cb7f59f9289ea45afe1689968" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2::Face</scope><name>has_vertex</name></member>
      <member refid="classTriangulationDataStructure__2_1_1Face_1ac4682fe0601375bc41161ab85dd0638f" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2::Face</scope><name>has_vertex</name></member>
      <member refid="classTriangulationDataStructure__2_1_1Face_1a6eb7604b34382662ce9d91afd6794158" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2::Face</scope><name>index</name></member>
      <member refid="classTriangulationDataStructure__2_1_1Face_1a5aa50eef18c1028fe5349f5ea9f95b9b" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2::Face</scope><name>index</name></member>
      <member refid="classTriangulationDataStructure__2_1_1Face_1a3b1f5ec335754d2b7660fbcaa64a1742" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2::Face</scope><name>is_valid</name></member>
      <member refid="classTriangulationDataStructure__2_1_1Face_1a096a50bd226daf09826eeacf54727f0e" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2::Face</scope><name>neighbor</name></member>
      <member refid="classTriangulationDataStructure__2_1_1Face_1ab1be208c8d46377715c91ec5284dfa85" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2::Face</scope><name>operator&lt;&lt;</name></member>
      <member refid="classTriangulationDataStructure__2_1_1Face_1a50fbb7e7339bfe807f139efcbc27b3c2" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2::Face</scope><name>operator&gt;&gt;</name></member>
      <member refid="classTriangulationDataStructure__2_1_1Face_1a5f56017ba94076066b81ad414901f59e" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2::Face</scope><name>set_neighbor</name></member>
      <member refid="classTriangulationDataStructure__2_1_1Face_1acaf1da27d9c65f5cded387ec3ac84ba8" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2::Face</scope><name>set_neighbors</name></member>
      <member refid="classTriangulationDataStructure__2_1_1Face_1a3badf3084f558e21b8804fe79f8a3b86" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2::Face</scope><name>set_neighbors</name></member>
      <member refid="classTriangulationDataStructure__2_1_1Face_1a0fd24935e0e88d1dd82999ac39049683" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2::Face</scope><name>set_vertex</name></member>
      <member refid="classTriangulationDataStructure__2_1_1Face_1adf8c99bc8d0fec51302312d7add1d12c" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2::Face</scope><name>set_vertices</name></member>
      <member refid="classTriangulationDataStructure__2_1_1Face_1a33ee3a7845f56e99fe64d72bf242d740" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2::Face</scope><name>set_vertices</name></member>
      <member refid="classTriangulationDataStructure__2_1_1Face_1ac4d03671704cd164b279706a098fdf5e" prot="public" virt="non-virtual"><scope>TriangulationDataStructure_2::Face</scope><name>vertex</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
