<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespaceCGAL_1_1Set__movable__separability__2_1_1Single__mold__translational__casting" kind="namespace" language="C++">
    <compoundname>CGAL::Set_movable_separability_2::Single_mold_translational_casting</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__is__pullout__direction__grp_1ga0e2c774abc7cc2d8d99e10e243c050e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classCastingTraits__2" kindref="compound">CastingTraits_2</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Polygon__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polygon.tag">CGAL::Polygon_2</ref>&lt; <ref refid="classCastingTraits__2" kindref="compound">CastingTraits_2</ref> &gt;::Edge_const_iterator</type>
        <definition>CGAL::Polygon_2&lt;CastingTraits_2&gt;::Edge_const_iterator CGAL::Set_movable_separability_2::Single_mold_translational_casting::is_pullout_direction</definition>
        <argsstring>(const CGAL::Polygon_2&lt; CastingTraits_2 &gt; &amp;polygon, const typename CastingTraits_2::Direction_2 &amp;d, const CastingTraits_2 &amp;traits=CastingTraits_2())</argsstring>
        <name>is_pullout_direction</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Polygon__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polygon.tag">CGAL::Polygon_2</ref>&lt; <ref refid="classCastingTraits__2" kindref="compound">CastingTraits_2</ref> &gt; &amp;</type>
          <declname>polygon</declname>
        </param>
        <param>
          <type>const typename <ref refid="classCastingTraits__2_1a3dae442a7b07bd41dc5e0e3e7b964e03" kindref="member">CastingTraits_2::Direction_2</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const <ref refid="classCastingTraits__2" kindref="compound">CastingTraits_2</ref> &amp;</type>
          <declname>traits</declname>
          <defval><ref refid="classCastingTraits__2" kindref="compound">CastingTraits_2</ref>()</defval>
        </param>
        <briefdescription>
<para>Given a simple polygon and a direction, this function determines whether a cavity (of a mold in the plane) that has the shape of the polygon could be casted in the mold and then pulled out of the mold in the given direction without colliding into the mold (but possibly sliding along the mold surface). </para>        </briefdescription>
        <detaileddescription>
<para>If the polygon is not castable at all, the function returns <computeroutput>false</computeroutput> whatsoever.</para><para>The type that substitutes the template parameter <computeroutput>CastingTraits_2</computeroutput> must be a model of the concept <computeroutput><ref refid="classCastingTraits__2" kindref="compound">CastingTraits_2</ref></computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>polygon</parametername>
</parameternamelist>
<parameterdescription>
<para>the input polygon. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>the inspected direction. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>the traits to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if <computeroutput>polygon</computeroutput> can be pullout in the <computeroutput>d</computeroutput> direction the iterator of the corresponding top edge, otherwise, <computeroutput>polygon.edges_end()</computeroutput>. </para></simplesect>
<simplesect kind="pre"><para><computeroutput>polygon</computeroutput> must be non-degenerate (has at least 3 vertices) and simple, and it does not have three consecutive collinear vertices. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Set_movable_separability_2/Single_mold_translational_casting/is_pullout_direction.h" line="27" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__is__pullout__direction__grp_1gae0461dca31bd13cba87e8d90f67d55a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classCastingTraits__2" kindref="compound">CastingTraits_2</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Polygon__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polygon.tag">CGAL::Polygon_2</ref>&lt; <ref refid="classCastingTraits__2" kindref="compound">CastingTraits_2</ref> &gt;::Edge_const_iterator</type>
        <definition>CGAL::Polygon_2&lt;CastingTraits_2&gt;::Edge_const_iterator CGAL::Set_movable_separability_2::Single_mold_translational_casting::is_pullout_direction</definition>
        <argsstring>(const CGAL::Polygon_2&lt; CastingTraits_2 &gt; &amp;polygon, const typename CastingTraits_2::Direction_2 &amp;d, CGAL::Orientation orientation, const CastingTraits_2 &amp;traits=CastingTraits_2())</argsstring>
        <name>is_pullout_direction</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Polygon__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polygon.tag">CGAL::Polygon_2</ref>&lt; <ref refid="classCastingTraits__2" kindref="compound">CastingTraits_2</ref> &gt; &amp;</type>
          <declname>polygon</declname>
        </param>
        <param>
          <type>const typename <ref refid="classCastingTraits__2_1a3dae442a7b07bd41dc5e0e3e7b964e03" kindref="member">CastingTraits_2::Direction_2</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Orientation</ref></type>
          <declname>orientation</declname>
        </param>
        <param>
          <type>const <ref refid="classCastingTraits__2" kindref="compound">CastingTraits_2</ref> &amp;</type>
          <declname>traits</declname>
          <defval><ref refid="classCastingTraits__2" kindref="compound">CastingTraits_2</ref>()</defval>
        </param>
        <briefdescription>
<para>Same as above with the additional <computeroutput>orientation</computeroutput> argument. </para>        </briefdescription>
        <detaileddescription>
<para>If the orientation of the polygon is known upon invocation, specify it. Otherwise, it has to be computed. Note that finding the orientation of a polygon requires time linear in the number of edges.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>polygon</parametername>
</parameternamelist>
<parameterdescription>
<para>the input polygon. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>the inspected direction. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>orientation</parametername>
</parameternamelist>
<parameterdescription>
<para>the orientation of <computeroutput>polygon</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>the traits to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if <computeroutput>polygon</computeroutput> can be pullout in the <computeroutput>d</computeroutput> direction the iterator of the corresponding top edge, otherwise, <computeroutput>polygon.edges_end()</computeroutput>. </para></simplesect>
<simplesect kind="pre"><para><computeroutput>polygon</computeroutput> must be non-degenerate (has at least 3 vertices) and simple, and it does not have three consecutive collinear vertices. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Set_movable_separability_2/Single_mold_translational_casting/is_pullout_direction.h" line="49" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__is__pullout__direction__grp_1ga38d7cb3f61055c10036a7ad42fe75a21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classCastingTraits__2" kindref="compound">CastingTraits_2</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Set_movable_separability_2::Single_mold_translational_casting::is_pullout_direction</definition>
        <argsstring>(const CGAL::Polygon_2&lt; CastingTraits_2 &gt; &amp;polygon, const typename CGAL::Polygon_2&lt; CastingTraits_2 &gt;::Edge_const_iterator &amp;it, const typename CastingTraits_2::Direction_2 &amp;d, const CastingTraits_2 &amp;traits=CastingTraits_2())</argsstring>
        <name>is_pullout_direction</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Polygon__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polygon.tag">CGAL::Polygon_2</ref>&lt; <ref refid="classCastingTraits__2" kindref="compound">CastingTraits_2</ref> &gt; &amp;</type>
          <declname>polygon</declname>
        </param>
        <param>
          <type>const typename <ref refid="classCGAL_1_1Polygon__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polygon.tag">CGAL::Polygon_2</ref>&lt; <ref refid="classCastingTraits__2" kindref="compound">CastingTraits_2</ref> &gt;::Edge_const_iterator &amp;</type>
          <declname>it</declname>
        </param>
        <param>
          <type>const typename <ref refid="classCastingTraits__2_1a3dae442a7b07bd41dc5e0e3e7b964e03" kindref="member">CastingTraits_2::Direction_2</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const <ref refid="classCastingTraits__2" kindref="compound">CastingTraits_2</ref> &amp;</type>
          <declname>traits</declname>
          <defval><ref refid="classCastingTraits__2" kindref="compound">CastingTraits_2</ref>()</defval>
        </param>
        <briefdescription>
<para>Given a simple polygon, an edge of the polygon, and a direction, this function determines whether a cavity (of a mold in the plane) that has the shape of the polygon can be used so that the polygon could be casted in the mold and then pulled out of the mold in the given direction such that the given edge is used as the top edge without colliding into the mold (but possibly sliding along the mold surface). </para>        </briefdescription>
        <detaileddescription>
<para>Observe, that if polygon can be pulled out in the given direction, but with a top edge different than the given one, the function returns <computeroutput>false</computeroutput>.</para><para>The type that substitutes the template parameter <computeroutput>CastingTraits_2</computeroutput> must be a model of the concept <computeroutput><ref refid="classCastingTraits__2" kindref="compound">CastingTraits_2</ref></computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>polygon</parametername>
</parameternamelist>
<parameterdescription>
<para>the input polygon. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>it</parametername>
</parameternamelist>
<parameterdescription>
<para>an iterator to an edge in polygon. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>the tested direction. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>the traits to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if <computeroutput>polygon</computeroutput> can be pulled out in the <computeroutput>d</computeroutput> direction with the edge identified by <computeroutput>i</computeroutput> being the top edge, and <computeroutput>false</computeroutput> otherwise. </para></simplesect>
<simplesect kind="pre"><para><computeroutput>polygon</computeroutput> must be non-degenerate (has at least 3 vertices) and simple, and it does not have three consecutive collinear vertices. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Set_movable_separability_2/Single_mold_translational_casting/is_pullout_direction.h" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__is__pullout__direction__grp_1gaec89e1363b03ed160c168de82bec7e02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classCastingTraits__2" kindref="compound">CastingTraits_2</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Set_movable_separability_2::Single_mold_translational_casting::is_pullout_direction</definition>
        <argsstring>(const CGAL::Polygon_2&lt; CastingTraits_2 &gt; &amp;polygon, const typename CGAL::Polygon_2&lt; CastingTraits_2 &gt;::Edge_const_iterator &amp;it, const typename CastingTraits_2::Direction_2 &amp;d, CGAL::Orientation orientation, const CastingTraits_2 &amp;traits=CastingTraits_2())</argsstring>
        <name>is_pullout_direction</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Polygon__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polygon.tag">CGAL::Polygon_2</ref>&lt; <ref refid="classCastingTraits__2" kindref="compound">CastingTraits_2</ref> &gt; &amp;</type>
          <declname>polygon</declname>
        </param>
        <param>
          <type>const typename <ref refid="classCGAL_1_1Polygon__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polygon.tag">CGAL::Polygon_2</ref>&lt; <ref refid="classCastingTraits__2" kindref="compound">CastingTraits_2</ref> &gt;::Edge_const_iterator &amp;</type>
          <declname>it</declname>
        </param>
        <param>
          <type>const typename <ref refid="classCastingTraits__2_1a3dae442a7b07bd41dc5e0e3e7b964e03" kindref="member">CastingTraits_2::Direction_2</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Orientation</ref></type>
          <declname>orientation</declname>
        </param>
        <param>
          <type>const <ref refid="classCastingTraits__2" kindref="compound">CastingTraits_2</ref> &amp;</type>
          <declname>traits</declname>
          <defval><ref refid="classCastingTraits__2" kindref="compound">CastingTraits_2</ref>()</defval>
        </param>
        <briefdescription>
<para>Same as above with the additional <computeroutput>orientation</computeroutput> argument. </para>        </briefdescription>
        <detaileddescription>
<para>If the orientation of the polygon is known upon invocation, specify it. Otherwise, it has to be computed. Note that finding the orientation of a polygon requires time linear in the number of edges.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>polygon</parametername>
</parameternamelist>
<parameterdescription>
<para>the input polygon. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>it</parametername>
</parameternamelist>
<parameterdescription>
<para>an iterator to an edge in polygon. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>the tested direction. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>orientation</parametername>
</parameternamelist>
<parameterdescription>
<para>the orientation of <computeroutput>polygon</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>the traits to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if <computeroutput>polygon</computeroutput> can be pulled out in the <computeroutput>d</computeroutput> direction with the edge identified by <computeroutput>i</computeroutput> being the top edge, and <computeroutput>false</computeroutput> otherwise. </para></simplesect>
<simplesect kind="pre"><para><computeroutput>polygon</computeroutput> must be non-degenerate (has at least 3 vertices) and simple, and it does not have three consecutive collinear vertices. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Set_movable_separability_2/Single_mold_translational_casting/is_pullout_direction.h" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__pullout__directions__grp_1ga861c10709685f4154563d651146129ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classCastingTraits__2" kindref="compound">CastingTraits_2</ref></type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; bool, std::pair&lt; typename <ref refid="classCastingTraits__2_1a3dae442a7b07bd41dc5e0e3e7b964e03" kindref="member">CastingTraits_2::Direction_2</ref>, typename <ref refid="classCastingTraits__2_1a3dae442a7b07bd41dc5e0e3e7b964e03" kindref="member">CastingTraits_2::Direction_2</ref> &gt; &gt;</type>
        <definition>std::pair&lt;bool, std::pair&lt;typename CastingTraits_2::Direction_2, typename CastingTraits_2::Direction_2&gt; &gt; CGAL::Set_movable_separability_2::Single_mold_translational_casting::pullout_directions</definition>
        <argsstring>(const CGAL::Polygon_2&lt; CastingTraits_2 &gt; &amp;polygon, const typename CGAL::Polygon_2&lt; CastingTraits_2 &gt;::Edge_const_iterator &amp;it, CastingTraits_2 &amp;traits=CastingTraits_2())</argsstring>
        <name>pullout_directions</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Polygon__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polygon.tag">CGAL::Polygon_2</ref>&lt; <ref refid="classCastingTraits__2" kindref="compound">CastingTraits_2</ref> &gt; &amp;</type>
          <declname>polygon</declname>
        </param>
        <param>
          <type>const typename <ref refid="classCGAL_1_1Polygon__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polygon.tag">CGAL::Polygon_2</ref>&lt; <ref refid="classCastingTraits__2" kindref="compound">CastingTraits_2</ref> &gt;::Edge_const_iterator &amp;</type>
          <declname>it</declname>
        </param>
        <param>
          <type><ref refid="classCastingTraits__2" kindref="compound">CastingTraits_2</ref> &amp;</type>
          <declname>traits</declname>
          <defval><ref refid="classCastingTraits__2" kindref="compound">CastingTraits_2</ref>()</defval>
        </param>
        <briefdescription>
<para>Given a simple polygon and an edge of the polygon, this function determines whether a cavity (of a mold in the plane) that has the shape of the polygon can be used so that the polygon could be casted in the mold using the input edge as the top edge and then pulled out of the mold without colliding into the mold (but possibly sliding along the mold surface). </para>        </briefdescription>
        <detaileddescription>
<para>If the polygon is <emphasis>castable</emphasis> this way, the function computes the closed range of pullout directions.</para><para>The type that substitutes the template parameter <computeroutput>CastingTraits_2</computeroutput> must be a model of the concept <computeroutput><ref refid="classCastingTraits__2" kindref="compound">CastingTraits_2</ref></computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>polygon</parametername>
</parameternamelist>
<parameterdescription>
<para>the input polygon. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>it</parametername>
</parameternamelist>
<parameterdescription>
<para>an iterator to an edge in polygon. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>the traits to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pair of elements, where the first is a Boolean that indicates whether the input edge is a valid top edge, and the second is a closed range of pullout directions represented as a pair of the extreme directions in the range. If the input edge is not a valid top edge, the range is nondeterministic.</para></simplesect>
<simplesect kind="pre"><para><computeroutput>polygon</computeroutput> must be non-degenerate (has at least 3 vertices) and simple, and it does not have three consecutive collinear vertices. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Set_movable_separability_2/Single_mold_translational_casting/pullout_directions.h" line="33" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__pullout__directions__grp_1gad081e61c7e5d83b52ab16810f291eb04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classCastingTraits__2" kindref="compound">CastingTraits_2</ref></type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; bool, std::pair&lt; typename <ref refid="classCastingTraits__2_1a3dae442a7b07bd41dc5e0e3e7b964e03" kindref="member">CastingTraits_2::Direction_2</ref>, typename <ref refid="classCastingTraits__2_1a3dae442a7b07bd41dc5e0e3e7b964e03" kindref="member">CastingTraits_2::Direction_2</ref> &gt; &gt;</type>
        <definition>std::pair&lt;bool, std::pair&lt;typename CastingTraits_2::Direction_2, typename CastingTraits_2::Direction_2&gt; &gt; CGAL::Set_movable_separability_2::Single_mold_translational_casting::pullout_directions</definition>
        <argsstring>(const CGAL::Polygon_2&lt; CastingTraits_2 &gt; &amp;polygon, const typename CGAL::Polygon_2&lt; CastingTraits_2 &gt;::Edge_const_iterator &amp;it, CGAL::Orientation orientation, CastingTraits_2 &amp;traits=CastingTraits_2())</argsstring>
        <name>pullout_directions</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Polygon__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polygon.tag">CGAL::Polygon_2</ref>&lt; <ref refid="classCastingTraits__2" kindref="compound">CastingTraits_2</ref> &gt; &amp;</type>
          <declname>polygon</declname>
        </param>
        <param>
          <type>const typename <ref refid="classCGAL_1_1Polygon__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polygon.tag">CGAL::Polygon_2</ref>&lt; <ref refid="classCastingTraits__2" kindref="compound">CastingTraits_2</ref> &gt;::Edge_const_iterator &amp;</type>
          <declname>it</declname>
        </param>
        <param>
          <type><ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Orientation</ref></type>
          <declname>orientation</declname>
        </param>
        <param>
          <type><ref refid="classCastingTraits__2" kindref="compound">CastingTraits_2</ref> &amp;</type>
          <declname>traits</declname>
          <defval><ref refid="classCastingTraits__2" kindref="compound">CastingTraits_2</ref>()</defval>
        </param>
        <briefdescription>
<para>Same as above with the additional <computeroutput>orientation</computeroutput> argument. </para>        </briefdescription>
        <detaileddescription>
<para>If the orientation of the polygon is known upon invocation, specify it. Otherwise, it has to be computed. Note that finding the orientation of a polygon requires time linear in the number of edges.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>polygon</parametername>
</parameternamelist>
<parameterdescription>
<para>the input polygon. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>it</parametername>
</parameternamelist>
<parameterdescription>
<para>an iterator to an edge in polygon. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>orientation</parametername>
</parameternamelist>
<parameterdescription>
<para>the orientation of <computeroutput>polygon</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>the traits to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pair of elements, where the first is a Boolean that indicates whether the input edge is a valid top edge, and the second is a closed range of pullout directions represented as a pair of the extreme directions in the range. If the input edge is not a valid top edge, the range is nondeterministic.</para></simplesect>
<simplesect kind="pre"><para><computeroutput>polygon</computeroutput> must be non-degenerate (has at least 3 vertices) and simple, and it does not have three consecutive collinear vertices. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Set_movable_separability_2/Single_mold_translational_casting/pullout_directions.h" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__top__edges__grp_1ga0ec79c21ecf966930e0b5265cad6bd80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classCastingTraits__2" kindref="compound">CastingTraits_2</ref></type>
          </param>
          <param>
            <type>typename <ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::Set_movable_separability_2::Single_mold_translational_casting::top_edges</definition>
        <argsstring>(const CGAL::Polygon_2&lt; CastingTraits &gt; &amp;polygon, OutputIterator oi, CastingTraits_2 &amp;traits=CastingTraits_2())</argsstring>
        <name>top_edges</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Polygon__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polygon.tag">CGAL::Polygon_2</ref>&lt; CastingTraits &gt; &amp;</type>
          <declname>polygon</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>oi</declname>
        </param>
        <param>
          <type><ref refid="classCastingTraits__2" kindref="compound">CastingTraits_2</ref> &amp;</type>
          <declname>traits</declname>
          <defval><ref refid="classCastingTraits__2" kindref="compound">CastingTraits_2</ref>()</defval>
        </param>
        <briefdescription>
<para>Given a simple polygon, this function determines whether a cavity (of a mold in the plane) that has the shape of the polygon can be used so that the polygon could be casted in the mold and then pulled out of the mold without colliding into the mold (but possibly sliding along the mold surface). </para>        </briefdescription>
        <detaileddescription>
<para>If the polygon is <emphasis>castable</emphasis>, the function computes the set of top edges of such cavities and the corresponding closed ranges of pullout directions. Let <formula id="0">$n$</formula> denote the normal to a top edge <formula id="1">$e$</formula>, and let <formula id="2">$d$</formula> denote a pullout direction of <formula id="1">$e$</formula>. Naturally, the angle between <formula id="0">$n$</formula> and <formula id="2">$d$</formula> must be in the open range (-90<deg/>, 90<deg/>); that is, <formula id="3">$n \cdot d &gt; 0$</formula>. Each top edge and corresponding range is added to a container referred to by a given output iterator.</para><para>The type that substitutes the template parameter <computeroutput>CastingTraits_2</computeroutput> must be a model of the concept <computeroutput><ref refid="classCastingTraits__2" kindref="compound">CastingTraits_2</ref></computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>polygon</parametername>
</parameternamelist>
<parameterdescription>
<para>the input polygon. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator. Its dereference type is a pair, where (i) the first element in the pair is an iterator to a top edge, and (ii) the second element is a closed range of pullout directions represented as a pair of the extreme directions in the range of type <computeroutput><ref refid="classCastingTraits__2_1a3dae442a7b07bd41dc5e0e3e7b964e03" kindref="member">CastingTraits_2::Direction_2</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>the traits to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para></simplesect>
<simplesect kind="pre"><para><computeroutput>polygon</computeroutput> must be non-degenerate (has at least 3 vertices) and simple, and it does not have three consecutive collinear vertices. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Set_movable_separability_2/Single_mold_translational_casting/top_edges.h" line="35" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__top__edges__grp_1gae68e9a4182f47178d9aca2750645afe7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classCastingTraits__2" kindref="compound">CastingTraits_2</ref></type>
          </param>
          <param>
            <type>typename <ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::Set_movable_separability_2::Single_mold_translational_casting::top_edges</definition>
        <argsstring>(const CGAL::Polygon_2&lt; CastingTraits &gt; &amp;polygon, OutputIterator oi, CGAL::Orientation orientation, CastingTraits_2 &amp;traits=CastingTraits_2())</argsstring>
        <name>top_edges</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Polygon__2" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Polygon.tag">CGAL::Polygon_2</ref>&lt; CastingTraits &gt; &amp;</type>
          <declname>polygon</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>oi</declname>
        </param>
        <param>
          <type><ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Orientation</ref></type>
          <declname>orientation</declname>
        </param>
        <param>
          <type><ref refid="classCastingTraits__2" kindref="compound">CastingTraits_2</ref> &amp;</type>
          <declname>traits</declname>
          <defval><ref refid="classCastingTraits__2" kindref="compound">CastingTraits_2</ref>()</defval>
        </param>
        <briefdescription>
<para>Same as above with the additional <computeroutput>orientation</computeroutput> argument. </para>        </briefdescription>
        <detaileddescription>
<para>If the orientation of the polygon is known upon invocation, specify it. Otherwise, it has to be computed. Note that finding the orientation of a polygon requires time linear in the number of edges.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>polygon</parametername>
</parameternamelist>
<parameterdescription>
<para>the input polygon. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator. Its dereference type is a pair, where (i) the first element in the pair is an iterator to a top edge, and (ii) the second element is a closed range of pullout directions represented as a pair of the extreme directions in the range of type <computeroutput><ref refid="classCastingTraits__2_1a3dae442a7b07bd41dc5e0e3e7b964e03" kindref="member">CastingTraits_2::Direction_2</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>orientation</parametername>
</parameternamelist>
<parameterdescription>
<para>the orientation of <computeroutput>polygon</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>the traits to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para></simplesect>
<simplesect kind="pre"><para><computeroutput>polygon</computeroutput> must be non-degenerate (has at least 3 vertices) and simple, and it does not have three consecutive collinear vertices. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Set_movable_separability_2/Single_mold_translational_casting/top_edges.h" line="60" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="CGAL/Set_movable_separability_2/Single_mold_translational_casting/is_pullout_direction.h" line="3" column="1"/>
  </compounddef>
</doxygen>
