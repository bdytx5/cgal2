<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>User Manual</title>
    <detaileddescription>
<para><anchor id="index_1Chapter_3D_Periodic_Mesh_Generation"/><anchor id="index_1userchapterperiodic3mesh3"/><simplesect kind="authors"><para>Mikhail Bogdanov, Aymeric Pellé, Mael Rouxel-Labbé, and Monique Teillaud </para></simplesect>
<anchor id="index_1fig__Periodic_3_mesh_3Banner"/><center> <image type="html" name="periodic_banner.png"></image>
 </center>  <ref refid="index_1fig__Periodic_3_mesh_3Banner" kindref="member">fig__Periodic_3_mesh_3Banner</ref> A cut view of a periodic mesh.  <linebreak/>
</para><sect1 id="index_1Periodic_3_mesh_3_section_intro">
<title>Introduction</title>
<para>This package is devoted to the generation of isotropic simplicial meshes discretizing periodic 3D domains. The domain to be meshed is a subset of the three-dimensional flat torus (see Section <ref refid="index_1P3Triangulation3secspace" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Periodic_3_triangulation_3.tag">The Flat Torus</ref> of the package <ref refid="packages_1PkgPeriodic3Triangulation3Summary" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">3D Periodic Triangulations</ref>). The domain may be connected or composed of multiple components and/or subdivided in several subdomains. The current implementation provides classes to represent domains bounded by isosurfaces of implicit functions defined over a cube.</para><para>Boundary and subdivision surfaces are either smooth or piecewise-smooth surfaces, formed with planar or curved surface patches. Surfaces may exhibit 1-dimensional features (e.g. crease edges) and 0-dimensional features (e.g. singular points as corners tips, cusps or darts), that have to be fairly approximated in the mesh.</para><para>The output mesh is a periodic 3-dimensional triangulation, including subcomplexes that approximate each input domain feature: subdomain, boundary surface patch or input domain feature with dimension 0 or 1. Thus, the output mesh includes a 3D submesh covering each subdomain, a surface mesh approximating each boundary or subdividing surface patch, a polyline approximation for each 1-dimensional feature and of course a vertex on each corner.</para><para>The main entry points of the package are two global functions that respectively generate and refine such meshes. The mesh generator is customized to output a mesh that fits as much as possible the user needs, for instance in terms of sizing field or with respect to some user customized quality criteria.</para><para>The meshing engine used in this mesh generator is based on Delaunay refinement <ref refid="citelist_1CITEREF_c-gqmgc-93" kindref="member">[4]</ref>, <ref refid="citelist_1CITEREF_r-draq2d-95" kindref="member">[7]</ref>, <ref refid="citelist_1CITEREF_s-tmgdr-98" kindref="member">[8]</ref>. It uses the notion of restricted Delaunay triangulation to approximate 1-dimensional curves and surface patches <ref refid="citelist_1CITEREF_cgal:bo-pgsms-05" kindref="member">[1]</ref>. Before the refinement, a mechanism of protecting balls is set up on 1-dimensional features, if any, to ensure a fair representation of those features in the mesh, and also to guarantee the termination of the refinement process, whatever may be the input geometry, in particular whatever small angles the boundary and subdivision surface patches may form <ref refid="citelist_1CITEREF_cgal:cdl-pdma-07" kindref="member">[2]</ref>, <ref refid="citelist_1CITEREF_cgal:cdr-drpsc-07" kindref="member">[3]</ref>. The Delaunay refinement is followed by a mesh optimization phase to remove slivers and provide a good quality mesh.</para><sect2 id="index_1Periodic_3_mesh_3Mesh_3">
<title>Relation to the 3D Mesh Generation and 3D Periodic Triangulations Packages</title>
<para>This package is fundamentally linked to the package <ref refid="packages_1PkgMesh_3Summary" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">3D Mesh Generation</ref>, which is devoted to the generation of isotropic simplicial meshes discretizing (non-periodic) 3D domains and to the <ref refid="packages_1PkgPeriodic3Triangulation3Summary" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">3D Periodic Triangulations</ref> of CGAL, which are used as underlying triangulation structures of the mesh.</para><para>A periodic mesh extends, by definition, infinitely in space. We consider the flat torus <formula id="16">$ \mathbb T_c^3$</formula>, whose <emphasis>canonical cube</emphasis> has side length <computeroutput>c</computeroutput> (this canonical cube is named <emphasis>original domain</emphasis> in Chapter <ref refid="packages_1PkgPeriodic3Triangulation3Summary" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">3D Periodic Triangulations</ref>; we rename it here to avoid the confusion with the domain defined in Chapter <ref refid="packages_1PkgMesh_3Summary" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">3D Mesh Generation</ref>). Well-chosen &quot;dummy&quot; points are inserted at the beginning of the meshing process, ensuring that the projection of the periodic triangulation into the flat torus <formula id="16">$ \mathbb T_c^3$</formula> forms at all times a simplicial complex (see Sections <ref refid="index_1P3Triangulation3secspace" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Periodic_3_triangulation_3.tag">The Flat Torus</ref> and <ref refid="index_1P3Triangulation3secintro" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Periodic_3_triangulation_3.tag">Representation</ref> of the manual of 3D periodic triangulations). Thanks to this construction, the meshing process can be exclusively conducted within the canonical cube. The mesh can then be created using the <ref refid="packages_1PkgMesh_3Summary" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">3D Mesh Generation</ref> package of CGAL. As this package originally aims to mesh non-periodic domains of <formula id="1">$ \mathbb R^3$</formula>, an interface is necessary between the packages <ref refid="packages_1PkgMesh_3Summary" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">3D Mesh Generation</ref> and <ref refid="packages_1PkgPeriodic3Triangulation3Summary" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">3D Periodic Triangulations</ref>. This package provides this interface.</para></sect2>
<sect2 id="index_1Periodic_3_mesh_3InputDomain">
<title>Input Domain</title>
<para>The domain to be meshed is assumed to be representable as a pure 3D complex. A 3D complex is a set of faces with dimension 0, 1, 2, and 3 such that all faces are pairwise interior disjoint, and the boundary of each face of the complex is the union of lower-dimensional faces of the complex. The 3D complex is <emphasis>pure</emphasis>, meaning that each face is included in a face of dimension 3, so that the complex is entirely described by the set of its 3D faces and their subfaces. However the 3D complex needs not be connected. The set of faces with dimension lower or equal than 2 forms a 2D subcomplex which needs not be manifold, neither pure, nor connected: some 3D faces may have dangling 2D or 1D faces in their boundary faces.</para><para>In the rest of the documentation, we will refer to the input 3D complex as the input domain. The faces of the input domain with dimension 0, 1, 2, and 3 are called respectively <emphasis>corners</emphasis>, <emphasis>curves</emphasis>, <emphasis>surface patches</emphasis>, and <emphasis>subdomains</emphasis> to clearly distinguish them from the faces of the mesh that are called vertices, edges, facets and cells.</para><para>Note that the input complex faces are not required to be linear nor smooth. Surface patches, for instance, may be smooth surface patches, or portions of surface meshes with boundaries. Curves may be for instance straight segments, parameterized curves, or polylines. Each of those features will be accurately represented in the final mesh.</para><para>The 0 and 1-dimensional features of the input domain are usually singular points of the subdomain boundaries, however this is not required. Furthermore, those features are not required to cover all the subdomains boundaries singularities but only those that need to be accurately represented in the final mesh. In the following, we say that a domain has <emphasis>features</emphasis> when it has 0 and 1-dimensional features that need to be accurately represented in the mesh, and we call those features <emphasis>exposed features</emphasis>. Therefore, a domain may be without features either because all boundary surface patches are smooth closed surfaces, or simply because the curves joining different surface patches and the singularities of those patches need not be accurately approximated in the final mesh.</para><para>Note also that input complex faces are not required to be connected. Faces of the input domain are identified by indices. If a subdomain is not connected, its different components receive the same index. Likewise different surface patches, segment curves, or corners may share the same index. Each connected component of a feature will be accurately represented in the final mesh. Note however that the occurrence of multiply connected faces in the input complex may affect the relevance of internal topological checks performed by the mesh generator.</para><para>The domain is passed to the mesh generation function as a domain class, often called the oracle, that provides predicates and constructors related to the domain, the subdomains, and the boundary surface patches. Mainly, the oracle provides a predicate to test if a given query point belongs to the domain or not and to find in which subdomain it lies in the affirmative case. The domain class also provides predicates and constructors to test the intersection of a query line segment with the boundary surface patches and to construct intersection points, if any.</para><sect3 id="index_1Periodic_3_mesh_3ImplicitInputDomain">
<title>Implicit Domains</title>
<para>An implicit domain is a domain described by an implicit function. The bounding surface is described implicitly as the zero level set of a function defined over the three dimensional flat torus. The domain to be discretized is assumed to be the domain where the function has negative values.</para></sect3>
<sect3 id="index_1Periodic_3_mesh_3InputDomainPeriodicity">
<title>Periodicity of the Input Domain</title>
<para>As described in Section <ref refid="index_1Periodic_3_mesh_3Mesh_3" kindref="member">Relation to the 3D Mesh Generation and 3D Periodic Triangulations Packages</ref>, the periodic mesh is in fact constructed over a single cube of side <computeroutput>c</computeroutput> in <formula id="1">$ \mathbb R^3$</formula>, the <emphasis>canonical cube</emphasis> of the flat torus <formula id="16">$ \mathbb T_c^3$</formula>. The origin (given by three coordinates <formula id="17">$ \alpha$</formula>, <formula id="18">$ \beta$</formula>, and <formula id="19">$ \gamma$</formula>) of this cube and the period <computeroutput>c</computeroutput> are input parameters chosen by the user. The cube <formula id="20">$ [\alpha,\alpha+c)\times[\beta,\beta+c)\times[\gamma,\gamma+c)$</formula> contains exactly one representative of each element in <formula id="16">$ \mathbb T_c^3$</formula>. Although the mesh is only constructed over the canonical cube, some of the oracles used during the generation of the mesh must sometimes be evaluated outside of the canonical cube. The implicit function describing the domain to be meshed must thus be defined over the whole Euclidean space and be periodic, with a period compatible with the canonical cube.</para></sect3>
<sect3 id="index_1Periodic_3_mesh_3ArtificialPeriodicity">
<title>Enforcing Domain Periodicity</title>
<para>The specifications of the input implicit function described in the previous section are quite restrictive. To relax these requirements, this package also offers a wrapper class, <computeroutput><ref refid="classCGAL_1_1Periodic__3__function__wrapper" kindref="compound">CGAL::Periodic_3_function_wrapper</ref></computeroutput>, to artificially construct periodic functions compatible with the user-defined canonical cube, from the values of an implicit function over the canonical cube. It is thus possible to construct periodic domains described by implicit functions that are not intrinsically periodic, for example a sphere (see <ref refid="index_1fig__Periodic_3_mesh_3Periodic_implicit_sphere" kindref="member">fig__Periodic_3_mesh_3Periodic_implicit_sphere</ref>) or a cone (see Section <ref refid="index_1Periodic_3_mesh_3ConeWithSharpFeatures" kindref="member">Example of a Cone-like Periodic Domain</ref>).</para></sect3>
</sect2>
<sect2 id="index_1Periodic_3_mesh_3OutputMesh">
<title>Output Mesh</title>
<para>The resulting mesh is output as a subcomplex of a <ref refid="classCGAL_1_1Periodic__3__regular__triangulation__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Periodic_3_triangulation_3.tag">weighted Delaunay periodic 3D triangulation</ref>, in a class that provides various iterators on mesh elements.</para><para>This periodic 3D triangulation provides approximations of the subdomains, surface patches, curves, and corners according to the restricted Delaunay triangulation paradigm. This means that each subdomain is approximated by the union of the tetrahedral cells whose circumcenters are located inside the domain (or subdomain). Each surface patch is approximated by the union of the Delaunay mesh facets whose dual Voronoi edges intersect the surface patch. Such mesh facets are called <emphasis>surface facets</emphasis> in the following. The 1-dimensional exposed features are approximated by sequences of mesh edges and the 0-dimensional exposed features are represented by mesh vertices.</para><para>It is possible to extract the facets of the complex (restricted to the canonical cube) as a <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput>, using the function <computeroutput><ref refid="group__PkgMesh__3Functions_1ga68ca38989087644fb6b893eb566be9ea" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">facets_in_complex_3_to_triangle_mesh()</ref></computeroutput>.</para></sect2>
<sect2 id="index_1Periodic_3_mesh_3DelaunayRefinement">
<title>Delaunay Refinement</title>
<para>The mesh generation algorithm is mainly a Delaunay refinement process. This Delaunay refinement process is driven by criteria concerning either the size and shape of mesh cells and surface facets. The refinement process terminates when there are no more mesh cells or surface facets violating the criteria.</para><para>The criteria are designed to achieve a nice spread of the mesh vertices while ensuring the termination of the refinement process. Those criteria may be somehow tuned to the user needs to achieve for instance the respect of a sizing field by mesh elements, some topological conditions on the representation of boundary surfaces in the mesh, and/or some error bound for the approximation of boundary surfaces. To some extent, the user may tune the Delaunay refinement to a prescribed trade-off between mesh quality and mesh density. The mesh density refers to the number of mesh vertices and cells, i.e. to the complexity of the mesh. The mesh quality referred to here is measured by the radius edge ratio of surface facets end mesh cells, where the radius edge ratio of a simplex (triangle or tetrahedron) is the ratio between its circumradius and its shortest edge length.</para></sect2>
<sect2 id="index_1Periodic_3_mesh_3Protectionof0and1dimensionalExposed">
<title>Protection of 0 and 1-dimensional Exposed Features</title>
<para>If the domain description includes 0 dimensional features, the corresponding points are inserted into the Delaunay triangulation from the start.</para><para>If the domain has 1-dimensional exposed features, the method of protecting balls <ref refid="citelist_1CITEREF_cgal:cdl-pdma-07" kindref="member">[2]</ref>, <ref refid="citelist_1CITEREF_cgal:cdr-drpsc-07" kindref="member">[3]</ref> is used to achieve an accurate representation of those features in the mesh and to guarantee that the refinement process terminates whatever may be the dihedral angles formed by input surface patches incident to a given 1-feature or the angles formed by two 1-features incident to a 0-feature. See Section <ref refid="index_1Mesh_3Protectionof0and1dimensionalExposed" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">Protection of 0 and 1-dimensional Exposed Features</ref> in the documentation of the package <ref refid="packages_1PkgMesh_3Summary" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">3D Mesh Generation</ref> for further information.</para><para>Section <ref refid="index_1Periodic_3_mesh_3MeshingDomainswithSharpFeatures" kindref="member">Meshing Domains with Sharp Features</ref> details how to prescribe sharp features and examples of periodic meshes with features.</para></sect2>
<sect2 id="index_1Periodic_3_mesh_3OptimizationPhase">
<title>Optimization Phase</title>
<para>The optimization phase is a succession of optimization processes which aim to improve the quality of the mesh in terms of shape of its elements. All the optimizers offered by the package <ref refid="packages_1PkgMesh_3Summary" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">3D Mesh Generation</ref> are also available for periodic mesh generation:</para><para><itemizedlist>
<listitem><para>The Lloyd and ODT-smoother are global optimizers, moving the mesh vertices to minimize a mesh energy.</para></listitem><listitem><para>The perturber and the exuder are local optimizers, focusing on improving the worst mesh elements.</para></listitem></itemizedlist>
</para><para>See Sections <ref refid="index_1Mesh_3OptimizationPhase" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">Optimization Phase</ref>, <ref refid="index_1Mesh_3TheOptimizationParameters" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">The Optimization Parameters</ref>, and <ref refid="index_1Mesh_3TuningMeshOptimization" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">Tuning Mesh Optimization</ref> in the documentation of the package <ref refid="packages_1PkgMesh_3Summary" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">3D Mesh Generation</ref> for further information.</para></sect2>
</sect1>
<sect1 id="index_1Periodic_3_mesh_3_section_interface">
<title>Interface</title>
<sect2 id="index_1Periodic_3_mesh_3TheGlobalFunctions">
<title>The Global Functions</title>
<para>A periodic 3D mesh generation process is launched through a call to one of the two following functions:</para><para><programlisting><codeline><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C3T3,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>PeriodicMeshDomain,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MeshCriteria&gt;</highlight></codeline>
<codeline><highlight class="normal">C3T3<sp/><ref refid="group__PkgPeriodic__3__mesh__3Functions_1ga0b7d3bf3e957fbf8ed46f9ed139502b5" kindref="member">make_periodic_3_mesh_3</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PeriodicMeshDomain&amp;<sp/>domain,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MeshCriteria&amp;<sp/>criteria,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameters::internal::Features_options<sp/><ref refid="group__PkgMesh__3Parameters_1ga0a990b28d55157c62d4bfd2624d408af" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">features</ref><sp/>=<sp/><ref refid="group__PkgMesh__3Parameters_1ga0a990b28d55157c62d4bfd2624d408af" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">parameters::features</ref>(domain),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameters::internal::Lloyd_options<sp/><ref refid="group__PkgMesh__3Parameters_1gaa7254c80bba62400f43f1e49506b975a" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">lloyd</ref><sp/>=<sp/><ref refid="group__PkgMesh__3Parameters_1ga6abfd3773eeb47d88ce6cffb91f14d2f" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">parameters::no_lloyd</ref>(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameters::internal::Odt_options<sp/><ref refid="group__PkgMesh__3Parameters_1gafbecfd22651a08e6812d8a5ad9b49852" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">odt</ref><sp/>=<sp/><ref refid="group__PkgMesh__3Parameters_1ga1d041e8dbde3860cde3c20107225ecb1" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">parameters::no_odt</ref>(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameters::internal::Perturb_options<sp/><ref refid="group__PkgMesh__3Parameters_1gaedf18f7f3c4647ec5fce5d67e435757a" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">perturb</ref><sp/>=<sp/><ref refid="group__PkgMesh__3Parameters_1gaedf18f7f3c4647ec5fce5d67e435757a" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">parameters::perturb</ref>(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameters::internal::Exude_options<sp/><ref refid="group__PkgMesh__3Parameters_1ga16694b09a2acc8ab3f26b7d57633ccb0" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">exude</ref><sp/>=<sp/><ref refid="group__PkgMesh__3Parameters_1ga16694b09a2acc8ab3f26b7d57633ccb0" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">parameters::exude</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C3T3,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MeshDomain,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MeshCriteria&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__PkgPeriodic__3__mesh__3Functions_1ga5856ae11a447d996a8b0cfe38c0d7618" kindref="member">refine_periodic_3_mesh_3</ref>(C3T3&amp;<sp/>c3t3,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PeriodicMeshDomain&amp;<sp/>domain,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MeshCriteria&amp;<sp/>criteria,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameters::internal::Lloyd_options<sp/><ref refid="group__PkgMesh__3Parameters_1gaa7254c80bba62400f43f1e49506b975a" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">lloyd</ref><sp/>=<sp/><ref refid="group__PkgMesh__3Parameters_1ga6abfd3773eeb47d88ce6cffb91f14d2f" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">parameters::no_lloyd</ref>(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameters::internal::Odt_options<sp/><ref refid="group__PkgMesh__3Parameters_1gafbecfd22651a08e6812d8a5ad9b49852" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">odt</ref><sp/>=<sp/><ref refid="group__PkgMesh__3Parameters_1ga1d041e8dbde3860cde3c20107225ecb1" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">parameters::no_odt</ref>(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameters::internal::Perturb_options<sp/><ref refid="group__PkgMesh__3Parameters_1gaedf18f7f3c4647ec5fce5d67e435757a" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">perturb</ref><sp/>=<sp/><ref refid="group__PkgMesh__3Parameters_1gaedf18f7f3c4647ec5fce5d67e435757a" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">parameters::perturb</ref>(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameters::internal::Exude_options<sp/><ref refid="group__PkgMesh__3Parameters_1ga16694b09a2acc8ab3f26b7d57633ccb0" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">exude</ref><sp/>=<sp/><ref refid="group__PkgMesh__3Parameters_1ga16694b09a2acc8ab3f26b7d57633ccb0" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">parameters::exude</ref>());</highlight></codeline>
</programlisting></para><para>The function <computeroutput><ref refid="group__PkgPeriodic__3__mesh__3Functions_1ga0b7d3bf3e957fbf8ed46f9ed139502b5" kindref="member">make_periodic_3_mesh_3()</ref></computeroutput> generates from scratch a periodic mesh of the input domain, while the function <computeroutput><ref refid="group__PkgPeriodic__3__mesh__3Functions_1ga5856ae11a447d996a8b0cfe38c0d7618" kindref="member">refine_periodic_3_mesh_3()</ref></computeroutput> refines an existing periodic mesh of the input domain.</para><para><simplesect kind="warning"><para>The triangulation must form at all times a simplicial complex within a single copy of the domain (see Sections <ref refid="index_1P3Triangulation3secspace" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Periodic_3_triangulation_3.tag">The Flat Torus</ref> and <ref refid="index_1P3Triangulation3secintro" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Periodic_3_triangulation_3.tag">Representation</ref> of the manual of 3D periodic triangulations). It is the responsibility of the user to provide a triangulation that satisfies this condition when calling the refinement function <computeroutput><ref refid="group__PkgPeriodic__3__mesh__3Functions_1ga5856ae11a447d996a8b0cfe38c0d7618" kindref="member">refine_periodic_3_mesh_3()</ref></computeroutput>. The underlying triangulation of a mesh complex obtained through <computeroutput><ref refid="group__PkgPeriodic__3__mesh__3Functions_1ga0b7d3bf3e957fbf8ed46f9ed139502b5" kindref="member">make_periodic_3_mesh_3()</ref></computeroutput> or <computeroutput><ref refid="group__PkgPeriodic__3__mesh__3Functions_1ga5856ae11a447d996a8b0cfe38c0d7618" kindref="member">refine_periodic_3_mesh_3()</ref></computeroutput> will always satisfy this condition.</para></simplesect>
The following sections describe the different template parameters (and their requirements) of these two global functions.</para></sect2>
<sect2 id="index_1Periodic_3_mesh_3TheDataStructure">
<title>The Data Structure</title>
<para>The template parameter <computeroutput>C3T3</computeroutput> is required to be a model of the concept <computeroutput><ref refid="classMeshComplex__3InTriangulation__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">MeshComplex_3InTriangulation_3</ref></computeroutput>. This data structure is devised to represent a three-dimensional complex embedded in a periodic 3D triangulation. In both functions, an instance of type <computeroutput>C3T3</computeroutput> is used to maintain the current approximating simplicial mesh and to represent a single copy of the final periodic 3D mesh at the end of the procedure.</para><para>The embedding periodic 3D triangulation is required to be the nested type <computeroutput><ref refid="classCGAL_1_1Periodic__3__mesh__triangulation__3_1aa66500d18c7aefce335a3b6c02df7654" kindref="member">CGAL::Periodic_3_mesh_triangulation_3::type</ref></computeroutput>, provided by the class template <computeroutput><ref refid="classCGAL_1_1Periodic__3__mesh__triangulation__3" kindref="compound">CGAL::Periodic_3_mesh_triangulation_3</ref></computeroutput>. The type for this triangulation is a wrapper around the class <computeroutput><ref refid="classCGAL_1_1Periodic__3__regular__triangulation__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Periodic_3_triangulation_3.tag">CGAL::Periodic_3_regular_triangulation_3</ref></computeroutput> whose vertex and cell base classes are respectively models of the concepts <computeroutput><ref refid="classMeshVertexBase__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">MeshVertexBase_3</ref></computeroutput> and <computeroutput><ref refid="classMeshCellBase__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">MeshCellBase_3</ref></computeroutput>.</para></sect2>
<sect2 id="index_1Periodic_3_mesh_3TheDomainOracleandtheFeaturesParameter">
<title>The Domain Oracle and the Features Parameter</title>
<para>The template parameter <computeroutput>PeriodicMeshDomain</computeroutput> is required to be a model of the concept <computeroutput><ref refid="classPeriodic__3MeshDomain__3" kindref="compound">Periodic_3MeshDomain_3</ref></computeroutput>. The argument <computeroutput>domain</computeroutput> of type <computeroutput>PeriodicMeshDomain</computeroutput> is the sole link through which the periodic domain to be discretized is known by the mesh generation algorithm.</para><para>This concept provides, among others, member functions to test whether or not a query segment intersects boundary surfaces, and to compute an intersection point in the affirmative. The <computeroutput><ref refid="classPeriodic__3MeshDomain__3" kindref="compound">Periodic_3MeshDomain_3</ref></computeroutput> concept adds member functions which given a query point tell whether the point lies inside or outside the domain and in which subdomain the point lies, if inside.</para><para>If the domain description includes 0 and 1-dimensional features that have to be accurately represented in the final mesh, the template parameter <computeroutput>PeriodicMeshDomain</computeroutput> is required to be of a model of the concept <computeroutput><ref refid="classPeriodic__3MeshDomainWithFeatures__3" kindref="compound">Periodic_3MeshDomainWithFeatures_3</ref></computeroutput>, which mainly provides the incidence graph of 0, 1 and 2-dimensional features, and a member function to construct sample points on curves.</para><para>Users whose domain is a model of <computeroutput><ref refid="classPeriodic__3MeshDomainWithFeatures__3" kindref="compound">Periodic_3MeshDomainWithFeatures_3</ref></computeroutput> can choose to have the corners and curves of the domain represented in the mesh or not, using the following parameters: <itemizedlist>
<listitem>
<para><computeroutput><ref refid="group__PkgMesh__3Parameters_1ga0a990b28d55157c62d4bfd2624d408af" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">parameters::features()</ref></computeroutput> sets features according to the domain, i.e. 0 and 1-dimensional features are taken into account if <computeroutput>domain</computeroutput> is a <computeroutput><ref refid="classMeshDomainWithFeatures__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">MeshDomainWithFeatures_3</ref></computeroutput>. </para></listitem>
<listitem>
<para><computeroutput><ref refid="group__PkgMesh__3Parameters_1gaa3eb2cb65200b0331ef9d5f14b4a0535" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">parameters::no_features()</ref></computeroutput> prevents the representation of 0 and 1-dimensional features in the mesh. This is useful to get a smooth and rough approximation of a domain with features. </para></listitem>
</itemizedlist>
</para></sect2>
<sect2 id="index_1Periodic_3_mesh_3TheMeshingCriteria">
<title>The Meshing Criteria</title>
<para>The template parameter <computeroutput>MeshCriteria</computeroutput> must be a model of the concept <computeroutput><ref refid="classMeshCriteria__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">MeshCriteria_3</ref></computeroutput>, or a model of the refined concept <computeroutput><ref refid="classMeshCriteriaWithFeatures__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">MeshCriteriaWithFeatures_3</ref></computeroutput> if the domain has exposed features. The argument of type <computeroutput>MeshCriteria</computeroutput> passed to the mesh generator specifies the size and shape requirements for the tetrahedra in the mesh and for the triangles in the boundary surface mesh. These criteria condition the rules that drive the refinement process. At the end of the refinement process, mesh elements satisfy the criteria. This may not be strictly true anymore after the optimization phase, but this last phase is devised to only improve the mesh quality.</para><para>The periodic mesher makes use of the same criteria as the non-periodic meshing functions. This is made possible because criteria use methods directly from the underlying triangulation, to know the smallest edge length of a triangle, for example. The periodicity is therefore taken into account at this level and no modification of the criteria classes are required.</para><para>The criteria for surface facets are governed by the four following parameters: <itemizedlist>
<listitem>
<para><emphasis><computeroutput>facet_angle</computeroutput>.</emphasis> This parameter controls the shape of surface facets. Specifically, it is a lower bound for the angle (in degree) of surface facets. When boundary surfaces are smooth, the termination of the meshing process is guaranteed if this angular bound is at most 30 degrees <ref refid="citelist_1CITEREF_c-gqmgc-93" kindref="member">[4]</ref>. </para></listitem>
<listitem>
<para><emphasis><computeroutput>facet_size</computeroutput>.</emphasis> This parameter controls the size of surface facets. Each surface facet has a surface Delaunay ball which is a ball circumscribing the surface facet and centered on the surface patch. The parameter <computeroutput>facet_size</computeroutput> is either a constant or a spatially variable scalar field, providing an upper bound for the radii of surface Delaunay balls. </para></listitem>
<listitem>
<para><emphasis><computeroutput>facet_distance</computeroutput>.</emphasis> This parameter controls the approximation error of boundary and subdivision surfaces. Specifically, it is either a constant or a spatially variable scalar field. It provides an upper bound for the distance between the circumcenter of a surface facet and the center of a surface Delaunay ball of this facet. </para></listitem>
<listitem>
<para><emphasis><computeroutput>facet_topology</computeroutput>.</emphasis> This parameters controls the set of topological constraints which have to be verified by each surface facet. By default, each vertex of a surface facet has to be located on a surface patch, on a curve, or on a corner. It can also be set to check whether the three vertices of a surface facet belongs to the same surface patch. This has to be done cautiously, as such a criterion needs that each intersection of input surface patches is an input 1-dimensional feature. </para></listitem>
</itemizedlist>
</para><para>The criteria for mesh cells are governed by two parameters: <itemizedlist>
<listitem>
<para><emphasis><computeroutput>cell_radius_edge_ratio</computeroutput>.</emphasis> This parameter controls the shape of mesh cells (but can&apos;t filter slivers, as we discussed earlier). It is an upper bound for the ratio between the circumradius of a mesh tetrahedron and its shortest edge. There is a theoretical bound for this parameter: the Delaunay refinement process is guaranteed to terminate for values of <computeroutput>cell_radius_edge_ratio</computeroutput> bigger than 2. </para></listitem>
<listitem>
<para><emphasis><computeroutput>cell_size</computeroutput>.</emphasis> This parameter controls the size of mesh tetrahedra. It is either a scalar or a spatially variable scalar field. It provides an upper bound on the circumradii of the mesh tetrahedra. </para></listitem>
</itemizedlist>
</para><para>If the domain has 1-dimensional exposed features, the <computeroutput>criteria</computeroutput> includes a sizing field to guide the sampling of 1-dimensional features with protecting balls centers. <itemizedlist>
<listitem>
<para><emphasis><computeroutput>edge_size</computeroutput></emphasis>. This constant or variable scalar field is used as an upper bound for the distance between two protecting ball centers that are consecutive on a 1-feature. This parameter has to be set to a positive value when 1-dimensional features protection is used. </para></listitem>
</itemizedlist>
</para></sect2>
</sect1>
<sect1 id="index_1Periodic_3_mesh_3_section_examples">
<title>Examples</title>
<para>This section presents various use cases of the periodic mesh generator.</para><sect2 id="index_1Periodic_3_mesh_3SubMultipleCopies">
<title>Visualizing Multiple Copies of a Periodic Mesh</title>
<para>Generated meshes can be output to the <computeroutput>.mesh</computeroutput> file format, which can be visualized with the demo of the package <ref refid="packages_1PkgPolyhedronSummary" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">3D Polyhedral Surface</ref>. The function <ref refid="group__PkgPeriodic__3__mesh__3IOFunctions" kindref="compound"><computeroutput>CGAL::output_periodic_mesh_to_medit()</computeroutput> </ref> takes a stream, a mesh complex, and - optionally - the number of periodic copies that should be drawn, making it easier to observe the periodicity of the result. <ref refid="index_1fig__Periodic_3_mesh_3Periodic_copies" kindref="member">fig__Periodic_3_mesh_3Periodic_copies</ref> illustrates the different output for the three possible number of copies: <computeroutput>1</computeroutput>, <computeroutput>4</computeroutput>, and <computeroutput>8</computeroutput>.</para><para><anchor id="index_1fig__Periodic_3_mesh_3Periodic_copies"/><center> <image type="html" name="periodic_copies.jpg"></image>
 </center>  <ref refid="index_1fig__Periodic_3_mesh_3Periodic_copies" kindref="member">fig__Periodic_3_mesh_3Periodic_copies</ref> Example of a periodic mesh output in <computeroutput>1</computeroutput>, <computeroutput>4</computeroutput>, or <computeroutput>8</computeroutput> copies.  <linebreak/>
</para><para>In the following examples (except on <ref refid="index_1fig__Periodic_3_mesh_3Periodic_multi_domain" kindref="member">fig__Periodic_3_mesh_3Periodic_multi_domain</ref>), each copy of a periodic mesh will be attributed a unique color.</para><para><simplesect kind="warning"><para>A single copy of the periodic mesh does not necessarily form a visually-pleasing mesh: there can be unexpected holes, disconnected elements, non-manifold locations, etc. This is because each copy is only made of unique elements and the periodic mesh only has meaning when considered with other neighboring periodic copies: a strange hole on the &quot;left&quot; of a copy is filled by a tetrahedron on its &quot;right&quot;. <ref refid="index_1fig__Periodic_3_mesh_3Periodic_protection" kindref="member">fig__Periodic_3_mesh_3Periodic_protection</ref> is an example of such phenomenon: These (purely visual) issues disappear when considering multiple copies together.</para></simplesect>
</para></sect2>
<sect2 id="index_1Periodic_3_mesh_33DDomainsImplicitIsosurfaces">
<title>3D Periodic Domains Bounded by Implicit Isosurfaces</title>
<para>The following code produces a 3D periodic mesh for a domain whose boundary surface is an isosurface defined by an implicit function. Note the use of named parameters (from the Boost library) in the constructor of the <computeroutput>Mesh_criteria</computeroutput> instance. <ref refid="index_1fig__Periodic_3_mesh_3Periodic_implicit_shape" kindref="member">fig__Periodic_3_mesh_3Periodic_implicit_shape</ref> shows the resulting mesh.</para><para><linebreak/>
<bold>File</bold> <ref refid="Periodic_3_mesh_3_2mesh_implicit_shape_8cpp-example" kindref="compound">Periodic_3_mesh_3/mesh_implicit_shape.cpp</ref> <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Periodic_3_mesh_3/config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_inexact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/make_periodic_3_mesh_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/optimize_periodic_3_mesh_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Periodic_3_mesh_3/IO/File_medit.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Periodic_3_mesh_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Labeled_mesh_domain_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_complex_3_in_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_criteria_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/number_type_config.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>CGAL_PI</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Exact_predicates_inexact_constructions_kernel</ref><sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::FT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FT;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Point_3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Iso_cuboid_3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iso_cuboid;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Domain</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>FT<sp/>(Function)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point&amp;);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Labeled__mesh__domain__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">CGAL::Labeled_mesh_domain_3&lt;K&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Periodic_mesh_domain;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Triangulation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">CGAL::Periodic_3_mesh_triangulation_3&lt;Periodic_mesh_domain&gt;::type</ref><sp/>Tr;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__complex__3__in__triangulation__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">CGAL::Mesh_complex_3_in_triangulation_3&lt;Tr&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C3t3;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__criteria__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">CGAL::Mesh_criteria_3&lt;Tr&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Periodic_mesh_criteria;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>avoid<sp/>verbose<sp/>function<sp/>and<sp/>named<sp/>parameters<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceCGAL_1_1parameters" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">CGAL::parameters</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implicit<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">FT<sp/>schwarz_p(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point&amp;<sp/>p)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FT<sp/>x2<sp/>=<sp/>std::cos(<sp/>p.x()<sp/>*<sp/>2<sp/>*<sp/>CGAL_PI<sp/>),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y2<sp/>=<sp/>std::cos(<sp/>p.y()<sp/>*<sp/>2<sp/>*<sp/>CGAL_PI<sp/>),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z2<sp/>=<sp/>std::cos(<sp/>p.z()<sp/>*<sp/>2<sp/>*<sp/>CGAL_PI<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x2<sp/>+<sp/>y2<sp/>+<sp/>z2;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;int&apos;<sp/>because<sp/>the<sp/>&apos;schwarz_p&apos;<sp/>function<sp/>is<sp/>periodic<sp/>over<sp/>the<sp/>domain<sp/>only<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>length<sp/>of<sp/>the<sp/>side<sp/>of<sp/>the<sp/>domain<sp/>is<sp/>an<sp/>integer.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>domain_size<sp/>=<sp/>(argc<sp/>&gt;<sp/>1)<sp/>?<sp/>atoi(argv[1])<sp/>:<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number_of_copies_in_output<sp/>=<sp/>(argc<sp/>&gt;<sp/>2)<sp/>?<sp/>atoi(argv[2])<sp/>:<sp/>4;<sp/></highlight><highlight class="comment">//<sp/>can<sp/>be<sp/>1,<sp/>2,<sp/>4,<sp/>or<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Iso_cuboid<sp/>canonical_cube(0,<sp/>0,<sp/>0,<sp/>domain_size,<sp/>domain_size,<sp/>domain_size);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Periodic_mesh_domain<sp/>domain<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Periodic_mesh_domain::create_implicit_mesh_domain(schwarz_p,<sp/>canonical_cube);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Periodic_mesh_criteria<sp/>criteria(facet_angle<sp/>=<sp/>30,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>facet_size<sp/>=<sp/>0.05<sp/>*<sp/>domain_size,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>facet_distance<sp/>=<sp/>0.025<sp/>*<sp/>domain_size,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell_radius_edge_ratio<sp/>=<sp/>2.,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell_size<sp/>=<sp/>0.05);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mesh<sp/>generation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>C3t3<sp/>c3t3<sp/>=<sp/>CGAL::make_periodic_3_mesh_3&lt;C3t3&gt;(domain,<sp/>criteria);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::ofstream<sp/>medit_file(</highlight><highlight class="stringliteral">&quot;output_implicit_shape.mesh&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgPeriodic__3__mesh__3IOFunctions_1ga22e9a84d23dea5461571db65a2eb27a5" kindref="member">CGAL::output_periodic_mesh_to_medit</ref>(medit_file,<sp/>c3t3,<sp/>number_of_copies_in_output);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;EXIT<sp/>SUCCESS&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
</programlisting></para><para><anchor id="index_1fig__Periodic_3_mesh_3Periodic_implicit_shape"/><center> <image type="html" name="periodic_implicit_domain.png"></image>
 </center>  <ref refid="index_1fig__Periodic_3_mesh_3Periodic_implicit_shape" kindref="member">fig__Periodic_3_mesh_3Periodic_implicit_shape</ref> A single copy of a periodic mesh produced from an implicit domain (left). Cut view (middle). Another cut is shown, using 8 copies (right).  <linebreak/>
</para><para>While the implicit function used in the previous example is defined and periodic over the complete space, it is also possible to consider non-periodic implicit functions defined entirely within the canonical cube (or over the whole space) by using the wrapper class <computeroutput><ref refid="classCGAL_1_1Periodic__3__function__wrapper" kindref="compound">CGAL::Periodic_3_function_wrapper</ref></computeroutput>. Values will then be periodically duplicated, creating a periodic function. For example, replacing the previous domain with the following non-periodic implicit function (a sphere):</para><para><programlisting><codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">typedef<sp/><ref refid="classCGAL_1_1Periodic__3__function__wrapper" kindref="compound">CGAL::Periodic_3_function_wrapper&lt;Function, K&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Periodic_function;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>sphere<sp/>centered<sp/>on<sp/>(0.5,<sp/>0.5,<sp/>0.5)<sp/>with<sp/>radius<sp/>sqrt(0.2)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">FT<sp/>sphere_function<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point&amp;<sp/>p)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__squared__distance__grp_1ga1ff73525660a052564d33fbdd61a4f71" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::squared_distance</ref>(p,<sp/>Point(0.5,<sp/>0.5,<sp/>0.5))<sp/>-<sp/>0.2;<sp/>}</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">Iso_cuboid_3<sp/>canonical_cube(0,<sp/>0,<sp/>0,<sp/>1,<sp/>1,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">Periodic_mesh_domain<sp/>domain<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Periodic_mesh_domain::create_implicit_mesh_domain(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Periodic_function(sphere_function,<sp/>canonical_cube),<sp/>canonical_cube<sp/>);</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
</programlisting></para><para>will yield the mesh shown on <ref refid="index_1fig__Periodic_3_mesh_3Periodic_implicit_sphere" kindref="member">fig__Periodic_3_mesh_3Periodic_implicit_sphere</ref>.</para><para><anchor id="index_1fig__Periodic_3_mesh_3Periodic_implicit_sphere"/><center> <image type="html" name="periodic_implicit_spheres.png"></image>
 </center>  <ref refid="index_1fig__Periodic_3_mesh_3Periodic_implicit_sphere" kindref="member">fig__Periodic_3_mesh_3Periodic_implicit_sphere</ref> Periodic mesh of an implicit sphere that is entirely contained in the input cube, shown with 8 copies (left). A cut view along one of the axes (right).  <linebreak/>
</para><sect3 id="index_1Periodic_3_mesh_33DDomainsImplicitIsosurfacesBothSides">
<title>Meshing the Interior and the Exterior of a Domain Bounded by an Isosurface</title>
<para>In the case of periodic mesh generation, the exterior of an isosurface defined by an implicit function can also be meshed because it is a finite space. The class <computeroutput><ref refid="classCGAL_1_1Implicit__to__labeled__subdomains__function__wrapper" kindref="compound">Implicit_to_labeled_subdomains_function_wrapper</ref></computeroutput> is a convenient wrapper to achieve this by internally transforming the interior and the exterior as simply two subdomains to be meshed. Compared to the previous example, it can be simply achieved by adding the line <programlisting><codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">typedef<sp/><ref refid="classCGAL_1_1Implicit__to__labeled__subdomains__function__wrapper" kindref="compound">CGAL::Implicit_to_labeled_subdomains_function_wrapper&lt;Function, K&gt;</ref><sp/>Function_wrapper;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
</programlisting> and wrapping the function as follows: <programlisting><codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">Function_wrapper<sp/>wrapper(schwarz_p);</highlight></codeline>
<codeline><highlight class="normal">Periodic_mesh_domain<sp/>domain(wrapper,<sp/>canonical_cube);</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
</programlisting></para><para><ref refid="index_1fig__Periodic_3_mesh_3Periodic_implicit_interior_and_exterior" kindref="member">fig__Periodic_3_mesh_3Periodic_implicit_interior_and_exterior</ref> shows the periodic mesh obtained after this change. Note that both subdomains are meshed with different cell sizing fields, which can be obtained using the class <computeroutput><ref refid="classCGAL_1_1Mesh__constant__domain__field__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">Mesh_constant_domain_field_3</ref></computeroutput>. See Example <ref refid="Periodic_3_mesh_3_2mesh_implicit_shape_with_subdomains_8cpp-example" kindref="compound">mesh_implicit_shape_with_subdomains.cpp</ref> for the complete code.</para><para><anchor id="index_1fig__Periodic_3_mesh_3Periodic_implicit_interior_and_exterior"/><center> <image type="html" name="periodic_implicit_interior_and_exterior.jpg"></image>
 </center>  <ref refid="index_1fig__Periodic_3_mesh_3Periodic_implicit_interior_and_exterior" kindref="member">fig__Periodic_3_mesh_3Periodic_implicit_interior_and_exterior</ref> A periodic mesh (4 copies, left) of the same implicit function as in <ref refid="index_1fig__Periodic_3_mesh_3Periodic_implicit_shape" kindref="member">fig__Periodic_3_mesh_3Periodic_implicit_shape</ref>), where both sides of the isosurface are now meshed. On the right, a cut view.  <linebreak/>
</para></sect3>
</sect2>
<sect2 id="index_1Periodic_3_mesh_3MeshingMultipleDomains">
<title>Meshing Multiple Domains</title>
<para>The following code produces a 3D periodic mesh for a domain consisting of a combination of the two implicit functions used in the previous example: a sphere is encompassed within the implicit domain of <ref refid="index_1fig__Periodic_3_mesh_3Periodic_implicit_shape" kindref="member">fig__Periodic_3_mesh_3Periodic_implicit_shape</ref>. The class <computeroutput><ref refid="classCGAL_1_1Implicit__multi__domain__to__labeling__function__wrapper" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">Implicit_multi_domain_to_labeling_function_wrapper</ref></computeroutput> is used as model of <computeroutput><ref refid="classImplicitFunction" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Surface_mesher.tag">ImplicitFunction</ref></computeroutput>, required by the class <computeroutput><ref refid="classCGAL_1_1Labeled__mesh__domain__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">Labeled_mesh_domain_3</ref></computeroutput>. The set of subdomains is given by a vector of vector of signs. Each subdomain corresponds to a sign vector <computeroutput>[s1, s2, ..., sn]</computeroutput>, where <computeroutput>si</computeroutput> is the sign of the function <computeroutput>fi(p)</computeroutput> at a point <computeroutput>p</computeroutput> of the subdomain. <ref refid="index_1fig__Periodic_3_mesh_3Periodic_multi_domain" kindref="member">fig__Periodic_3_mesh_3Periodic_multi_domain</ref> shows a view and a cut view of the resulting mesh.</para><para><linebreak/>
<bold>File</bold> <ref refid="Periodic_3_mesh_3_2mesh_implicit_multi_domain_8cpp-example" kindref="compound">Periodic_3_mesh_3/mesh_implicit_multi_domain.cpp</ref> <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Periodic_3_mesh_3/config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_inexact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/make_periodic_3_mesh_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Periodic_3_mesh_3/IO/File_medit.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Periodic_3_mesh_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Periodic_3_function_wrapper.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Implicit_to_labeling_function_wrapper.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Labeled_mesh_domain_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_complex_3_in_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_criteria_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/number_type_config.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>CGAL_PI</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Kernel</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Exact_predicates_inexact_constructions_kernel</ref><sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::FT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FT;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Point_3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Iso_cuboid_3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iso_cuboid;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Domain</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>FT<sp/>(*Function)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point&amp;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>wrapper<sp/>is<sp/>needed<sp/>to<sp/>make<sp/>&apos;sphere_function&apos;<sp/>periodic.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Periodic__3__function__wrapper" kindref="compound">CGAL::Periodic_3_function_wrapper&lt;Function, K&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/>Periodic_function;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Implicit__multi__domain__to__labeling__function__wrapper" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">CGAL::Implicit_multi_domain_to_labeling_function_wrapper&lt;Periodic_function&gt;</ref><sp/>Multi_domain_wrapper;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Labeled__mesh__domain__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">CGAL::Labeled_mesh_domain_3&lt;K&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Periodic_mesh_domain;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Triangulation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">CGAL::Periodic_3_mesh_triangulation_3&lt;Periodic_mesh_domain&gt;::type</ref><sp/><sp/>Tr;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__complex__3__in__triangulation__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">CGAL::Mesh_complex_3_in_triangulation_3&lt;Tr&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C3t3;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__criteria__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">CGAL::Mesh_criteria_3&lt;Tr&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Periodic_mesh_criteria;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>avoid<sp/>verbose<sp/>function<sp/>and<sp/>named<sp/>parameters<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceCGAL_1_1parameters" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">CGAL::parameters</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implicit<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">FT<sp/>sphere_function(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point&amp;<sp/>p)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__squared__distance__grp_1ga1ff73525660a052564d33fbdd61a4f71" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::squared_distance</ref>(p,<sp/>Point(0.5,<sp/>0.5,<sp/>0.5))<sp/>-<sp/>0.15;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">FT<sp/>schwarz_p(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point&amp;<sp/>p)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FT<sp/>x2<sp/>=<sp/>std::cos(<sp/>p.x()<sp/>*<sp/>2<sp/>*<sp/>CGAL_PI<sp/>),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y2<sp/>=<sp/>std::cos(<sp/>p.y()<sp/>*<sp/>2<sp/>*<sp/>CGAL_PI<sp/>),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z2<sp/>=<sp/>std::cos(<sp/>p.z()<sp/>*<sp/>2<sp/>*<sp/>CGAL_PI<sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x2<sp/>+<sp/>y2<sp/>+<sp/>z2;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>domain_size<sp/>=<sp/>(argc<sp/>&gt;<sp/>1)<sp/>?<sp/>atoi(argv[1])<sp/>:<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number_of_copies_in_output<sp/>=<sp/>(argc<sp/>&gt;<sp/>2)<sp/>?<sp/>atoi(argv[2])<sp/>:<sp/>4;<sp/></highlight><highlight class="comment">//<sp/>can<sp/>be<sp/>1,<sp/>2,<sp/>4,<sp/>or<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Iso_cuboid<sp/>canonical_cube(0,<sp/>0,<sp/>0,<sp/>domain_size,<sp/>domain_size,<sp/>domain_size);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;Periodic_function&gt;<sp/>funcs;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>funcs.push_back(Periodic_function(&amp;schwarz_p,<sp/>canonical_cube));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>funcs.push_back(Periodic_function(&amp;sphere_function,<sp/>canonical_cube));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>vector<sp/>of<sp/>vectors<sp/>of<sp/>sign<sp/>is<sp/>passed<sp/>as<sp/>a<sp/>vector<sp/>of<sp/>strings<sp/>(since<sp/>a<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>a<sp/>vector<sp/>of<sp/>chars)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>vps;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vps.push_back(</highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vps.push_back(</highlight><highlight class="stringliteral">&quot;-+&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Multi_domain_wrapper<sp/>multi_domain_function(funcs,<sp/>vps);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Periodic_mesh_domain<sp/>domain(multi_domain_function,<sp/>canonical_cube);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Periodic_mesh_criteria<sp/>criteria(facet_angle<sp/>=<sp/>30,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>facet_size<sp/>=<sp/>0.04,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>facet_distance<sp/>=<sp/>0.025,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell_radius_edge_ratio<sp/>=<sp/>2.,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell_size<sp/>=<sp/>0.04);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mesh<sp/>generation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>C3t3<sp/>c3t3<sp/>=<sp/>CGAL::make_periodic_3_mesh_3&lt;C3t3&gt;(domain,<sp/>criteria);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Output</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::ofstream<sp/>medit_file(</highlight><highlight class="stringliteral">&quot;output_multi_domain.mesh&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>CGAL::output_periodic_mesh_to_medit&lt;C3t3&gt;(medit_file,<sp/>c3t3,<sp/>number_of_copies_in_output,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*do<sp/>not<sp/>associate<sp/>different<sp/>colors<sp/>to<sp/>each<sp/>copy*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*do<sp/>not<sp/>rebind*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*show<sp/>patches*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;EXIT<sp/>SUCCESS&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><anchor id="index_1fig__Periodic_3_mesh_3Periodic_multi_domain"/><center> <image type="html" name="periodic_implicit_multi_domain.jpg"></image>
 </center>  <ref refid="index_1fig__Periodic_3_mesh_3Periodic_multi_domain" kindref="member">fig__Periodic_3_mesh_3Periodic_multi_domain</ref> A periodic mesh produced by a combination of implicit functions (with 8 copies, left). Cut view without (middle) and with (right) the internal tetrahedra.  <linebreak/>
</para></sect2>
<sect2 id="index_1Periodic_3_mesh_3Optimizers">
<title>Tuning Mesh Optimization</title>
<para>In the previous examples, the mesh generation is launched through a call <computeroutput><ref refid="group__PkgPeriodic__3__mesh__3Functions_1ga0b7d3bf3e957fbf8ed46f9ed139502b5" kindref="member">make_periodic_3_mesh_3()</ref></computeroutput> with a minimal number of parameters. In such cases, the default optimization strategy is applied: after the Delaunay refinement process two optimization steps are performed, a perturbation and a sliver exudation. The following example shows how to enable and disable the various optimization methods. <ref refid="index_1fig__Periodic_3_mesh_3Periodic_multi_domain" kindref="member">fig__Periodic_3_mesh_3Periodic_multi_domain</ref> shows the resulting periodic mesh before and after optimizations.</para><para><linebreak/>
<bold>File</bold> <ref refid="Periodic_3_mesh_3_2mesh_implicit_shape_with_optimizers_8cpp-example" kindref="compound">Periodic_3_mesh_3/mesh_implicit_shape_with_optimizers.cpp</ref> <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Periodic_3_mesh_3/config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_inexact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/make_periodic_3_mesh_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/optimize_periodic_3_mesh_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Periodic_3_mesh_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Periodic_3_mesh_3/IO/File_medit.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Labeled_mesh_domain_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_complex_3_in_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_criteria_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/number_type_config.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>CGAL_PI</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Exact_predicates_inexact_constructions_kernel</ref><sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::FT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FT;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Point_3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Iso_cuboid_3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iso_cuboid;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Domain</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>FT<sp/>(Function)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point&amp;);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Labeled__mesh__domain__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">CGAL::Labeled_mesh_domain_3&lt;K&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Periodic_mesh_domain;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Triangulation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">CGAL::Periodic_3_mesh_triangulation_3&lt;Periodic_mesh_domain&gt;::type</ref><sp/>Tr;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__complex__3__in__triangulation__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">CGAL::Mesh_complex_3_in_triangulation_3&lt;Tr&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C3t3;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__criteria__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">CGAL::Mesh_criteria_3&lt;Tr&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Periodic_mesh_criteria;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>avoid<sp/>verbose<sp/>function<sp/>and<sp/>named<sp/>parameters<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceCGAL_1_1parameters" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">CGAL::parameters</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implicit<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">FT<sp/>double_p(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point&amp;<sp/>p)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FT<sp/>cx<sp/>=<sp/>std::cos(2<sp/>*<sp/>CGAL_PI<sp/>*<sp/>p.x()),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cy<sp/>=<sp/>std::cos(2<sp/>*<sp/>CGAL_PI<sp/>*<sp/>p.y()),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cz<sp/>=<sp/>std::cos(2<sp/>*<sp/>CGAL_PI<sp/>*<sp/>p.z());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FT<sp/>c2x<sp/>=<sp/>std::cos(4<sp/>*<sp/>CGAL_PI<sp/>*<sp/>p.x()),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c2y<sp/>=<sp/>std::cos(4<sp/>*<sp/>CGAL_PI<sp/>*<sp/>p.y()),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c2z<sp/>=<sp/>std::cos(4<sp/>*<sp/>CGAL_PI<sp/>*<sp/>p.z());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.5<sp/>*<sp/>(cx*cy<sp/>+<sp/>cy*cz<sp/>+<sp/>cz*cx)<sp/>+<sp/>0.2<sp/>*<sp/>(c2x<sp/>+<sp/>c2y<sp/>+<sp/>c2z);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;int&apos;<sp/>because<sp/>the<sp/>&apos;double_p&apos;<sp/>function<sp/>is<sp/>periodic<sp/>over<sp/>the<sp/>domain<sp/>only<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>length<sp/>of<sp/>the<sp/>side<sp/>of<sp/>the<sp/>domain<sp/>is<sp/>an<sp/>integer</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>domain_size<sp/>=<sp/>(argc<sp/>&gt;<sp/>1)<sp/>?<sp/>atoi(argv[1])<sp/>:<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number_of_copies_in_output<sp/>=<sp/>(argc<sp/>&gt;<sp/>2)<sp/>?<sp/>atoi(argv[2])<sp/>:<sp/>8;<sp/></highlight><highlight class="comment">//<sp/>can<sp/>be<sp/>1,<sp/>2,<sp/>4,<sp/>or<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Iso_cuboid<sp/>canonical_cube(0,<sp/>0,<sp/>0,<sp/>domain_size,<sp/>domain_size,<sp/>domain_size);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>there<sp/>is<sp/>no<sp/>need<sp/>for<sp/>periodicity...<sp/>?</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Periodic_mesh_domain<sp/>domain<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Periodic_mesh_domain::create_implicit_mesh_domain(double_p,<sp/>canonical_cube);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Periodic_mesh_criteria<sp/>criteria(facet_angle<sp/>=<sp/>30,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>facet_size<sp/>=<sp/>0.05<sp/>*<sp/>domain_size,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>facet_distance<sp/>=<sp/>0.025<sp/>*<sp/>domain_size,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell_radius_edge_ratio<sp/>=<sp/>2.,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell_size<sp/>=<sp/>0.05);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mesh<sp/>generation<sp/>with<sp/>optimizers</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>C3t3<sp/>c3t3<sp/>=<sp/>CGAL::make_periodic_3_mesh_3&lt;C3t3&gt;(domain,<sp/>criteria,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__PkgMesh__3Parameters_1gafbecfd22651a08e6812d8a5ad9b49852" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">odt</ref>(convergence=0.03,<sp/>freeze_bound=0.02,<sp/>time_limit=30),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__PkgMesh__3Parameters_1gaa7254c80bba62400f43f1e49506b975a" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">lloyd</ref>(max_iteration_number=10),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__PkgMesh__3Parameters_1gaedf18f7f3c4647ec5fce5d67e435757a" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">perturb</ref>(sliver_bound=10,<sp/>time_limit=30),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__PkgMesh__3Parameters_1ga16694b09a2acc8ab3f26b7d57633ccb0" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">exude</ref>(sliver_bound=10,<sp/>time_limit=0));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::ofstream<sp/>medit_file(</highlight><highlight class="stringliteral">&quot;output_implicit_shape_optimized.mesh&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgPeriodic__3__mesh__3IOFunctions_1ga22e9a84d23dea5461571db65a2eb27a5" kindref="member">CGAL::output_periodic_mesh_to_medit</ref>(medit_file,<sp/>c3t3);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Below,<sp/>the<sp/>mesh<sp/>generation<sp/>and<sp/>the<sp/>optimizations<sp/>are<sp/>done<sp/>in<sp/>several<sp/>calls</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>C3t3<sp/>c3t3_bis<sp/>=<sp/>CGAL::make_periodic_3_mesh_3&lt;C3t3&gt;(domain,<sp/>criteria,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__PkgMesh__3Parameters_1ga1d041e8dbde3860cde3c20107225ecb1" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">no_odt</ref>(),<sp/><ref refid="group__PkgMesh__3Parameters_1ga6abfd3773eeb47d88ce6cffb91f14d2f" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">no_lloyd</ref>(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__PkgMesh__3Parameters_1ga5714d10decd9eecd30997572b785e03b" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">no_perturb</ref>(),<sp/><ref refid="group__PkgMesh__3Parameters_1ga0b79c473082a4ec2a45ed1497f3ac873" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">no_exude</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::ofstream<sp/>medit_file_bis(</highlight><highlight class="stringliteral">&quot;output_implicit_shape_non-optimized.mesh&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgPeriodic__3__mesh__3IOFunctions_1ga22e9a84d23dea5461571db65a2eb27a5" kindref="member">CGAL::output_periodic_mesh_to_medit</ref>(medit_file_bis,<sp/>c3t3_bis);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Now,<sp/>call<sp/>each<sp/>optimizer<sp/>with<sp/>its<sp/>global<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgPeriodic__3__mesh__3Functions_1ga98171a3e9d5208454d13cb52b8815737" kindref="member">CGAL::odt_optimize_periodic_3_mesh_3</ref>(c3t3_bis,<sp/>domain,<sp/>convergence=0.03,<sp/>freeze_bound=0.02,<sp/>time_limit=30);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgPeriodic__3__mesh__3Functions_1gad04cbbb510f43fbc760c95e1b2ac170f" kindref="member">CGAL::lloyd_optimize_periodic_3_mesh_3</ref>(c3t3_bis,<sp/>domain,<sp/>max_iteration_number=10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgPeriodic__3__mesh__3Functions_1ga423a8902ca11f0f01bb30aa5344fda55" kindref="member">CGAL::perturb_periodic_3_mesh_3</ref>(c3t3_bis,<sp/>domain,<sp/>sliver_bound=10,<sp/>time_limit=30);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgPeriodic__3__mesh__3Functions_1ga3c195958b87a6e501b37d10f29f0c0a8" kindref="member">CGAL::exude_periodic_3_mesh_3</ref>(c3t3_bis,<sp/>sliver_bound=10,<sp/>time_limit=0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::ofstream<sp/>medit_file_ter(</highlight><highlight class="stringliteral">&quot;output_implicit_shape_two_steps.mesh&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgPeriodic__3__mesh__3IOFunctions_1ga22e9a84d23dea5461571db65a2eb27a5" kindref="member">CGAL::output_periodic_mesh_to_medit</ref>(medit_file_ter,<sp/>c3t3_bis,<sp/>number_of_copies_in_output);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;EXIT<sp/>SUCCESS&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
</programlisting></para><para><anchor id="index_1fig__Periodic_3_mesh_3Periodic_optimizers"/><center> <image type="html" name="periodic_implicit_optimizers.png"></image>
 </center>  <ref refid="index_1fig__Periodic_3_mesh_3Periodic_optimizers" kindref="member">fig__Periodic_3_mesh_3Periodic_optimizers</ref> Compared effect of a mesh pre- and post-optimization using all available optimizers. The numbers under the histograms give the measure in degrees of the smallest and biggest dihedral angles in the mesh.  <linebreak/>
</para></sect2>
<sect2 id="index_1Periodic_3_mesh_3MeshingDomainswithSharpFeatures">
<title>Meshing Domains with Sharp Features</title>
<para>The periodic mesh generator currently operates on domains described by one or multiple implicit functions. Sharp features to be preserved must then be explicitly specified by hand by the user, using the mesh domain class <computeroutput><ref refid="classCGAL_1_1Mesh__domain__with__polyline__features__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">CGAL::Mesh_domain_with_polyline_features_3</ref></computeroutput> and its functions <computeroutput>add_corners()</computeroutput> and <computeroutput>add_features()</computeroutput>. These functions allow to specify curves (as a polyline <ndash/> a list of points with two consecutive points forming a segment of the curve) and corners which should appear in the final mesh. Note that the discretization of the specified curves might change: for example, a curve might be subdivided in smaller segments or simplified in larger segments, but the prescribed geometry will still be present in the final mesh.</para><para>To ensure the good protection of features, some requirements are put on the curves and corners that are specified by the user:<itemizedlist>
<listitem><para>A corner can only belong to a curve if it is an endpoint of that curve.</para></listitem><listitem><para>A curve cannot self-intersect, except at its endpoint (it then forms a so-called <computeroutput>cycle</computeroutput>).</para></listitem><listitem><para>Two curves cannot intersect, except at a common endpoint.</para></listitem></itemizedlist>
</para><para><simplesect kind="warning"><para>For conveniency, curves and corners do not need to be restricted to the canonical cube, but users should be mindful that curves and corners will exist in all periodic copies and the requirements described above must be satisfied. For example, if considering the unit cube as canonical cube, it is not valid to add the segment <computeroutput>(2,2,2)--(3,3,3)</computeroutput> as feature and the point <computeroutput>(1.5, 1.5, 1.5)</computeroutput> as corner: once the periodicity is taken in account, the point is actually the middle of the segment.</para></simplesect>
</para><sect3 id="index_1Periodic_3_mesh_3ConeWithSharpFeatures">
<title>Example of a Cone-like Periodic Domain</title>
<para>The example below uses two different types of protecting features: a cycle to protect the base of the cone, and a corner at the apex of a cone, which ensures that the apex will appear in the mesh. <ref refid="index_1fig__Periodic_3_mesh_3Periodic_protection" kindref="member">fig__Periodic_3_mesh_3Periodic_protection</ref> shows the comparison between the same domain meshed with the same criteria when protection is disabled and enabled.</para><para>Note the use of a more complex intrinsically non-periodic implicit function as input domain.</para><para><linebreak/>
<bold>File</bold> <ref refid="Periodic_3_mesh_3_2mesh_implicit_shape_with_features_8cpp-example" kindref="compound">Periodic_3_mesh_3/mesh_implicit_shape_with_features.cpp</ref> <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Periodic_3_mesh_3/config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_inexact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/make_periodic_3_mesh_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Periodic_3_mesh_3/IO/File_medit.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Periodic_3_mesh_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Periodic_3_function_wrapper.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Labeled_mesh_domain_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_complex_3_in_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_criteria_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_domain_with_polyline_features_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Kernel</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Exact_predicates_inexact_constructions_kernel</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Domain</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::FT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FT;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Point_3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Iso_cuboid_3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iso_cuboid;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>FT<sp/>(Function)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point&amp;);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Periodic__3__function__wrapper" kindref="compound">CGAL::Periodic_3_function_wrapper&lt;Function, K&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Periodic_function;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__domain__with__polyline__features__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">CGAL::Mesh_domain_with_polyline_features_3&lt;CGAL::Labeled_mesh_domain_3&lt;K&gt;</ref><sp/>&gt;<sp/>Periodic_mesh_domain;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Polyline</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;Point&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Polyline_3;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::list&lt;Polyline_3&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Polylines;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Triangulation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">CGAL::Periodic_3_mesh_triangulation_3&lt;Periodic_mesh_domain&gt;::type</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tr;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__complex__3__in__triangulation__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">CGAL::Mesh_complex_3_in_triangulation_3</ref>&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tr,<sp/>Periodic_mesh_domain::Corner_index,<sp/>Periodic_mesh_domain::Curve_index&gt;<sp/><sp/>C3t3;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__criteria__3" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">CGAL::Mesh_criteria_3&lt;Tr&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Periodic_mesh_criteria;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>avoid<sp/>verbose<sp/>function<sp/>and<sp/>named<sp/>parameters<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceCGAL_1_1parameters" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">CGAL::parameters</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implicit<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FT<sp/>cx<sp/>=<sp/>0.51,<sp/>cy<sp/>=<sp/>0.51,<sp/>cz<sp/>=<sp/>0.5;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FT<sp/>scale<sp/>=<sp/>0.9;</highlight></codeline>
<codeline><highlight class="normal">FT<sp/>cone_function(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point&amp;<sp/>p)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FT<sp/>x<sp/>=<sp/>p.x(),<sp/>y<sp/>=<sp/>p.y(),<sp/>z<sp/>=<sp/>p.z();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((x-cx)*(x-cx)<sp/>+<sp/>(y-cy)*(y-cy))<sp/>&gt;<sp/>scale<sp/>*<sp/>(z-cz)*(z-cz))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/></highlight><highlight class="comment">//<sp/>outside</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;<sp/></highlight><highlight class="comment">//<sp/>inside</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>obtain<sp/>a<sp/>good<sp/>looking<sp/>mesh<sp/>at<sp/>the<sp/>base<sp/>of<sp/>the<sp/>cone,<sp/>we<sp/>protect<sp/>the<sp/>base<sp/>circle</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cone_polylines(Polylines&amp;<sp/>polylines)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FT<sp/>z<sp/>=<sp/>0.;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FT<sp/>radius_at_z<sp/>=<sp/>CGAL::sqrt(scale<sp/>*<sp/>cz<sp/>*<sp/>cz);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Polyline_3<sp/>polyline;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;360;<sp/>++i)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>polyline.push_back(Point(cx<sp/>+<sp/>radius_at_z<sp/>*<sp/>std::sin(i*CGAL_PI/180),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cy<sp/>+<sp/>radius_at_z<sp/>*<sp/>std::cos(i*CGAL_PI/180),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>polyline.push_back(polyline.front());<sp/></highlight><highlight class="comment">//<sp/>close<sp/>the<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>polylines.push_back(polyline);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number_of_copies_in_output<sp/>=<sp/>(argc<sp/>&gt;<sp/>1)<sp/>?<sp/>atoi(argv[1])<sp/>:<sp/>8;<sp/></highlight><highlight class="comment">//<sp/>can<sp/>be<sp/>1,<sp/>2,<sp/>4,<sp/>or<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Domain</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>domain_size<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Iso_cuboid<sp/>canonical_cube(0,<sp/>0,<sp/>0,<sp/>domain_size,<sp/>domain_size,<sp/>domain_size);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Periodic_mesh_domain<sp/>domain<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Periodic_mesh_domain::create_implicit_mesh_domain(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Periodic_function(cone_function,<sp/>canonical_cube),<sp/>canonical_cube);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mesh<sp/>criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Periodic_mesh_criteria<sp/>criteria(edge_size<sp/>=<sp/>0.02<sp/>*<sp/>domain_size,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>facet_angle<sp/>=<sp/>0.05<sp/>*<sp/>domain_size,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>facet_size<sp/>=<sp/>0.02<sp/>*<sp/>domain_size,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell_radius_edge_ratio<sp/>=<sp/>2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell_size<sp/>=<sp/>0.5);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>features<sp/>that<sp/>we<sp/>want<sp/>to<sp/>preserve</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Polylines<sp/>polylines;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cone_polylines(polylines);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Insert<sp/>the<sp/>features<sp/>in<sp/>the<sp/>domain</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>domain.add_features(polylines.begin(),<sp/>polylines.end());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>corner<sp/>to<sp/>make<sp/>sure<sp/>the<sp/>apex<sp/>of<sp/>the<sp/>cone<sp/>is<sp/>present<sp/>in<sp/>the<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>domain.add_corner(Point(0.51,<sp/>0.51,<sp/>0.5));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mesh<sp/>generation<sp/>WITHOUT<sp/>feature<sp/>preservation<sp/>(and<sp/>no<sp/>optimizers)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>C3t3<sp/>c3t3<sp/>=<sp/>CGAL::make_periodic_3_mesh_3&lt;C3t3&gt;(domain,<sp/>criteria,<sp/><ref refid="group__PkgMesh__3Parameters_1gaa3eb2cb65200b0331ef9d5f14b4a0535" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">no_features</ref>(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__PkgMesh__3Parameters_1ga0b79c473082a4ec2a45ed1497f3ac873" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">no_exude</ref>(),<sp/><ref refid="group__PkgMesh__3Parameters_1ga5714d10decd9eecd30997572b785e03b" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">no_perturb</ref>());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::ofstream<sp/>medit_file(</highlight><highlight class="stringliteral">&quot;output_implicit_shape_without_protection.mesh&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgPeriodic__3__mesh__3IOFunctions_1ga22e9a84d23dea5461571db65a2eb27a5" kindref="member">CGAL::output_periodic_mesh_to_medit</ref>(medit_file,<sp/>c3t3,<sp/>number_of_copies_in_output);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mesh<sp/>generation<sp/>WITH<sp/>feature<sp/>preservation<sp/>(and<sp/>no<sp/>optimizers)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>C3t3<sp/>c3t3_bis<sp/>=<sp/>CGAL::make_periodic_3_mesh_3&lt;C3t3&gt;(domain,<sp/>criteria,<sp/><ref refid="group__PkgMesh__3Parameters_1ga0a990b28d55157c62d4bfd2624d408af" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">features</ref>(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__PkgMesh__3Parameters_1ga0b79c473082a4ec2a45ed1497f3ac873" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">no_exude</ref>(),<sp/><ref refid="group__PkgMesh__3Parameters_1ga5714d10decd9eecd30997572b785e03b" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">no_perturb</ref>());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::ofstream<sp/>medit_file_bis(</highlight><highlight class="stringliteral">&quot;output_implicit_shape_with_protection.mesh&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgPeriodic__3__mesh__3IOFunctions_1ga22e9a84d23dea5461571db65a2eb27a5" kindref="member">CGAL::output_periodic_mesh_to_medit</ref>(medit_file_bis,<sp/>c3t3_bis,<sp/>number_of_copies_in_output);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;EXIT<sp/>SUCCESS&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><anchor id="index_1fig__Periodic_3_mesh_3Periodic_protection"/><center> <image type="html" name="periodic_implicit_protection.jpg"></image>
 </center>  <ref refid="index_1fig__Periodic_3_mesh_3Periodic_protection" kindref="member">fig__Periodic_3_mesh_3Periodic_protection</ref> A periodic mesh obtained with a cone-like periodic implicit function (8 copies are drawn). The base and the apex of the cone are badly approximated when protection is unused (left). Using protection, we obtain a faithful approximation. (Facets seemingly disconnected from other facets of the same color are due to the fact that a single copy of the mesh does not necessarily form a visually pleasing mesh by itself; see Section <ref refid="index_1Periodic_3_mesh_3SubMultipleCopies" kindref="member">Visualizing Multiple Copies of a Periodic Mesh</ref> for more details.)  <linebreak/>
</para></sect3>
<sect3 id="index_1Periodic_3_mesh_3InfiniteFeatures">
<title>Example of Protecting Curves Extending Continuously Over Multiple Periodic Copies</title>
<para>It is possible to prescribe features that will, due to periodicity, form a continuous polyline that extends infinitely in space. A simple example of such occurrence is the segment <computeroutput>(0,0,0) -- (1,1,1)</computeroutput> when considering the unit cube as canonical cube. <ref refid="index_1fig__Periodic_3_mesh_3Periodic_protection" kindref="member">fig__Periodic_3_mesh_3Periodic_protection</ref> shows an implicit function describing a square-based prism such that the axis of the prism is the (Oz) axis. (The prism is thus &apos;cut&apos; into 4 pieces when considered within a single copy of the periodic space.) The canonical cube is the unit cube and the following polylines have been specified to protect edges: <programlisting><codeline><highlight class="normal">//<sp/>These<sp/>are<sp/>four<sp/>vertical<sp/>edges<sp/>(orthogonal<sp/>to<sp/>xOy),<sp/>strictly<sp/>in<sp/>the<sp/>domain.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>They<sp/>correspond<sp/>to<sp/>the<sp/>four<sp/>sharp<sp/>edges<sp/>of<sp/>the<sp/>prism.</highlight></codeline>
<codeline><highlight class="normal">LV0:<sp/>(<sp/>0.3,<sp/><sp/>0.3,<sp/>-1)<sp/>--<sp/>(<sp/>0.3,<sp/><sp/>0.3,<sp/>0)<sp/>//<sp/>canonically,<sp/>(0.3,<sp/>0.3,<sp/>0)<sp/>--<sp/>(0.3,<sp/>0.3,<sp/>1)</highlight></codeline>
<codeline><highlight class="normal">LV1:<sp/>(<sp/>1.7,<sp/><sp/>1.7,<sp/><sp/>2)<sp/>--<sp/>(<sp/>1.7,<sp/><sp/>1.7,<sp/>3)<sp/>//<sp/>canonically,<sp/>(0.7,<sp/>0.7,<sp/>0)<sp/>--<sp/>(0.7,<sp/>0.7,<sp/>1)</highlight></codeline>
<codeline><highlight class="normal">LV2:<sp/>(<sp/>0.7,<sp/><sp/>0.3,<sp/><sp/>4)<sp/>--<sp/>(<sp/>0.7,<sp/><sp/>0.3,<sp/>5)<sp/>//<sp/>canonically,<sp/>(0.7,<sp/>0.3,<sp/>0)<sp/>--<sp/>(0.7,<sp/>0.3,<sp/>1)</highlight></codeline>
<codeline><highlight class="normal">LV3:<sp/>(-0.7,<sp/>-0.3,<sp/><sp/>6)<sp/>--<sp/>(-0.7,<sp/>-0.3,<sp/>7)<sp/>//<sp/>canonically,<sp/>(0.3,<sp/>0.7,<sp/>0)<sp/>--<sp/>(0.3,<sp/>0.7,<sp/>1)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>These<sp/>are<sp/>four<sp/>vertical<sp/>edges<sp/>(orthogonal<sp/>to<sp/>xOy)<sp/>on<sp/>the<sp/>border<sp/>of<sp/>the<sp/>domain.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>prism<sp/>does<sp/>not<sp/>intrinsically<sp/>possess<sp/>a<sp/>sharp<sp/>feature<sp/>at<sp/>these<sp/>locations;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>rather,<sp/>these<sp/>edges<sp/>are<sp/>protected<sp/>to<sp/>artificially<sp/>create<sp/>features<sp/>on<sp/>the<sp/>border<sp/>of<sp/>the<sp/>domain.</highlight></codeline>
<codeline><highlight class="normal">LV4:<sp/>(0.3,<sp/>0,<sp/><sp/><sp/>0)<sp/>--<sp/>(0.3,<sp/>0,<sp/><sp/><sp/>1)</highlight></codeline>
<codeline><highlight class="normal">LV5:<sp/>(0,<sp/><sp/><sp/>1.3,<sp/>0)<sp/>--<sp/>(0,<sp/><sp/><sp/>1.3,<sp/>1)<sp/>//<sp/>canonically,<sp/>(0.,<sp/><sp/>0.3,<sp/>0)<sp/>--<sp/>(0.,<sp/><sp/>0.3,<sp/>1)</highlight></codeline>
<codeline><highlight class="normal">LV6:<sp/>(0,<sp/><sp/><sp/>0.7,<sp/>0)<sp/>--<sp/>(0,<sp/><sp/><sp/>0.7,<sp/>1)</highlight></codeline>
<codeline><highlight class="normal">LV7:<sp/>(2.7,<sp/>2,<sp/><sp/><sp/>0)<sp/>--<sp/>(2.7,<sp/>2,<sp/><sp/><sp/>1)<sp/>//<sp/>canonically,<sp/>(0.7,<sp/>0.,<sp/><sp/>0)<sp/>--<sp/>(0.7,<sp/>0.,<sp/><sp/>1)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>These<sp/>are<sp/>four<sp/>horizontal<sp/>edges<sp/>(in<sp/>the<sp/>plane<sp/>xOy)<sp/>on<sp/>the<sp/>border<sp/>of<sp/>the<sp/>domain.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>As<sp/>the<sp/>last<sp/>four<sp/>polylines,<sp/>these<sp/>polylines<sp/>do<sp/>not<sp/>correspond<sp/>to<sp/>a<sp/>sharp<sp/>feature</highlight></codeline>
<codeline><highlight class="normal">//<sp/>on<sp/>the<sp/>prism,<sp/>but<sp/>are<sp/>rather<sp/>just<sp/>for<sp/>aesthetics.</highlight></codeline>
<codeline><highlight class="normal">//</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Note<sp/>that<sp/>these<sp/>polylines<sp/>cross<sp/>the<sp/>border<sp/>of<sp/>the<sp/>input<sp/>cube.</highlight></codeline>
<codeline><highlight class="normal">LH0:<sp/>(<sp/>0.3,<sp/><sp/>0.3,<sp/>0)<sp/>--<sp/>(<sp/>0.3,<sp/>-0.3,<sp/>0)</highlight></codeline>
<codeline><highlight class="normal">LH1:<sp/>(<sp/>0.3,<sp/>-0.3,<sp/>1)<sp/>--<sp/>(-0.3,<sp/>-0.3,<sp/>1)</highlight></codeline>
<codeline><highlight class="normal">LH2:<sp/>(-0.3,<sp/>-0.3,<sp/>2)<sp/>--<sp/>(-0.3,<sp/><sp/>0.3,<sp/>2)</highlight></codeline>
<codeline><highlight class="normal">LH3:<sp/>(-0.3,<sp/><sp/>0.3,<sp/>3)<sp/>--<sp/>(<sp/>0.3,<sp/><sp/>0.3,<sp/>3)</highlight></codeline>
</programlisting></para><para><anchor id="index_1fig__Periodic_3_mesh_3Periodic_protection_infinite"/><center> <image type="html" name="periodic_implicit_protection_bis.jpg"></image>
 </center>  <ref refid="index_1fig__Periodic_3_mesh_3Periodic_protection_infinite" kindref="member">fig__Periodic_3_mesh_3Periodic_protection_infinite</ref> A periodic mesh without (left) and with (right) sharp features protection.  <linebreak/>
</para></sect3>
</sect2>
<sect2 id="index_1Periodic_3_mesh_3ComplexExamples">
<title>Further Examples</title>
<para>Advanced use cases of the 3D mesh generator with implicit domains, its optimizers, and protection mechanisms can be found in Section <ref refid="index_1Mesh_3_section_examples" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">Examples</ref> of the package <ref refid="packages_1PkgMesh_3Summary" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">3D Mesh Generation</ref>.</para></sect2>
</sect1>
<sect1 id="index_1Periodic_3_mesh_3DesignAndImpl">
<title>Design and Implementation History</title>
<sect2 id="index_1Periodic_3_mesh_3TheoreticalFoundations">
<title>Theoretical Foundations</title>
<para>Theoretical foundations of periodic meshes are explained in detail in the package <ref refid="packages_1PkgPeriodic3Triangulation3Summary" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">3D Periodic Triangulations</ref>. For the theoretical foundations of the mesh generation process, see Section <ref refid="index_1Mesh_3TheoreticalFoundations" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Mesh_3.tag">Theoretical Foundations</ref> of the package <ref refid="packages_1PkgMesh_3Summary" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">3D Mesh Generation</ref>.</para></sect2>
<sect2 id="index_1Periodic_3_mesh_3ImplementationHistory">
<title>Implementation History</title>
<para>The work on this package started during the PhD thesis of Mikhail Bogdanov, advised by Monique Teillaud, which resulted in a first prototype.</para><para>From the beginning of 2014, most of the work was performed by Aymeric Pellé, in collaboration with Monique Teillaud. Their collaboration produced a first set of design and specifications <ref refid="citelist_1CITEREF_cgal:pt-rs-14" kindref="member">[6]</ref>.</para><para>This initial implementation was enhanced by Mael Rouxel-Labbé in 2017, in collaboration with Monique Teillaud, to provide a more robust implementation, integrate optimizations, handle 0- and 1-dimensional features, and publish the first version of this package. </para></sect2>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
