<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classVector" kind="class" language="C++" prot="public">
    <compoundname>Vector</compoundname>
    <includes local="no">Concepts/Vector.h</includes>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classVector_1a436d65a4512d10caee283e3ec3646f91" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type Vector::NT</definition>
        <argsstring></argsstring>
        <name>NT</name>
        <briefdescription>
<para>the ring type of the components. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Vector.h" line="21" column="1" bodyfile="Concepts/Vector.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classVector_1a563a636171881629c216b78e6f15d079" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type Vector::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
<para>the iterator type for accessing components. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Vector.h" line="26" column="1" bodyfile="Concepts/Vector.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classVector_1a8f86aa28f32530a0caa6a6aa6c80015b" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type Vector::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
<para>the const iterator type for accessing components. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Vector.h" line="32" column="1" bodyfile="Concepts/Vector.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classVector_1a6f80c73b5f18dcf3f8e36065bdc8b9e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Vector::Vector</definition>
        <argsstring>()</argsstring>
        <name>Vector</name>
        <briefdescription>
<para>creates an instance <computeroutput>v</computeroutput> of type <computeroutput><ref refid="classVector" kindref="compound">Vector</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Vector.h" line="43" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1a4cf3e7a7499c632160dd9e51e8d425b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Vector::Vector</definition>
        <argsstring>(int d)</argsstring>
        <name>Vector</name>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>creates an instance <computeroutput>v</computeroutput> of type <computeroutput><ref refid="classVector" kindref="compound">Vector</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>v</computeroutput> is initialized to a vector of dimension <formula id="6">$ d$</formula>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Vector.h" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1aad53c18c42d77948f920956a3739e2b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Vector::Vector</definition>
        <argsstring>(int d, NT x)</argsstring>
        <name>Vector</name>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="classVector_1a436d65a4512d10caee283e3ec3646f91" kindref="member">NT</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>creates an instance <computeroutput>v</computeroutput> of type <computeroutput><ref refid="classVector" kindref="compound">Vector</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>v</computeroutput> is initialized to a vector of dimension <formula id="6">$ d$</formula> with entries <computeroutput>x</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Vector.h" line="57" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1a310e50878d1672dc89ab0fba9617d843" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Forward_iterator</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Vector::Vector</definition>
        <argsstring>(Forward_iterator first, Forward_iterator last)</argsstring>
        <name>Vector</name>
        <param>
          <type>Forward_iterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>Forward_iterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>creates an instance <computeroutput>v</computeroutput> of type <computeroutput><ref refid="classVector" kindref="compound">Vector</ref></computeroutput>; <computeroutput>v</computeroutput> is initialized to the vector with entries <computeroutput>set [first,last)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>has <computeroutput>NT</computeroutput> as value type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Vector.h" line="66" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <memberdef kind="function" id="classVector_1ac5bc885e2912f02f7b0c403d969cf8c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Vector::dimension</definition>
        <argsstring>()</argsstring>
        <name>dimension</name>
        <briefdescription>
<para>returns the dimension of <computeroutput>v</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Vector.h" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1a9d992e1c8ffe3499475e33bca1c5d471" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Vector::is_zero</definition>
        <argsstring>()</argsstring>
        <name>is_zero</name>
        <briefdescription>
<para>returns true iff <computeroutput>v</computeroutput> is the zero vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Vector.h" line="82" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1a4c326e30f6899e30eb1dff3ccc362f23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classVector_1a436d65a4512d10caee283e3ec3646f91" kindref="member">NT</ref> &amp;</type>
        <definition>NT&amp; Vector::operator[]</definition>
        <argsstring>(int i)</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>returns the <formula id="34">$ i$</formula>-th component of <computeroutput>v</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><formula id="152">$ 0\le i \le v.dimension()-1$</formula>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Vector.h" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1ac8b05fd5b9849c13deb1ca5ccb7df237" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classVector_1a563a636171881629c216b78e6f15d079" kindref="member">iterator</ref></type>
        <definition>iterator Vector::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
<para>iterator to the first component. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Vector.h" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1a1e0bdb9b899215359ab5f33d1f7a2981" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classVector_1a563a636171881629c216b78e6f15d079" kindref="member">iterator</ref></type>
        <definition>iterator Vector::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
<para>iterator beyond the last component. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Vector.h" line="99" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1a20e75dc447ca6ba3e7da6b3d49321a59" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classVector_1a8f86aa28f32530a0caa6a6aa6c80015b" kindref="member">const_iterator</ref></type>
        <definition>const_iterator Vector::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
<para>iterator to the first component. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Vector.h" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1a46504cdd44572a8c09ad8009e9aedd14" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classVector_1a8f86aa28f32530a0caa6a6aa6c80015b" kindref="member">const_iterator</ref></type>
        <definition>const_iterator Vector::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
<para>iterator beyond the last component. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Vector.h" line="109" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1ad2163daa2807272ff12c85958e98d682" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classVector" kindref="compound">Vector</ref></type>
        <definition>Vector Vector::operator+</definition>
        <argsstring>(const Vector &amp;v1)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <briefdescription>
<para>Addition. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>v.dimension() == v1.dimension()</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Vector.h" line="117" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1a9a0db80b001d99ce89e83585135c25a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classVector" kindref="compound">Vector</ref></type>
        <definition>Vector Vector::operator-</definition>
        <argsstring>(const Vector &amp;v1)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <briefdescription>
<para>Subtraction. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>v.dimension() = v1.dimension()</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Vector.h" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1aff9b6a63f225c09ef87928bde9080610" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classVector_1a436d65a4512d10caee283e3ec3646f91" kindref="member">NT</ref></type>
        <definition>NT Vector::operator*</definition>
        <argsstring>(const Vector &amp;v1)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <briefdescription>
<para>Inner Product. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>v.dimension() = v1.dimension()</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Vector.h" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1aaa5f64a3756e6294c6070b3f7c9c3b33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classVector" kindref="compound">Vector</ref></type>
        <definition>Vector Vector::operator-</definition>
        <argsstring>()</argsstring>
        <name>operator-</name>
        <briefdescription>
<para>Negation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Vector.h" line="136" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1a14ea05ff971013faa674c60abcfac2a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classVector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector&amp; Vector::operator+=</definition>
        <argsstring>(const Vector &amp;v1)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <briefdescription>
<para>Addition plus assignment. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>v.dimension() == v1.dimension()</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Vector.h" line="143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1ac3d5f50fa594a2b11be776a88e15e25d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classVector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector&amp; Vector::operator-=</definition>
        <argsstring>(const Vector &amp;v1)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <briefdescription>
<para>Subtraction plus assignment. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>v.dimension() == v1.dimension()</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Vector.h" line="150" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1a783344c62da2db0ee97c122abf3d2627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classVector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector&amp; Vector::operator*=</definition>
        <argsstring>(const NT &amp;s)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="classVector_1a436d65a4512d10caee283e3ec3646f91" kindref="member">NT</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Scalar multiplication plus assignment. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Vector.h" line="156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1ac4b217c689731139658f6d899074e9b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classVector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector&amp; Vector::operator/=</definition>
        <argsstring>(const NT &amp;s)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="classVector_1a436d65a4512d10caee283e3ec3646f91" kindref="member">NT</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Scalar division plus assignment. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Vector.h" line="162" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1a0816042666dda53a188b9485e7452213" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classVector" kindref="compound">Vector</ref></type>
        <definition>Vector Vector::operator*</definition>
        <argsstring>(const NT &amp;r, const Vector &amp;v)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classVector_1a436d65a4512d10caee283e3ec3646f91" kindref="member">NT</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Component-wise multiplication with number <formula id="76">$ r$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Vector.h" line="167" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1a44c79b7e3b7284211c10cbb827eacdb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classVector" kindref="compound">Vector</ref></type>
        <definition>Vector Vector::operator*</definition>
        <argsstring>(const Vector &amp;v, const NT &amp;r)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classVector_1a436d65a4512d10caee283e3ec3646f91" kindref="member">NT</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Component-wise multiplication with number <formula id="76">$ r$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Vector.h" line="172" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An instance of data type <computeroutput><ref refid="classVector" kindref="compound">Vector</ref></computeroutput> is a vector of variables of number type <computeroutput>NT</computeroutput>. Together with the type <computeroutput><ref refid="classMatrix" kindref="compound">Matrix</ref></computeroutput> it realizes the basic operations of linear algebra. </para>    </briefdescription>
    <detaileddescription>
<para> </para>    </detaileddescription>
    <location file="Concepts/Vector.h" line="12" column="1" bodyfile="Concepts/Vector.h" bodystart="12" bodyend="176"/>
    <listofallmembers>
      <member refid="classVector_1ac8b05fd5b9849c13deb1ca5ccb7df237" prot="public" virt="non-virtual"><scope>Vector</scope><name>begin</name></member>
      <member refid="classVector_1a20e75dc447ca6ba3e7da6b3d49321a59" prot="public" virt="non-virtual"><scope>Vector</scope><name>begin</name></member>
      <member refid="classVector_1a8f86aa28f32530a0caa6a6aa6c80015b" prot="public" virt="non-virtual"><scope>Vector</scope><name>const_iterator</name></member>
      <member refid="classVector_1ac5bc885e2912f02f7b0c403d969cf8c1" prot="public" virt="non-virtual"><scope>Vector</scope><name>dimension</name></member>
      <member refid="classVector_1a1e0bdb9b899215359ab5f33d1f7a2981" prot="public" virt="non-virtual"><scope>Vector</scope><name>end</name></member>
      <member refid="classVector_1a46504cdd44572a8c09ad8009e9aedd14" prot="public" virt="non-virtual"><scope>Vector</scope><name>end</name></member>
      <member refid="classVector_1a9d992e1c8ffe3499475e33bca1c5d471" prot="public" virt="non-virtual"><scope>Vector</scope><name>is_zero</name></member>
      <member refid="classVector_1a563a636171881629c216b78e6f15d079" prot="public" virt="non-virtual"><scope>Vector</scope><name>iterator</name></member>
      <member refid="classVector_1a436d65a4512d10caee283e3ec3646f91" prot="public" virt="non-virtual"><scope>Vector</scope><name>NT</name></member>
      <member refid="classVector_1aff9b6a63f225c09ef87928bde9080610" prot="public" virt="non-virtual"><scope>Vector</scope><name>operator*</name></member>
      <member refid="classVector_1a0816042666dda53a188b9485e7452213" prot="public" virt="non-virtual"><scope>Vector</scope><name>operator*</name></member>
      <member refid="classVector_1a44c79b7e3b7284211c10cbb827eacdb5" prot="public" virt="non-virtual"><scope>Vector</scope><name>operator*</name></member>
      <member refid="classVector_1a783344c62da2db0ee97c122abf3d2627" prot="public" virt="non-virtual"><scope>Vector</scope><name>operator*=</name></member>
      <member refid="classVector_1ad2163daa2807272ff12c85958e98d682" prot="public" virt="non-virtual"><scope>Vector</scope><name>operator+</name></member>
      <member refid="classVector_1a14ea05ff971013faa674c60abcfac2a1" prot="public" virt="non-virtual"><scope>Vector</scope><name>operator+=</name></member>
      <member refid="classVector_1a9a0db80b001d99ce89e83585135c25a3" prot="public" virt="non-virtual"><scope>Vector</scope><name>operator-</name></member>
      <member refid="classVector_1aaa5f64a3756e6294c6070b3f7c9c3b33" prot="public" virt="non-virtual"><scope>Vector</scope><name>operator-</name></member>
      <member refid="classVector_1ac3d5f50fa594a2b11be776a88e15e25d" prot="public" virt="non-virtual"><scope>Vector</scope><name>operator-=</name></member>
      <member refid="classVector_1ac4b217c689731139658f6d899074e9b0" prot="public" virt="non-virtual"><scope>Vector</scope><name>operator/=</name></member>
      <member refid="classVector_1a4c326e30f6899e30eb1dff3ccc362f23" prot="public" virt="non-virtual"><scope>Vector</scope><name>operator[]</name></member>
      <member refid="classVector_1a6f80c73b5f18dcf3f8e36065bdc8b9e5" prot="public" virt="non-virtual"><scope>Vector</scope><name>Vector</name></member>
      <member refid="classVector_1a4cf3e7a7499c632160dd9e51e8d425b7" prot="public" virt="non-virtual"><scope>Vector</scope><name>Vector</name></member>
      <member refid="classVector_1aad53c18c42d77948f920956a3739e2b6" prot="public" virt="non-virtual"><scope>Vector</scope><name>Vector</name></member>
      <member refid="classVector_1a310e50878d1672dc89ab0fba9617d843" prot="public" virt="non-virtual"><scope>Vector</scope><name>Vector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
