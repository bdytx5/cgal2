<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Sphere__d" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Sphere_d</compoundname>
    <includes local="no">CGAL/Kernel_d/Sphere_d.h</includes>
    <templateparamlist>
      <param>
        <type>typename <ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classCGAL_1_1Sphere__d_1a5c0b709ea14dc1cf49b8088fe0aafe15" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Sphere_d&lt; Kernel &gt;::LA</definition>
        <argsstring></argsstring>
        <name>LA</name>
        <briefdescription>
<para>the linear algebra layer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel_d/Sphere_d.h" line="38" column="1" bodyfile="CGAL/Kernel_d/Sphere_d.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Sphere__d_1a5ae64d06825e1ec4b5729d2d1739f9ae" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Sphere_d&lt; Kernel &gt;::point_iterator</definition>
        <argsstring></argsstring>
        <name>point_iterator</name>
        <briefdescription>
<para>a read-only iterator for points defining the sphere. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel_d/Sphere_d.h" line="44" column="1" bodyfile="CGAL/Kernel_d/Sphere_d.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Sphere__d_1aca7e2a872a0e152913e38f96cb3ab393" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Sphere_d&lt; Kernel &gt;::Sphere_d</definition>
        <argsstring>()</argsstring>
        <name>Sphere_d</name>
        <briefdescription>
<para>introduces a variable <computeroutput>S</computeroutput> of type <computeroutput><ref refid="classCGAL_1_1Sphere__d" kindref="compound">Sphere_d</ref>&lt;<ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref>&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel_d/Sphere_d.h" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sphere__d_1a6d59a4c3fc42e3ee7822c54517ff4dd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>CGAL::Sphere_d&lt; Kernel &gt;::Sphere_d</definition>
        <argsstring>(int d, ForwardIterator first, ForwardIterator last)</argsstring>
        <name>Sphere_d</name>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>introduces a variable <computeroutput>S</computeroutput> of type <computeroutput><ref refid="classCGAL_1_1Sphere__d" kindref="compound">Sphere_d</ref>&lt;<ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref>&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>S</computeroutput> is initialized to the sphere through the points in <computeroutput>A = tuple [first,last)</computeroutput>.</para><para><simplesect kind="pre"><para><formula id="88">$A$</formula> consists of <formula id="89">$d+1$</formula> <formula id="90">$d$</formula>-dimensional points.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>has <computeroutput><ref refid="classCGAL_1_1Point__d" kindref="compound">Point_d</ref>&lt;<ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref>&gt;</computeroutput> as value type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel_d/Sphere_d.h" line="44" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <memberdef kind="function" id="classCGAL_1_1Sphere__d_1ad622d2d04e8ac1f620c36e3b25ee5046" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CGAL::Sphere_d&lt; Kernel &gt;::dimension</definition>
        <argsstring>()</argsstring>
        <name>dimension</name>
        <briefdescription>
<para>returns the dimension of the ambient space. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel_d/Sphere_d.h" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sphere__d_1a0afc0dc04171a277c229a7df5e679d85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Point__d" kindref="compound">Point_d</ref>&lt; <ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> &gt;</type>
        <definition>Point_d&lt;Kernel&gt; CGAL::Sphere_d&lt; Kernel &gt;::point</definition>
        <argsstring>(int i)</argsstring>
        <name>point</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>returns the <formula id="34">$ i$</formula>th defining point. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><formula id="91">$ 0 \le i \le dim $</formula> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel_d/Sphere_d.h" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sphere__d_1a84413276df4788abcb5f8d8f92592750" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Sphere__d_1a5ae64d06825e1ec4b5729d2d1739f9ae" kindref="member">point_iterator</ref></type>
        <definition>point_iterator CGAL::Sphere_d&lt; Kernel &gt;::points_begin</definition>
        <argsstring>()</argsstring>
        <name>points_begin</name>
        <briefdescription>
<para>returns an iterator pointing to the first defining point. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel_d/Sphere_d.h" line="91" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sphere__d_1aa7effce8dc037fe9bd077105b9d22b00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Sphere__d_1a5ae64d06825e1ec4b5729d2d1739f9ae" kindref="member">point_iterator</ref></type>
        <definition>point_iterator CGAL::Sphere_d&lt; Kernel &gt;::points_end</definition>
        <argsstring>()</argsstring>
        <name>points_end</name>
        <briefdescription>
<para>returns an iterator pointing beyond the last defining point. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel_d/Sphere_d.h" line="97" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sphere__d_1aebcbe3c205a998792f4a3ad804f8380a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Sphere_d&lt; Kernel &gt;::is_degenerate</definition>
        <argsstring>()</argsstring>
        <name>is_degenerate</name>
        <briefdescription>
<para>returns true iff the defining points are not full dimensional. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel_d/Sphere_d.h" line="103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sphere__d_1a1071e0a4f9d6f45f86bbef533bb7f998" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Sphere_d&lt; Kernel &gt;::is_legal</definition>
        <argsstring>()</argsstring>
        <name>is_legal</name>
        <briefdescription>
<para>returns true iff the set of defining points is legal. </para>        </briefdescription>
        <detaileddescription>
<para>A set of defining points is legal iff their orientation is non-zero or if they are all equal. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel_d/Sphere_d.h" line="110" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sphere__d_1a870b0ed243aa75f921b3b0b051f820a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Point__d" kindref="compound">Point_d</ref>&lt; <ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> &gt;</type>
        <definition>Point_d&lt;Kernel&gt; CGAL::Sphere_d&lt; Kernel &gt;::center</definition>
        <argsstring>()</argsstring>
        <name>center</name>
        <briefdescription>
<para>returns the center of <computeroutput>S</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>S</computeroutput> is legal. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel_d/Sphere_d.h" line="116" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sphere__d_1ad6402b3560a4d7c89e8531ff66aca1a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FT</type>
        <definition>FT CGAL::Sphere_d&lt; Kernel &gt;::squared_radius</definition>
        <argsstring>()</argsstring>
        <name>squared_radius</name>
        <briefdescription>
<para>returns the squared radius of the sphere. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>S</computeroutput> is legal. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel_d/Sphere_d.h" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sphere__d_1a10e9d92be370467747accb3bed0c92c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Orientation</ref></type>
        <definition>Orientation CGAL::Sphere_d&lt; Kernel &gt;::orientation</definition>
        <argsstring>()</argsstring>
        <name>orientation</name>
        <briefdescription>
<para>returns the orientation of <computeroutput>S</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel_d/Sphere_d.h" line="130" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sphere__d_1adb0876359790861163d4eb2a01d28f8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1ga5006dd2552d97fa577d81bd819c0f979" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Oriented_side</ref></type>
        <definition>Oriented_side CGAL::Sphere_d&lt; Kernel &gt;::oriented_side</definition>
        <argsstring>(const Point_d&lt; Kernel &gt; &amp;p)</argsstring>
        <name>oriented_side</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__d" kindref="compound">Point_d</ref>&lt; <ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>returns either the constant <computeroutput>ON_ORIENTED_BOUNDARY</computeroutput>, <computeroutput>ON_POSITIVE_SIDE</computeroutput>, or <computeroutput>ON_NEGATIVE_SIDE</computeroutput>, iff p lies on the boundary, properly on the positive side, or properly on the negative side of sphere, resp. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>S.dimension()==p.dimension()</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel_d/Sphere_d.h" line="142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sphere__d_1aaf3c458d451f0d3e5054d1f87e488b76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1gaf6030e89dadcc1f45369b0cdc5d9e111" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Bounded_side</ref></type>
        <definition>Bounded_side CGAL::Sphere_d&lt; Kernel &gt;::bounded_side</definition>
        <argsstring>(const Point_d&lt; Kernel &gt; &amp;p)</argsstring>
        <name>bounded_side</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__d" kindref="compound">Point_d</ref>&lt; <ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>ON_BOUNDED_SIDE</computeroutput>, <computeroutput>ON_BOUNDARY</computeroutput>, or <computeroutput>ON_UNBOUNDED_SIDE</computeroutput> iff p lies properly inside, on the boundary, or properly outside of sphere, resp. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>S.dimension()==p.dimension()</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel_d/Sphere_d.h" line="152" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sphere__d_1ac7b7a2ee32be0b2a97af951643979941" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Sphere_d&lt; Kernel &gt;::has_on_positive_side</definition>
        <argsstring>(const Point_d&lt; Kernel &gt; &amp;p)</argsstring>
        <name>has_on_positive_side</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__d" kindref="compound">Point_d</ref>&lt; <ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>S.oriented_side(p)==ON_POSITIVE_SIDE</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>S.dimension()==p.dimension()</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel_d/Sphere_d.h" line="160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sphere__d_1aae79081d86323b638f21cc4dc34566b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Sphere_d&lt; Kernel &gt;::has_on_negative_side</definition>
        <argsstring>(const Point_d&lt; Kernel &gt; &amp;p)</argsstring>
        <name>has_on_negative_side</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__d" kindref="compound">Point_d</ref>&lt; <ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>S.oriented_side(p)==ON_NEGATIVE_SIDE</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>S.dimension()==p.dimension()</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel_d/Sphere_d.h" line="168" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sphere__d_1aa6a4abb8b5024687f46ed07688ce814d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Sphere_d&lt; Kernel &gt;::has_on_boundary</definition>
        <argsstring>(const Point_d&lt; Kernel &gt; &amp;p)</argsstring>
        <name>has_on_boundary</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__d" kindref="compound">Point_d</ref>&lt; <ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>S.oriented_side(p)==ON_ORIENTED_BOUNDARY</computeroutput>, which is the same as <computeroutput>S.bounded_side(p)==ON_BOUNDARY</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>S.dimension()==p.dimension()</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel_d/Sphere_d.h" line="177" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sphere__d_1a6e20d81170e58ab7bcb0ce2b3cabca99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Sphere_d&lt; Kernel &gt;::has_on_bounded_side</definition>
        <argsstring>(const Point_d&lt; Kernel &gt; &amp;p)</argsstring>
        <name>has_on_bounded_side</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__d" kindref="compound">Point_d</ref>&lt; <ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>S.bounded_side(p)==ON_BOUNDED_SIDE</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>S.dimension()==p.dimension()</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel_d/Sphere_d.h" line="185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sphere__d_1af68af2fdc7f94b05edef2bd9add3fa11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Sphere_d&lt; Kernel &gt;::has_on_unbounded_side</definition>
        <argsstring>(const Point_d&lt; Kernel &gt; &amp;p)</argsstring>
        <name>has_on_unbounded_side</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__d" kindref="compound">Point_d</ref>&lt; <ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>S.bounded_side(p)==ON_UNBOUNDED_SIDE</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>S.dimension()==p.dimension()</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel_d/Sphere_d.h" line="193" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sphere__d_1af46273308ce3c278f7312be6dbbbdc57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Sphere__d" kindref="compound">Sphere_d</ref>&lt; <ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> &gt;</type>
        <definition>Sphere_d&lt;Kernel&gt; CGAL::Sphere_d&lt; Kernel &gt;::opposite</definition>
        <argsstring>()</argsstring>
        <name>opposite</name>
        <briefdescription>
<para>returns the sphere with the same center and squared radius as <computeroutput>S</computeroutput> but with opposite orientation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel_d/Sphere_d.h" line="200" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sphere__d_1aa851bfc30e0c3f5e2b1e90e59b08ac14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Sphere__d" kindref="compound">Sphere_d</ref>&lt; <ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> &gt;</type>
        <definition>Sphere_d&lt;Kernel&gt; CGAL::Sphere_d&lt; Kernel &gt;::operator+</definition>
        <argsstring>(const Vector_d&lt; Kernel &gt; &amp;v)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__d" kindref="compound">Vector_d</ref>&lt; <ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns the sphere translated by <computeroutput>v</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>S.dimension()==v.dimension()</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel_d/Sphere_d.h" line="208" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="related">
      <memberdef kind="function" id="classCGAL_1_1Sphere__d_1ad3dc610c7902c12a1820f8fca2515c5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool weak_equality</definition>
        <argsstring>(const Sphere_d&lt; Kernel &gt; &amp;S1, const Sphere_d&lt; Kernel &gt; &amp;S2)</argsstring>
        <name>weak_equality</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Sphere__d" kindref="compound">Sphere_d</ref>&lt; <ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> &gt; &amp;</type>
          <declname>S1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Sphere__d" kindref="compound">Sphere_d</ref>&lt; <ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> &gt; &amp;</type>
          <declname>S2</declname>
        </param>
        <briefdescription>
<para>Test for equality as unoriented spheres. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>S1.dimension()==S2.dimension()</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel_d/Sphere_d.h" line="219" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An instance <formula id="85">$ S$</formula> of the data type <computeroutput><ref refid="classCGAL_1_1Sphere__d" kindref="compound">Sphere_d</ref></computeroutput> is an oriented sphere in some <formula id="6">$ d$</formula>-dimensional space. </para>    </briefdescription>
    <detaileddescription>
<para>A sphere is defined by <formula id="5">$ d+1$</formula> points (class <computeroutput><ref refid="classCGAL_1_1Point__d" kindref="compound">Point_d</ref>&lt;<ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref>&gt;</computeroutput>). We use <formula id="4">$ A$</formula> to denote the array of the defining points. A set <formula id="4">$ A$</formula> of defining points is <emphasis>legal</emphasis> if either the points are affinely independent or if the points are all equal. Only a legal set of points defines a sphere in the geometric sense and hence many operations on spheres require the set of defining points to be legal. The orientation of <formula id="85">$ S$</formula> is equal to the orientation of the defining points, i.e., <computeroutput>orientation(A)</computeroutput>.</para><para><bold>Implementation</bold><linebreak/>
</para><para>Spheres are implemented by a vector of points as a handle type. All operations like creation, initialization, tests, input and output of a sphere <formula id="57">$ s$</formula> take time <formula id="86">$ O(s.dimension()) $</formula>. <computeroutput><ref refid="classCGAL_1_1Sphere__d_1ad622d2d04e8ac1f620c36e3b25ee5046" kindref="member">dimension()</ref></computeroutput>, point access take constant time. The <computeroutput><ref refid="classCGAL_1_1Sphere__d_1a870b0ed243aa75f921b3b0b051f820a4" kindref="member">center()</ref></computeroutput>-operation takes time <formula id="87">$ O(d^3)$</formula> on its first call and constant time thereafter. The sidedness and orientation tests take time <formula id="87">$ O(d^3)$</formula>. The space requirement for spheres is <formula id="81">$ O(s.dimension())$</formula> neglecting the storage room of the points. </para>    </detaileddescription>
    <location file="CGAL/Kernel_d/Sphere_d.h" line="29" column="1" bodyfile="CGAL/Kernel_d/Sphere_d.h" bodystart="29" bodyend="212"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Sphere__d_1aaf3c458d451f0d3e5054d1f87e488b76" prot="public" virt="non-virtual"><scope>CGAL::Sphere_d</scope><name>bounded_side</name></member>
      <member refid="classCGAL_1_1Sphere__d_1a870b0ed243aa75f921b3b0b051f820a4" prot="public" virt="non-virtual"><scope>CGAL::Sphere_d</scope><name>center</name></member>
      <member refid="classCGAL_1_1Sphere__d_1ad622d2d04e8ac1f620c36e3b25ee5046" prot="public" virt="non-virtual"><scope>CGAL::Sphere_d</scope><name>dimension</name></member>
      <member refid="classCGAL_1_1Sphere__d_1aa6a4abb8b5024687f46ed07688ce814d" prot="public" virt="non-virtual"><scope>CGAL::Sphere_d</scope><name>has_on_boundary</name></member>
      <member refid="classCGAL_1_1Sphere__d_1a6e20d81170e58ab7bcb0ce2b3cabca99" prot="public" virt="non-virtual"><scope>CGAL::Sphere_d</scope><name>has_on_bounded_side</name></member>
      <member refid="classCGAL_1_1Sphere__d_1aae79081d86323b638f21cc4dc34566b5" prot="public" virt="non-virtual"><scope>CGAL::Sphere_d</scope><name>has_on_negative_side</name></member>
      <member refid="classCGAL_1_1Sphere__d_1ac7b7a2ee32be0b2a97af951643979941" prot="public" virt="non-virtual"><scope>CGAL::Sphere_d</scope><name>has_on_positive_side</name></member>
      <member refid="classCGAL_1_1Sphere__d_1af68af2fdc7f94b05edef2bd9add3fa11" prot="public" virt="non-virtual"><scope>CGAL::Sphere_d</scope><name>has_on_unbounded_side</name></member>
      <member refid="classCGAL_1_1Sphere__d_1aebcbe3c205a998792f4a3ad804f8380a" prot="public" virt="non-virtual"><scope>CGAL::Sphere_d</scope><name>is_degenerate</name></member>
      <member refid="classCGAL_1_1Sphere__d_1a1071e0a4f9d6f45f86bbef533bb7f998" prot="public" virt="non-virtual"><scope>CGAL::Sphere_d</scope><name>is_legal</name></member>
      <member refid="classCGAL_1_1Sphere__d_1a5c0b709ea14dc1cf49b8088fe0aafe15" prot="public" virt="non-virtual"><scope>CGAL::Sphere_d</scope><name>LA</name></member>
      <member refid="classCGAL_1_1Sphere__d_1aa851bfc30e0c3f5e2b1e90e59b08ac14" prot="public" virt="non-virtual"><scope>CGAL::Sphere_d</scope><name>operator+</name></member>
      <member refid="classCGAL_1_1Sphere__d_1af46273308ce3c278f7312be6dbbbdc57" prot="public" virt="non-virtual"><scope>CGAL::Sphere_d</scope><name>opposite</name></member>
      <member refid="classCGAL_1_1Sphere__d_1a10e9d92be370467747accb3bed0c92c9" prot="public" virt="non-virtual"><scope>CGAL::Sphere_d</scope><name>orientation</name></member>
      <member refid="classCGAL_1_1Sphere__d_1adb0876359790861163d4eb2a01d28f8c" prot="public" virt="non-virtual"><scope>CGAL::Sphere_d</scope><name>oriented_side</name></member>
      <member refid="classCGAL_1_1Sphere__d_1a0afc0dc04171a277c229a7df5e679d85" prot="public" virt="non-virtual"><scope>CGAL::Sphere_d</scope><name>point</name></member>
      <member refid="classCGAL_1_1Sphere__d_1a5ae64d06825e1ec4b5729d2d1739f9ae" prot="public" virt="non-virtual"><scope>CGAL::Sphere_d</scope><name>point_iterator</name></member>
      <member refid="classCGAL_1_1Sphere__d_1a84413276df4788abcb5f8d8f92592750" prot="public" virt="non-virtual"><scope>CGAL::Sphere_d</scope><name>points_begin</name></member>
      <member refid="classCGAL_1_1Sphere__d_1aa7effce8dc037fe9bd077105b9d22b00" prot="public" virt="non-virtual"><scope>CGAL::Sphere_d</scope><name>points_end</name></member>
      <member refid="classCGAL_1_1Sphere__d_1aca7e2a872a0e152913e38f96cb3ab393" prot="public" virt="non-virtual"><scope>CGAL::Sphere_d</scope><name>Sphere_d</name></member>
      <member refid="classCGAL_1_1Sphere__d_1a6d59a4c3fc42e3ee7822c54517ff4dd0" prot="public" virt="non-virtual"><scope>CGAL::Sphere_d</scope><name>Sphere_d</name></member>
      <member refid="classCGAL_1_1Sphere__d_1ad6402b3560a4d7c89e8531ff66aca1a4" prot="public" virt="non-virtual"><scope>CGAL::Sphere_d</scope><name>squared_radius</name></member>
      <member refid="classCGAL_1_1Sphere__d_1ad3dc610c7902c12a1820f8fca2515c5d" prot="public" virt="non-virtual"><scope>CGAL::Sphere_d</scope><name>weak_equality</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
