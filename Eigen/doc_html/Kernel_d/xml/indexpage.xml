<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>User Manual</title>
    <detaileddescription>
<para><anchor id="index_1Chapter_dD_Geometry_Kernel"/> <simplesect kind="author"><para>Michael Seel</para></simplesect>
</para><sect1 id="index_1Kernel_dIntroduction">
<title>Introduction</title>
<para>This part of the reference manual covers the higher-dimensional kernel. The kernel contains objects of constant size, such as point, vector, direction, line, ray, segment, circle. With each type comes a set of functions which can be applied to an object of this type. You will typically find access functions (e.g. to the coordinates of a point), tests of the position of a point relative to the object, a function returning the bounding box, the length, or the area of an object, and so on. The CGAL kernel further contains basic operations such as affine transformations, detection and computation of intersections, and distance computations. Note that this section partly recapitulates facts already mentioned for the lower-dimensional kernel.</para><sect2 id="index_1Kernel_dRobustness">
<title>Robustness</title>
<para>The correctness proof of nearly all geometric algorithms presented in theory papers assumes exact computation with real numbers. This leads to a fundamental problem with the implementation of geometric algorithms. Naively, often the exact real arithmetic is replaced by inexact floating-point arithmetic in the implementation. This often leads to acceptable results for many input data. However, even for the implementation of the simplest geometric algorithms this simplification occasionally does not work. Rounding errors introduced by inaccurate arithmetic may lead to inconsistent decisions, causing unexpected failures for some correct input data. There are many approaches to this problem, one of them is to compute exactly (compute so accurate that all decisions made by the algorithm are exact) which is possible in many cases but more expensive than standard floating-point arithmetic. C. M. Hoffmann <ref refid="citelist_1CITEREF_h-gsm-89" kindref="member">[2]</ref>, <ref refid="citelist_1CITEREF_h-pargc-89" kindref="member">[1]</ref> illustrates some of the problems arising in the implementation of geometric algorithms and discusses some approaches to solve them. A more recent overview is given in <ref refid="citelist_1CITEREF_s-rpigc-00" kindref="member">[3]</ref>. The exact computation paradigm is discussed by Yap and Dub<eacute/> <ref refid="citelist_1CITEREF_yd-ecp-95" kindref="member">[4]</ref> and Yap <ref refid="citelist_1CITEREF_y-tegc-97" kindref="member">[5]</ref>.</para><para>In CGAL you can choose the underlying number types and arithmetic. You can use different types of arithmetic simultaneously and the choice can be easily changed, e.g. for testing. So you can choose between implementations with fast but occasionally inexact arithmetic and implementations guaranteeing exact computation and exact results. Of course you have to pay for the exactness in terms of execution time and storage space. See the dedicated chapter for more details on number types and their capabilities and performance.</para></sect2>
<sect2 id="index_1Kernel_dGenericity">
<title>Genericity</title>
<para>To increase generic usage of objects and predicates the higher-dimensional kernel makes heavy use of iterator ranges as defined in the STL for modeling tuples. Iterators conceptualize C++ pointers.</para><para>For an iterator range <computeroutput>[first,last)</computeroutput> we define <computeroutput>T = tuple [first,last)</computeroutput> as the ordered tuple <formula id="153">$ (T[0],T[1], \ldots T[d-1])$</formula> where <formula id="154">$ S[i] = *++^{(i)}\mathit{first}$</formula> (the element obtained by <formula id="34">$ i$</formula> times forwarding the iterator by operator <computeroutput>++</computeroutput> and then dereferencing it to get the value to which it points). We write <computeroutput>d = size [first,last)</computeroutput> and <computeroutput>S = set [first,last)</computeroutput> to denote the unordered set of elements of the corresponding tuple.</para><para>This extends the syntax of random access iterators to input iterators. If we index the tuple as above then we require that <formula id="155">$ ++^{(d)}\mathit{first} = \mathit{last}$</formula>.</para></sect2>
</sect1>
<sect1 id="index_1Kernel_dKernel">
<title>Kernel Representations</title>
<para>Our object of study is the <formula id="6">$ d$</formula>-dimensional affine Euclidean space, where <formula id="6">$ d$</formula> is a parameter of our geometry. Objects in that space are sets of points. A common way to represent the points is the use of Cartesian coordinates, which assumes a reference frame (an origin and <formula id="6">$ d$</formula> orthogonal axes). In that framework, a point is represented by a <formula id="6">$ d$</formula>-tuple <formula id="156">$ (c_0,c_1,\ldots,c_{d-1})$</formula>, and so are vectors in the underlying linear space. Each point is represented uniquely by such Cartesian coordinates.</para><para>Another way to represent points is by homogeneous coordinates. In that framework, a point is represented by a <formula id="9">$ (d+1)$</formula>-tuple <formula id="60">$ (h_0,h_1,\ldots,h_d)$</formula>. Via the formulae <formula id="31">$ c_i = h_i/h_d$</formula>, the corresponding point with Cartesian coordinates <formula id="156">$ (c_0,c_1,\ldots,c_{d-1})$</formula> can be computed. Note that homogeneous coordinates are not unique. For <formula id="157">$ \lambda\ne 0$</formula>, the tuples <formula id="60">$ (h_0,h_1,\ldots,h_d)$</formula> and <formula id="158">$ (\lambda\cdot h_0,\lambda\cdot h_1,\ldots,\lambda\cdot h_d)$</formula> represent the same point. For a point with Cartesian coordinates <formula id="156">$ (c_0,c_1,\ldots,c_{d-1})$</formula> a possible homogeneous representation is <formula id="159">$ (c_0,c_1,\ldots,c_{d-1},1)$</formula>. Homogeneous coordinates in fact allow to represent objects in a more general space, the projective space <formula id="160">$ \mathbb{P}^d$</formula>. In CGAL, we do not compute in projective geometry. Rather, we use homogeneous coordinates to avoid division operations, since the additional coordinate can serve as a common denominator.</para><sect2 id="index_1Kernel_dGenericitythroughParameterization">
<title>Genericity through Parameterization</title>
<para>Almost all the kernel objects (and the corresponding functions) are templates with a parameter that allows the user to choose the representation of the kernel objects. A type that is used as an argument for this parameter must fulfill certain requirements on syntax and semantics. The list of requirements defines an abstract kernel concept. In CGAL such a kernel concept is often also called a <emphasis>representation class</emphasis> and denoted by <computeroutput>R</computeroutput>. A representation class provides the actual implementations of the kernel objects. For all kernel objects <computeroutput>Kernel_object</computeroutput> of a representation class <computeroutput>R</computeroutput> based on <computeroutput><ref refid="classCGAL_1_1Cartesian__d" kindref="compound">Cartesian_d</ref></computeroutput> or <computeroutput><ref refid="classCGAL_1_1Homogeneous__d" kindref="compound">Homogeneous_d</ref></computeroutput>, the types <computeroutput>CGAL::Kernel_object&lt;R&gt;</computeroutput> and <computeroutput>R::Kernel_object</computeroutput> are identical.</para><para>CGAL offers three families of concrete models for the concept representation class, two based on the Cartesian representation of points and one based on the homogeneous representation of points. The interface of the kernel objects is designed such that it works well with both Cartesian and homogeneous representation, for example, points have a constructor with a range of coordinates plus a common denominator (the <formula id="5">$ d+1$</formula> homogeneous coordinates of the point). The common interfaces parameterized with a representation class allow one to develop code independent of the chosen representation. We said &quot;families&quot; of models, because both families are parameterized too. A user can choose the number type used to represent the coordinates and the linear algebra module used to calculate the result of predicates and constructions.</para><para>For reasons that will become evident later, a representation class provides two typenames for number types, namely <computeroutput>R::FT</computeroutput> and <computeroutput>R::RT</computeroutput>. The type <computeroutput>R::FT</computeroutput> must fulfill the requirements on what is called a <emphasis>field type</emphasis> in CGAL. This roughly means that <computeroutput>R::FT</computeroutput> is a type for which operations <formula id="161">$ +$</formula>, <formula id="162">$ -$</formula>, <formula id="163">$ *$</formula> and <formula id="164">$ /$</formula> are defined with semantics (approximately) corresponding to those of a field in a mathematical sense. Note that, strictly speaking, the built-in type <computeroutput>int</computeroutput> does not fulfill the requirements on a field type, since <computeroutput>int</computeroutput>s correspond to elements of a ring rather than a field, especially operation <formula id="164">$ /$</formula> is not the inverse of <formula id="163">$ *$</formula>. The requirements on the type <computeroutput>R::RT</computeroutput> are weaker. This type must fulfill the requirements on what is called a <emphasis>Euclidean ring type</emphasis> in CGAL. This roughly means that <computeroutput>R::RT</computeroutput> is a type for which operations <formula id="161">$ +$</formula>, <formula id="162">$ -$</formula>, <formula id="163">$ *$</formula> are defined with semantics (approximately) corresponding to those of a ring in a mathematical sense. A very limited division operation <formula id="164">$ /$</formula> must be available as well. It must work for exact (i.e., no remainder) integer divisions only. Furthermore, both number types should fulfill CGAL&apos;s requirements on a number type.</para></sect2>
<sect2 id="index_1Kernel_dCartesianKernel">
<title>Cartesian Kernel</title>
<para>With <computeroutput><ref refid="classCGAL_1_1Cartesian__d" kindref="compound">Cartesian_d</ref>&lt;<ref refid="classFieldNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref>,LinearAlgebra&gt;</computeroutput> you can choose Cartesian representation of coordinates. The type <computeroutput>LinearAlgebra</computeroutput> must me a linear algebra module working on numbers of type <computeroutput><ref refid="classFieldNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref></computeroutput>. The second parameter defaults to module delivered with the kernel so for short a user can just write <computeroutput><ref refid="classCGAL_1_1Cartesian__d" kindref="compound">Cartesian_d</ref>&lt;<ref refid="classFieldNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref>&gt;</computeroutput> when not providing her own linear algebra.</para><para>When you choose Cartesian representation you have to declare at least the type of the coordinates. A number type used with the <computeroutput><ref refid="classCGAL_1_1Cartesian__d" kindref="compound">Cartesian_d</ref></computeroutput> representation class should be a <emphasis>field type</emphasis> as described above. Both <computeroutput><ref refid="classCGAL_1_1Cartesian__d" kindref="compound">Cartesian_d</ref>&lt;<ref refid="classFieldNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref>&gt;::FT</computeroutput> and <computeroutput><ref refid="classCGAL_1_1Cartesian__d" kindref="compound">Cartesian_d</ref>&lt;<ref refid="classFieldNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref>&gt;::RT</computeroutput> are mapped to number type <computeroutput><ref refid="classFieldNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref></computeroutput>. <computeroutput><ref refid="classCGAL_1_1Cartesian__d" kindref="compound">Cartesian_d</ref>&lt;<ref refid="classFieldNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref>,LinearAlgebra&gt;::LA</computeroutput> is mapped to the type <computeroutput>LinearAlgebra</computeroutput>. <computeroutput><ref refid="classCGAL_1_1Cartesian__d" kindref="compound">Cartesian_d</ref>&lt;<ref refid="classFieldNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref>&gt;</computeroutput> uses reference counting internally to save copying costs.</para></sect2>
<sect2 id="index_1Kernel_dHomogeneousKernel">
<title>Homogeneous Kernel</title>
<para>As we mentioned before, homogeneous coordinates permit to avoid division operations in numerical computations, since the additional coordinate can serve as a common denominator. Avoiding divisions can be useful for exact geometric computation. With <computeroutput><ref refid="classCGAL_1_1Homogeneous__d" kindref="compound">Homogeneous_d</ref>&lt;<ref refid="classRingNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RingNumberType</ref>,LinearAlgebra&gt;</computeroutput> you can choose homogeneous representation of coordinates with the kernel objects. As for Cartesian representation you have to declare at the same time the type used to store the homogeneous coordinates. Since the homogeneous representation allows one to avoid the divisions, the number type associated with a homogeneous representation class must be a model for the weaker concept Euclidean ring type only.</para><para>The type <computeroutput>LinearAlgebra</computeroutput> must me a linear algebra module working on numbers of type <computeroutput><ref refid="classRingNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RingNumberType</ref></computeroutput>. Again the second parameter defaults to module delivered with the kernel so for short one can just write <computeroutput><ref refid="classCGAL_1_1Homogeneous__d" kindref="compound">Homogeneous_d</ref>&lt;<ref refid="classRingNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RingNumberType</ref>&gt;</computeroutput> when replacing the default is no issue.</para><para>However, some operations provided by this kernel involve division operations, for example computing squared distances or returning a Cartesian coordinate. To keep the requirements on the number type parameter of <computeroutput><ref refid="structCGAL_1_1Homogeneous" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Homogeneous</ref></computeroutput> low, the number type <computeroutput><ref refid="classCGAL_1_1Quotient" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">Quotient</ref>&lt;<ref refid="classRingNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RingNumberType</ref>&gt;</computeroutput> is used instead. This number type turns a ring type into a field type. It maintains numbers as quotients, i.e. a numerator and a denominator. Thereby, divisions are circumvented. With <computeroutput><ref refid="classCGAL_1_1Homogeneous__d" kindref="compound">Homogeneous_d</ref>&lt;<ref refid="classRingNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RingNumberType</ref>&gt;</computeroutput>, <computeroutput><ref refid="classCGAL_1_1Homogeneous__d" kindref="compound">Homogeneous_d</ref>&lt;<ref refid="classRingNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RingNumberType</ref>&gt;::FT</computeroutput> is equal to <computeroutput><ref refid="classCGAL_1_1Quotient" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">Quotient</ref>&lt;<ref refid="classRingNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RingNumberType</ref>&gt;</computeroutput> while <computeroutput><ref refid="classCGAL_1_1Homogeneous__d" kindref="compound">Homogeneous_d</ref>&lt;<ref refid="classRingNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RingNumberType</ref>&gt;::RT</computeroutput> is equal to <computeroutput><ref refid="classRingNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RingNumberType</ref></computeroutput>. <computeroutput><ref refid="classCGAL_1_1Homogeneous__d" kindref="compound">Homogeneous_d</ref>&lt;<ref refid="classRingNumberType" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RingNumberType</ref>,LinearAlgebra&gt;::LA</computeroutput> is mapped to the type <computeroutput>LinearAlgebra</computeroutput>.</para></sect2>
<sect2 id="index_1Kernel_dEpickKernel">
<title>Epick_d Kernel</title>
<para>The kernel <computeroutput><ref refid="structCGAL_1_1Epick__d" kindref="compound">Epick_d</ref>&lt;DimensionTag&gt;</computeroutput>, short for <emphasis>Exact Predicates Inexact Constructions <ref refid="classKernel" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></emphasis> is a kernel particularly useful when the dimension of the space is known at compile-time; The template parameter <computeroutput>DimensionTag</computeroutput> is then <computeroutput><ref refid="structCGAL_1_1Dimension__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Dimension_tag</ref>&lt;d&gt;</computeroutput> where <computeroutput>d</computeroutput> is an integer representing the dimension. It may also be used with parameter <computeroutput><ref refid="structCGAL_1_1Dynamic__dimension__tag" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Dynamic_dimension_tag</ref></computeroutput>, in which case the dimension does not need to be known at compile-time. It uses a Cartesian representation and supports construction of points from <computeroutput>double</computeroutput> coordinates. It provides exact geometric predicates, but the geometric constructions are not guaranteed to be exact.</para><para>Note that it provides few interfaces in addition to those documented in the <computeroutput><ref refid="classKernel__d" kindref="compound">Kernel_d</ref></computeroutput> concept. In particular, the type of a point is only available as <computeroutput><ref refid="structCGAL_1_1Epick__d" kindref="compound">Epick_d</ref>&lt;DimensionTag&gt;::Point_d</computeroutput>, <bold>not</bold> <computeroutput><ref refid="classCGAL_1_1Point__d" kindref="compound">Point_d</ref>&lt;<ref refid="structCGAL_1_1Epick__d" kindref="compound">Epick_d</ref>&lt;DimensionTag&gt;&gt;</computeroutput>.</para></sect2>
<sect2 id="index_1Kernel_dNamingconventions">
<title>Naming Conventions</title>
<para>The use of representation classes does not only avoid problems, it also makes all CGAL classes very uniform. Like <computeroutput><ref refid="classCGAL_1_1Cartesian__d" kindref="compound">Cartesian_d</ref>&lt;double&gt;::Point_d</computeroutput>, they <bold>always</bold> consist of: <orderedlist>
<listitem>
<para>The <emphasis>capitalized base name</emphasis> of the geometric object, such as <computeroutput>Point</computeroutput>, <computeroutput>Segment</computeroutput>, <computeroutput>Triangle</computeroutput>.</para><para></para></listitem>
<listitem>
<para>Followed by <computeroutput>_d</computeroutput>.</para><para></para></listitem>
<listitem>
<para>A <emphasis>representation class</emphasis>, which itself may be parameterized with a number type, such as <computeroutput><ref refid="classCGAL_1_1Cartesian__d" kindref="compound">Cartesian_d</ref>&lt;double&gt;</computeroutput> or <computeroutput><ref refid="classCGAL_1_1Homogeneous__d" kindref="compound">Homogeneous_d</ref>&lt;<ref refid="classleda__integer" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">leda_integer</ref>&gt;</computeroutput>, where the type can be found, except for <computeroutput><ref refid="structCGAL_1_1Epick__d" kindref="compound">Epick_d</ref>&lt;DimensionTag&gt;</computeroutput> where the number type is implicitly <computeroutput>double</computeroutput>. </para></listitem>
</orderedlist>
</para></sect2>
<sect2 id="index_1Kernel_dKernelasaTraitsClass">
<title>Kernel as a Traits Class</title>
<para>Algorithms and data structures in the basic library of CGAL are parameterized by a traits class that subsumes the objects on which the algorithm or data structure operates as well as the operations to do so. For most of the algorithms and data structures in the basic library you can use a kernel as a traits class. For some algorithms you even do not have to specify the kernel; it is detected automatically using the types of the geometric objects passed to the algorithm. In some other cases, the algorithms or data structures need more than is provided by a kernel. In these cases, a kernel can not be used as a traits class.</para></sect2>
<sect2 id="index_1Kernel_dChoosingaKernel">
<title>Choosing a Kernel</title>
<para>If you start with integral Cartesian coordinates, many geometric computations will involve integral numerical values only. Especially, this is true for geometric computations that evaluate only predicates, which are tantamount to determinant computations. Examples are triangulation of point sets and convex hull computation.</para><para>The dimension <formula id="6">$ d$</formula> of our affine space determines the dimension of the matrix computations in the mathematical evaluation of predicates. As rounding errors accumulate fast the homogeneous representation used with multi-precision integers is the kernel of choice for well-behaved algorithms. Note, that unless you use an arbitrary precision integer type, incorrect results might arise due to overflow.</para><para>If new points are to be constructed, for example the intersection point of two lines, computation of Cartesian coordinates usually involves divisions, so you need to use a field type with Cartesian representation or have to switch to homogeneous representation. <computeroutput>double</computeroutput> is a possible, but imprecise field type. You can also put any ring type into <computeroutput><ref refid="classCGAL_1_1Quotient" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">Quotient</ref></computeroutput> to get a field type and put it into <computeroutput><ref refid="classCGAL_1_1Cartesian__d" kindref="compound">Cartesian_d</ref></computeroutput>, but you better put the ring type into <computeroutput><ref refid="structCGAL_1_1Homogeneous" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Homogeneous</ref></computeroutput>. <computeroutput><ref refid="classleda__rational" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">leda_rational</ref></computeroutput> and <computeroutput><ref refid="classleda__real" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">leda_real</ref></computeroutput> are valid field types, too.</para><para>Still other people will prefer the built-in type <computeroutput>double</computeroutput>, because they need speed and can live with approximate results, or even algorithms that, from time to time, crash or compute incorrect results due to accumulated rounding errors.</para><para>The <computeroutput><ref refid="structCGAL_1_1Epick__d" kindref="compound">Epick_d</ref></computeroutput> kernel provides a compromise using <computeroutput>double</computeroutput> coordinates. It evaluates predicates exactly, which is slower than plain <computeroutput>double</computeroutput> computations, but still faster than using an exact number type thanks to filtering techniques. Constructions are inexact, computed with <computeroutput>double</computeroutput>.</para></sect2>
<sect2 id="index_1Kernel_dInclusionofHeaderFiles">
<title>Inclusion of Header Files</title>
<para>You need just to include a representation class to obtain the geometric objects of the kernel that you would like to use with the representation class, i.e., <computeroutput>CGAL/Cartesian_d.h</computeroutput> or <computeroutput>CGAL/Homogeneous_d.h</computeroutput></para></sect2>
</sect1>
<sect1 id="index_1Kernel_dKernel_1">
<title>Kernel Geometry</title>
<sect2 id="index_1Kernel_dPointsandVectors">
<title>Points and Vectors</title>
<para>In CGAL, we strictly distinguish between points, vectors and directions. A <emphasis>point</emphasis> is a point in the Euclidean space <formula id="54">$ \E^d$</formula>, a <emphasis>vector</emphasis> is the difference of two points <formula id="165">$ p_2$</formula>, <formula id="166">$ p_1$</formula> and denotes the direction and the distance from <formula id="166">$ p_1$</formula> to <formula id="165">$ p_2$</formula> in the vector space <formula id="167">$ \mathbb{R}^d$</formula>, and a <emphasis>direction</emphasis> is a vector where we forget about its length. They are different mathematical concepts. For example, they behave different under affine transformations and an addition of two points is meaningless in affine geometry. By putting them in different classes we not only get cleaner code, but also type checking by the compiler which avoids ambiguous expressions. Hence, it pays twice to make this distinction.</para><para>CGAL defines a symbolic constant <computeroutput>ORIGIN</computeroutput> of type <computeroutput><ref refid="classCGAL_1_1Origin" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Origin</ref></computeroutput> which denotes the point at the origin. This constant is used in the conversion between points and vectors. Subtracting it from a point <formula id="11">$ p$</formula> results in the locus vector of <formula id="11">$ p$</formula>.</para><para><programlisting><codeline><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>coord[]<sp/>=<sp/>{1.0,<sp/>1.0,<sp/>1.0,<sp/>1.0};</highlight></codeline>
<codeline><highlight class="normal">Cartesian_d&lt;double&gt;::Point_d<sp/>p(4,coord,coord+4),<sp/>q(4);</highlight></codeline>
<codeline><highlight class="normal">Cartesian_d&lt;double&gt;::Vector_d<sp/>v(4);</highlight></codeline>
<codeline><highlight class="normal">v<sp/>=<sp/>p<sp/>-<sp/><ref refid="group__kernel__enums_1ga9d272a8e3a8080b851741b6d3a44afdc" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">ORIGIN</ref>;</highlight></codeline>
<codeline><highlight class="normal">q<sp/>=<sp/>ORIGIN<sp/>+<sp/>v;<sp/></highlight></codeline>
<codeline><highlight class="normal">assert(<sp/>p<sp/>==<sp/>q<sp/>);</highlight></codeline>
</programlisting></para><para>In order to obtain the point corresponding to a vector <formula id="21">$ v$</formula> you simply have to add <formula id="21">$ v$</formula> to <computeroutput>ORIGIN</computeroutput>. If you want to determine the point <formula id="13">$ q$</formula> in the middle between two points <formula id="166">$ p_1$</formula> and <formula id="165">$ p_2$</formula>, you can writeyou might call <computeroutput>midpoint(p_1,p_2)</computeroutput> instead</para><para><programlisting><codeline><highlight class="normal">q<sp/>=<sp/>p_1<sp/>+<sp/>(p_2<sp/>-<sp/>p_1)<sp/>/<sp/>2.0;</highlight></codeline>
</programlisting></para><para>Note that these constructions do not involve any performance overhead for the conversion with the currently available representation classes.</para></sect2>
<sect2 id="index_1Kernel_dKernelObjects">
<title>Kernel Objects</title>
<para>Besides points (<computeroutput>R::Point_d</computeroutput>), vectors (<computeroutput>R::Vector_d</computeroutput>), and directions (<computeroutput>R::Direction_d</computeroutput>), CGAL provides lines, rays, segments, hyperplanes, and spheres.</para><para>Lines (<computeroutput>R::Line_d</computeroutput>) in CGAL are oriented. A ray (<computeroutput>R::Ray_d</computeroutput>) is a semi-infinite interval on a line, and this line is oriented from the finite endpoint of this interval towards any other point in this interval. A segment (<computeroutput>R::Segment_d</computeroutput>) is a bounded interval on a directed line, and the endpoints are ordered so that they induce the same direction as that of the line.</para><para>Hyperplanes are affine subspaces of dimension <formula id="12">$ d-1$</formula> in <formula id="54">$ \E^d$</formula>, passing through <formula id="6">$ d$</formula> points. Hyperplanes are oriented and partition space into a positive side and a negative side. In CGAL, there are no special classes for halfspaces. Halfspaces are supposed to be represented by oriented hyperplanes. All kernel objects are equality comparable via <computeroutput>operator==</computeroutput> and <computeroutput>operator!=</computeroutput>. For those oriented objects whose orientation can be reversed (segments, lines, hyperplanes, spheres) there is also a global function <computeroutput><ref refid="classCGAL_1_1Hyperplane__d_1a7de58b9954c8dd29537b2ac926f608e5" kindref="member">weak_equality()</ref></computeroutput> that allows to test for point set equality disregarding the orientation.</para></sect2>
<sect2 id="index_1Kernel_dOrientationandRelativePosition">
<title>Orientation and Relative Position</title>
<para>Geometric objects in CGAL have member functions that test the position of a point relative to the object. Full dimensional objects and their boundaries are represented by the same type, e.g. halfspaces and hyperplanes are not distinguished, neither are balls and spheres. Such objects split the ambient space into two full-dimensional parts, a bounded part and an unbounded part (e.g. spheres), or two unbounded parts (e.g. hyperplanes). By default these objects are oriented, i.e., one of the resulting parts is called the positive side, the other one is called the negative side. Both of these may be unbounded.</para><para>For these objects there is a function <computeroutput>oriented_side()</computeroutput> that determines whether a test point is on the positive side, the negative side, or on the oriented boundary. These function returns a value of type <computeroutput>Oriented_side</computeroutput>.</para><para>Those objects that split the space in a bounded and an unbounded part, have a member function <computeroutput>bounded_side()</computeroutput> with return type <computeroutput>Bounded_side</computeroutput>.</para><para>If an object is lower dimensional, e.g. a segment in <formula id="6">$ d$</formula>-dimensional space, there is only a test whether a point belongs to the object or not. This member function, which takes a point as an argument and returns a Boolean value, is called <computeroutput>has_on()</computeroutput></para></sect2>
</sect1>
<sect1 id="index_1Kernel_dPredicates">
<title>Predicates and Constructions</title>
<sect2 id="index_1Kernel_dPredicates_1">
<title>Predicates</title>
<para>Predicates are at the heart of a geometry kernel. They are basic units for the composition of geometric algorithms and encapsulate decisions. Hence their correctness is crucial for the control flow and hence for the correctness of an implementation of a geometric algorithm. CGAL uses the term predicate in a generalized sense. Not only components returning a Boolean value are called predicates but also components returning an enumeration type like a <computeroutput>Comparison_result</computeroutput> or an <computeroutput>Orientation</computeroutput>. We say components, because predicates are implemented both as functions and function objects (also called functors and provided by a kernel class).</para><para>CGAL provides predicates for the orientation of point sets (<computeroutput>orientation</computeroutput>), for comparing points according to some given order, especially for comparing Cartesian coordinates (e.g. <computeroutput>lexicographically_xy_smaller</computeroutput>), in-sphere tests, and predicates to compare distances.</para></sect2>
<sect2 id="index_1Kernel_dConstructions">
<title>Constructions</title>
<para>Functions and function objects that generate objects that are neither of type <computeroutput>bool</computeroutput> nor enum types are called constructions. Constructions involve computation of new numerical values and may be imprecise due to rounding errors unless a kernel with an exact number type is used.</para><para>Affine transformations (<computeroutput>R::Aff_transformation_d</computeroutput>) allow to generate new object instances under arbitrary affine transformations. These transformations include translations, rotations (within planes) and scaling. Most of the geometric objects in a kernel have a member function <computeroutput>transform(Aff_transformation_d t)</computeroutput> which applies the transformation to the object instance.</para><para>CGAL also provides a set of functions that detect or compute the intersection between objects and functions to calculate their squared distance. Moreover, some member functions of kernel objects are constructions.</para><para>So there are routines that compute the square of the Euclidean distance, but no routines that compute the distance itself. Why? First of all, the two values can be derived from each other quite easily (by taking the square root or taking the square). So, supplying only the one and not the other is only a minor inconvenience for the user. Second, often either value can be used. This is for example the case when (squared) distances are compared. Third, the library wants to stimulate the use of the squared distance instead of the distance. The squared distance can be computed in more cases and the computation is cheaper. We do this by not providing the perhaps more natural routine, The problem of a distance routine is that it needs the <computeroutput>sqrt</computeroutput> operation. This has two drawbacks: <itemizedlist>
<listitem>
<para>The <computeroutput>sqrt</computeroutput> operation can be costly. Even if it is not very costly for a specific number type and platform, avoiding it is always cheaper. </para></listitem>
<listitem>
<para>There are number types on which no <computeroutput>sqrt</computeroutput> operation is defined, especially integer types and rationals. </para></listitem>
</itemizedlist>
</para></sect2>
<sect2 id="index_1Kernel_dIntersections">
<title>Intersections</title>
<para>Intersections on kernel objects currently cover only those objects that are part of flats (<computeroutput>R::Segment_d</computeroutput>, <computeroutput>R::Ray_d</computeroutput>, <computeroutput>R::Line_d</computeroutput>, and <computeroutput>R::Hyperplane_d</computeroutput>). For any pair of objects <formula id="168">$ o1$</formula>, <formula id="169">$ o2$</formula> of these types the operation <computeroutput>intersection(o1,o2)</computeroutput> returns a <computeroutput>boost::optional&lt; boost::variant&lt; T... &gt; &gt;</computeroutput> where <computeroutput>T...</computeroutput> is a list of all possible resulting geometric objects.</para><para>The exact result type of an intersection can be determined by using <computeroutput><ref refid="structCGAL_1_1cpp11_1_1result__of" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">cpp11::result_of</ref>&lt;Kernel::Intersect_d(Type1, Type2)&gt;::type</computeroutput> where <computeroutput>Type1</computeroutput> and <computeroutput>Type2</computeroutput> are the types of the objects used in the intersection computation.</para><sect3 id="index_1Kernel_dExample">
<title>Example</title>
<para>In the following example, the object type is used as a return value for the intersection computation, as there are possibly different return values.</para><para><programlisting><codeline><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Cartesian_d&lt;double&gt;<sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Point_d&lt;K&gt;<sp/>Point;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Segment_d&lt;K&gt;<sp/>Segment;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Segment<sp/>s1,<sp/>s2;</highlight></codeline>
<codeline><highlight class="normal">std::cin<sp/>&gt;&gt;<sp/>s1<sp/>&gt;&gt;<sp/>s2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="structCGAL_1_1cpp11_1_1result__of_1a0116f3bad73d2c51520c134dffbf1449" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">cpp11::result_of&lt;K::Intersect_d(Segment, Segment)&gt;::type</ref></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>v<sp/>=<sp/><ref refid="group__intersection__linear__grp_1gab77f3cd98c4c4ff7acff59c98ab88ff0" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">intersection</ref>(s1,<sp/>s2);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point<sp/>*p<sp/>=<sp/>boost::get&lt;Point&gt;(&amp;*v)<sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>something<sp/>with<sp/>*p</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Segment<sp/>*s<sp/>=<sp/>boost::get&lt;Segment&gt;(&amp;*v)<sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>something<sp/>with<sp/>*s</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>empty<sp/>intersection</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para></sect3>
</sect2>
<sect2 id="index_1Kernel_dConstructivePredicates">
<title>Constructive Predicates</title>
<para>For testing where a point <formula id="11">$ p$</formula> lies with respect to a hyperplane defined by an array <formula id="170">$ P$</formula> of points <formula id="166">$ p_1$</formula>, ... , <formula id="171">$ p_d$</formula>, one may be tempted to construct the hyperplane <computeroutput>R::Hyperplane_d(d,P,P+d)</computeroutput> and use the method <computeroutput>oriented_side(p)</computeroutput>. This may pay off if many tests with respect to the plane are made. Nevertheless, unless the number type is exact, the constructed plane is only approximated, and round-off errors may lead <computeroutput>oriented_side(p)</computeroutput> to return an orientation which is different from the orientation of <formula id="166">$ p_1$</formula>, ... , <formula id="171">$ p_d$</formula>, <formula id="11">$ p$</formula>.</para><para>In CGAL, we provide predicates in which such geometric decisions are made directly with a reference to the input points in <formula id="170">$ P$</formula> without an intermediary object like a plane. For the above test, the recommended way to get the result is to use <formula id="172">$\mathrm{orientation}(P&apos;,P&apos;+d)$</formula>, where <formula id="173">$ P&apos;$</formula> is an array containing the points <formula id="166">$ p_1$</formula>, ... , <formula id="171">$ p_d$</formula>, <formula id="11">$ p$</formula>.</para><para>For exact number types like <computeroutput><ref refid="classleda__real" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Number_types.tag">leda_real</ref></computeroutput>, the situation is different. If several tests are to be made with the same plane, it pays off to construct the plane and to use <computeroutput>oriented_side(p)</computeroutput>.</para></sect2>
</sect1>
<sect1 id="index_1Kernel_dDesign">
<title>Design and Implementation History</title>
<para>This higher-dimensional kernel is the result of a long evolving development. A first version of the kernel was offered as a LEDA extension package ddgeo by Kurt Mehlhorn and Michael Seel. The original design was driven by the realization of a d-dimensional convex hull data type developed at the Max-Planck Institut f<uumlaut/>r Informatik.</para><para>The code base was discussed and reviewed within the CGAL kernel group (of the low-dimensional kernel). This led to the identification of the concept interfaces and in parallel to adaptations according to the evolution of the low-dimensional kernel. The kernel was revised based on suggestions by Herv<eacute/> Br<oumlaut/>nnimann, Michael Hoffmann, and Stefan Schirra.</para><para><ref refid="structCGAL_1_1Epick__d" kindref="compound">Epick_d</ref> was added by Marc Glisse in 2014.</para><sect2 id="index_1Kernel_dAcknowledgments">
<title>Acknowledgments</title>
<para>This work was supported by ESPRIT IV Long Term Research Projects No. 21957 (<ref refid="namespaceCGAL" kindref="compound">CGAL</ref>) and No. 28155 (GALIA).</para><para>The <ref refid="structCGAL_1_1Epick__d" kindref="compound">Epick_d</ref> kernel was partially supported by the IST Programme of the EU (FET Open) Project under Contract No IST-25582 – (CGL - Computational Geometric Learning). </para></sect2>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
