<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__PkgKernelDFunctions" kind="group">
    <compoundname>PkgKernelDFunctions</compoundname>
    <title>Global Kernel Functions</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgKernelDFunctions_1ga8a25cedf1a9f5d645c511825bc6a1129" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          </param>
        </templateparamlist>
        <type>Point_d&lt; R &gt;</type>
        <definition>Point_d&lt;R&gt; CGAL::center_of_sphere</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last)</argsstring>
        <name>center_of_sphere</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>returns the center of the sphere spanned by the points in <computeroutput>A = tuple[first,last)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><formula id="4">$ A$</formula> contains <formula id="5">$ d+1$</formula> affinely independent points of dimension <formula id="6">$ d$</formula>. </para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>has <computeroutput><ref refid="classCGAL_1_1Point__d" kindref="compound">Point_d</ref>&lt;R&gt;</computeroutput> as value type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/constructions_d.h" line="15" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgKernelDFunctions_1ga9366f250d18454d6d7a2cb2b7239505c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Point_d&lt; R &gt;</type>
        <definition>Point_d&lt;R&gt; CGAL::lift_to_paraboloid</definition>
        <argsstring>(const Point_d&lt; R &gt; &amp;p)</argsstring>
        <name>lift_to_paraboloid</name>
        <param>
          <type>const Point_d&lt; R &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>returns the projection of <formula id="7">$ p = (x_0,\ldots,x_{d-1})$</formula> onto the paraboloid of revolution which is the point <formula id="8">$ (p_0, \ldots,p_{d-1},\sum_{0 \le i &lt; d}p_i^2)$</formula> in <formula id="9">$ (d+1)$</formula>-space. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/constructions_d.h" line="25" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgKernelDFunctions_1gaea9ec4e90b5d5722d09b561a3985e67e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          </param>
          <param>
            <type>class <ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::linear_base</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last, OutputIterator result)</argsstring>
        <name>linear_base</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>last</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>computes a basis of the linear space spanned by the vectors in <computeroutput>A = tuple [first,last)</computeroutput> and returns it via an iterator range starting in <computeroutput>result</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The returned iterator marks the end of the output. <simplesect kind="pre"><para><formula id="4">$ A$</formula> contains vectors of the same dimension <formula id="6">$ d$</formula>.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>has <computeroutput><ref refid="classCGAL_1_1Vector__d" kindref="compound">Vector_d</ref>&lt;R&gt;</computeroutput> as value type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/constructions_d.h" line="40" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgKernelDFunctions_1gae4e9a14c7792c8da1c6a98bd0b378937" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Point_d&lt; R &gt;</type>
        <definition>Point_d&lt;R&gt; CGAL::midpoint</definition>
        <argsstring>(const Point_d&lt; R &gt; &amp;p, const Point_d&lt; R &gt; &amp;q)</argsstring>
        <name>midpoint</name>
        <param>
          <type>const Point_d&lt; R &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const Point_d&lt; R &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>computes the midpoint of the segment <formula id="10">$ pq$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>p.dimension() == q.dimension()</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/constructions_d.h" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgKernelDFunctions_1gaadc6f06918d9dc10b15a27fdea3e0052" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Point_d&lt; R &gt;</type>
        <definition>Point_d&lt;R&gt; CGAL::project_along_d_axis</definition>
        <argsstring>(const Point_d&lt; R &gt; &amp;p)</argsstring>
        <name>project_along_d_axis</name>
        <param>
          <type>const Point_d&lt; R &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>returns <formula id="11">$ p$</formula> projected along the <formula id="6">$ d$</formula>-axis onto the hyperspace spanned by the first <formula id="12">$ d-1$</formula> standard base vectors. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/constructions_d.h" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgKernelDFunctions_1ga433853179f3d0e0d2b7929723b584517" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FT</type>
        <definition>FT CGAL::squared_distance</definition>
        <argsstring>(Point_d&lt; R &gt; p, Point_d&lt; R &gt; q)</argsstring>
        <name>squared_distance</name>
        <param>
          <type>Point_d&lt; R &gt;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>Point_d&lt; R &gt;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>computes the square of the Euclidean distance between the two points <formula id="11">$ p$</formula> and <formula id="13">$ q$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The dimensions of <formula id="11">$ p$</formula> and <formula id="13">$ q$</formula> are the same. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/constructions_d.h" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgKernelDFunctions_1gaeb24896ff93503dab57f64b3b6934274" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::do_intersect</definition>
        <argsstring>(Type1&lt; R &gt; obj1, Type2&lt; R &gt; obj2)</argsstring>
        <name>do_intersect</name>
        <param>
          <type>Type1&lt; R &gt;</type>
          <declname>obj1</declname>
        </param>
        <param>
          <type>Type2&lt; R &gt;</type>
          <declname>obj2</declname>
        </param>
        <briefdescription>
<para>checks whether <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput> intersect. </para>        </briefdescription>
        <detaileddescription>
<para>Two objects <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput> intersect if there is a point <computeroutput>p</computeroutput> that is part of both <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput>. The intersection region of those two objects is defined as the set of all points <computeroutput>p</computeroutput> that are part of both <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput>.</para><para><simplesect kind="pre"><para>The objects are of the same dimension.</para></simplesect>
The types <computeroutput>Type1</computeroutput> and <computeroutput>Type2</computeroutput> can be any of the following:</para><para><itemizedlist>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Point__d" kindref="compound">Point_d</ref>&lt;R&gt;</computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Line__d" kindref="compound">Line_d</ref>&lt;R&gt;</computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Ray__d" kindref="compound">Ray_d</ref>&lt;R&gt;</computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Segment__d" kindref="compound">Segment_d</ref>&lt;R&gt;</computeroutput></para></listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Hyperplane__d" kindref="compound">Hyperplane_d</ref>&lt;R&gt;</computeroutput></para></listitem></itemizedlist>
</para><para><simplesect kind="see"><para><computeroutput><ref refid="group__intersection__linear__grp_1gab77f3cd98c4c4ff7acff59c98ab88ff0" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">intersection</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/intersections_d.h" line="24" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgKernelDFunctions_1ga0aa3e8b6bdf1bff509f8e2672ef194d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cpp11::result_of&lt; R::Intersect_d(Type1&lt; R &gt;, Type2&lt; R &gt;)&gt;::type</type>
        <definition>cpp11::result_of&lt;R::Intersect_d(Type1&lt;R&gt;, Type2&lt;R&gt;)&gt;::type CGAL::intersection</definition>
        <argsstring>(Type1&lt; R &gt; f1, Type2&lt; R &gt; f2)</argsstring>
        <name>intersection</name>
        <param>
          <type>Type1&lt; R &gt;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>Type2&lt; R &gt;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
<para>returns the intersection between <computeroutput>f1</computeroutput> and <computeroutput>f2</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The objects are of the same dimension.</para></simplesect>
The same functionality is also available through the functor <computeroutput>Kernel::Intersect_d</computeroutput>.</para><para>The following table gives the possible values for <computeroutput>Type1</computeroutput> and <computeroutput>Type2</computeroutput>.</para><para>The return type can be obtained through <computeroutput><ref refid="structCGAL_1_1cpp11_1_1result__of" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">cpp11::result_of</ref>&lt;Kernel::Intersect_d(A, B)&gt;::type</computeroutput>. It is equivalent to <computeroutput>boost::optional&lt; boost::variant&lt; T... &gt; &gt;</computeroutput>, the last column in the table providing the template parameter pack.</para><para> <table rows="10" cols="3"><row>
<entry thead="yes"><para>Type1  </para></entry><entry thead="yes"><para>Type2  </para></entry><entry thead="yes"><para><computeroutput>T...</computeroutput>   </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Line__d" kindref="compound">Line_d</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Line__d" kindref="compound">Line_d</ref>  </para></entry><entry thead="no"><para><table rows="2" cols="1"><row>
<entry thead="no"><para><ref refid="classCGAL_1_1Point__d" kindref="compound">Point_d</ref> </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Line__d" kindref="compound">Line_d</ref> </para></entry></row>
</table>
</para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Segment__d" kindref="compound">Segment_d</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Line__d" kindref="compound">Line_d</ref>  </para></entry><entry thead="no"><para><table rows="2" cols="1"><row>
<entry thead="no"><para><ref refid="classCGAL_1_1Point__d" kindref="compound">Point_d</ref> </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Segment__d" kindref="compound">Segment_d</ref> </para></entry></row>
</table>
</para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Segment__d" kindref="compound">Segment_d</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Segment__d" kindref="compound">Segment_d</ref>  </para></entry><entry thead="no"><para><table rows="2" cols="1"><row>
<entry thead="no"><para><ref refid="classCGAL_1_1Point__d" kindref="compound">Point_d</ref> </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Segment__d" kindref="compound">Segment_d</ref> </para></entry></row>
</table>
</para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Ray__d" kindref="compound">Ray_d</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Line__d" kindref="compound">Line_d</ref>  </para></entry><entry thead="no"><para><table rows="2" cols="1"><row>
<entry thead="no"><para><ref refid="classCGAL_1_1Point__d" kindref="compound">Point_d</ref> </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Ray__d" kindref="compound">Ray_d</ref> </para></entry></row>
</table>
</para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Ray__d" kindref="compound">Ray_d</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Segment__d" kindref="compound">Segment_d</ref>  </para></entry><entry thead="no"><para><table rows="2" cols="1"><row>
<entry thead="no"><para><ref refid="classCGAL_1_1Point__d" kindref="compound">Point_d</ref> </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Segment__d" kindref="compound">Segment_d</ref> </para></entry></row>
</table>
</para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Ray__d" kindref="compound">Ray_d</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Ray__d" kindref="compound">Ray_d</ref>  </para></entry><entry thead="no"><para><table rows="3" cols="1"><row>
<entry thead="no"><para><ref refid="classCGAL_1_1Point__d" kindref="compound">Point_d</ref> </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Segment__d" kindref="compound">Segment_d</ref> </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Ray__d" kindref="compound">Ray_d</ref> </para></entry></row>
</table>
</para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Hyperplane__d" kindref="compound">Hyperplane_d</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Line__d" kindref="compound">Line_d</ref>  </para></entry><entry thead="no"><para><table rows="2" cols="1"><row>
<entry thead="no"><para><ref refid="classCGAL_1_1Point__d" kindref="compound">Point_d</ref> </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Line__d" kindref="compound">Line_d</ref> </para></entry></row>
</table>
</para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Hyperplane__d" kindref="compound">Hyperplane_d</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Ray__d" kindref="compound">Ray_d</ref>  </para></entry><entry thead="no"><para><table rows="2" cols="1"><row>
<entry thead="no"><para><ref refid="classCGAL_1_1Point__d" kindref="compound">Point_d</ref> </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Ray__d" kindref="compound">Ray_d</ref> </para></entry></row>
</table>
</para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Hyperplane__d" kindref="compound">Hyperplane_d</ref>  </para></entry><entry thead="no"><para><ref refid="classCGAL_1_1Segment__d" kindref="compound">Segment_d</ref>  </para></entry><entry thead="no"><para><table rows="2" cols="1"><row>
<entry thead="no"><para><ref refid="classCGAL_1_1Point__d" kindref="compound">Point_d</ref> </para></entry></row>
<row>
<entry thead="no"><para><ref refid="classCGAL_1_1Segment__d" kindref="compound">Segment_d</ref> </para></entry></row>
</table>
</para></entry></row>
</table>
</para><para><bold>Example</bold><linebreak/>
</para><para>The following example demonstrates the most common use of <computeroutput>intersection</computeroutput> routines.</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;CGAL/intersections_d.h&gt;<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>R&gt;</highlight></codeline>
<codeline><highlight class="normal">struct<sp/>Intersection_visitor<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>typedef<sp/>void<sp/>result_type;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>operator()(const<sp/>Point_d&lt;R&gt;&amp;<sp/>p)<sp/>const<sp/>{<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>handle<sp/>point</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>operator()(const<sp/>Segment_d&lt;R&gt;&amp;<sp/>s)<sp/>const<sp/>{<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>handle<sp/>segment<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>R&gt;<sp/></highlight></codeline>
<codeline><highlight class="normal">void<sp/>foo(Segment_d&lt;R&gt;<sp/>seg,<sp/>Line_d&lt;R&gt;<sp/>lin)<sp/></highlight></codeline>
<codeline><highlight class="normal">{<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>with<sp/>C++11<sp/>support</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>auto<sp/>result<sp/>=<sp/>intersection(seg,<sp/>lin);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>without<sp/>C++11<sp/>support</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>typename<sp/>cpp11::result_of&lt;R::Intersect_d(Segment_d&lt;R&gt;,<sp/>Line_d&lt;R&gt;)&gt;::type</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>intersection(seg,<sp/>lin);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>if(result)<sp/>{<sp/>boost::apply_visitor(Intersection_visitor&lt;R&gt;(),<sp/>*result);<sp/>}<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>else<sp/>{<sp/>//<sp/>no<sp/>intersection<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight></codeline>
</programlisting></para><para><simplesect kind="see"><para><computeroutput><ref refid="group__do__intersect__linear__grp_1ga9514a218a097ac392d21775368d3dd0d" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">do_intersect</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classKernel__d_1_1Intersect__d" kindref="compound">Kernel_d::Intersect_d</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__intersection__grp_1ga66850ea839dafff504fbd39e141fcc79" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL_INTERSECTION_VERSION</ref> </para></simplesect>
<simplesect kind="see"><para><ulink url="http://www.boost.org/doc/libs/release/libs/optional/index.html"><computeroutput>boost::optional</computeroutput></ulink> </para></simplesect>
<simplesect kind="see"><para><ulink url="http://www.boost.org/doc/html/variant.html"><computeroutput>boost::variant</computeroutput></ulink> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1cpp11_1_1result__of" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">cpp11::result_of</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/intersections_d.h" line="167" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgKernelDFunctions_1gaaca9c7ee1de7b5694c527a2cb0d2bd99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::affinely_independent</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last)</argsstring>
        <name>affinely_independent</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>returns true iff the points in <computeroutput>A = tuple [first,last)</computeroutput> are affinely independent. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The objects are of the same dimension. </para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>has <computeroutput><ref refid="classCGAL_1_1Point__d" kindref="compound">Point_d</ref>&lt;R&gt;</computeroutput> as value type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/predicates_d.h" line="16" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgKernelDFunctions_1ga469edbb6a719b355da3eb8a78ad93daf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int CGAL::affine_rank</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last)</argsstring>
        <name>affine_rank</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>computes the affine rank of the points in <computeroutput>A = tuple [first,last)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The objects in <formula id="4">$ A$</formula> are of the same dimension. </para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>has <computeroutput><ref refid="classCGAL_1_1Point__d" kindref="compound">Point_d</ref>&lt;R&gt;</computeroutput> as value type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/predicates_d.h" line="28" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgKernelDFunctions_1ga7acf561e832f554032b13a756355fc51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_lexicographically</definition>
        <argsstring>(const Point_d&lt; R &gt; &amp;p, const Point_d&lt; R &gt; &amp;q)</argsstring>
        <name>compare_lexicographically</name>
        <param>
          <type>const Point_d&lt; R &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const Point_d&lt; R &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Compares the Cartesian coordinates of points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> lexicographically in ascending order of its Cartesian components <computeroutput>p[i]</computeroutput> and <computeroutput>q[i]</computeroutput> for <formula id="108">$ i = 0,\ldots,d-1$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>p.dimension() == q.dimension()</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/predicates_d.h" line="41" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgKernelDFunctions_1ga19451c489a0e60d4be0a7d4f5462962d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::contained_in_affine_hull</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last, const Point_d&lt; R &gt; &amp;p)</argsstring>
        <name>contained_in_affine_hull</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>last</declname>
        </param>
        <param>
          <type>const Point_d&lt; R &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>determines whether <formula id="11">$ p$</formula> is contained in the affine hull of the points in <computeroutput>A = tuple [first,last)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The objects in <computeroutput>A</computeroutput> are of the same dimension.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>has <computeroutput><ref refid="classCGAL_1_1Point__d" kindref="compound">Point_d</ref>&lt;R&gt;</computeroutput> as value type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/predicates_d.h" line="55" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgKernelDFunctions_1gaefd117396ced79cbf0399fb3efc0d212" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::contained_in_linear_hull</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last, const Vector_d&lt; R &gt; &amp;v)</argsstring>
        <name>contained_in_linear_hull</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>last</declname>
        </param>
        <param>
          <type>const Vector_d&lt; R &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>determines whether <formula id="21">$ v$</formula> is contained in the linear hull of the vectors in <computeroutput>A = tuple [first,last)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The objects in <formula id="4">$ A$</formula> are of the same dimension.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>has <computeroutput><ref refid="classCGAL_1_1Vector__d" kindref="compound">Vector_d</ref>&lt;R&gt;</computeroutput> as value type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/predicates_d.h" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgKernelDFunctions_1ga47799f4718eeab7474e370943b5b9b6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::contained_in_simplex</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last, const Point_d&lt; R &gt; &amp;p)</argsstring>
        <name>contained_in_simplex</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>last</declname>
        </param>
        <param>
          <type>const Point_d&lt; R &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>determines whether <formula id="11">$ p$</formula> is contained in the simplex of the points in <computeroutput>A = tuple [first,last)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The objects in <formula id="4">$ A$</formula> are of the same dimension and affinely independent. </para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>has <computeroutput><ref refid="classCGAL_1_1Point__d" kindref="compound">Point_d</ref>&lt;R&gt;</computeroutput> as value type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/predicates_d.h" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgKernelDFunctions_1gaaf434c87ede524fe801cac1e1ffa6d5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::lexicographically_smaller</definition>
        <argsstring>(const Point_d&lt; R &gt; &amp;p, const Point_d&lt; R &gt; &amp;q)</argsstring>
        <name>lexicographically_smaller</name>
        <param>
          <type>const Point_d&lt; R &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const Point_d&lt; R &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff <computeroutput>p</computeroutput> is lexicographically smaller than <computeroutput>q</computeroutput> with respect to Cartesian lexicographic order of points. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>p.dimension() == q.dimension()</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/predicates_d.h" line="97" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgKernelDFunctions_1ga38de0c7326c1028d17ff6ca0df227f6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::lexicographically_smaller_or_equal</definition>
        <argsstring>(const Point_d&lt; R &gt; &amp;p, const Point_d&lt; R &gt; &amp;q)</argsstring>
        <name>lexicographically_smaller_or_equal</name>
        <param>
          <type>const Point_d&lt; R &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const Point_d&lt; R &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff <formula id="11">$ p$</formula> is lexicographically smaller than <formula id="13">$ q$</formula> with respect to Cartesian lexicographic order of points or equal to <formula id="13">$ q$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>p.dimension() == q.dimension()</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/predicates_d.h" line="110" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgKernelDFunctions_1gaa40d2aab33098605820a8961ebda7f98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::linearly_independent</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last)</argsstring>
        <name>linearly_independent</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>decides whether the vectors in <computeroutput>A = tuple [first,last)</computeroutput> are linearly independent. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The objects in <computeroutput>A</computeroutput> are of the same dimension. </para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>has <computeroutput><ref refid="classCGAL_1_1Vector__d" kindref="compound">Vector_d</ref>&lt;R&gt;</computeroutput> as value type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/predicates_d.h" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgKernelDFunctions_1ga51ab7291fd4679a33bec5dd2cd1d5b97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int CGAL::linear_rank</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last)</argsstring>
        <name>linear_rank</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>computes the linear rank of the vectors in <computeroutput>A = tuple [first,last)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The objects are of the same dimension. </para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>has <computeroutput><ref refid="classCGAL_1_1Vector__d" kindref="compound">Vector_d</ref>&lt;R&gt;</computeroutput> as value type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/predicates_d.h" line="137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgKernelDFunctions_1ga140039774b89a338321c36e14732b787" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Orientation</ref></type>
        <definition>Orientation CGAL::orientation</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last)</argsstring>
        <name>orientation</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>determines the orientation of the points of the tuple <computeroutput>A = tuple [first,last)</computeroutput> where <formula id="4">$ A$</formula> consists of <formula id="5">$ d+1$</formula> points in <formula id="6">$ d$</formula>-space. </para>        </briefdescription>
        <detaileddescription>
<para>This is the sign of the determinant <formula id="109">\[ \left| \begin{array}{cccc} 1 &amp; 1 &amp; 1 &amp; 1 \\ A[0] &amp; A[1] &amp; \dots&amp; A[d] \end{array} \right| \]</formula> where <computeroutput>A[i]</computeroutput> denotes the Cartesian coordinate vector of the <formula id="34">$ i$</formula>-th point in <formula id="4">$ A$</formula>. <simplesect kind="pre"><para><computeroutput>size [first,last) == d+1</computeroutput> and <computeroutput>A[i].dimension() == d</computeroutput> <formula id="110">$ \forall0 \leq i \leq d$</formula>.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>has <computeroutput><ref refid="classCGAL_1_1Point__d" kindref="compound">Point_d</ref>&lt;R&gt;</computeroutput> as value type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/predicates_d.h" line="157" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgKernelDFunctions_1gaec9abb52ce5001e58964d2d57e5b0e3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1gaf6030e89dadcc1f45369b0cdc5d9e111" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Bounded_side</ref></type>
        <definition>Bounded_side CGAL::side_of_bounded_sphere</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last, const Point_d&lt; R &gt; &amp;p)</argsstring>
        <name>side_of_bounded_sphere</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>last</declname>
        </param>
        <param>
          <type>const Point_d&lt; R &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>returns the relative position of point <computeroutput>p</computeroutput> to the sphere defined by <computeroutput>A = tuple [first,last)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The order of the points of <formula id="4">$ A$</formula> does not matter.</para><para><simplesect kind="pre"><para><computeroutput>orientation(first,last)</computeroutput> is not <computeroutput>ZERO</computeroutput>. </para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>has <computeroutput><ref refid="classCGAL_1_1Point__d" kindref="compound">Point_d</ref>&lt;R&gt;</computeroutput> as value type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/predicates_d.h" line="171" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgKernelDFunctions_1gac43086d90c589b90f54f2e5532dcc01b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga5006dd2552d97fa577d81bd819c0f979" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Oriented_side</ref></type>
        <definition>Oriented_side CGAL::side_of_oriented_sphere</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last, const Point_d&lt; R &gt; &amp;p)</argsstring>
        <name>side_of_oriented_sphere</name>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>last</declname>
        </param>
        <param>
          <type>const Point_d&lt; R &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>returns the relative position of point <computeroutput>p</computeroutput> to the oriented sphere defined by the points in <computeroutput>A = tuple [first,last)</computeroutput> The order of the points in <formula id="4">$ A$</formula> is important, since it determines the orientation of the implicitly constructed sphere. </para>        </briefdescription>
        <detaileddescription>
<para>If the points in <formula id="4">$ A$</formula> are positively oriented, the positive side is the bounded interior of the sphere.</para><para><simplesect kind="pre"><para><computeroutput>A</computeroutput> contains <formula id="5">$ d+1$</formula> points in <formula id="6">$ d$</formula>-space. </para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>has <computeroutput><ref refid="classCGAL_1_1Point__d" kindref="compound">Point_d</ref>&lt;R&gt;</computeroutput> as value type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/predicates_d.h" line="188" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
