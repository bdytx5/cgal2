<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classMatrix" kind="class" language="C++" prot="public">
    <compoundname>Matrix</compoundname>
    <includes local="no">Concepts/Matrix.h</includes>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classMatrix_1a9824b9554cf8e5336584a2cc8512369e" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type Matrix::NT</definition>
        <argsstring></argsstring>
        <name>NT</name>
        <briefdescription>
<para>the ring type of the components. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="21" column="1" bodyfile="Concepts/Matrix.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classMatrix_1a217ed53941f9de733ce7d7c2579e7d86" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type Matrix::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
<para>bidirectional iterator for accessing all components row-wise. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="27" column="1" bodyfile="Concepts/Matrix.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classMatrix_1a392bc2d44e8af49545d2308550ad0dbd" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type Matrix::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
<para>bidirectional iterator for accessing all components row-wise. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="33" column="1" bodyfile="Concepts/Matrix.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classMatrix_1ae9024e5963cb6b4aa4b2295bbc0c88d2" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type Matrix::row_iterator</definition>
        <argsstring></argsstring>
        <name>row_iterator</name>
        <briefdescription>
<para>random access iterator for accessing row entries. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="40" column="1" bodyfile="Concepts/Matrix.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classMatrix_1a44515023f5cf0cd65df118ed001c83a8" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type Matrix::const_row_iterator</definition>
        <argsstring></argsstring>
        <name>const_row_iterator</name>
        <briefdescription>
<para>random access iterator for accessing row entries. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="46" column="1" bodyfile="Concepts/Matrix.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classMatrix_1a4362b727afd4144446c61962e1bf2407" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type Matrix::column_iterator</definition>
        <argsstring></argsstring>
        <name>column_iterator</name>
        <briefdescription>
<para>random access iterator for accessing column entries. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="52" column="1" bodyfile="Concepts/Matrix.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classMatrix_1a49f2fa1d9d94629436b5ec2eb5b05f3b" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type Matrix::const_column_iterator</definition>
        <argsstring></argsstring>
        <name>const_column_iterator</name>
        <briefdescription>
<para>random access iterator for accessing column entries. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="58" column="1" bodyfile="Concepts/Matrix.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classMatrix_1a85b30c3da6b3e07df50b7e8d2a58ad62" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type Matrix::Identity</definition>
        <argsstring></argsstring>
        <name>Identity</name>
        <briefdescription>
<para>a tag class for identity initialization </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="63" column="1" bodyfile="Concepts/Matrix.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classMatrix_1a96c25e03ef5651127fa4f45c5114f97a" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type Matrix::Vector</definition>
        <argsstring></argsstring>
        <name>Vector</name>
        <briefdescription>
<para>the vector type used. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="68" column="1" bodyfile="Concepts/Matrix.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classMatrix_1a2dba13c45127354c9f75ef576f49269b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Matrix::Matrix</definition>
        <argsstring>()</argsstring>
        <name>Matrix</name>
        <briefdescription>
<para>creates an instance <computeroutput>M</computeroutput> of type <computeroutput><ref refid="classMatrix" kindref="compound">Matrix</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="79" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classMatrix_1adc0e82f527cab2ae7463140cf8a072a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Matrix::Matrix</definition>
        <argsstring>(int n)</argsstring>
        <name>Matrix</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>creates an instance <computeroutput>M</computeroutput> of type <computeroutput><ref refid="classMatrix" kindref="compound">Matrix</ref></computeroutput> of dimension <formula id="139">$ n \times n$</formula> initialized to the zero matrix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classMatrix_1a75e25f70a760fa9625afa33a3c44af8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Matrix::Matrix</definition>
        <argsstring>(int m, int n)</argsstring>
        <name>Matrix</name>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>creates an instance <computeroutput>M</computeroutput> of type <computeroutput><ref refid="classMatrix" kindref="compound">Matrix</ref></computeroutput> of dimension <formula id="140">$ m \times n$</formula> initialized to the zero matrix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="93" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classMatrix_1a83527e2ae050ee6beea92944552fa2f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Matrix::Matrix</definition>
        <argsstring>(std::pair&lt; int, int &gt; p)</argsstring>
        <name>Matrix</name>
        <param>
          <type>std::pair&lt; int, int &gt;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>creates an instance <computeroutput>M</computeroutput> of type <computeroutput><ref refid="classMatrix" kindref="compound">Matrix</ref></computeroutput> of dimension <computeroutput>p.first</computeroutput> <formula id="119">$ \times$</formula><computeroutput>p.second</computeroutput> initialized to the zero matrix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classMatrix_1ab7b0b88e8d9db6917314deebf3b6058f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Matrix::Matrix</definition>
        <argsstring>(int n, Identity, NT x=NT(1))</argsstring>
        <name>Matrix</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classMatrix_1a85b30c3da6b3e07df50b7e8d2a58ad62" kindref="member">Identity</ref></type>
        </param>
        <param>
          <type><ref refid="classMatrix_1a9824b9554cf8e5336584a2cc8512369e" kindref="member">NT</ref></type>
          <declname>x</declname>
          <defval><ref refid="classMatrix_1a9824b9554cf8e5336584a2cc8512369e" kindref="member">NT</ref>(1)</defval>
        </param>
        <briefdescription>
<para>creates an instance <computeroutput>M</computeroutput> of type <computeroutput><ref refid="classMatrix" kindref="compound">Matrix</ref></computeroutput> of dimension <formula id="139">$ n \times n$</formula> initialized to the identity matrix (times <computeroutput>x</computeroutput>). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classMatrix_1aa729a3721fe888ddc2a7b782d0556039" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Matrix::Matrix</definition>
        <argsstring>(int m, int n, NT x)</argsstring>
        <name>Matrix</name>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classMatrix_1a9824b9554cf8e5336584a2cc8512369e" kindref="member">NT</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>creates an instance <computeroutput>M</computeroutput> of type <computeroutput><ref refid="classMatrix" kindref="compound">Matrix</ref></computeroutput> of dimension <formula id="140">$ m \times n$</formula> initialized to the matrix with <computeroutput>x</computeroutput> entries. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classMatrix_1a3cffcaf69171a9fbc6b5263b617f1090" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Forward_iterator</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Matrix::Matrix</definition>
        <argsstring>(Forward_iterator first, Forward_iterator last)</argsstring>
        <name>Matrix</name>
        <param>
          <type>Forward_iterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>Forward_iterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>creates an instance <computeroutput>M</computeroutput> of type <computeroutput><ref refid="classMatrix" kindref="compound">Matrix</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Let <formula id="85">$ S$</formula> be the ordered set of <formula id="141">$ n$</formula> column-vectors of common dimension <formula id="142">$ m$</formula> as given by the iterator range <computeroutput>[first,last)</computeroutput>. <computeroutput>M</computeroutput> is initialized to an <formula id="140">$ m \times n$</formula> matrix with the columns as specified by <formula id="85">$ S$</formula>.</para><para><simplesect kind="pre"><para><computeroutput>Forward_iterator</computeroutput> has a value type <computeroutput>V</computeroutput> from which we require to provide a iterator type <computeroutput>V::const_iterator</computeroutput>, to have <computeroutput>V::value_type == NT</computeroutput>.</para></simplesect>
Note that <computeroutput><ref refid="classVector" kindref="compound">Vector</ref></computeroutput> or <computeroutput>std::vector&lt;NT&gt;</computeroutput> fulfill these requirements. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="128" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classMatrix_1a1455e35aa7e523d2c265f404fcb1958f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Matrix::Matrix</definition>
        <argsstring>(std::vector&lt; Vector &gt; A)</argsstring>
        <name>Matrix</name>
        <param>
          <type>std::vector&lt; <ref refid="classMatrix_1a96c25e03ef5651127fa4f45c5114f97a" kindref="member">Vector</ref> &gt;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>creates an instance <computeroutput>M</computeroutput> of type <computeroutput><ref refid="classMatrix" kindref="compound">Matrix</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Let <formula id="4">$ A$</formula> be an array of <formula id="141">$ n$</formula> column-vectors of common dimension <formula id="142">$ m$</formula>. <computeroutput>M</computeroutput> is initialized to an <formula id="140">$ m \times n$</formula> matrix with the columns as specified by <formula id="4">$ A$</formula>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="136" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <memberdef kind="function" id="classMatrix_1a5f3f90efa561d593a70b5de8cabbfe8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Matrix::row_dimension</definition>
        <argsstring>()</argsstring>
        <name>row_dimension</name>
        <briefdescription>
<para>returns <formula id="141">$ n$</formula>, the number of rows of <computeroutput>M</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classMatrix_1a84b1991675f9ef20c1998db073b30050" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Matrix::column_dimension</definition>
        <argsstring>()</argsstring>
        <name>column_dimension</name>
        <briefdescription>
<para>returns <formula id="142">$ m$</formula>, the number of columns of <computeroutput>M</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="153" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classMatrix_1a0494fa05d792187a1f734ce7f602b584" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; int, int &gt;</type>
        <definition>std::pair&lt;int,int&gt; Matrix::dimension</definition>
        <argsstring>()</argsstring>
        <name>dimension</name>
        <briefdescription>
<para>returns <formula id="143">$ (m,n)$</formula>, the dimension pair of <computeroutput>M</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="159" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classMatrix_1a1db49a4b08609140a29e14c5e319286b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classMatrix_1a96c25e03ef5651127fa4f45c5114f97a" kindref="member">Vector</ref></type>
        <definition>Vector Matrix::row</definition>
        <argsstring>(int i)</argsstring>
        <name>row</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>returns the <formula id="34">$ i$</formula>-th row of <computeroutput>M</computeroutput> (an <formula id="142">$ m$</formula> - vector). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><formula id="144">$ 0 \le i \le m - 1$</formula>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="167" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classMatrix_1a5b4cc758ca7e4fcef39c35e56a22c859" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classMatrix_1a96c25e03ef5651127fa4f45c5114f97a" kindref="member">Vector</ref></type>
        <definition>Vector Matrix::column</definition>
        <argsstring>(int i)</argsstring>
        <name>column</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>returns the <formula id="34">$ i$</formula>-th column of <computeroutput>M</computeroutput> (an <formula id="141">$ n$</formula> - vector). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><formula id="145">$ 0 \le i \le n - 1$</formula>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="175" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classMatrix_1ae926cb74187e0f30d0173002054fd4f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classMatrix_1a9824b9554cf8e5336584a2cc8512369e" kindref="member">NT</ref> &amp;</type>
        <definition>NT&amp; Matrix::operator()</definition>
        <argsstring>(int i, int j)</argsstring>
        <name>operator()</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>returns <formula id="146">$ M_{i,j}$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><formula id="147">$ 0\le i\le m-1$</formula> and <formula id="148">$ 0\le j\le n-1$</formula>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="181" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classMatrix_1a477f567a0089e58fc1113723b599d32b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Matrix::swap_rows</definition>
        <argsstring>(int i, int j)</argsstring>
        <name>swap_rows</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>swaps rows <formula id="34">$ i$</formula> and <formula id="149">$ j$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><formula id="147">$ 0\le i\le m-1$</formula> and <formula id="150">$ 0\le j\le m-1$</formula>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="188" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classMatrix_1a428136a68225468d7d43e619824f2081" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Matrix::swap_columns</definition>
        <argsstring>(int i, int j)</argsstring>
        <name>swap_columns</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>swaps columns <formula id="34">$ i$</formula> and <formula id="149">$ j$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><formula id="151">$ 0\le i\le n-1$</formula> and <formula id="148">$ 0\le j\le n-1$</formula>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="196" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classMatrix_1ab1eb34fc4e69afde03fe9d36e961846a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classMatrix_1ae9024e5963cb6b4aa4b2295bbc0c88d2" kindref="member">row_iterator</ref></type>
        <definition>row_iterator Matrix::row_begin</definition>
        <argsstring>(int i)</argsstring>
        <name>row_begin</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>an iterator pointing to the first entry of the <formula id="34">$ i$</formula>th row. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><formula id="147">$ 0\le i\le m-1$</formula>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="204" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classMatrix_1a77bda11d650e21141d6693f3a49adc27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classMatrix_1ae9024e5963cb6b4aa4b2295bbc0c88d2" kindref="member">row_iterator</ref></type>
        <definition>row_iterator Matrix::row_end</definition>
        <argsstring>(int i)</argsstring>
        <name>row_end</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>an iterator pointing beyond the last entry of the <formula id="34">$ i$</formula>th row. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><formula id="147">$ 0\le i\le m-1$</formula>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="212" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classMatrix_1ab0e4740a8276f8ed4260c40f7cb921c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classMatrix_1a44515023f5cf0cd65df118ed001c83a8" kindref="member">const_row_iterator</ref></type>
        <definition>const_row_iterator Matrix::row_begin</definition>
        <argsstring>(int i) const</argsstring>
        <name>row_begin</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>an iterator pointing to the first entry of the <formula id="34">$ i$</formula>th row. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><formula id="147">$ 0\le i\le m-1$</formula>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="220" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classMatrix_1add12f46f4fe2e5f4d28619102dce5d03" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classMatrix_1a44515023f5cf0cd65df118ed001c83a8" kindref="member">const_row_iterator</ref></type>
        <definition>const_row_iterator Matrix::row_end</definition>
        <argsstring>(int i) const</argsstring>
        <name>row_end</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>an iterator pointing beyond the last entry of the <formula id="34">$ i$</formula>th row. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><formula id="147">$ 0\le i\le m-1$</formula>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="228" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classMatrix_1af7c3d6c831c98700660c73bf594b4a47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classMatrix_1a4362b727afd4144446c61962e1bf2407" kindref="member">column_iterator</ref></type>
        <definition>column_iterator Matrix::column_begin</definition>
        <argsstring>(int i)</argsstring>
        <name>column_begin</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>an iterator pointing to the first entry of the <formula id="34">$ i$</formula>th column. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><formula id="151">$ 0\le i\le n-1$</formula>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="237" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classMatrix_1a548f2bc358abc31ac92d5510d03776d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classMatrix_1a4362b727afd4144446c61962e1bf2407" kindref="member">column_iterator</ref></type>
        <definition>column_iterator Matrix::column_end</definition>
        <argsstring>(int i)</argsstring>
        <name>column_end</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>an iterator pointing beyond the last entry of the <formula id="34">$ i$</formula>th column. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><formula id="151">$ 0\le i\le n-1$</formula>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="245" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classMatrix_1a23ff97d6aaf0ac34cb187f77378ded9a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classMatrix_1a49f2fa1d9d94629436b5ec2eb5b05f3b" kindref="member">const_column_iterator</ref></type>
        <definition>const_column_iterator Matrix::column_begin</definition>
        <argsstring>(int i) const</argsstring>
        <name>column_begin</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>an iterator pointing to the first entry of the <formula id="34">$ i$</formula>th column. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><formula id="151">$ 0\le i\le n-1$</formula>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="254" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classMatrix_1a772ec96751865b60cdea2453dab427d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classMatrix_1a49f2fa1d9d94629436b5ec2eb5b05f3b" kindref="member">const_column_iterator</ref></type>
        <definition>const_column_iterator Matrix::column_end</definition>
        <argsstring>(int i) const</argsstring>
        <name>column_end</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>an iterator pointing beyond the last entry of the <formula id="34">$ i$</formula>th column. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><formula id="151">$ 0\le i\le n-1$</formula>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="262" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classMatrix_1a814c64984887454f7fe6e86c36de24f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classMatrix_1a217ed53941f9de733ce7d7c2579e7d86" kindref="member">iterator</ref></type>
        <definition>iterator Matrix::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
<para>an iterator pointing to the first entry of <formula id="15">$ M$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="269" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classMatrix_1a326db74b499714fbd1e12154b9adf0f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>terator</type>
        <definition>terator Matrix::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
<para>an iterator pointing beyond the last entry of <formula id="15">$ M$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="275" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classMatrix_1a314cec92a8849dcb0187467ca42b4b9a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classMatrix_1a392bc2d44e8af49545d2308550ad0dbd" kindref="member">const_iterator</ref></type>
        <definition>const_iterator Matrix::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
<para>an iterator pointing to the first entry of <formula id="15">$ M$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="281" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classMatrix_1a8a2d66526c3d0367743327d535fde391" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const_terator</type>
        <definition>const_terator Matrix::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
<para>an iterator pointing beyond the last entry of <formula id="15">$ M$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="287" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classMatrix_1a729d045470fb7510e80c145de014449c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Matrix::operator==</definition>
        <argsstring>(const Matrix &amp;M1)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>M1</declname>
        </param>
        <briefdescription>
<para>Test for equality. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="293" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classMatrix_1a38496f7249c77a6add5b56c267652f29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Matrix::operator!=</definition>
        <argsstring>(const Matrix &amp;M1)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>M1</declname>
        </param>
        <briefdescription>
<para>Test for inequality. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="298" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Arithmetic Operators</header>
      <memberdef kind="function" id="classMatrix_1abfa64c600f3001dac24409b53fee609c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classMatrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix Matrix::operator+</definition>
        <argsstring>(const Matrix &amp;M1)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>M1</declname>
        </param>
        <briefdescription>
<para>Addition. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>M.row_dimension() == M1.row_dimension()</computeroutput> </para></simplesect>
<simplesect kind="pre"><para><computeroutput>M.column_dimension() == M1.column_dimension()</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="310" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classMatrix_1aea017627b8806f04e254371f633b39d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classMatrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix Matrix::operator-</definition>
        <argsstring>(const Matrix &amp;M1)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>M1</declname>
        </param>
        <briefdescription>
<para>Subtraction. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>M.row_dimension() == M1.row_dimension()</computeroutput> </para></simplesect>
<simplesect kind="pre"><para><computeroutput>M.column_dimension() == M1.column_dimension()</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="318" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classMatrix_1aeeb01663c821db08857fc7ae58a67511" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classMatrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix Matrix::operator-</definition>
        <argsstring>()</argsstring>
        <name>operator-</name>
        <briefdescription>
<para>Negation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="323" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classMatrix_1a0b5e6058d888dcc0079c6cda53da9789" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classMatrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix Matrix::operator*</definition>
        <argsstring>(const Matrix &amp;M1)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>M1</declname>
        </param>
        <briefdescription>
<para>Multiplication. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>M.column_dimension() = M1.row_dimension()</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="330" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classMatrix_1a53cf4caa3cb1f5d286618c3f550b1bc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classMatrix_1a96c25e03ef5651127fa4f45c5114f97a" kindref="member">Vector</ref></type>
        <definition>Vector Matrix::operator*</definition>
        <argsstring>(const Vector &amp;vec)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classMatrix_1a96c25e03ef5651127fa4f45c5114f97a" kindref="member">Vector</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Multiplication with vector. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>M.column_dimension() = vec.dimension()</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="339" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classMatrix_1a61e6a454f3ad272b830f63eae0bf81d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classMatrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix Matrix::operator*</definition>
        <argsstring>(const NT &amp;x, const Matrix &amp;M)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classMatrix_1a9824b9554cf8e5336584a2cc8512369e" kindref="member">NT</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>M</declname>
        </param>
        <briefdescription>
<para>Multiplication of every entry with <computeroutput>x</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="344" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classMatrix_1aaa6cf4181364809544e9c0317868320a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classMatrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix Matrix::operator*</definition>
        <argsstring>(const Matrix &amp;M, const NT &amp;x)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>M</declname>
        </param>
        <param>
          <type>const <ref refid="classMatrix_1a9824b9554cf8e5336584a2cc8512369e" kindref="member">NT</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Multiplication of every entry with <computeroutput>x</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Matrix.h" line="349" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An instance of data type <computeroutput><ref refid="classMatrix" kindref="compound">Matrix</ref></computeroutput> is a matrix of variables of number type <computeroutput>NT</computeroutput>. The types <computeroutput><ref refid="classMatrix" kindref="compound">Matrix</ref></computeroutput> and <computeroutput><ref refid="classVector" kindref="compound">Vector</ref></computeroutput> together realize many functions of basic linear algebra. </para>    </briefdescription>
    <detaileddescription>
<para> </para>    </detaileddescription>
    <location file="Concepts/Matrix.h" line="12" column="1" bodyfile="Concepts/Matrix.h" bodystart="12" bodyend="353"/>
    <listofallmembers>
      <member refid="classMatrix_1a814c64984887454f7fe6e86c36de24f5" prot="public" virt="non-virtual"><scope>Matrix</scope><name>begin</name></member>
      <member refid="classMatrix_1a314cec92a8849dcb0187467ca42b4b9a" prot="public" virt="non-virtual"><scope>Matrix</scope><name>begin</name></member>
      <member refid="classMatrix_1a5b4cc758ca7e4fcef39c35e56a22c859" prot="public" virt="non-virtual"><scope>Matrix</scope><name>column</name></member>
      <member refid="classMatrix_1af7c3d6c831c98700660c73bf594b4a47" prot="public" virt="non-virtual"><scope>Matrix</scope><name>column_begin</name></member>
      <member refid="classMatrix_1a23ff97d6aaf0ac34cb187f77378ded9a" prot="public" virt="non-virtual"><scope>Matrix</scope><name>column_begin</name></member>
      <member refid="classMatrix_1a84b1991675f9ef20c1998db073b30050" prot="public" virt="non-virtual"><scope>Matrix</scope><name>column_dimension</name></member>
      <member refid="classMatrix_1a548f2bc358abc31ac92d5510d03776d8" prot="public" virt="non-virtual"><scope>Matrix</scope><name>column_end</name></member>
      <member refid="classMatrix_1a772ec96751865b60cdea2453dab427d1" prot="public" virt="non-virtual"><scope>Matrix</scope><name>column_end</name></member>
      <member refid="classMatrix_1a4362b727afd4144446c61962e1bf2407" prot="public" virt="non-virtual"><scope>Matrix</scope><name>column_iterator</name></member>
      <member refid="classMatrix_1a49f2fa1d9d94629436b5ec2eb5b05f3b" prot="public" virt="non-virtual"><scope>Matrix</scope><name>const_column_iterator</name></member>
      <member refid="classMatrix_1a392bc2d44e8af49545d2308550ad0dbd" prot="public" virt="non-virtual"><scope>Matrix</scope><name>const_iterator</name></member>
      <member refid="classMatrix_1a44515023f5cf0cd65df118ed001c83a8" prot="public" virt="non-virtual"><scope>Matrix</scope><name>const_row_iterator</name></member>
      <member refid="classMatrix_1a0494fa05d792187a1f734ce7f602b584" prot="public" virt="non-virtual"><scope>Matrix</scope><name>dimension</name></member>
      <member refid="classMatrix_1a326db74b499714fbd1e12154b9adf0f1" prot="public" virt="non-virtual"><scope>Matrix</scope><name>end</name></member>
      <member refid="classMatrix_1a8a2d66526c3d0367743327d535fde391" prot="public" virt="non-virtual"><scope>Matrix</scope><name>end</name></member>
      <member refid="classMatrix_1a85b30c3da6b3e07df50b7e8d2a58ad62" prot="public" virt="non-virtual"><scope>Matrix</scope><name>Identity</name></member>
      <member refid="classMatrix_1a217ed53941f9de733ce7d7c2579e7d86" prot="public" virt="non-virtual"><scope>Matrix</scope><name>iterator</name></member>
      <member refid="classMatrix_1a2dba13c45127354c9f75ef576f49269b" prot="public" virt="non-virtual"><scope>Matrix</scope><name>Matrix</name></member>
      <member refid="classMatrix_1adc0e82f527cab2ae7463140cf8a072a0" prot="public" virt="non-virtual"><scope>Matrix</scope><name>Matrix</name></member>
      <member refid="classMatrix_1a75e25f70a760fa9625afa33a3c44af8f" prot="public" virt="non-virtual"><scope>Matrix</scope><name>Matrix</name></member>
      <member refid="classMatrix_1a83527e2ae050ee6beea92944552fa2f6" prot="public" virt="non-virtual"><scope>Matrix</scope><name>Matrix</name></member>
      <member refid="classMatrix_1ab7b0b88e8d9db6917314deebf3b6058f" prot="public" virt="non-virtual"><scope>Matrix</scope><name>Matrix</name></member>
      <member refid="classMatrix_1aa729a3721fe888ddc2a7b782d0556039" prot="public" virt="non-virtual"><scope>Matrix</scope><name>Matrix</name></member>
      <member refid="classMatrix_1a3cffcaf69171a9fbc6b5263b617f1090" prot="public" virt="non-virtual"><scope>Matrix</scope><name>Matrix</name></member>
      <member refid="classMatrix_1a1455e35aa7e523d2c265f404fcb1958f" prot="public" virt="non-virtual"><scope>Matrix</scope><name>Matrix</name></member>
      <member refid="classMatrix_1a9824b9554cf8e5336584a2cc8512369e" prot="public" virt="non-virtual"><scope>Matrix</scope><name>NT</name></member>
      <member refid="classMatrix_1a38496f7249c77a6add5b56c267652f29" prot="public" virt="non-virtual"><scope>Matrix</scope><name>operator!=</name></member>
      <member refid="classMatrix_1ae926cb74187e0f30d0173002054fd4f3" prot="public" virt="non-virtual"><scope>Matrix</scope><name>operator()</name></member>
      <member refid="classMatrix_1a0b5e6058d888dcc0079c6cda53da9789" prot="public" virt="non-virtual"><scope>Matrix</scope><name>operator*</name></member>
      <member refid="classMatrix_1a53cf4caa3cb1f5d286618c3f550b1bc4" prot="public" virt="non-virtual"><scope>Matrix</scope><name>operator*</name></member>
      <member refid="classMatrix_1a61e6a454f3ad272b830f63eae0bf81d2" prot="public" virt="non-virtual"><scope>Matrix</scope><name>operator*</name></member>
      <member refid="classMatrix_1aaa6cf4181364809544e9c0317868320a" prot="public" virt="non-virtual"><scope>Matrix</scope><name>operator*</name></member>
      <member refid="classMatrix_1abfa64c600f3001dac24409b53fee609c" prot="public" virt="non-virtual"><scope>Matrix</scope><name>operator+</name></member>
      <member refid="classMatrix_1aea017627b8806f04e254371f633b39d1" prot="public" virt="non-virtual"><scope>Matrix</scope><name>operator-</name></member>
      <member refid="classMatrix_1aeeb01663c821db08857fc7ae58a67511" prot="public" virt="non-virtual"><scope>Matrix</scope><name>operator-</name></member>
      <member refid="classMatrix_1a729d045470fb7510e80c145de014449c" prot="public" virt="non-virtual"><scope>Matrix</scope><name>operator==</name></member>
      <member refid="classMatrix_1a1db49a4b08609140a29e14c5e319286b" prot="public" virt="non-virtual"><scope>Matrix</scope><name>row</name></member>
      <member refid="classMatrix_1ab1eb34fc4e69afde03fe9d36e961846a" prot="public" virt="non-virtual"><scope>Matrix</scope><name>row_begin</name></member>
      <member refid="classMatrix_1ab0e4740a8276f8ed4260c40f7cb921c3" prot="public" virt="non-virtual"><scope>Matrix</scope><name>row_begin</name></member>
      <member refid="classMatrix_1a5f3f90efa561d593a70b5de8cabbfe8e" prot="public" virt="non-virtual"><scope>Matrix</scope><name>row_dimension</name></member>
      <member refid="classMatrix_1a77bda11d650e21141d6693f3a49adc27" prot="public" virt="non-virtual"><scope>Matrix</scope><name>row_end</name></member>
      <member refid="classMatrix_1add12f46f4fe2e5f4d28619102dce5d03" prot="public" virt="non-virtual"><scope>Matrix</scope><name>row_end</name></member>
      <member refid="classMatrix_1ae9024e5963cb6b4aa4b2295bbc0c88d2" prot="public" virt="non-virtual"><scope>Matrix</scope><name>row_iterator</name></member>
      <member refid="classMatrix_1a428136a68225468d7d43e619824f2081" prot="public" virt="non-virtual"><scope>Matrix</scope><name>swap_columns</name></member>
      <member refid="classMatrix_1a477f567a0089e58fc1113723b599d32b" prot="public" virt="non-virtual"><scope>Matrix</scope><name>swap_rows</name></member>
      <member refid="classMatrix_1a96c25e03ef5651127fa4f45c5114f97a" prot="public" virt="non-virtual"><scope>Matrix</scope><name>Vector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
