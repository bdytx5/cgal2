<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structCGAL_1_1Protect__FPU__rounding" kind="struct" language="C++" prot="public">
    <compoundname>CGAL::Protect_FPU_rounding</compoundname>
    <includes local="no">CGAL/FPU.h</includes>
    <templateparamlist>
      <param>
        <type>typename Protected</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="structCGAL_1_1Protect__FPU__rounding_1a1352e36fc57985392a63be9aa1846f30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Protect_FPU_rounding&lt; Protected &gt;::Protect_FPU_rounding</definition>
        <argsstring>(FPU_CW_t r=CGAL_FE_UPWARD)</argsstring>
        <name>Protect_FPU_rounding</name>
        <param>
          <type>FPU_CW_t</type>
          <declname>r</declname>
          <defval>CGAL_FE_UPWARD</defval>
        </param>
        <briefdescription>
<para>The current rounding mode is saved in the object, and rounding mode is set to <computeroutput>r</computeroutput> which can be any of <computeroutput>CGAL_FE_TONEAREST</computeroutput>, <computeroutput>CGAL_FE_TOWARDZERO</computeroutput>, <computeroutput>CGAL_FE_UPWARD</computeroutput> (the default) and <computeroutput>CGAL_FE_DOWNWARD</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/FPU.h" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Protect__FPU__rounding_1adbfdb3a1d5d6d4776193115cecb51d22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Protect_FPU_rounding&lt; Protected &gt;::~Protect_FPU_rounding</definition>
        <argsstring>()</argsstring>
        <name>~Protect_FPU_rounding</name>
        <briefdescription>
<para>The rounding mode is restored to the saved value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/FPU.h" line="83" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The class <computeroutput><ref refid="structCGAL_1_1Protect__FPU__rounding" kindref="compound">Protect_FPU_rounding</ref></computeroutput> allows to reduce the number of rounding mode changes when evaluating sequences of interval arithmetic operations. </para>    </briefdescription>
    <detaileddescription>
<para><anchor id="structCGAL_1_1Protect__FPU__rounding_1protect_fpu_rouding"/></para><para>Floating-point arithmetic, as specified by the IEEE-754 standard, allows to use so-called directed rounding for the following arithmetic operations: addition, subtraction, multiplication, division and square root. The default behavior is that the result of such an arithmetic operation is the closest floating-point number to the exact real result of the operation (rounding to the nearest). The other rounding modes are: round towards plus infinity, round towards minus infinity, and round towards zero.</para><para>Interval arithmetic uses such directed rounding modes to offer guaranteed enclosures for the evaluation of real functions, such as with CGAL&apos;s <computeroutput><ref refid="classCGAL_1_1Interval__nt" kindref="compound">Interval_nt</ref></computeroutput> class.</para><para>In order to efficiently evaluate sequences of interval arithmetic operations, such as a geometric predicate computing for example a determinant, it is advised to reduce the number of rounding mode changes, which otherwise are performed for each arithmetic operation. CGAL exploits the fact that it is possible to compute a sequence of interval arithmetic operations by doing only one rounding mode change around the whole function evaluation in order to benefit from this optimization.</para><para>The class <computeroutput><ref refid="structCGAL_1_1Protect__FPU__rounding" kindref="compound">Protect_FPU_rounding</ref></computeroutput> allows to easily benefit from this. Its constructor saves the current rounding mode in the object, and then sets the current rounding mode to the value provided as argument to the constructor. The destructor sets the rounding mode back to the saved value. This allows to protect a block of code determined by a C++ scope, and have the destructor take care of restoring the value automatically.</para><para>The related class <computeroutput><ref refid="classCGAL_1_1Set__ieee__double__precision" kindref="compound">Set_ieee_double_precision</ref></computeroutput> allows to similarly protect a block of code from excess precision on some machines (x86 typically with the traditional FPU, not the more recent SSE2). Note that <computeroutput><ref refid="structCGAL_1_1Protect__FPU__rounding" kindref="compound">Protect_FPU_rounding</ref></computeroutput>, when changing rounding modes, also sets the precision to the correct 64 bit precision, hence providing a similar effect to <computeroutput><ref refid="classCGAL_1_1Set__ieee__double__precision" kindref="compound">Set_ieee_double_precision</ref></computeroutput>. This notably affects the <computeroutput><ref refid="classCGAL_1_1Residue" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Modular_arithmetic.tag">Residue</ref></computeroutput> class.</para><para>Note for Visual C++ 64-bit users: due to a compiler bug, the stack unwinding process happenning when an exception is thrown does not correctly execute the rounding mode restoration when the <computeroutput><ref refid="structCGAL_1_1Protect__FPU__rounding" kindref="compound">Protect_FPU_rounding</ref></computeroutput> object is destroyed. Therefore, for this configuration, some explicit code has to be added.</para><para><bold>Parameters</bold><linebreak/>
</para><para>The template parameter <computeroutput>Protected</computeroutput> is a Boolean parameter, which defaults to <computeroutput>true</computeroutput>. It follows the same parameter of the <computeroutput><ref refid="classCGAL_1_1Interval__nt" kindref="compound">Interval_nt</ref></computeroutput> class. When it is <computeroutput>false</computeroutput>, the constructor and the destructor of the class do nothing (this is meant to be used in a context where you know that the rounding mode change has been taken care of at a higher level in the call stack.</para><para>What follows describes the behavior when the parameter has its default value, <computeroutput>true</computeroutput>.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Set__ieee__double__precision" kindref="compound">CGAL::Set_ieee_double_precision</ref></computeroutput> </para></simplesect>
</para>    </detaileddescription>
    <location file="CGAL/FPU.h" line="66" column="1" bodyfile="CGAL/FPU.h" bodystart="66" bodyend="87"/>
    <listofallmembers>
      <member refid="structCGAL_1_1Protect__FPU__rounding_1a1352e36fc57985392a63be9aa1846f30" prot="public" virt="non-virtual"><scope>CGAL::Protect_FPU_rounding</scope><name>Protect_FPU_rounding</name></member>
      <member refid="structCGAL_1_1Protect__FPU__rounding_1adbfdb3a1d5d6d4776193115cecb51d22" prot="public" virt="non-virtual"><scope>CGAL::Protect_FPU_rounding</scope><name>~Protect_FPU_rounding</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
