<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Set__ieee__double__precision" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Set_ieee_double_precision</compoundname>
    <includes local="no">CGAL/FPU.h</includes>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Set__ieee__double__precision_1a1ff28f78034e2a2c61ee53183b3d4a7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Set_ieee_double_precision::Set_ieee_double_precision</definition>
        <argsstring>()</argsstring>
        <name>Set_ieee_double_precision</name>
        <briefdescription>
<para>Sets the precision of operations on double to 53bits. </para>        </briefdescription>
        <detaileddescription>
<para>Note that the rounding mode is set to the nearest in the same process. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/FPU.h" line="164" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Set__ieee__double__precision_1a2203d4c1f70c2454c6bbe5888d3f23a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Set_ieee_double_precision::~Set_ieee_double_precision</definition>
        <argsstring>()</argsstring>
        <name>~Set_ieee_double_precision</name>
        <briefdescription>
<para>The precision and rounding modes are reset to the values they held before the constructor was called. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/FPU.h" line="170" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="related">
      <memberdef kind="function" id="classCGAL_1_1Set__ieee__double__precision_1a4a328d0ca2892ada2b64ae5aca2fcc95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void force_ieee_double_precision</definition>
        <argsstring>()</argsstring>
        <name>force_ieee_double_precision</name>
        <briefdescription>
<para>Sets the precision of operations on double to 53bits. </para>        </briefdescription>
        <detaileddescription>
<para>Note that the rounding mode is set to the nearest in the same process.</para><para>The function does the same thing as the default constructor of <computeroutput><ref refid="classCGAL_1_1Set__ieee__double__precision" kindref="compound">Set_ieee_double_precision</ref></computeroutput> except that it does not perform the save and restore of the previous state. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/FPU.h" line="185" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The class <computeroutput><ref refid="classCGAL_1_1Set__ieee__double__precision" kindref="compound">Set_ieee_double_precision</ref></computeroutput> provides a mechanism to set the correct 53 bits precision for a block of code. </para>    </briefdescription>
    <detaileddescription>
<para>It does so by having a default constructor that sets a particular mode on the FPU which corrects the problem, and have its destructor reset the mode to its previous state.</para><para><anchor id="classCGAL_1_1Set__ieee__double__precision_1set_ieee_double_precision"/></para><para>The IEEE754 standard specifies that the precision of double precision floating-point numbers should be 53 bits, with 11 bits for the exponent range.</para><para>Some processors violate this rule by providing excess precision during some computations (when values are in registers). This is the case of the x86 Intel processor and compatible processors (note that the SSE2 more recent alternative FPU is fortunately not affected by this issue). The effect of such excess precision can be a problem for some computations, since it can produce so-called double rounding effects, where actually <emphasis>less</emphasis> precision is actually provided! It can also be the root of non-deterministic computations depending on compiler optimizations or not (since this affects how long variables are kept in registers), for example numerical floating-point values get computed with slightly different results. Finally, it affects code that carefully makes use of cancellation properties, like <computeroutput><ref refid="classCGAL_1_1Residue" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Modular_arithmetic.tag">Residue</ref></computeroutput>.</para><para>If the platform is not affected by the excess precision problem, this class becomes an empty class doing nothing.</para><para>Note that nothing can be done for the excess range of the exponent, which affects underflow and overflow cases, fortunately less frequent.</para><para>Note also that in the process of setting the correct precision, the rounding mode is also set to the nearest.</para><para>Moreover, some compilers provide a flag that performs this setting at the time of program startup. For example, GCC provides the option <computeroutput>-mpc64</computeroutput> since release 4.3 which does exactly this. Other compilers may have similar options.</para><para>Similarly, some third-party libraries may do the same thing as part of their startup process, and this is notably the case of LEDA (at least some versions of it). CGAL does not enforce this at startup as it would impact computations with long double performed by other codes in the same program.</para><para>Note that this property is notably required for proper functionning of the <computeroutput><ref refid="classCGAL_1_1Residue" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Modular_arithmetic.tag">Residue</ref></computeroutput> class that performs modular arithmetic using efficient floating-point operations.</para><para>Note concerning Visual C++ 64-bit: due to a compiler bug, the stack unwinding process happenning when an exception is thrown does not correctly execute the restoring operation when the <computeroutput><ref refid="classCGAL_1_1Set__ieee__double__precision" kindref="compound">Set_ieee_double_precision</ref></computeroutput> object is destroyed. Therefore, for this configuration, some explicit code has to be added if you care about the state being restored.</para><para><simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Protect__FPU__rounding" kindref="compound">CGAL::Protect_FPU_rounding</ref>&lt;Protected&gt;</computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Residue" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Modular_arithmetic.tag">CGAL::Residue</ref></computeroutput> </para></simplesect>
</para>    </detaileddescription>
    <location file="CGAL/FPU.h" line="153" column="1" bodyfile="CGAL/FPU.h" bodystart="153" bodyend="172"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Set__ieee__double__precision_1a4a328d0ca2892ada2b64ae5aca2fcc95" prot="public" virt="non-virtual"><scope>CGAL::Set_ieee_double_precision</scope><name>force_ieee_double_precision</name></member>
      <member refid="classCGAL_1_1Set__ieee__double__precision_1a1ff28f78034e2a2c61ee53183b3d4a7c" prot="public" virt="non-virtual"><scope>CGAL::Set_ieee_double_precision</scope><name>Set_ieee_double_precision</name></member>
      <member refid="classCGAL_1_1Set__ieee__double__precision_1a2203d4c1f70c2454c6bbe5888d3f23a1" prot="public" virt="non-virtual"><scope>CGAL::Set_ieee_double_precision</scope><name>~Set_ieee_double_precision</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
