<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Sqrt__extension" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Sqrt_extension</compoundname>
    <includes local="no">CGAL/Sqrt_extension.h</includes>
    <templateparamlist>
      <param>
        <type>typename NT</type>
      </param>
      <param>
        <type>typename ROOT</type>
      </param>
      <param>
        <type>typename DifferentExtensionComparable</type>
        <defval><ref refid="group__PkgStlExtensionUtilities_1ga89d5ecf1540b2ec0a2bf5dd003e186d0" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Tag_false</ref></defval>
      </param>
      <param>
        <type>typename FilterPredicates</type>
        <defval><ref refid="group__PkgStlExtensionUtilities_1ga89d5ecf1540b2ec0a2bf5dd003e186d0" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Tag_false</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1adcac5c4f647548df9399eeb703b2c36b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Sqrt_extension&lt; NT, ROOT, DifferentExtensionComparable, FilterPredicates &gt;::Sqrt_extension</definition>
        <argsstring>()</argsstring>
        <name>Sqrt_extension</name>
        <briefdescription>
<para>Introduces a variable <computeroutput>ext</computeroutput> initialized with 0. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="119" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1a78978ec4d7c96723fd4c37c2aa6b7fcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Sqrt_extension&lt; NT, ROOT, DifferentExtensionComparable, FilterPredicates &gt;::Sqrt_extension</definition>
        <argsstring>(const Sqrt_extension &amp;x)</argsstring>
        <name>Sqrt_extension</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1a24e5c971edf947b5e98803c37ffd6786" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Sqrt_extension&lt; NT, ROOT, DifferentExtensionComparable, FilterPredicates &gt;::Sqrt_extension</definition>
        <argsstring>(const int &amp;i)</argsstring>
        <name>Sqrt_extension</name>
        <param>
          <type>const int &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Introduces a variable <computeroutput>ext</computeroutput> initialized with <formula id="77">$ i$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="129" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1a71fa323e41dd5965c3db26b80c8ed81b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Sqrt_extension&lt; NT, ROOT, DifferentExtensionComparable, FilterPredicates &gt;::Sqrt_extension</definition>
        <argsstring>(const NT &amp;x)</argsstring>
        <name>Sqrt_extension</name>
        <param>
          <type>const NT &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Introduces a variable <computeroutput>ext</computeroutput> initialized with <formula id="30">$ x$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1a492e8dc18b43b5c363eda8a5ab7de0e7" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class NTX</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>CGAL::Sqrt_extension&lt; NT, ROOT, DifferentExtensionComparable, FilterPredicates &gt;::Sqrt_extension</definition>
        <argsstring>(const NTX &amp;x)</argsstring>
        <name>Sqrt_extension</name>
        <param>
          <type>const NTX &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Introduces a variable <computeroutput>ext</computeroutput> initialized with <formula id="30">$ x$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>NT must constructible from NTX </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="141" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1abe694a0f6c15edb75864da94b1d8d657" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Sqrt_extension&lt; NT, ROOT, DifferentExtensionComparable, FilterPredicates &gt;::Sqrt_extension</definition>
        <argsstring>(int a0, int a1, int r)</argsstring>
        <name>Sqrt_extension</name>
        <param>
          <type>int</type>
          <declname>a0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>a1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Constructor from int: <computeroutput>ext</computeroutput> <formula id="78">$ = a0 +a1 \cdot sqrt(r)$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><formula id="79">$ r \neq0$</formula> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="146" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1ade37d437935ff601d592e0d9989ce3a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Sqrt_extension&lt; NT, ROOT, DifferentExtensionComparable, FilterPredicates &gt;::Sqrt_extension</definition>
        <argsstring>(NT a0, NT a1, ROOT r)</argsstring>
        <name>Sqrt_extension</name>
        <param>
          <type>NT</type>
          <declname>a0</declname>
        </param>
        <param>
          <type>NT</type>
          <declname>a1</declname>
        </param>
        <param>
          <type>ROOT</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>General constructor: <computeroutput>ext</computeroutput> <formula id="80">$ = a0 + a1 \cdot sqrt(r)$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><formula id="79">$ r \neq0$</formula> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="151" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <description><para>An object of type <computeroutput><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref></computeroutput> represent an expression of the form: <formula id="81">$ a0 + a1 \sqrt(\mathrm{root}) $</formula>. </para></description>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1aae102426545fbf893f11e8bad30d2236" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const NT &amp;</type>
        <definition>const NT&amp; CGAL::Sqrt_extension&lt; NT, ROOT, DifferentExtensionComparable, FilterPredicates &gt;::a0</definition>
        <argsstring>() const</argsstring>
        <name>a0</name>
        <briefdescription>
<para>Const access operator for a0. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="165" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1a1c174d577fe6aed6821ec98421872f0b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const NT &amp;</type>
        <definition>const NT&amp; CGAL::Sqrt_extension&lt; NT, ROOT, DifferentExtensionComparable, FilterPredicates &gt;::a1</definition>
        <argsstring>() const</argsstring>
        <name>a1</name>
        <briefdescription>
<para>Const access operator for a1. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="170" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1ab21232f81d7be56fb2d20b854cfc2018" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const ROOT &amp;</type>
        <definition>const ROOT&amp; CGAL::Sqrt_extension&lt; NT, ROOT, DifferentExtensionComparable, FilterPredicates &gt;::root</definition>
        <argsstring>() const</argsstring>
        <name>root</name>
        <briefdescription>
<para>Const access operator for root. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="175" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1a6cbbe16ed4f34eb7de015264428d8184" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Sqrt_extension&lt; NT, ROOT, DifferentExtensionComparable, FilterPredicates &gt;::is_extended</definition>
        <argsstring>() const</argsstring>
        <name>is_extended</name>
        <briefdescription>
<para>Returns true in case root of <computeroutput>ext</computeroutput> is not zero. </para>        </briefdescription>
        <detaileddescription>
<para>Note that <formula id="82">$ a1 == 0 $</formula> does not imply <formula id="83">$ \mathrm{root} == 0$</formula>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="182" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1a8ab212cd71081e27292cda6c9fda7ed9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Sqrt_extension&lt; NT, ROOT, DifferentExtensionComparable, FilterPredicates &gt;::simplify</definition>
        <argsstring>()</argsstring>
        <name>simplify</name>
        <briefdescription>
<para>Simplifies the representation, in particular <formula id="66">$\mathrm{root}$</formula> is set to zero if <formula id="84">$ a1$</formula> is zero, that is, <computeroutput>ext</computeroutput> becomes not extended. </para>        </briefdescription>
        <detaileddescription>
<para>Moreover, it propagates the simplify command to members of <computeroutput>ext</computeroutput>. see also: <computeroutput><ref refid="classAlgebraicStructureTraits_1a52a18ef960fa296ff071bf3031dec9d9" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">AlgebraicStructureTraits::Simplify</ref></computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="192" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1a5664768d30930994d0fe24a62f399852" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Sqrt_extension&lt; NT, ROOT, DifferentExtensionComparable, FilterPredicates &gt;::is_zero</definition>
        <argsstring>() const</argsstring>
        <name>is_zero</name>
        <briefdescription>
<para>returns true if <computeroutput>ext</computeroutput> represents the value zero. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="197" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1a13c6a1913f72d037a4f101bb4bbfb226" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Sign</ref></type>
        <definition>CGAL::Sign CGAL::Sqrt_extension&lt; NT, ROOT, DifferentExtensionComparable, FilterPredicates &gt;::sign</definition>
        <argsstring>() const</argsstring>
        <name>sign</name>
        <briefdescription>
<para>Determines the sign of <computeroutput>ext</computeroutput> by (repeated) squaring. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref></computeroutput> is <computeroutput><ref refid="classRealEmbeddable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RealEmbeddable</ref></computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="203" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1ab75ff83199184cda4cf75e6bb5186ced" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref></type>
        <definition>Sqrt_extension CGAL::Sqrt_extension&lt; NT, ROOT, DifferentExtensionComparable, FilterPredicates &gt;::abs</definition>
        <argsstring>() const</argsstring>
        <name>abs</name>
        <briefdescription>
<para>returns the absolute value of <computeroutput>ext</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref></computeroutput> is <computeroutput><ref refid="classRealEmbeddable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RealEmbeddable</ref></computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="209" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1ae7bbd61a9bd2fe48d42ee143766605df" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">CGAL::Comparison_result</ref></type>
        <definition>CGAL::Comparison_result CGAL::Sqrt_extension&lt; NT, ROOT, DifferentExtensionComparable, FilterPredicates &gt;::compare</definition>
        <argsstring>(const Sqrt_extension &amp;y, bool in_same_extension=!DifferentExtensionComparable::value) const</argsstring>
        <name>compare</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>in_same_extension</declname>
          <defval>!DifferentExtensionComparable::value</defval>
        </param>
        <briefdescription>
<para>Compares <computeroutput>ext</computeroutput> with y. </para>        </briefdescription>
        <detaileddescription>
<para>The optional bool <computeroutput>in_same_extension</computeroutput> indicates whether <computeroutput>ext</computeroutput> and <formula id="31">$ y$</formula> are in the same extension of NT. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="219" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1aee90ecd389cd55981d258e5ff0229f7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
        <definition>Sqrt_extension&amp; CGAL::Sqrt_extension&lt; NT, ROOT, DifferentExtensionComparable, FilterPredicates &gt;::operator+=</definition>
        <argsstring>(const Sqrt_extension &amp;a)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>(this-&gt;<ref refid="classCGAL_1_1Sqrt__extension_1ab21232f81d7be56fb2d20b854cfc2018" kindref="member">root()</ref>==0 or a.root()==0 or this-&gt;<ref refid="classCGAL_1_1Sqrt__extension_1ab21232f81d7be56fb2d20b854cfc2018" kindref="member">root()</ref> == a.root())</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="225" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1acbec34a88aa792745cc000b45cbbe3a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
        <definition>Sqrt_extension&amp; CGAL::Sqrt_extension&lt; NT, ROOT, DifferentExtensionComparable, FilterPredicates &gt;::operator-=</definition>
        <argsstring>(const Sqrt_extension &amp;a)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>(this-&gt;<ref refid="classCGAL_1_1Sqrt__extension_1ab21232f81d7be56fb2d20b854cfc2018" kindref="member">root()</ref>==0 or a.root()==0 or this-&gt;<ref refid="classCGAL_1_1Sqrt__extension_1ab21232f81d7be56fb2d20b854cfc2018" kindref="member">root()</ref> == a.root())</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="230" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1a6b7933152a2526b4dcd785432a482594" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
        <definition>Sqrt_extension&amp; CGAL::Sqrt_extension&lt; NT, ROOT, DifferentExtensionComparable, FilterPredicates &gt;::operator*=</definition>
        <argsstring>(const Sqrt_extension &amp;a)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>(this-&gt;<ref refid="classCGAL_1_1Sqrt__extension_1ab21232f81d7be56fb2d20b854cfc2018" kindref="member">root()</ref>==0 or a.root()==0 or this-&gt;<ref refid="classCGAL_1_1Sqrt__extension_1ab21232f81d7be56fb2d20b854cfc2018" kindref="member">root()</ref> == a.root())</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="235" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1a358688af21884a8b54c0eb73e658b63d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
        <definition>Sqrt_extension&amp; CGAL::Sqrt_extension&lt; NT, ROOT, DifferentExtensionComparable, FilterPredicates &gt;::operator/=</definition>
        <argsstring>(const Sqrt_extension &amp;a)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>(this-&gt;<ref refid="classCGAL_1_1Sqrt__extension_1ab21232f81d7be56fb2d20b854cfc2018" kindref="member">root()</ref>==0 or a.root()==0 or this-&gt;<ref refid="classCGAL_1_1Sqrt__extension_1ab21232f81d7be56fb2d20b854cfc2018" kindref="member">root()</ref> == a.root())</computeroutput></para></simplesect>
In case <computeroutput>NT</computeroutput> is only an <computeroutput><ref refid="classIntegralDomain" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">IntegralDomain</ref></computeroutput> operator/ implements integral division. In case <computeroutput>NT</computeroutput> is a <computeroutput><ref refid="classField" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">Field</ref></computeroutput> operator/ implements the field division. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="245" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="related">
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1a805685ed109406fad3f319a8d7bbcc70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref></type>
        <definition>Sqrt_extension operator+</definition>
        <argsstring>(const Sqrt_extension &amp;a, const Sqrt_extension &amp;b)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>(a.root()==0 or b.root()==0 or a.root() == b.root())</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="255" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1a4ffea715e09bde4f38cbc6516dee9a8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref></type>
        <definition>Sqrt_extension operator-</definition>
        <argsstring>(const Sqrt_extension &amp;a, const Sqrt_extension &amp;b)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>(a.root()==0 or b.root()==0 or a.root() == b.root())</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="261" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1a5b89bab9a03f64665697cfae28e3266e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref></type>
        <definition>Sqrt_extension operator*</definition>
        <argsstring>(const Sqrt_extension &amp;a, const Sqrt_extension &amp;b)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>(a.root()==0 or b.root()==0 or a.root() == b.root())</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="267" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1ad4632037e42f4286d12adb2663bc582d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref></type>
        <definition>Sqrt_extension operator/</definition>
        <argsstring>(const Sqrt_extension &amp;a, const Sqrt_extension &amp;b)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>(a.root()==0 or b.root()==0 or a.root() == b.root())</computeroutput></para></simplesect>
In case <computeroutput>NT</computeroutput> is only an <computeroutput><ref refid="classIntegralDomain" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">IntegralDomain</ref></computeroutput> operator/ implements integral division. In case <computeroutput>NT</computeroutput> is a <computeroutput><ref refid="classField" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">Field</ref></computeroutput> operator/ implements the field division. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="277" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1af3fd77224816f9d4d2622b86404886ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const Sqrt_extension &amp;a, const Sqrt_extension &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>(a.root()==0 or b.root()==0 or a.root() == b.root())</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="283" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1a61e3774267aa785f1a709d5c1e8dc24c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const Sqrt_extension &amp;a, const Sqrt_extension &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>(a.root()==0 or b.root()==0 or a.root() == b.root())</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="291" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1a64a621ca05d48de932155a7b8e83db95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const Sqrt_extension &amp;a, const Sqrt_extension &amp;b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>(a.root()==0 or b.root()==0 or a.root() == b.root())</computeroutput></para></simplesect>
<simplesect kind="attention"><para>Only exists when <computeroutput><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref></computeroutput> is <computeroutput><ref refid="classRealEmbeddable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RealEmbeddable</ref></computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="299" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1acdd8e662bfa4b52df0c8f0d12657c540" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const Sqrt_extension &amp;a, const Sqrt_extension &amp;b)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>(a.root()==0 or b.root()==0 or a.root() == b.root())</computeroutput></para></simplesect>
<simplesect kind="attention"><para>Only exists when <computeroutput><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref></computeroutput> is <computeroutput><ref refid="classRealEmbeddable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RealEmbeddable</ref></computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="306" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1a2a200c3087b2f4375912c0ea3d9b79f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const Sqrt_extension &amp;a, const Sqrt_extension &amp;b)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>(a.root()==0 or b.root()==0 or a.root() == b.root())</computeroutput></para></simplesect>
<simplesect kind="attention"><para>Only exists when <computeroutput><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref></computeroutput> is <computeroutput><ref refid="classRealEmbeddable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RealEmbeddable</ref></computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="313" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1a87f6f72f49fcb8d3cde19516c6bc916c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const Sqrt_extension &amp;a, const Sqrt_extension &amp;b)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>(a.root()==0 or b.root()==0 or a.root() == b.root())</computeroutput></para></simplesect>
<simplesect kind="attention"><para>Only exists when <computeroutput><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref></computeroutput> is <computeroutput><ref refid="classRealEmbeddable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RealEmbeddable</ref></computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="320" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1a951893f57c94e3b077f45fb0a164166e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Sqrt_extension&lt; NT, ROOT &gt; &amp;ext)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref>&lt; NT, ROOT &gt; &amp;</type>
          <declname>ext</declname>
        </param>
        <briefdescription>
<para>writes <computeroutput>ext</computeroutput> to ostream <computeroutput>os</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The format depends on the <computeroutput>CGAL::IO::MODE</computeroutput> of <computeroutput>os</computeroutput>.</para><para>In case the mode is <computeroutput>CGAL::IO::ASCII</computeroutput> the format is <computeroutput>EXT[a0,a1,root]</computeroutput>.</para><para>In case the mode is <computeroutput>CGAL::IO::PRETTY</computeroutput> the format is human readable.</para><para><simplesect kind="attention"><para><computeroutput>operator&gt;&gt;</computeroutput> must be defined for <computeroutput>ROOT</computeroutput> and <computeroutput>NT</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="333" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1a8228732b696eb33d50e6aa028e565c9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, const Sqrt_extension&lt; NT, ROOT &gt; &amp;ext)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref>&lt; NT, ROOT &gt; &amp;</type>
          <declname>ext</declname>
        </param>
        <briefdescription>
<para>reads <computeroutput>ext</computeroutput> from istream <computeroutput>is</computeroutput> in format <computeroutput>EXT[a0,a1,root]</computeroutput>, the output format in mode <computeroutput>CGAL::IO::ASCII</computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para><computeroutput>operator&lt;&lt;</computeroutput> must be defined exist for <computeroutput>ROOT</computeroutput> and <computeroutput>NT</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="342" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An instance of this class represents an extension of the type <computeroutput>NT</computeroutput> by <emphasis>one</emphasis> square root of the type <computeroutput>ROOT</computeroutput>. </para>    </briefdescription>
    <detaileddescription>
<para><computeroutput>NT</computeroutput> is required to be constructible from <computeroutput>ROOT</computeroutput>.</para><para><computeroutput>NT</computeroutput> is required to be an <computeroutput><ref refid="classIntegralDomainWithoutDivision" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">IntegralDomainWithoutDivision</ref></computeroutput>.</para><para><computeroutput><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref></computeroutput> is <computeroutput><ref refid="classRealEmbeddable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RealEmbeddable</ref></computeroutput> if NT is <computeroutput><ref refid="classRealEmbeddable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RealEmbeddable</ref></computeroutput>.</para><para>For example, let <computeroutput>Integer</computeroutput> be some type representing <formula id="0">$ \Z$</formula>, then <computeroutput><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref>&lt;Integer,Integer&gt;</computeroutput> is able to represent <formula id="65">$ \Z[\sqrt{\mathrm{root}}]$</formula> for some arbitrary Integer <formula id="66">$\mathrm{root}$</formula>.  <formula id="67">$ R[a]$</formula> denotes the extension of a ring <formula id="68">$ R$</formula> by an element <formula id="69">$ a$</formula>. See also: <ulink url="http://mathworld.wolfram.com/ExtensionRing.html"><computeroutput>http://mathworld.wolfram.com/ExtensionRing.html</computeroutput></ulink> The value of <formula id="66">$\mathrm{root}$</formula> is set at construction time, or set to zero if it is not specified.</para><para>Arithmetic operations among different extensions, say <formula id="70">$ \Z[\sqrt{a}]$</formula> and <formula id="71">$ \Z[\sqrt{b}]$</formula>, are not supported. The result would be in <formula id="72">$ \Z[\sqrt{a},\sqrt{b}]$</formula>, which is not representable by <computeroutput><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref>&lt;Integer,Integer&gt;</computeroutput>.</para><para><simplesect kind="attention"><para>The user is responsible to check that arithmetic operations are carried out for elements from the same extensions only.</para></simplesect>
This is not tested by <computeroutput><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref></computeroutput> for efficiency reasons. A violation of the precondition leads to undefined behavior. Be aware that for efficiency reasons the given <formula id="66">$\mathrm{root}$</formula> is stored as it is given to the constructor. In particular, an extension by a square root of a square is considered as an extension.</para><para>Since elements of <computeroutput><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref></computeroutput> that lie in different extensions are not interoperable with respect to any arithmetic operations, the full value range of <computeroutput><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref></computeroutput> does not represent an algebraic structure. However, each subset of the value range that represents the extension of NT by a particular square root is a valid algebraic structure, since this subset is closed under all provided arithmetic operations. From there, <computeroutput><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref></computeroutput> can be used as if it were a model of an algebraic structure concept, with the following correspondence:</para><para><table rows="9" cols="2"><row>
<entry thead="no"><para>NT </para></entry><entry thead="no"><para><computeroutput><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref></computeroutput> </para></entry></row>
<row>
<entry thead="no"><para><hruler/>
 </para></entry></row>
<row>
<entry thead="no"><para></para><para></para></entry></row>
<row>
<entry thead="no"><para><computeroutput><ref refid="classIntegralDomainWithoutDivision" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">IntegralDomainWithoutDivision</ref></computeroutput> </para></entry><entry thead="no"><para><computeroutput><ref refid="classIntegralDomainWithoutDivision" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">IntegralDomainWithoutDivision</ref></computeroutput> </para></entry></row>
<row>
<entry thead="no"><para><computeroutput><ref refid="classIntegralDomain" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">IntegralDomain</ref></computeroutput> </para></entry><entry thead="no"><para><computeroutput><ref refid="classIntegralDomain" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">IntegralDomain</ref></computeroutput> </para></entry></row>
<row>
<entry thead="no"><para><computeroutput><ref refid="classUniqueFactorizationDomain" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">UniqueFactorizationDomain</ref></computeroutput> </para></entry><entry thead="no"><para><computeroutput><ref refid="classIntegralDomain" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">IntegralDomain</ref></computeroutput> </para></entry></row>
<row>
<entry thead="no"><para><computeroutput><ref refid="classEuclideanRing" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">EuclideanRing</ref></computeroutput> </para></entry><entry thead="no"><para><computeroutput><ref refid="classIntegralDomain" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">IntegralDomain</ref></computeroutput> </para></entry></row>
<row>
<entry thead="no"><para><computeroutput><ref refid="classField" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">Field</ref></computeroutput> </para></entry><entry thead="no"><para><computeroutput><ref refid="classField" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">Field</ref></computeroutput> </para></entry></row>
<row>
<entry thead="no"><para><hruler/>
 </para></entry></row>
</table>
</para><para>The extension of a <computeroutput><ref refid="classUniqueFactorizationDomain" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">UniqueFactorizationDomain</ref></computeroutput> or <computeroutput><ref refid="classEuclideanRing" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">EuclideanRing</ref></computeroutput> is just an <computeroutput><ref refid="classIntegralDomain" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">IntegralDomain</ref></computeroutput>, since the extension in general destroys the unique factorization property. For instance consider <formula id="73">$ \Z[\sqrt{10}]$</formula>, the extension of <formula id="0">$ \Z$</formula> by <formula id="74">$ \sqrt{10}$</formula>: in <formula id="73">$ \Z[\sqrt{10}]$</formula> the element 10 has two different factorizations <formula id="75">$ \sqrt{10} \cdot \sqrt{10}$</formula> and <formula id="76">$ 2 \cdot 5$</formula>. In particular, the factorization is not unique.</para><para>If <computeroutput>NT</computeroutput> is a model of <computeroutput><ref refid="classRealEmbeddable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RealEmbeddable</ref></computeroutput> the type <computeroutput><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref></computeroutput> is also considered as <computeroutput><ref refid="classRealEmbeddable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RealEmbeddable</ref></computeroutput>. However, by default it is not allowed to compare values from different extensions for efficiency reasons. In case such a comparison becomes necessary, use the member function compare with the according Boolean flag. If such a comparison is a very frequent case, override the default of <computeroutput>DifferentExtensionComparable</computeroutput> by giving <ref refid="group__PkgStlExtensionUtilities_1gab3e2296107b5d26c32c8183028a217f1" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag"><computeroutput>CGAL::Tag_true</computeroutput></ref> as third template parameter. This effects the behavior of compare functions as well as the compare operators.</para><para>The fourth template argument, <computeroutput>FilterPredicates</computeroutput>, triggers an internal filter that may speed up comparisons and sign computations. In case <computeroutput>FilterPredicates</computeroutput> is set to <ref refid="group__PkgStlExtensionUtilities_1gab3e2296107b5d26c32c8183028a217f1" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag"><computeroutput>CGAL::Tag_true</computeroutput></ref> the type first computes a double interval containing the represented number and tries to perform the comparison or sign computation using this interval. Once computed, this interval is stored by the corresponding <computeroutput><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref></computeroutput> object for further usage. Note that this internal filter is switched off by default, since it may conflict with other filtering methods, such as <computeroutput><ref refid="classCGAL_1_1Lazy__exact__nt" kindref="compound">Lazy_exact_nt</ref>&lt;<ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref>&gt;</computeroutput>.</para><para>In case <computeroutput>NT</computeroutput> is not <computeroutput><ref refid="classRealEmbeddable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RealEmbeddable</ref></computeroutput>, <computeroutput>DifferentExtensionComparable</computeroutput> as well as <computeroutput>FilterPredicates</computeroutput> have no effect.</para><para><xrefsect id="models_1_models000026"><xreftitle>Is Model Of</xreftitle><xrefdescription><para><computeroutput><ref refid="classAssignable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">Assignable</ref></computeroutput> </para><para><computeroutput><ref refid="classCopyConstructible" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">CopyConstructible</ref></computeroutput> </para><para><computeroutput><ref refid="classDefaultConstructible" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">DefaultConstructible</ref></computeroutput> </para><para><computeroutput><ref refid="classEqualityComparable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">EqualityComparable</ref></computeroutput> </para><para><computeroutput><ref refid="classImplicitInteroperable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">ImplicitInteroperable</ref></computeroutput> with int </para><para><computeroutput><ref refid="classImplicitInteroperable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">ImplicitInteroperable</ref></computeroutput> with NT </para><para><computeroutput><ref refid="classFraction" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">Fraction</ref></computeroutput> if NT is a <computeroutput><ref refid="classFraction" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">Fraction</ref></computeroutput> </para><para><computeroutput><ref refid="classRootOf__2" kindref="compound">RootOf_2</ref></computeroutput> </para></xrefdescription></xrefsect></para><para><simplesect kind="see"><para><computeroutput><ref refid="classIntegralDomainWithoutDivision" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">IntegralDomainWithoutDivision</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classIntegralDomain" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">IntegralDomain</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classField" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">Field</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classRealEmbeddable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RealEmbeddable</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__PkgStlExtensionUtilities_1gab3e2296107b5d26c32c8183028a217f1" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag"><computeroutput>CGAL::Tag_true</computeroutput></ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__PkgStlExtensionUtilities_1ga89d5ecf1540b2ec0a2bf5dd003e186d0" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag"><computeroutput>CGAL::Tag_false</computeroutput></ref> </para></simplesect>
</para>    </detaileddescription>
    <location file="CGAL/Sqrt_extension.h" line="110" column="1" bodyfile="CGAL/Sqrt_extension.h" bodystart="110" bodyend="249"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Sqrt__extension_1aae102426545fbf893f11e8bad30d2236" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>a0</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1a1c174d577fe6aed6821ec98421872f0b" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>a1</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1ab75ff83199184cda4cf75e6bb5186ced" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>abs</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1ae7bbd61a9bd2fe48d42ee143766605df" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>compare</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1a6cbbe16ed4f34eb7de015264428d8184" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>is_extended</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1a5664768d30930994d0fe24a62f399852" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>is_zero</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1a61e3774267aa785f1a709d5c1e8dc24c" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>operator!=</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1a5b89bab9a03f64665697cfae28e3266e" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>operator*</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1a6b7933152a2526b4dcd785432a482594" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>operator*=</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1a805685ed109406fad3f319a8d7bbcc70" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>operator+</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1aee90ecd389cd55981d258e5ff0229f7e" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>operator+=</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1a4ffea715e09bde4f38cbc6516dee9a8f" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>operator-</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1acbec34a88aa792745cc000b45cbbe3a8" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>operator-=</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1ad4632037e42f4286d12adb2663bc582d" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>operator/</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1a358688af21884a8b54c0eb73e658b63d" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>operator/=</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1a64a621ca05d48de932155a7b8e83db95" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>operator&lt;</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1a951893f57c94e3b077f45fb0a164166e" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>operator&lt;&lt;</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1acdd8e662bfa4b52df0c8f0d12657c540" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>operator&lt;=</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1af3fd77224816f9d4d2622b86404886ba" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>operator==</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1a2a200c3087b2f4375912c0ea3d9b79f1" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>operator&gt;</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1a87f6f72f49fcb8d3cde19516c6bc916c" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>operator&gt;=</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1a8228732b696eb33d50e6aa028e565c9f" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>operator&gt;&gt;</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1ab21232f81d7be56fb2d20b854cfc2018" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>root</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1a13c6a1913f72d037a4f101bb4bbfb226" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>sign</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1a8ab212cd71081e27292cda6c9fda7ed9" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>simplify</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1adcac5c4f647548df9399eeb703b2c36b" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>Sqrt_extension</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1a78978ec4d7c96723fd4c37c2aa6b7fcc" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>Sqrt_extension</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1a24e5c971edf947b5e98803c37ffd6786" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>Sqrt_extension</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1a71fa323e41dd5965c3db26b80c8ed81b" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>Sqrt_extension</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1a492e8dc18b43b5c363eda8a5ab7de0e7" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>Sqrt_extension</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1abe694a0f6c15edb75864da94b1d8d657" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>Sqrt_extension</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1ade37d437935ff601d592e0d9989ce3a1" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>Sqrt_extension</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
