<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Interval__nt" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Interval_nt</compoundname>
    <includes local="no">CGAL/Interval_nt.h</includes>
    <templateparamlist>
      <param>
        <type>typename Protected</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Comparisons</header>
      <description><para>The comparison operators ( <formula id="40">$ &lt;$</formula>, <formula id="41">$ &gt;$</formula>, <formula id="42">$ &lt;=$</formula>, <formula id="43">$ &gt;=$</formula>, <formula id="44">$ ==$</formula>, <formula id="45">$ !=$</formula>, <computeroutput><ref refid="classCGAL_1_1Interval__nt_1a044e01039b193ced2a0aef44e92cd5cc" kindref="member">sign()</ref></computeroutput> and <computeroutput><ref refid="classCGAL_1_1Interval__nt_1a585c932cf6983731e8ad95ec43c6af88" kindref="member">compare()</ref></computeroutput>) have the following semantic: it is the intuitive one when for all couples of values in both intervals, the comparison is identical (case of non-overlapping intervals).</para><para>This can be expressed by the following formula ( <formula id="30">$ x$</formula> and <formula id="31">$ y$</formula> are real, <formula id="32">$ X$</formula> and <formula id="33">$ Y$</formula> are intervals, <formula id="34">$ \mathcal{OP}$</formula> is a comparison operator): <formula id="46">\[ \left(\forall x \in X, \forall y \in Y, (x\ \mathcal{OP}\ y) = true\right) \Rightarrow (X\ \mathcal{OP}\ Y) = true \]</formula> and <formula id="47">\[ \left(\forall x \in X, \forall y \in Y, (x\ \mathcal{OP}\ y) = false\right) \Rightarrow (X\ \mathcal{OP}\ Y) =false \]</formula> Otherwise, the comparison is not safe, and we specify this by returning a type encoding this uncertainty, namely using <computeroutput><ref refid="classCGAL_1_1Uncertain" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Uncertain</ref>&lt;bool&gt;</computeroutput> or <computeroutput><ref refid="classCGAL_1_1Uncertain" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Uncertain</ref>&lt;Sign&gt;</computeroutput>, which can be probed for uncertainty explicitly, and which has a conversion to the normal type (e.g. <computeroutput>bool</computeroutput>) which throws an exception when the conversion is not certain. Note that each failed conversion increments a profiling counter (see <computeroutput>CGAL_PROFILE</computeroutput>), and then throws the exception of type <computeroutput>unsafe_comparison</computeroutput>. </para></description>
      <memberdef kind="function" id="classCGAL_1_1Interval__nt_1a9d8e87cfb7f6931988db07bc423111da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Uncertain</ref>&lt; bool &gt;</type>
        <definition>Uncertain&lt; bool &gt; operator&lt;</definition>
        <argsstring>(Interval_nt i, Interval_nt j)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="classCGAL_1_1Interval__nt" kindref="compound">Interval_nt</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Interval__nt" kindref="compound">Interval_nt</ref></type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Interval_nt.h" line="253" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Interval__nt_1ac3576ab4f413d4d1d0a8b34f625ed37a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Uncertain</ref>&lt; bool &gt;</type>
        <definition>Uncertain&lt; bool &gt; operator&gt;</definition>
        <argsstring>(Interval_nt i, Interval_nt j)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type><ref refid="classCGAL_1_1Interval__nt" kindref="compound">Interval_nt</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Interval__nt" kindref="compound">Interval_nt</ref></type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Interval_nt.h" line="271" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Interval__nt_1a54ef5814d94cf66854585d36aaa38d9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Uncertain</ref>&lt; bool &gt;</type>
        <definition>Uncertain&lt; bool &gt; operator&lt;=</definition>
        <argsstring>(Interval_nt i, Interval_nt j)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type><ref refid="classCGAL_1_1Interval__nt" kindref="compound">Interval_nt</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Interval__nt" kindref="compound">Interval_nt</ref></type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Interval_nt.h" line="271" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Interval__nt_1aada2ecbcc503721e651732a9a47cb3cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Uncertain</ref>&lt; bool &gt;</type>
        <definition>Uncertain&lt; bool &gt; operator&gt;=</definition>
        <argsstring>(Interval_nt i, Interval_nt j)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type><ref refid="classCGAL_1_1Interval__nt" kindref="compound">Interval_nt</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Interval__nt" kindref="compound">Interval_nt</ref></type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Interval_nt.h" line="283" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Interval__nt_1ac8a587c5d1661cabdbaaf089758126bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Uncertain</ref>&lt; bool &gt;</type>
        <definition>Uncertain&lt; bool &gt; operator==</definition>
        <argsstring>(Interval_nt i, Interval_nt j)</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="classCGAL_1_1Interval__nt" kindref="compound">Interval_nt</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Interval__nt" kindref="compound">Interval_nt</ref></type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Interval_nt.h" line="288" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Interval__nt_1aecec243f2b7dc797e53d9955a9070882" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Uncertain</ref>&lt; bool &gt;</type>
        <definition>Uncertain&lt; bool &gt; operator!=</definition>
        <argsstring>(Interval_nt i, Interval_nt j)</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="classCGAL_1_1Interval__nt" kindref="compound">Interval_nt</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Interval__nt" kindref="compound">Interval_nt</ref></type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Interval_nt.h" line="294" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Interval__nt_1a585c932cf6983731e8ad95ec43c6af88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Uncertain</ref>&lt; <ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Comparison_result</ref> &gt;</type>
        <definition>Uncertain&lt; Comparison_result &gt; compare</definition>
        <argsstring>(Interval_nt i, Interval_nt j)</argsstring>
        <name>compare</name>
        <param>
          <type><ref refid="classCGAL_1_1Interval__nt" kindref="compound">Interval_nt</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Interval__nt" kindref="compound">Interval_nt</ref></type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Interval_nt.h" line="301" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <description><para>The class <computeroutput><ref refid="classCGAL_1_1Interval__nt" kindref="compound">Interval_nt</ref></computeroutput> defines the following types: </para></description>
      <memberdef kind="typedef" id="classCGAL_1_1Interval__nt_1a53ca888550e6eeb2b733e0db8de86645" prot="public" static="no">
        <type>double</type>
        <definition>typedef double CGAL::Interval_nt&lt; Protected &gt;::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
<para>The type of the bounds of the interval. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Interval_nt.h" line="124" column="1" bodyfile="CGAL/Interval_nt.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Interval__nt_1a56fb57ed04cbec420fae9d3b67f42ab1" prot="public" static="no">
        <type>Uncertain_conversion_exception</type>
        <definition>typedef Uncertain_conversion_exception CGAL::Interval_nt&lt; Protected &gt;::unsafe_comparison</definition>
        <argsstring></argsstring>
        <name>unsafe_comparison</name>
        <briefdescription>
<para>The type of the exceptions raised when uncertain comparisons are performed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Interval_nt.h" line="130" column="1" bodyfile="CGAL/Interval_nt.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Interval__nt_1a9834f176aa5467606f7780a99a472bac" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Interval_nt&lt; Protected &gt;::Protector</definition>
        <argsstring></argsstring>
        <name>Protector</name>
        <briefdescription>
<para>A type whose default constructor and destructor allow to protect a block of code from FPU rounding modes necessary for the computations with <computeroutput><ref refid="classCGAL_1_1Interval__nt" kindref="compound">Interval_nt</ref>&lt;false&gt;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>It does nothing for <computeroutput><ref refid="classCGAL_1_1Interval__nt" kindref="compound">Interval_nt</ref>&lt;true&gt;</computeroutput>. It is implemented as <computeroutput><ref refid="structCGAL_1_1Protect__FPU__rounding" kindref="compound">Protect_FPU_rounding</ref>&lt;!Protected&gt;</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Interval_nt.h" line="138" column="1" bodyfile="CGAL/Interval_nt.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Interval__nt_1a546f9a14dfc880fc2d253cf5dca498c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Interval_nt&lt; Protected &gt;::Interval_nt</definition>
        <argsstring>(long long i)</argsstring>
        <name>Interval_nt</name>
        <param>
          <type>long long</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>introduces a small interval containing <emphasis>i</emphasis> (possibly a point). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Interval_nt.h" line="148" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Interval__nt_1abf6b1e6edaa79749c662887a8d2ab53b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Interval_nt&lt; Protected &gt;::Interval_nt</definition>
        <argsstring>(double d)</argsstring>
        <name>Interval_nt</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>introduces the interval [<computeroutput>d</computeroutput>;<computeroutput>d</computeroutput>]. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Interval_nt.h" line="153" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Interval__nt_1ada6d254b4b89d5af26f709966a653ed0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Interval_nt&lt; Protected &gt;::Interval_nt</definition>
        <argsstring>(double i, double s)</argsstring>
        <name>Interval_nt</name>
        <param>
          <type>double</type>
          <declname>i</declname>
        </param>
        <param>
          <type>double</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>introduces the interval [<computeroutput>i</computeroutput>;<computeroutput>s</computeroutput>]. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Interval_nt.h" line="158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Interval__nt_1a97d524273b02f01ccff286fc5fea11ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Interval_nt&lt; Protected &gt;::Interval_nt</definition>
        <argsstring>(std::pair&lt; double, double &gt; p)</argsstring>
        <name>Interval_nt</name>
        <param>
          <type>std::pair&lt; double, double &gt;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>introduces the interval [<computeroutput>p.first</computeroutput>;<computeroutput>p.second</computeroutput>]. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Interval_nt.h" line="163" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <description><para>All functions required by a class to be considered as a CGAL number type (see <ref refid="index_1Numbertype" kindref="member">Numbertype</ref>) are present, as well as the utility functions, sometimes with a particular semantic which is described below.</para><para>There are also a few additional functions. </para></description>
      <memberdef kind="function" id="classCGAL_1_1Interval__nt_1a06e7428a49bb9bd326ccd1099a0bfd61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Interval__nt" kindref="compound">Interval_nt</ref></type>
        <definition>Interval_nt CGAL::Interval_nt&lt; Protected &gt;::operator/</definition>
        <argsstring>(Interval_nt J)</argsstring>
        <name>operator/</name>
        <param>
          <type><ref refid="classCGAL_1_1Interval__nt" kindref="compound">Interval_nt</ref></type>
          <declname>J</declname>
        </param>
        <briefdescription>
<para>returns [ <formula id="48">$ -\infty$</formula>; <formula id="49">$ +\infty$</formula>] when the denominator contains 0. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Interval_nt.h" line="174" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Interval__nt_1af75b49e779a47ecf76dc8be55b1f644d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double CGAL::Interval_nt&lt; Protected &gt;::inf</definition>
        <argsstring>()</argsstring>
        <name>inf</name>
        <briefdescription>
<para>returns the lower bound of the interval. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Interval_nt.h" line="180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Interval__nt_1ac9fd611eb72e2ab92333ad5ffeb59748" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double CGAL::Interval_nt&lt; Protected &gt;::sup</definition>
        <argsstring>()</argsstring>
        <name>sup</name>
        <briefdescription>
<para>returns the upper bound of the interval. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Interval_nt.h" line="185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Interval__nt_1a48c58b7d8b8e33a2df078e951064cbc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Interval_nt&lt; Protected &gt;::is_point</definition>
        <argsstring>()</argsstring>
        <name>is_point</name>
        <briefdescription>
<para>returns whether both bounds are equal. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Interval_nt.h" line="190" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Interval__nt_1a2d892c634373c14bd4267ae7406b48da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Interval_nt&lt; Protected &gt;::is_same</definition>
        <argsstring>(Interval_nt J)</argsstring>
        <name>is_same</name>
        <param>
          <type><ref refid="classCGAL_1_1Interval__nt" kindref="compound">Interval_nt</ref></type>
          <declname>J</declname>
        </param>
        <briefdescription>
<para>returns whether both intervals have the same bounds. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Interval_nt.h" line="196" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Interval__nt_1a0ae37c95009c235276af53c68f5ee6f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Interval_nt&lt; Protected &gt;::do_overlap</definition>
        <argsstring>(Interval_nt J)</argsstring>
        <name>do_overlap</name>
        <param>
          <type><ref refid="classCGAL_1_1Interval__nt" kindref="compound">Interval_nt</ref></type>
          <declname>J</declname>
        </param>
        <briefdescription>
<para>returns whether both intervals have a non empty intersection. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Interval_nt.h" line="202" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Implementation</header>
      <description><para>The operations on <computeroutput><ref refid="classCGAL_1_1Interval__nt" kindref="compound">Interval_nt</ref></computeroutput> with the default parameter <computeroutput>true</computeroutput>, are automatically protected against rounding modes, and are thus slower than those on <computeroutput>Interval_nt_advanced</computeroutput>, but easier to use.</para><para>Users that need performance are encouraged to use <computeroutput>Interval_nt_advanced</computeroutput> instead. Changing the rounding mode affects all floating point computations, and might cause problems with parts of your code, or external libraries (even CGAL), that expect the rounding mode to be the default (round to the nearest).</para><para>We provide two interfaces to change the rounding mode. The first one is to use a protector object whose default constructor and destructor will take care of changing the rounding mode. The protector is implemented using <computeroutput><ref refid="structCGAL_1_1Protect__FPU__rounding" kindref="compound">Protect_FPU_rounding</ref></computeroutput>. The second one is the following set of functions. The macros <computeroutput>CGAL_FE_TONEAREST</computeroutput>, <computeroutput>CGAL_FE_TOWARDZERO</computeroutput>, <computeroutput>CGAL_FE_UPWARD</computeroutput> and <computeroutput>CGAL_FE_DOWNWARD</computeroutput> are the values corresponding to the rounding modes. </para></description>
      <memberdef kind="typedef" id="classCGAL_1_1Interval__nt_1a99f12c031b32d1f13dac98591edb951e" prot="public" static="no">
        <type>int</type>
        <definition>typedef int CGAL::Interval_nt&lt; Protected &gt;::FPU_CW_t</definition>
        <argsstring></argsstring>
        <name>FPU_CW_t</name>
        <briefdescription>
<para>The type used by the following functions to deal with rounding modes. </para>        </briefdescription>
        <detaileddescription>
<para>This is usually an <computeroutput>int</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Interval_nt.h" line="234" column="1" bodyfile="CGAL/Interval_nt.h" bodystart="234" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="related">
      <memberdef kind="function" id="classCGAL_1_1Interval__nt_1a1e5eb9dfdcd694fc7a5e385f016f6499" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Interval__nt" kindref="compound">Interval_nt</ref></type>
        <definition>Interval_nt sqrt</definition>
        <argsstring>(Interval_nt I)</argsstring>
        <name>sqrt</name>
        <param>
          <type><ref refid="classCGAL_1_1Interval__nt" kindref="compound">Interval_nt</ref></type>
          <declname>I</declname>
        </param>
        <briefdescription>
<para>returns [0; <formula id="39">$ \sqrt{upper\_bound(I)}$</formula>] when only the lower bound is negative (expectable case with roundoff errors), and is unspecified when the upper bound also is negative (unexpected case). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Interval_nt.h" line="246" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Interval__nt_1ae57a79fd0de4a2c10595e5a3af93c750" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double to_double</definition>
        <argsstring>(Interval_nt I)</argsstring>
        <name>to_double</name>
        <param>
          <type><ref refid="classCGAL_1_1Interval__nt" kindref="compound">Interval_nt</ref></type>
          <declname>I</declname>
        </param>
        <briefdescription>
<para>returns the middle of the interval, as a double approximation of the interval. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Interval_nt.h" line="253" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Interval__nt_1a044e01039b193ced2a0aef44e92cd5cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Uncertain</ref>&lt; <ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Sign</ref> &gt;</type>
        <definition>Uncertain&lt; Sign &gt; sign</definition>
        <argsstring>(Interval_nt i)</argsstring>
        <name>sign</name>
        <param>
          <type><ref refid="classCGAL_1_1Interval__nt" kindref="compound">Interval_nt</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Interval_nt.h" line="308" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Interval__nt_1aeab5942a8ae4205935048823d9f10ad5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FPU_set_cw</definition>
        <argsstring>(FPU_CW_t R)</argsstring>
        <name>FPU_set_cw</name>
        <param>
          <type><ref refid="classCGAL_1_1Interval__nt_1a99f12c031b32d1f13dac98591edb951e" kindref="member">FPU_CW_t</ref></type>
          <declname>R</declname>
        </param>
        <briefdescription>
<para>sets the rounding mode to <computeroutput>R</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Interval_nt.h" line="314" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Interval__nt_1addd87a741183ee6db8cbf70fa95e1a72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Interval__nt_1a99f12c031b32d1f13dac98591edb951e" kindref="member">FPU_CW_t</ref></type>
        <definition>FPU_CW_t FPU_get_cw</definition>
        <argsstring>(void)</argsstring>
        <name>FPU_get_cw</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>returns the current rounding mode. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Interval_nt.h" line="320" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Interval__nt_1a928224961842037fc1eaa681c0fbe560" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Interval__nt_1a99f12c031b32d1f13dac98591edb951e" kindref="member">FPU_CW_t</ref></type>
        <definition>FPU_CW_t FPU_get_and_set_cw</definition>
        <argsstring>(FPU_CW_t R)</argsstring>
        <name>FPU_get_and_set_cw</name>
        <param>
          <type><ref refid="classCGAL_1_1Interval__nt_1a99f12c031b32d1f13dac98591edb951e" kindref="member">FPU_CW_t</ref></type>
          <declname>R</declname>
        </param>
        <briefdescription>
<para>sets the rounding mode to <computeroutput>R</computeroutput> and returns the old one. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Interval_nt.h" line="326" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The class <computeroutput><ref refid="classCGAL_1_1Interval__nt" kindref="compound">Interval_nt</ref></computeroutput> provides an interval arithmetic number type. </para>    </briefdescription>
    <detaileddescription>
<para>This section describes briefly what interval arithmetic is, its implementation in CGAL, and its possible use by geometric programs. The main reason for having interval arithmetic in CGAL is its integration into the filtered robust and fast predicates scheme, but we also provide a number type so that you can use it separately if you find any use for it, such as interval analysis, or to represent data with tolerance...</para><para>The purpose of interval arithmetic is to provide an efficient way to bound the roundoff errors made by floating point computations. You can choose the behavior of your program depending on these errors. You can find more theoretical information on this topic in <ref refid="citelist_1CITEREF_cgal:bbp-iayed-01" kindref="member">[1]</ref>.</para><para>Interval arithmetic is a large concept and we will only consider here a simple arithmetic based on intervals whose bounds are <emphasis>double</emphasis>s. So each variable is an interval representing any value inside the interval. All arithmetic operations (+, -, <formula id="27">$ *$</formula>, <formula id="28">$ /$</formula>, <formula id="29">$ \sqrt{}$</formula>, <computeroutput><ref refid="group__PkgAlgebraicFoundations_1ga07001b5ddc5c43096c811c91a306be9a" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">square()</ref></computeroutput>, <computeroutput><ref refid="group__nt__util_1gab0ad1dbf97e8a81da183514138f583e6" kindref="member">min()</ref></computeroutput>, <computeroutput><ref refid="group__nt__util_1gad7dbfa919e255b52f36ea1512a92cb78" kindref="member">max()</ref></computeroutput> and <computeroutput><ref refid="group__PkgAlgebraicFoundations_1ga1d5106cf8be16adb4c4dc8b1ec3a5a92" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">abs()</ref></computeroutput>) on intervals preserve the inclusion. This property can be expressed by the following formula ( <formula id="30">$ x$</formula> and <formula id="31">$ y$</formula> are real, <formula id="32">$ X$</formula> and <formula id="33">$ Y$</formula> are intervals, <formula id="34">$ \mathcal{OP}$</formula> is an arithmetic operation):</para><para><formula id="35">\[ \forall\ x \in X, \forall\ y \in Y, (x\ \mathcal{OP}\ y) \in (X\ \mathcal{OP}\ Y) \]</formula></para><para>For example, if the final result of a sequence of arithmetic operations is an interval that does not contain zero, then you can safely determine its sign.</para><para><bold>Parameters</bold><linebreak/>
</para><para>The template parameter <computeroutput>Protected</computeroutput> is a Boolean parameter, which defaults to <computeroutput>true</computeroutput>. It provides a way to select faster computations by avoiding rounding mode switches, at the expense of more care to be taken by the user (see below). The default value, <computeroutput>true</computeroutput>, is the safe way, and takes care of proper rounding mode changes. When specifying <computeroutput>false</computeroutput>, the user has to take care about setting the rounding mode towards plus infinity before doing any computations with the interval class. He can do so using the <computeroutput><ref refid="structCGAL_1_1Protect__FPU__rounding" kindref="compound">Protect_FPU_rounding</ref></computeroutput> class for example.</para><para><xrefsect id="models_1_models000014"><xreftitle>Is Model Of</xreftitle><xrefdescription><para><computeroutput><ref refid="classFieldWithSqrt" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">FieldWithSqrt</ref></computeroutput> </para><para><computeroutput><ref refid="classRealEmbeddable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RealEmbeddable</ref></computeroutput> </para></xrefdescription></xrefsect></para><para><bold>Example</bold><linebreak/>
</para><para>Protecting an area of code that uses operations on the class <computeroutput>Interval_nt_advanced</computeroutput> can be done in the following way:</para><para><programlisting><codeline><highlight class="normal">{<sp/></highlight></codeline>
<codeline><highlight class="normal">Interval_nt_advanced::Protector<sp/>P;<sp/></highlight></codeline>
<codeline><highlight class="normal">...<sp/>//<sp/>The<sp/>code<sp/>to<sp/>be<sp/>protected.<sp/></highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight></codeline>
</programlisting></para><para>The basic idea is to use the directed rounding modes specified by the <emphasis>IEEE 754</emphasis> standard, which are implemented by almost all processors nowadays. It states that you have the possibility, concerning the basic floating point operations ( <formula id="36">$ +,-,*,/,\sqrt{}$</formula>) to specify the rounding mode of each operation instead of using the default, which is set to &apos;round to the nearest&apos;. This feature allows us to compute easily on intervals. For example, to add the two intervals [a.i;a.s] and [b.i;b.s], compute <formula id="37">$ c.i=a.i+b.i$</formula> rounded towards minus infinity, and <formula id="38">$ c.s=a.s+b.s$</formula> rounded towards plus infinity, and the result is the interval [c.i;c.s]. This method can be extended easily to the other operations.</para><para>The problem is that we have to change the rounding mode very often, and the functions of the C library doing this operation are slow and not portable. That&apos;s why assembly versions are used as often as possible. Another trick is to store the opposite of the lower bound, instead of the lower bound itself, which allows us to never change the rounding mode inside simple operations. Therefore, all basic operations, which are in the class <computeroutput>Interval_nt_advanced</computeroutput> assume that the rounding mode is set to &apos;round to infinity&apos;, and everything works with this correctly set.</para><para>So, if the user needs the speed of <computeroutput>Interval_nt_advanced</computeroutput>, he must take care of setting the rounding mode to &apos;round to infinity&apos; before each block of operations on this number type. And if other operations might be affected by this, he must take care to reset it to &apos;round to the nearest&apos; before they are executed.</para><para>Notes:</para><para><itemizedlist>
<listitem>
<para>On Intel platforms (with any operating system and compiler), due to a misfeature of the floating point unit, which does not handle exactly IEEE compliant operations on doubles, we are forced to use a workaround which slows down the code, but is only useful when the intervals can overflow or underflow. If you know that the intervals will never overflow nor underflow for your code, then you can disable this workaround with the flag <computeroutput>CGAL_IA_NO_X86_OVER_UNDER_FLOW_PROTECT</computeroutput>. Other platforms are not affected by this flag. </para></listitem>
<listitem>
<para>When optimizing, compilers usually propagate the value of variables when they know it&apos;s a constant. This can break the interval routines because the compiler then does some floating point operations on these constants with the default rounding mode, which is wrong. This kind of problem is avoided by stopping constant propagation in the interval routines. However, this solution slows down the code and is rarely useful, so you can disable it by setting the flag <computeroutput>CGAL_IA_DONT_STOP_CONSTANT_PROPAGATION</computeroutput>. </para></listitem>
</itemizedlist>
</para>    </detaileddescription>
    <location file="CGAL/Interval_nt.h" line="114" column="1" bodyfile="CGAL/Interval_nt.h" bodystart="114" bodyend="238"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Interval__nt_1a585c932cf6983731e8ad95ec43c6af88" prot="public" virt="non-virtual"><scope>CGAL::Interval_nt</scope><name>compare</name></member>
      <member refid="classCGAL_1_1Interval__nt_1a0ae37c95009c235276af53c68f5ee6f5" prot="public" virt="non-virtual"><scope>CGAL::Interval_nt</scope><name>do_overlap</name></member>
      <member refid="classCGAL_1_1Interval__nt_1a99f12c031b32d1f13dac98591edb951e" prot="public" virt="non-virtual"><scope>CGAL::Interval_nt</scope><name>FPU_CW_t</name></member>
      <member refid="classCGAL_1_1Interval__nt_1a928224961842037fc1eaa681c0fbe560" prot="public" virt="non-virtual"><scope>CGAL::Interval_nt</scope><name>FPU_get_and_set_cw</name></member>
      <member refid="classCGAL_1_1Interval__nt_1addd87a741183ee6db8cbf70fa95e1a72" prot="public" virt="non-virtual"><scope>CGAL::Interval_nt</scope><name>FPU_get_cw</name></member>
      <member refid="classCGAL_1_1Interval__nt_1aeab5942a8ae4205935048823d9f10ad5" prot="public" virt="non-virtual"><scope>CGAL::Interval_nt</scope><name>FPU_set_cw</name></member>
      <member refid="classCGAL_1_1Interval__nt_1af75b49e779a47ecf76dc8be55b1f644d" prot="public" virt="non-virtual"><scope>CGAL::Interval_nt</scope><name>inf</name></member>
      <member refid="classCGAL_1_1Interval__nt_1a546f9a14dfc880fc2d253cf5dca498c3" prot="public" virt="non-virtual"><scope>CGAL::Interval_nt</scope><name>Interval_nt</name></member>
      <member refid="classCGAL_1_1Interval__nt_1abf6b1e6edaa79749c662887a8d2ab53b" prot="public" virt="non-virtual"><scope>CGAL::Interval_nt</scope><name>Interval_nt</name></member>
      <member refid="classCGAL_1_1Interval__nt_1ada6d254b4b89d5af26f709966a653ed0" prot="public" virt="non-virtual"><scope>CGAL::Interval_nt</scope><name>Interval_nt</name></member>
      <member refid="classCGAL_1_1Interval__nt_1a97d524273b02f01ccff286fc5fea11ef" prot="public" virt="non-virtual"><scope>CGAL::Interval_nt</scope><name>Interval_nt</name></member>
      <member refid="classCGAL_1_1Interval__nt_1a48c58b7d8b8e33a2df078e951064cbc1" prot="public" virt="non-virtual"><scope>CGAL::Interval_nt</scope><name>is_point</name></member>
      <member refid="classCGAL_1_1Interval__nt_1a2d892c634373c14bd4267ae7406b48da" prot="public" virt="non-virtual"><scope>CGAL::Interval_nt</scope><name>is_same</name></member>
      <member refid="classCGAL_1_1Interval__nt_1aecec243f2b7dc797e53d9955a9070882" prot="public" virt="non-virtual"><scope>CGAL::Interval_nt</scope><name>operator!=</name></member>
      <member refid="classCGAL_1_1Interval__nt_1a06e7428a49bb9bd326ccd1099a0bfd61" prot="public" virt="non-virtual"><scope>CGAL::Interval_nt</scope><name>operator/</name></member>
      <member refid="classCGAL_1_1Interval__nt_1a9d8e87cfb7f6931988db07bc423111da" prot="public" virt="non-virtual"><scope>CGAL::Interval_nt</scope><name>operator&lt;</name></member>
      <member refid="classCGAL_1_1Interval__nt_1a54ef5814d94cf66854585d36aaa38d9c" prot="public" virt="non-virtual"><scope>CGAL::Interval_nt</scope><name>operator&lt;=</name></member>
      <member refid="classCGAL_1_1Interval__nt_1ac8a587c5d1661cabdbaaf089758126bc" prot="public" virt="non-virtual"><scope>CGAL::Interval_nt</scope><name>operator==</name></member>
      <member refid="classCGAL_1_1Interval__nt_1ac3576ab4f413d4d1d0a8b34f625ed37a" prot="public" virt="non-virtual"><scope>CGAL::Interval_nt</scope><name>operator&gt;</name></member>
      <member refid="classCGAL_1_1Interval__nt_1aada2ecbcc503721e651732a9a47cb3cb" prot="public" virt="non-virtual"><scope>CGAL::Interval_nt</scope><name>operator&gt;=</name></member>
      <member refid="classCGAL_1_1Interval__nt_1a9834f176aa5467606f7780a99a472bac" prot="public" virt="non-virtual"><scope>CGAL::Interval_nt</scope><name>Protector</name></member>
      <member refid="classCGAL_1_1Interval__nt_1a044e01039b193ced2a0aef44e92cd5cc" prot="public" virt="non-virtual"><scope>CGAL::Interval_nt</scope><name>sign</name></member>
      <member refid="classCGAL_1_1Interval__nt_1a1e5eb9dfdcd694fc7a5e385f016f6499" prot="public" virt="non-virtual"><scope>CGAL::Interval_nt</scope><name>sqrt</name></member>
      <member refid="classCGAL_1_1Interval__nt_1ac9fd611eb72e2ab92333ad5ffeb59748" prot="public" virt="non-virtual"><scope>CGAL::Interval_nt</scope><name>sup</name></member>
      <member refid="classCGAL_1_1Interval__nt_1ae57a79fd0de4a2c10595e5a3af93c750" prot="public" virt="non-virtual"><scope>CGAL::Interval_nt</scope><name>to_double</name></member>
      <member refid="classCGAL_1_1Interval__nt_1a56fb57ed04cbec420fae9d3b67f42ab1" prot="public" virt="non-virtual"><scope>CGAL::Interval_nt</scope><name>unsafe_comparison</name></member>
      <member refid="classCGAL_1_1Interval__nt_1a53ca888550e6eeb2b733e0db8de86645" prot="public" virt="non-virtual"><scope>CGAL::Interval_nt</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
