<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Gmpfr" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Gmpfr</compoundname>
    <includes local="no">CGAL/Gmpfr.h</includes>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classCGAL_1_1Gmpfr_1a45f3ce6a9087b34549b1ee7c95571329" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Gmpfr::Precision_type</definition>
        <argsstring></argsstring>
        <name>Precision_type</name>
        <briefdescription>
<para>Type representing the precision (number of bits used to represent the mantissa) of a number. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="64" column="1" bodyfile="CGAL/Gmpfr.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <description><para>Note that all constructors can be called with two optional parameters.</para><para>One can specify as second parameter the rounding mode desired for the conversion from the source number and as a third parameter the precision with which this <computeroutput><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></computeroutput> will be created. If only one optional parameter is specified, it can be either the rounding mode or the precision. If no optional parameters are specified, the precision of the created object is chosen in such a way that the conversion is exact (i.e., no rounding is performed).</para><para>These optional parameters, along with other functions which will be explained below, allow users to control the rounding and precision. For example, being <computeroutput>z</computeroutput> a <computeroutput><ref refid="classCGAL_1_1Gmpz" kindref="compound">Gmpz</ref></computeroutput>, <computeroutput><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref> g(z,53,std::round_toward_neg_infinity)</computeroutput> will construct a <computeroutput><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></computeroutput> <computeroutput>g</computeroutput> having as value the biggest 53-bit floating-point number that is equal or smaller than to <computeroutput>z</computeroutput>. </para></description>
      <memberdef kind="function" id="classCGAL_1_1Gmpfr_1a6ab4d80d5929857e065241a8f2117824" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Gmpfr::Gmpfr</definition>
        <argsstring>()</argsstring>
        <name>Gmpfr</name>
        <briefdescription>
<para>Creates an uninitialized <computeroutput><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></computeroutput> <computeroutput>f</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="91" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfr_1adf6ddf48116f345eda58cd541ea5665a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Gmpfr::Gmpfr</definition>
        <argsstring>(const Gmpfr &amp;n)</argsstring>
        <name>Gmpfr</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref> &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>        </briefdescription>
        <detaileddescription>
<para>The copied object inherits the precision of <computeroutput>n</computeroutput>, and thus it is not rounded. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="97" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfr_1aa4fa86194f5928e6bb7d85ba6565c127" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Gmpfr::Gmpfr</definition>
        <argsstring>(long si)</argsstring>
        <name>Gmpfr</name>
        <param>
          <type>long</type>
          <declname>si</declname>
        </param>
        <briefdescription>
<para>Creates a <computeroutput><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></computeroutput>, initialized with the value of <computeroutput>si</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfr_1a6492552d338d431c6f9e79d04a3c544b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Gmpfr::Gmpfr</definition>
        <argsstring>(unsigned long ui)</argsstring>
        <name>Gmpfr</name>
        <param>
          <type>unsigned long</type>
          <declname>ui</declname>
        </param>
        <briefdescription>
<para>Creates a <computeroutput><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></computeroutput>, initialized with the value of <computeroutput>ui</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfr_1a910ffacfdd2c00cff98563cb1e36d133" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Gmpfr::Gmpfr</definition>
        <argsstring>(int i)</argsstring>
        <name>Gmpfr</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Creates a <computeroutput><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></computeroutput>, initialized with the value of <computeroutput>i</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfr_1a240e82d50dc9ef4c23ea96eafb1b48b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Gmpfr::Gmpfr</definition>
        <argsstring>(double d)</argsstring>
        <name>Gmpfr</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Creates a <computeroutput><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></computeroutput>, initialized with the value of <computeroutput>d</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="117" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfr_1ac9b0d8d88b540578f638a7061e099810" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Gmpfr::Gmpfr</definition>
        <argsstring>(long double ld)</argsstring>
        <name>Gmpfr</name>
        <param>
          <type>long double</type>
          <declname>ld</declname>
        </param>
        <briefdescription>
<para>Creates a <computeroutput><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></computeroutput>, initialized with the value of <computeroutput>ld</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="122" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfr_1a3e417372222484e098796b7a504966d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Gmpfr::Gmpfr</definition>
        <argsstring>(const Gmpz &amp;z)</argsstring>
        <name>Gmpfr</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Gmpz" kindref="compound">Gmpz</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Creates a <computeroutput><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></computeroutput>, initialized with the value of <computeroutput>z</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfr_1a30e3829896913178f2c984a94b3f535a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Gmpfr::Gmpfr</definition>
        <argsstring>(const Gmpzf &amp;zf)</argsstring>
        <name>Gmpfr</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Gmpzf" kindref="compound">Gmpzf</ref> &amp;</type>
          <declname>zf</declname>
        </param>
        <briefdescription>
<para>Creates a <computeroutput><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></computeroutput>, initialized with the value of <computeroutput>zf</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfr_1a8538f174ad8b5e3f5124cae66b08a69e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Gmpfr::Gmpfr</definition>
        <argsstring>(const std::pair&lt; Gmpz, long &gt; &amp;ie)</argsstring>
        <name>Gmpfr</name>
        <param>
          <type>const std::pair&lt; <ref refid="classCGAL_1_1Gmpz" kindref="compound">Gmpz</ref>, long &gt; &amp;</type>
          <declname>ie</declname>
        </param>
        <briefdescription>
<para>Creates a <computeroutput><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></computeroutput>, initialized with the value of <computeroutput>ie.first</computeroutput> <formula id="15">$ \times2^{\mathrm{ie.second}} $</formula> . </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="138" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfr_1a45b23f4a7f5a8b096efd03a877341464" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Gmpfr_1a45f3ce6a9087b34549b1ee7c95571329" kindref="member">Precision_type</ref></type>
        <definition>static Precision_type CGAL::Gmpfr::get_default_precision</definition>
        <argsstring>()</argsstring>
        <name>get_default_precision</name>
        <briefdescription>
<para>This returns the current precision used in <computeroutput><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></computeroutput> creation by default. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="144" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfr_1a2eb8ce38937e00577ee21892e11938d5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Gmpfr_1a45f3ce6a9087b34549b1ee7c95571329" kindref="member">Precision_type</ref></type>
        <definition>static Precision_type CGAL::Gmpfr::set_default_precision</definition>
        <argsstring>(Precision_type p)</argsstring>
        <name>set_default_precision</name>
        <param>
          <type><ref refid="classCGAL_1_1Gmpfr_1a45f3ce6a9087b34549b1ee7c95571329" kindref="member">Precision_type</ref></type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>This function sets the default Mpfr precision to p, and returns the old one. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="150" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Controlling the Precision</header>
      <description><para>Each <ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref> object has a precision associated to it.</para><para>The precision is the amount of bits needed to represent the mantissa. Mpfr has a default precision value, which can be controlled by static functions of the <ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref> class (in practice, this default value is a variable local to each execution thread). There are also functions to get and set the precision of each <ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref> object. </para></description>
      <memberdef kind="function" id="classCGAL_1_1Gmpfr_1a36b154cb7b0c8f3cb4e01ba5c7ed5a3b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Gmpfr_1a45f3ce6a9087b34549b1ee7c95571329" kindref="member">Precision_type</ref></type>
        <definition>Precision_type CGAL::Gmpfr::get_precision</definition>
        <argsstring>() const</argsstring>
        <name>get_precision</name>
        <briefdescription>
<para>Returns the precision of <computeroutput>f</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="169" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfr_1a24bfd650378aaa2dfa75ecfad1ed1127" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></type>
        <definition>Gmpfr CGAL::Gmpfr::round</definition>
        <argsstring>(Precision_type p, std::float_round_style r) const</argsstring>
        <name>round</name>
        <param>
          <type><ref refid="classCGAL_1_1Gmpfr_1a45f3ce6a9087b34549b1ee7c95571329" kindref="member">Precision_type</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type>std::float_round_style</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Returns the value of <computeroutput>f</computeroutput>, rounded with precision <computeroutput>p</computeroutput> in the direction <computeroutput>r</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="175" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfr_1adac430db522ea382bb8088813938dc6e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::float_round_style</type>
        <definition>static std::float_round_style CGAL::Gmpfr::get_default_rndmode</definition>
        <argsstring>()</argsstring>
        <name>get_default_rndmode</name>
        <briefdescription>
<para>This function returns the current rounding mode used by Mpfr. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfr_1a1db92367376568082364fc908ea14f44" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::float_round_style</type>
        <definition>static std::float_round_style CGAL::Gmpfr::set_default_rndmode</definition>
        <argsstring>(std::float_round_style r)</argsstring>
        <name>set_default_rndmode</name>
        <param>
          <type>std::float_round_style</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>This function sets the Mpfr rounding mode to <computeroutput>r</computeroutput> and returns the old one. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="186" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Flags</header>
      <description><para>Mpfr provides some flags to know whether performed operations were exact or not, or they incurred in overflow or underflow, if the exponent is out of range, or the result was <computeroutput>NaN</computeroutput> (not-a-number).</para><para>One can clear the flags before a set of operations and inspect them afterward, in order to see if something unexpected happened during the operations. The static functions used to handle flags are: </para></description>
      <memberdef kind="function" id="classCGAL_1_1Gmpfr_1a0008c5140f71dc9ba2de516ea4a92c2a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void CGAL::Gmpfr::clear_flags</definition>
        <argsstring>()</argsstring>
        <name>clear_flags</name>
        <briefdescription>
<para>Clears all the flags set by Mpfr(they are not cleared automatically). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="206" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfr_1a5ec96fcc167aaa93c4561432173cfef6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool CGAL::Gmpfr::underflow_flag</definition>
        <argsstring>()</argsstring>
        <name>underflow_flag</name>
        <briefdescription>
<para>Shows whether an operation incurred in underflow. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="211" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfr_1a1b3d6c5968d6c785ea3f419cbe9e84d8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool CGAL::Gmpfr::overflow_flag</definition>
        <argsstring>()</argsstring>
        <name>overflow_flag</name>
        <briefdescription>
<para>Shows whether an operation incurred in overflow. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="216" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfr_1a50cde0e62839992e8e39b3cf3ccf6708" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool CGAL::Gmpfr::nan_flag</definition>
        <argsstring>()</argsstring>
        <name>nan_flag</name>
        <briefdescription>
<para>Shows whether the result of an operation was <computeroutput>NaN</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="221" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfr_1ae6e1e74fbf90a5856d285afa69789a81" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool CGAL::Gmpfr::inex_flag</definition>
        <argsstring>()</argsstring>
        <name>inex_flag</name>
        <briefdescription>
<para>Shows whether an operation was inexact. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="226" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfr_1a23a2f64830eb75abf75bb41a02767f81" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool CGAL::Gmpfr::erange_flag</definition>
        <argsstring>()</argsstring>
        <name>erange_flag</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> iff a range error occurred. </para>        </briefdescription>
        <detaileddescription>
<para>Such an exception occurs when some function which does not return a <computeroutput><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></computeroutput> has an invalid result. For example, this flag will be set if one of the operands of a comparison is <computeroutput>NaN</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="234" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Arithmetic Operations</header>
      <description><para>Arithmetic operators <computeroutput>+</computeroutput> , <computeroutput>-</computeroutput> , and <computeroutput>/</computeroutput> are overloaded, but special care must be taken when applying them.</para><para>The precision of an operation between two <computeroutput><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></computeroutput>s is defined as the maximum of the operands precision and the default precision. The second operand of the former operations can be a <computeroutput><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></computeroutput>, <computeroutput>int</computeroutput>, <computeroutput>long</computeroutput>, <computeroutput>unsigned</computeroutput>, <computeroutput>unsigned long</computeroutput>, or <computeroutput><ref refid="classCGAL_1_1Gmpz" kindref="compound">Gmpz</ref></computeroutput>. The precision of an operation between a <computeroutput><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></computeroutput> and a number of another type is defined as the maximum between the number&apos;s precision and the default precision. To specify the rounding mode and/or the precision to perform an operation, this class provides the four static functions <computeroutput>add</computeroutput>, <computeroutput>sub</computeroutput>, <computeroutput>mul</computeroutput> and <computeroutput>div</computeroutput>. Only one of them is shown here, since their interfaces are similar: When the precision is not specified in this family of functions, it is defined as in the overloaded operators. When the rounding mode is not specified, the default is used. </para></description>
      <memberdef kind="function" id="classCGAL_1_1Gmpfr_1a4239e1d748eaed7b7534acd498aedc41" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></type>
        <definition>Gmpfr CGAL::Gmpfr::abs</definition>
        <argsstring>(Precision_type p, std::float_round_style r=get_default_rndmode()) const</argsstring>
        <name>abs</name>
        <param>
          <type><ref refid="classCGAL_1_1Gmpfr_1a45f3ce6a9087b34549b1ee7c95571329" kindref="member">Precision_type</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type>std::float_round_style</type>
          <declname>r</declname>
          <defval><ref refid="classCGAL_1_1Gmpfr_1adac430db522ea382bb8088813938dc6e" kindref="member">get_default_rndmode</ref>()</defval>
        </param>
        <briefdescription>
<para>Returns the absolute value of <computeroutput>f</computeroutput>, rounded with precision <computeroutput>p</computeroutput> in the direction <computeroutput>r</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>p</computeroutput> is not specified, the precision used is the maximum between <computeroutput>f</computeroutput>&apos;s precision and the default. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="280" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfr_1aa357cccd2a6f288f73557a2db21a6d11" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></type>
        <definition>Gmpfr CGAL::Gmpfr::sqrt</definition>
        <argsstring>(Precision_type p, std::float_round_style r=get_default_rndmode()) const</argsstring>
        <name>sqrt</name>
        <param>
          <type><ref refid="classCGAL_1_1Gmpfr_1a45f3ce6a9087b34549b1ee7c95571329" kindref="member">Precision_type</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type>std::float_round_style</type>
          <declname>r</declname>
          <defval><ref refid="classCGAL_1_1Gmpfr_1adac430db522ea382bb8088813938dc6e" kindref="member">get_default_rndmode</ref>()</defval>
        </param>
        <briefdescription>
<para>Returns the square root of <computeroutput>f</computeroutput>, rounded with precision <computeroutput>p</computeroutput> in the direction <computeroutput>r</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>p</computeroutput> is not specified, the precision used is the maximum between <computeroutput>f</computeroutput>&apos;s precision and the default. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="288" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfr_1afcb23b9a0133c5af7a2796549e882410" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></type>
        <definition>Gmpfr CGAL::Gmpfr::kthroot</definition>
        <argsstring>(int k, Precision_type p, std::float_round_style r=get_default_rndmode()) const</argsstring>
        <name>kthroot</name>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Gmpfr_1a45f3ce6a9087b34549b1ee7c95571329" kindref="member">Precision_type</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type>std::float_round_style</type>
          <declname>r</declname>
          <defval><ref refid="classCGAL_1_1Gmpfr_1adac430db522ea382bb8088813938dc6e" kindref="member">get_default_rndmode</ref>()</defval>
        </param>
        <briefdescription>
<para>Returns the k-th root of <computeroutput>f</computeroutput>, rounded with precision <computeroutput>p</computeroutput> in the direction <computeroutput>r</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>p</computeroutput> is not specified, the precision used is the maximum between <computeroutput>f</computeroutput>&apos;s precision and the default. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="296" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfr_1a7778dc25c4b0979eb6fc88df80fe07d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></type>
        <definition>Gmpfr CGAL::Gmpfr::square</definition>
        <argsstring>(Precision_type p, std::float_round_style r=get_default_rndmode()) const</argsstring>
        <name>square</name>
        <param>
          <type><ref refid="classCGAL_1_1Gmpfr_1a45f3ce6a9087b34549b1ee7c95571329" kindref="member">Precision_type</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type>std::float_round_style</type>
          <declname>r</declname>
          <defval><ref refid="classCGAL_1_1Gmpfr_1adac430db522ea382bb8088813938dc6e" kindref="member">get_default_rndmode</ref>()</defval>
        </param>
        <briefdescription>
<para>Returns the square of <computeroutput>f</computeroutput>, rounded with precision <computeroutput>p</computeroutput> in the direction <computeroutput>r</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>p</computeroutput> is not specified, the precision used is the maximum between <computeroutput>f</computeroutput>&apos;s precision and the default. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="303" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfr_1a191b8ac25cca42883c14a20ab6c03a4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double CGAL::Gmpfr::to_double</definition>
        <argsstring>(std::float_round_style r=get_default_rndmode())</argsstring>
        <name>to_double</name>
        <param>
          <type>std::float_round_style</type>
          <declname>r</declname>
          <defval><ref refid="classCGAL_1_1Gmpfr_1adac430db522ea382bb8088813938dc6e" kindref="member">get_default_rndmode</ref>()</defval>
        </param>
        <briefdescription>
<para>Returns a double precision approximation of <computeroutput>f</computeroutput> using the rounding mode <computeroutput>r</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="309" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfr_1a6cff0f63981228f5bd1439a5c6694e89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; double, double &gt;</type>
        <definition>std::pair&lt;double,double&gt; CGAL::Gmpfr::to_interval</definition>
        <argsstring>()</argsstring>
        <name>to_interval</name>
        <briefdescription>
<para>Returns an interval of doubles which contains <computeroutput>f</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>If a rounded endpoint does not fit in a double, the double is set to plus or minus infinity and the <computeroutput>overflow</computeroutput> or <computeroutput>underflow</computeroutput> flag. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="316" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfr_1a1988f03583a6df5072e5da4ab07032c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; double, long &gt;</type>
        <definition>std::pair&lt;double,long&gt; CGAL::Gmpfr::to_double_exp</definition>
        <argsstring>(std::float_round_style r=get_default_rndmode())</argsstring>
        <name>to_double_exp</name>
        <param>
          <type>std::float_round_style</type>
          <declname>r</declname>
          <defval><ref refid="classCGAL_1_1Gmpfr_1adac430db522ea382bb8088813938dc6e" kindref="member">get_default_rndmode</ref>()</defval>
        </param>
        <briefdescription>
<para>Returns the pair <formula id="16">$ (d,e) $</formula> such that <formula id="17">$ 0.5 \le|d| &lt; 1 $</formula> and <formula id="18">$ d \times2^e $</formula> equals <computeroutput>f</computeroutput> rounded to double precision, using the rounding mode <computeroutput>r</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>f</computeroutput> is <computeroutput>NaN</computeroutput> or infinity, then the corresponding double is returned, leaving the exponent undefined and setting the appropriate error flag. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="325" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfr_1a66f43c2f7dff43f9c576377bd82cbef4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; std::pair&lt; double, double &gt;, long &gt;</type>
        <definition>std::pair&lt;std::pair&lt;double,double&gt;,long&gt; CGAL::Gmpfr::to_interval_exp</definition>
        <argsstring>()</argsstring>
        <name>to_interval_exp</name>
        <briefdescription>
<para>Returns <formula id="19">$ ((m,M),e) $</formula> such that <formula id="20">$ m \times2^e \le f \le M \times2^e $</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>f</computeroutput> is <computeroutput>NaN</computeroutput> or infinity, then the corresponding doubles are returned, leaving the exponent undefined and setting the appropriate error flag. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="333" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfr_1a3f92a971d6aa25808a92e13f56ae82a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; <ref refid="classCGAL_1_1Gmpz" kindref="compound">Gmpz</ref>, long &gt;</type>
        <definition>std::pair&lt;Gmpz,long&gt; CGAL::Gmpfr::to_integer_exp</definition>
        <argsstring>()</argsstring>
        <name>to_integer_exp</name>
        <briefdescription>
<para>Returns a pair of integers <formula id="21">$ (m,e) $</formula>, such that <formula id="22">$ f = m \times2^e $</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Note that the returned value of <formula id="23">$ m$</formula> is not necessarily the smallest possible value of <formula id="23">$ m$</formula> (that is, it might be that <formula id="24">$ 2|m$</formula>). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="341" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfr_1a0872bdb4d6cf7523aba5049fe273f5f3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></type>
        <definition>static Gmpfr CGAL::Gmpfr::add</definition>
        <argsstring>(const Gmpfr &amp;a, const Gmpfr &amp;b)</argsstring>
        <name>add</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="260" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfr_1af8cec21514fbe0c8af802f5eb55930d1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></type>
        <definition>static Gmpfr CGAL::Gmpfr::add</definition>
        <argsstring>(const Gmpfr &amp;a, const Gmpfr &amp;b, std::float_round_style r)</argsstring>
        <name>add</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>std::float_round_style</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="264" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfr_1a5d0ea5544c44a90e1422a201d8530300" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></type>
        <definition>static Gmpfr CGAL::Gmpfr::add</definition>
        <argsstring>(const Gmpfr &amp;a, const Gmpfr &amp;b, Precision_type p)</argsstring>
        <name>add</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Gmpfr_1a45f3ce6a9087b34549b1ee7c95571329" kindref="member">Precision_type</ref></type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="268" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfr_1a5cbf3bcc3b93df9f4a9c080e13649aef" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></type>
        <definition>static Gmpfr CGAL::Gmpfr::add</definition>
        <argsstring>(const Gmpfr &amp;a, const Gmpfr &amp;b, Precision_type p, std::float_round_style r)</argsstring>
        <name>add</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Gmpfr_1a45f3ce6a9087b34549b1ee7c95571329" kindref="member">Precision_type</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type>std::float_round_style</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="272" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Query Functions</header>
      <memberdef kind="function" id="classCGAL_1_1Gmpfr_1a81151e767cf96782336fa56edf5c1069" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Sign</ref></type>
        <definition>Sign CGAL::Gmpfr::sign</definition>
        <argsstring>()</argsstring>
        <name>sign</name>
        <briefdescription>
<para>Returns the sign of <computeroutput>f</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="351" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfr_1a573ceaded2ff06810798cac00e7537f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Gmpfr::is_zero</definition>
        <argsstring>()</argsstring>
        <name>is_zero</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> iff <computeroutput>f</computeroutput> is zero. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="356" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfr_1a0a9761e738fc5458e55de4c0f882a035" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Gmpfr::is_one</definition>
        <argsstring>()</argsstring>
        <name>is_one</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> iff <computeroutput>f</computeroutput> is one. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="361" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfr_1a969a729b2453fadec3d22d4ae9531abd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Gmpfr::is_nan</definition>
        <argsstring>()</argsstring>
        <name>is_nan</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> iff <computeroutput>f</computeroutput> is NaN (not-a-number). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="366" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfr_1a1f1cb0588fdd8c31905a72ca5f357043" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Gmpfr::is_inf</definition>
        <argsstring>()</argsstring>
        <name>is_inf</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> iff <computeroutput>f</computeroutput> is plus or minus infinity. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="371" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfr_1a33dfd070f209161b0dba7bf9d4412de5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Gmpfr::is_number</definition>
        <argsstring>()</argsstring>
        <name>is_number</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> iff <computeroutput>f</computeroutput> is a valid number. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="376" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfr_1a50cc335aa064eec725e2f7fdd26c2bb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Gmpfr::is_square</definition>
        <argsstring>()</argsstring>
        <name>is_square</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> iff <computeroutput>f</computeroutput> is the square of a number representable by an object of this type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="382" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfr_1ad6cfbcd409a263ef959080b46145e41c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Gmpfr::is_square</definition>
        <argsstring>(const Gmpfr &amp;y)</argsstring>
        <name>is_square</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> iff <computeroutput>f</computeroutput> is the square of a number representable by an object of this type, computing and storing it in <computeroutput>y</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="389" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="related">
      <memberdef kind="function" id="classCGAL_1_1Gmpfr_1a584a82909607aa2a238a905b3c1546e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;in, Gmpfr &amp;f)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Reads a floating-point number from <computeroutput>in</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The number <formula id="11">$ M \times2^E$</formula> must be in the form <formula id="12">$ MeE$</formula>, where the mantissa <formula id="13">$ M$</formula> and the exponent <formula id="14">$ E$</formula> are integers in base 10. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="402" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfr_1af2fd0abeb6902c9f500a0eedf9f801a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const Gmpfr &amp;f)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>If the ostream <computeroutput>out</computeroutput> is in pretty-print mode, writes a decimal approximation of <computeroutput>f</computeroutput> to <computeroutput>out</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Otherwise, writes <computeroutput>f</computeroutput> to <computeroutput>out</computeroutput> in the form <formula id="12">$ MeE$</formula>, where <formula id="13">$ M$</formula> is its mantissa and <formula id="14">$ E$</formula> is its exponent, both in base 10. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfr.h" line="411" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An object of the class <computeroutput><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></computeroutput> is a fixed precision floating-point number, based on the Mpfr library. </para>    </briefdescription>
    <detaileddescription>
<para>This type is inexact, due to the fact that the mantissa of each number is represented by a fixed amount of bits (this amount is called <emphasis>precision</emphasis>). If an operation needs more bits than the precision of the result number, the results are rounded following different possible criteria (called <emphasis>rounding modes</emphasis>).</para><para>Currently, the <computeroutput><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></computeroutput> interface supports four rounding modes: round to nearest, round toward zero, round down (or toward <formula id="9">$ (-\infty)$</formula>) and round up (or toward <formula id="10">$ (+\infty)$</formula>). When not specified explicitly, the operations use the default rounding mode, which is in practice a variable local to each execution thread. The default rounding mode can be set to any of the four rounding modes (initially, it is set to nearest). To specify rounding modes for operations, the type used is <computeroutput>std::float_round_style</computeroutput>.</para><para>This type is <computeroutput><ref refid="classImplicitInteroperable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">ImplicitInteroperable</ref></computeroutput> with <computeroutput><ref refid="classCGAL_1_1Gmpz" kindref="compound">Gmpz</ref></computeroutput>, <computeroutput>long</computeroutput>, <computeroutput>unsigned long</computeroutput>, <computeroutput>int</computeroutput>, <computeroutput>double</computeroutput> and <computeroutput>long double</computeroutput>.</para><para><xrefsect id="models_1_models000008"><xreftitle>Is Model Of</xreftitle><xrefdescription><para><computeroutput><ref refid="classFieldWithKthRoot" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">FieldWithKthRoot</ref></computeroutput> </para><para><computeroutput><ref refid="classRealEmbeddable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RealEmbeddable</ref></computeroutput> </para></xrefdescription></xrefsect></para><para><bold>Comparisons</bold><linebreak/>
</para><para>Comparison operators <computeroutput>==</computeroutput>, <computeroutput>!=</computeroutput>, <computeroutput>&gt;</computeroutput>, <computeroutput>&lt;</computeroutput>, <computeroutput>&gt;=</computeroutput> and <computeroutput>&lt;=</computeroutput> are also overloaded. A <computeroutput><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></computeroutput> can be compared with other <computeroutput><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></computeroutput>, as well as with a <computeroutput><ref refid="classCGAL_1_1Gmpz" kindref="compound">Gmpz</ref></computeroutput>, <computeroutput>long</computeroutput>, <computeroutput>unsigned long</computeroutput>, <computeroutput>int</computeroutput>, <computeroutput>double</computeroutput> or <computeroutput>long double</computeroutput>. It is worth noting that the numbers are never converted nor rounded before comparison. In the case where one of the compared numbers is <computeroutput>NaN</computeroutput>, the <computeroutput>erange</computeroutput> flag is set.</para><para><bold>Implementation</bold><linebreak/>
</para><para>Since the Mpfr library can be compiled to be thread-safe, this interface is designed to keep the thread-safety.</para><para><computeroutput><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></computeroutput>s are reference counted. This behavior may be changed, by setting the flag <computeroutput>CGAL_GMPFR_NO_REFCOUNT</computeroutput>. A non-reference-counted class is slightly more efficient in case the implementation does not need to copy numbers (this is not usually the case). Nevertheless, setting this flag may be useful for debugging purposes.</para><para><simplesect kind="see"><para><computeroutput><ref refid="classRealEmbeddable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RealEmbeddable</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classFieldWithKthRoot" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">FieldWithKthRoot</ref></computeroutput> </para></simplesect>
</para>    </detaileddescription>
    <location file="CGAL/Gmpfr.h" line="54" column="1" bodyfile="CGAL/Gmpfr.h" bodystart="54" bodyend="394"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Gmpfr_1a4239e1d748eaed7b7534acd498aedc41" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>abs</name></member>
      <member refid="classCGAL_1_1Gmpfr_1a0872bdb4d6cf7523aba5049fe273f5f3" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>add</name></member>
      <member refid="classCGAL_1_1Gmpfr_1af8cec21514fbe0c8af802f5eb55930d1" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>add</name></member>
      <member refid="classCGAL_1_1Gmpfr_1a5d0ea5544c44a90e1422a201d8530300" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>add</name></member>
      <member refid="classCGAL_1_1Gmpfr_1a5cbf3bcc3b93df9f4a9c080e13649aef" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>add</name></member>
      <member refid="classCGAL_1_1Gmpfr_1a0008c5140f71dc9ba2de516ea4a92c2a" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>clear_flags</name></member>
      <member refid="classCGAL_1_1Gmpfr_1a23a2f64830eb75abf75bb41a02767f81" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>erange_flag</name></member>
      <member refid="classCGAL_1_1Gmpfr_1a45b23f4a7f5a8b096efd03a877341464" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>get_default_precision</name></member>
      <member refid="classCGAL_1_1Gmpfr_1adac430db522ea382bb8088813938dc6e" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>get_default_rndmode</name></member>
      <member refid="classCGAL_1_1Gmpfr_1a36b154cb7b0c8f3cb4e01ba5c7ed5a3b" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>get_precision</name></member>
      <member refid="classCGAL_1_1Gmpfr_1a6ab4d80d5929857e065241a8f2117824" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>Gmpfr</name></member>
      <member refid="classCGAL_1_1Gmpfr_1adf6ddf48116f345eda58cd541ea5665a" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>Gmpfr</name></member>
      <member refid="classCGAL_1_1Gmpfr_1aa4fa86194f5928e6bb7d85ba6565c127" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>Gmpfr</name></member>
      <member refid="classCGAL_1_1Gmpfr_1a6492552d338d431c6f9e79d04a3c544b" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>Gmpfr</name></member>
      <member refid="classCGAL_1_1Gmpfr_1a910ffacfdd2c00cff98563cb1e36d133" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>Gmpfr</name></member>
      <member refid="classCGAL_1_1Gmpfr_1a240e82d50dc9ef4c23ea96eafb1b48b0" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>Gmpfr</name></member>
      <member refid="classCGAL_1_1Gmpfr_1ac9b0d8d88b540578f638a7061e099810" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>Gmpfr</name></member>
      <member refid="classCGAL_1_1Gmpfr_1a3e417372222484e098796b7a504966d3" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>Gmpfr</name></member>
      <member refid="classCGAL_1_1Gmpfr_1a30e3829896913178f2c984a94b3f535a" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>Gmpfr</name></member>
      <member refid="classCGAL_1_1Gmpfr_1a8538f174ad8b5e3f5124cae66b08a69e" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>Gmpfr</name></member>
      <member refid="classCGAL_1_1Gmpfr_1ae6e1e74fbf90a5856d285afa69789a81" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>inex_flag</name></member>
      <member refid="classCGAL_1_1Gmpfr_1a1f1cb0588fdd8c31905a72ca5f357043" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>is_inf</name></member>
      <member refid="classCGAL_1_1Gmpfr_1a969a729b2453fadec3d22d4ae9531abd" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>is_nan</name></member>
      <member refid="classCGAL_1_1Gmpfr_1a33dfd070f209161b0dba7bf9d4412de5" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>is_number</name></member>
      <member refid="classCGAL_1_1Gmpfr_1a0a9761e738fc5458e55de4c0f882a035" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>is_one</name></member>
      <member refid="classCGAL_1_1Gmpfr_1a50cc335aa064eec725e2f7fdd26c2bb7" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>is_square</name></member>
      <member refid="classCGAL_1_1Gmpfr_1ad6cfbcd409a263ef959080b46145e41c" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>is_square</name></member>
      <member refid="classCGAL_1_1Gmpfr_1a573ceaded2ff06810798cac00e7537f9" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>is_zero</name></member>
      <member refid="classCGAL_1_1Gmpfr_1afcb23b9a0133c5af7a2796549e882410" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>kthroot</name></member>
      <member refid="classCGAL_1_1Gmpfr_1a50cde0e62839992e8e39b3cf3ccf6708" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>nan_flag</name></member>
      <member refid="classCGAL_1_1Gmpfr_1af2fd0abeb6902c9f500a0eedf9f801a1" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>operator&lt;&lt;</name></member>
      <member refid="classCGAL_1_1Gmpfr_1a584a82909607aa2a238a905b3c1546e7" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>operator&gt;&gt;</name></member>
      <member refid="classCGAL_1_1Gmpfr_1a1b3d6c5968d6c785ea3f419cbe9e84d8" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>overflow_flag</name></member>
      <member refid="classCGAL_1_1Gmpfr_1a45f3ce6a9087b34549b1ee7c95571329" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>Precision_type</name></member>
      <member refid="classCGAL_1_1Gmpfr_1a24bfd650378aaa2dfa75ecfad1ed1127" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>round</name></member>
      <member refid="classCGAL_1_1Gmpfr_1a2eb8ce38937e00577ee21892e11938d5" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>set_default_precision</name></member>
      <member refid="classCGAL_1_1Gmpfr_1a1db92367376568082364fc908ea14f44" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>set_default_rndmode</name></member>
      <member refid="classCGAL_1_1Gmpfr_1a81151e767cf96782336fa56edf5c1069" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>sign</name></member>
      <member refid="classCGAL_1_1Gmpfr_1aa357cccd2a6f288f73557a2db21a6d11" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>sqrt</name></member>
      <member refid="classCGAL_1_1Gmpfr_1a7778dc25c4b0979eb6fc88df80fe07d1" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>square</name></member>
      <member refid="classCGAL_1_1Gmpfr_1a191b8ac25cca42883c14a20ab6c03a4b" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>to_double</name></member>
      <member refid="classCGAL_1_1Gmpfr_1a1988f03583a6df5072e5da4ab07032c9" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>to_double_exp</name></member>
      <member refid="classCGAL_1_1Gmpfr_1a3f92a971d6aa25808a92e13f56ae82a0" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>to_integer_exp</name></member>
      <member refid="classCGAL_1_1Gmpfr_1a6cff0f63981228f5bd1439a5c6694e89" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>to_interval</name></member>
      <member refid="classCGAL_1_1Gmpfr_1a66f43c2f7dff43f9c576377bd82cbef4" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>to_interval_exp</name></member>
      <member refid="classCGAL_1_1Gmpfr_1a5ec96fcc167aaa93c4561432173cfef6" prot="public" virt="non-virtual"><scope>CGAL::Gmpfr</scope><name>underflow_flag</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
