<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Number__type__checker" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Number_type_checker</compoundname>
    <includes local="no">CGAL/Number_type_checker.h</includes>
    <templateparamlist>
      <param>
        <type>typename NT1</type>
      </param>
      <param>
        <type>typename NT2</type>
      </param>
      <param>
        <type>typename Comparator</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Number__type__checker_1adbd76b1e89df120d6309dfb0d30ce77f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Number_type_checker&lt; NT1, NT2, Comparator &gt;::Number_type_checker</definition>
        <argsstring>()</argsstring>
        <name>Number_type_checker</name>
        <briefdescription>
<para>introduces an uninitialized variable <computeroutput>c</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Number_type_checker.h" line="40" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Number__type__checker_1ad56077208ddb8fa4429602dbf59a4222" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Number_type_checker&lt; NT1, NT2, Comparator &gt;::Number_type_checker</definition>
        <argsstring>(int i)</argsstring>
        <name>Number_type_checker</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>introduces the integral value i. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Number_type_checker.h" line="45" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Number__type__checker_1a37d7b5e6c3741620519fa562c81c7b55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Number_type_checker&lt; NT1, NT2, Comparator &gt;::Number_type_checker</definition>
        <argsstring>(double d)</argsstring>
        <name>Number_type_checker</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>introduces the floating point value d. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Number_type_checker.h" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Number__type__checker_1a09b038a5e5049be838cd156e1982f473" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Number_type_checker&lt; NT1, NT2, Comparator &gt;::Number_type_checker</definition>
        <argsstring>(const NT1 &amp;n1, const NT2 &amp;n2)</argsstring>
        <name>Number_type_checker</name>
        <param>
          <type>const NT1 &amp;</type>
          <declname>n1</declname>
        </param>
        <param>
          <type>const NT2 &amp;</type>
          <declname>n2</declname>
        </param>
        <briefdescription>
<para>introduces a variable storing the pair <computeroutput>n1, n2</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Number_type_checker.h" line="55" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <memberdef kind="function" id="classCGAL_1_1Number__type__checker_1a548ec7dc85cee64e93a8ad83edc32e6a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const NT1 &amp;</type>
        <definition>const NT1&amp; CGAL::Number_type_checker&lt; NT1, NT2, Comparator &gt;::n1</definition>
        <argsstring>() const</argsstring>
        <name>n1</name>
        <briefdescription>
<para>returns a const reference to the object of type <computeroutput>NT1</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Number_type_checker.h" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Number__type__checker_1a90e6268a7d65de471039e67f058fcefe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const NT2 &amp;</type>
        <definition>const NT2&amp; CGAL::Number_type_checker&lt; NT1, NT2, Comparator &gt;::n2</definition>
        <argsstring>() const</argsstring>
        <name>n2</name>
        <briefdescription>
<para>returns a const reference to the object of type <computeroutput>NT2</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Number_type_checker.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Number__type__checker_1a9d4e39e7808c1d9be85a6368dc830b58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NT1 &amp;</type>
        <definition>NT1&amp; CGAL::Number_type_checker&lt; NT1, NT2, Comparator &gt;::n1</definition>
        <argsstring>()</argsstring>
        <name>n1</name>
        <briefdescription>
<para>returns a reference to the object of type <computeroutput>NT1</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Number_type_checker.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Number__type__checker_1ab9a8dd82ee07ce601d5aaafb211006b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NT2 &amp;</type>
        <definition>NT2&amp; CGAL::Number_type_checker&lt; NT1, NT2, Comparator &gt;::n2</definition>
        <argsstring>()</argsstring>
        <name>n2</name>
        <briefdescription>
<para>returns a reference to the object of type <computeroutput>NT2</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Number_type_checker.h" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Number__type__checker_1a8137867bd6e94a2c013e83e4d72c219d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Number_type_checker&lt; NT1, NT2, Comparator &gt;::is_valid</definition>
        <argsstring>() const</argsstring>
        <name>is_valid</name>
        <briefdescription>
<para>calls the <computeroutput>Comparator</computeroutput> binary predicate on the two stored objects and returns its result. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Number_type_checker.h" line="86" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="related">
      <memberdef kind="function" id="classCGAL_1_1Number__type__checker_1aefd7499eb58d63920df8bc78799f71f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const Number_type_checker &amp;c)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Number__type__checker" kindref="compound">Number_type_checker</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>writes <computeroutput>c.n1()</computeroutput> to the ostream <computeroutput>out</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Number_type_checker.h" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Number__type__checker_1a1567968e948e0d0455be6a1026e916b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;in, Number_type_checker &amp;c)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Number__type__checker" kindref="compound">Number_type_checker</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>reads an <computeroutput>NT1</computeroutput> from <computeroutput>in</computeroutput>, then converts it to an <computeroutput>NT2</computeroutput>, so a conversion from <computeroutput>NT1</computeroutput> to <computeroutput>NT2</computeroutput> is required here. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Number_type_checker.h" line="103" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><computeroutput><ref refid="classCGAL_1_1Number__type__checker" kindref="compound">Number_type_checker</ref></computeroutput> is a number type whose instances store two numbers of types <computeroutput>NT1</computeroutput> and <computeroutput>NT2</computeroutput>. </para>    </briefdescription>
    <detaileddescription>
<para>It forwards all arithmetic operations to them, and calls the binary predicate <computeroutput>Comparator</computeroutput> to check the equality of the instances after each modification, as well as for each comparison.</para><para>This is a debugging tool which is useful when dealing with number types.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>NT1</parametername>
<parametername>NT2</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of the same algebraic structure concept and they must be <computeroutput><ref refid="classFromDoubleConstructible" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">FromDoubleConstructible</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Comparator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of a binary predicate taking <computeroutput>NT1</computeroutput> as first argument, and <computeroutput>NT2</computeroutput> as second. The <computeroutput>Comparator</computeroutput> parameter has a default value which is a functor calling <computeroutput>operator==</computeroutput> between the two arguments.</para></parameterdescription>
</parameteritem>
</parameterlist>
<xrefsect id="models_1_models000024"><xreftitle>Is Model Of</xreftitle><xrefdescription><para><computeroutput><ref refid="classIntegralDomainWithoutDivision" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">IntegralDomainWithoutDivision</ref></computeroutput> (same as <computeroutput>NT1</computeroutput>) </para><para><computeroutput><ref refid="classRealEmbeddable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RealEmbeddable</ref></computeroutput> </para></xrefdescription></xrefsect></para><para><bold>Operations</bold><linebreak/>
</para><para>Some operations have a particular behavior documented here. </para>    </detaileddescription>
    <location file="CGAL/Number_type_checker.h" line="31" column="1" bodyfile="CGAL/Number_type_checker.h" bodystart="31" bodyend="90"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Number__type__checker_1a8137867bd6e94a2c013e83e4d72c219d" prot="public" virt="non-virtual"><scope>CGAL::Number_type_checker</scope><name>is_valid</name></member>
      <member refid="classCGAL_1_1Number__type__checker_1a548ec7dc85cee64e93a8ad83edc32e6a" prot="public" virt="non-virtual"><scope>CGAL::Number_type_checker</scope><name>n1</name></member>
      <member refid="classCGAL_1_1Number__type__checker_1a9d4e39e7808c1d9be85a6368dc830b58" prot="public" virt="non-virtual"><scope>CGAL::Number_type_checker</scope><name>n1</name></member>
      <member refid="classCGAL_1_1Number__type__checker_1a90e6268a7d65de471039e67f058fcefe" prot="public" virt="non-virtual"><scope>CGAL::Number_type_checker</scope><name>n2</name></member>
      <member refid="classCGAL_1_1Number__type__checker_1ab9a8dd82ee07ce601d5aaafb211006b1" prot="public" virt="non-virtual"><scope>CGAL::Number_type_checker</scope><name>n2</name></member>
      <member refid="classCGAL_1_1Number__type__checker_1adbd76b1e89df120d6309dfb0d30ce77f" prot="public" virt="non-virtual"><scope>CGAL::Number_type_checker</scope><name>Number_type_checker</name></member>
      <member refid="classCGAL_1_1Number__type__checker_1ad56077208ddb8fa4429602dbf59a4222" prot="public" virt="non-virtual"><scope>CGAL::Number_type_checker</scope><name>Number_type_checker</name></member>
      <member refid="classCGAL_1_1Number__type__checker_1a37d7b5e6c3741620519fa562c81c7b55" prot="public" virt="non-virtual"><scope>CGAL::Number_type_checker</scope><name>Number_type_checker</name></member>
      <member refid="classCGAL_1_1Number__type__checker_1a09b038a5e5049be838cd156e1982f473" prot="public" virt="non-virtual"><scope>CGAL::Number_type_checker</scope><name>Number_type_checker</name></member>
      <member refid="classCGAL_1_1Number__type__checker_1aefd7499eb58d63920df8bc78799f71f4" prot="public" virt="non-virtual"><scope>CGAL::Number_type_checker</scope><name>operator&lt;&lt;</name></member>
      <member refid="classCGAL_1_1Number__type__checker_1a1567968e948e0d0455be6a1026e916b2" prot="public" virt="non-virtual"><scope>CGAL::Number_type_checker</scope><name>operator&gt;&gt;</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
