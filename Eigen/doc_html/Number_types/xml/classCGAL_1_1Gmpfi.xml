<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1Gmpfi" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Gmpfi</compoundname>
    <includes local="no">CGAL/Gmpfi.h</includes>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classCGAL_1_1Gmpfi_1aa27c7abb10d750611fffd948e75d606e" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Gmpfi::Precision_type</definition>
        <argsstring></argsstring>
        <name>Precision_type</name>
        <briefdescription>
<para>Type representing the precision (number of bits used to represent the mantissa) of a number. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfi.h" line="52" column="1" bodyfile="CGAL/Gmpfi.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <description><para>All constructors accept as an optional last argument a precision, which can be used to specify the precision of the <computeroutput><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></computeroutput> endpoints.</para><para>If none is specified, the default precision will be used. As the endpoints are represented with a fixed number of bits, they may need to be rounded. In this case, the number from which the <computeroutput><ref refid="classCGAL_1_1Gmpfi" kindref="compound">Gmpfi</ref></computeroutput> was constructed is guaranteed to be included in the constructed interval. </para></description>
      <memberdef kind="function" id="classCGAL_1_1Gmpfi_1a8f28ba0e58f2cf02fc10d1dd34536994" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Gmpfi::Gmpfi</definition>
        <argsstring>(Precision_type p=get_default_precision())</argsstring>
        <name>Gmpfi</name>
        <param>
          <type><ref refid="classCGAL_1_1Gmpfi_1aa27c7abb10d750611fffd948e75d606e" kindref="member">Precision_type</ref></type>
          <declname>p</declname>
          <defval><ref refid="classCGAL_1_1Gmpfi_1a253b29b3b7fde95e91f0e8137cf6c79b" kindref="member">get_default_precision</ref>()</defval>
        </param>
        <briefdescription>
<para>creates an uninitialized <computeroutput><ref refid="classCGAL_1_1Gmpfi" kindref="compound">Gmpfi</ref></computeroutput> interval <computeroutput>i</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfi.h" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfi_1a521a081a49c24894b2da25bda4cc31df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>CGAL::Gmpfi::Gmpfi</definition>
        <argsstring>(const T &amp;t, Precision_type p=get_default_precision())</argsstring>
        <name>Gmpfi</name>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Gmpfi_1aa27c7abb10d750611fffd948e75d606e" kindref="member">Precision_type</ref></type>
          <declname>p</declname>
          <defval><ref refid="classCGAL_1_1Gmpfi_1a253b29b3b7fde95e91f0e8137cf6c79b" kindref="member">get_default_precision</ref>()</defval>
        </param>
        <briefdescription>
<para>creates a <computeroutput><ref refid="classCGAL_1_1Gmpfi" kindref="compound">Gmpfi</ref></computeroutput> initialized with the value of <computeroutput>t</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>T</computeroutput> is <computeroutput><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></computeroutput>, <computeroutput><ref refid="classCGAL_1_1Gmpq" kindref="compound">Gmpq</ref></computeroutput>, or any type from which <computeroutput><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></computeroutput> can be constructed from. The rounding of the endpoints will guarantee that <computeroutput>t</computeroutput> is included in <computeroutput>i</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfi.h" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfi_1a8d4592d4da994f82fb2383888298d451" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Gmpfi::Gmpfi</definition>
        <argsstring>(const Gmpfr &amp;left, const Gmpfr &amp;right, Precision_type p=get_default_precision())</argsstring>
        <name>Gmpfi</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Gmpfi_1aa27c7abb10d750611fffd948e75d606e" kindref="member">Precision_type</ref></type>
          <declname>p</declname>
          <defval><ref refid="classCGAL_1_1Gmpfi_1a253b29b3b7fde95e91f0e8137cf6c79b" kindref="member">get_default_precision</ref>()</defval>
        </param>
        <briefdescription>
<para>creates a <computeroutput><ref refid="classCGAL_1_1Gmpfi" kindref="compound">Gmpfi</ref></computeroutput> initialized with endpoints <computeroutput>left</computeroutput> and <computeroutput>right</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The rounding of the endpoints will guarantee that ([<computeroutput>left</computeroutput>,<computeroutput>right</computeroutput>]) is included in <computeroutput>i</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfi.h" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfi_1a2a2512b668b1e18552466721cd067f36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class L</type>
          </param>
          <param>
            <type>class R</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>CGAL::Gmpfi::Gmpfi</definition>
        <argsstring>(const std::pair&lt; L, R &gt; &amp;endpoints, Precision_type p=get_default_precision())</argsstring>
        <name>Gmpfi</name>
        <param>
          <type>const std::pair&lt; L, R &gt; &amp;</type>
          <declname>endpoints</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Gmpfi_1aa27c7abb10d750611fffd948e75d606e" kindref="member">Precision_type</ref></type>
          <declname>p</declname>
          <defval><ref refid="classCGAL_1_1Gmpfi_1a253b29b3b7fde95e91f0e8137cf6c79b" kindref="member">get_default_precision</ref>()</defval>
        </param>
        <briefdescription>
<para>creates a <computeroutput><ref refid="classCGAL_1_1Gmpfi" kindref="compound">Gmpfi</ref></computeroutput> initialized with endpoints <computeroutput>endpoints.first</computeroutput> and <computeroutput>endpoints.second</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>L</computeroutput> and <computeroutput>R</computeroutput> are types from which <computeroutput><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></computeroutput> can be constructed from. The rounding of the endpoints will guarantee that ([<computeroutput>endpoints.first</computeroutput>,<computeroutput>endpoints.second</computeroutput>]) is included in <computeroutput>i</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfi.h" line="98" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <memberdef kind="function" id="classCGAL_1_1Gmpfi_1ada374a446232b6163ba62dc8c7e4349b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></type>
        <definition>Gmpfr CGAL::Gmpfi::inf</definition>
        <argsstring>() const</argsstring>
        <name>inf</name>
        <briefdescription>
<para>Returns the smallest (or <emphasis>inferior</emphasis>) <computeroutput><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></computeroutput> endpoint of <computeroutput>i</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfi.h" line="111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfi_1a7be97caf5f6e811a84c79b3371eaec95" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></type>
        <definition>Gmpfr CGAL::Gmpfi::sup</definition>
        <argsstring>() const</argsstring>
        <name>sup</name>
        <briefdescription>
<para>Returns the largest (or <emphasis>superior</emphasis>) <computeroutput><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></computeroutput> endpoint of <computeroutput>i</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfi.h" line="117" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfi_1a2d6303f2e1044ce369211a6dfbb47e01" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Gmpfi_1aa27c7abb10d750611fffd948e75d606e" kindref="member">Precision_type</ref></type>
        <definition>Precision_type CGAL::Gmpfi::get_precision</definition>
        <argsstring>() const</argsstring>
        <name>get_precision</name>
        <briefdescription>
<para>Returns the precision of <computeroutput>i</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfi.h" line="133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfi_1aaea7c3eaae09c960f6e275038e18a8fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Gmpfi" kindref="compound">Gmpfi</ref></type>
        <definition>Gmpfi CGAL::Gmpfi::round</definition>
        <argsstring>(Precision_type p) const</argsstring>
        <name>round</name>
        <param>
          <type><ref refid="classCGAL_1_1Gmpfi_1aa27c7abb10d750611fffd948e75d606e" kindref="member">Precision_type</ref></type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns the value of the number, rounded with precision <computeroutput>p</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfi.h" line="138" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfi_1a253b29b3b7fde95e91f0e8137cf6c79b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Gmpfi_1aa27c7abb10d750611fffd948e75d606e" kindref="member">Precision_type</ref></type>
        <definition>static Precision_type CGAL::Gmpfi::get_default_precision</definition>
        <argsstring>()</argsstring>
        <name>get_default_precision</name>
        <briefdescription>
<para>Returns the default precision. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfi.h" line="122" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfi_1a9f8a4340e4779822d912c30078af18a1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Gmpfi_1aa27c7abb10d750611fffd948e75d606e" kindref="member">Precision_type</ref></type>
        <definition>static Precision_type CGAL::Gmpfi::set_default_precision</definition>
        <argsstring>(Precision_type prec)</argsstring>
        <name>set_default_precision</name>
        <param>
          <type><ref refid="classCGAL_1_1Gmpfi_1aa27c7abb10d750611fffd948e75d606e" kindref="member">Precision_type</ref></type>
          <declname>prec</declname>
        </param>
        <briefdescription>
<para>Sets the default precision to <computeroutput>prec</computeroutput> and returns the old value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfi.h" line="128" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Arithmetic Operations</header>
      <description><para>Arithmetic operators <computeroutput>+</computeroutput>, <computeroutput>-</computeroutput>, and <computeroutput>/</computeroutput> are overloaded, but special care must be taken when applying them.</para><para>The precision of an operation between two <computeroutput><ref refid="classCGAL_1_1Gmpfi" kindref="compound">Gmpfi</ref></computeroutput>s is defined as the maximum of the operands precision and the default precision.</para><para>The second operand of the former operations can be a <computeroutput><ref refid="classCGAL_1_1Gmpfi" kindref="compound">Gmpfi</ref></computeroutput>, <computeroutput><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></computeroutput>, <computeroutput>int</computeroutput>, <computeroutput>long</computeroutput>, <computeroutput>unsigned</computeroutput>, <computeroutput>unsigned long</computeroutput>, <computeroutput><ref refid="classCGAL_1_1Gmpz" kindref="compound">Gmpz</ref></computeroutput> or <computeroutput><ref refid="classCGAL_1_1Gmpq" kindref="compound">Gmpq</ref></computeroutput>. The precision of an operation between a <computeroutput><ref refid="classCGAL_1_1Gmpfi" kindref="compound">Gmpfi</ref></computeroutput> and a number of another type is defined as the <computeroutput><ref refid="classCGAL_1_1Gmpfi" kindref="compound">Gmpfi</ref></computeroutput>&apos;s precision (even when operating with a <computeroutput><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></computeroutput>).</para><para>To specify the rounding mode and/or the precision to perform an operation, this class provides the four static functions <computeroutput>add</computeroutput>, <computeroutput>sub</computeroutput>, <computeroutput>mul</computeroutput> and <computeroutput>div</computeroutput>. Only one of them is shown here, since their interfaces are similar: When the precision is not specified in this family of functions, it is defined as in the overloaded operators. </para></description>
      <memberdef kind="function" id="classCGAL_1_1Gmpfi_1a1db542610ba45db7bf8382617e64f3c9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Gmpfi" kindref="compound">Gmpfi</ref></type>
        <definition>Gmpfi CGAL::Gmpfi::abs</definition>
        <argsstring>(Precision_type p) const</argsstring>
        <name>abs</name>
        <param>
          <type><ref refid="classCGAL_1_1Gmpfi_1aa27c7abb10d750611fffd948e75d606e" kindref="member">Precision_type</ref></type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns the absolute value of <computeroutput>i</computeroutput>, with precision <computeroutput>p</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>p</computeroutput> is not specified, the precision used is the maximum between <computeroutput>i</computeroutput>&apos;s precision and the default. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfi.h" line="171" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfi_1af5dc1cde74e5e9ebf2fec2bb8c917048" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Gmpfi" kindref="compound">Gmpfi</ref></type>
        <definition>Gmpfi CGAL::Gmpfi::sqrt</definition>
        <argsstring>(Precision_type p) const</argsstring>
        <name>sqrt</name>
        <param>
          <type><ref refid="classCGAL_1_1Gmpfi_1aa27c7abb10d750611fffd948e75d606e" kindref="member">Precision_type</ref></type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns the square root of <computeroutput>i</computeroutput>, with precision <computeroutput>p</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>p</computeroutput> is not specified, the precision used is the maximum between <computeroutput>i</computeroutput>&apos;s precision and the default. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfi.h" line="178" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfi_1a2c4a745e20b35ee4d737fd1d6695adbe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Gmpfi" kindref="compound">Gmpfi</ref></type>
        <definition>Gmpfi CGAL::Gmpfi::kthroot</definition>
        <argsstring>(int k, Precision_type p) const</argsstring>
        <name>kthroot</name>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Gmpfi_1aa27c7abb10d750611fffd948e75d606e" kindref="member">Precision_type</ref></type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns the k-th root of <computeroutput>i</computeroutput>, with precision <computeroutput>p</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>p</computeroutput> is not specified, the precision used is the maximum between <computeroutput>i</computeroutput>&apos;s precision and the default. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfi.h" line="185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfi_1a0be0ac160a6efb221bb84417eca1f2fd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Gmpfi" kindref="compound">Gmpfi</ref></type>
        <definition>Gmpfi CGAL::Gmpfi::square</definition>
        <argsstring>(Precision_type p) const</argsstring>
        <name>square</name>
        <param>
          <type><ref refid="classCGAL_1_1Gmpfi_1aa27c7abb10d750611fffd948e75d606e" kindref="member">Precision_type</ref></type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns the square of <computeroutput>i</computeroutput>, with precision <computeroutput>p</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>p</computeroutput> is not specified, the precision used is the maximum between <computeroutput>i</computeroutput>&apos;s precision and the default. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfi.h" line="192" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfi_1a2049fe5677026522611d63f239d27979" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; double, double &gt;</type>
        <definition>std::pair&lt;double,double&gt; CGAL::Gmpfi::to_interval</definition>
        <argsstring>() const</argsstring>
        <name>to_interval</name>
        <briefdescription>
<para>Returns an interval of doubles which contains <computeroutput>i</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>If a rounded endpoint does not fit in a double, sets its value to plus or minus infinity and the <computeroutput>overflow</computeroutput> or <computeroutput>underflow</computeroutput> flag. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfi.h" line="199" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfi_1aa6ec103d5dc4771f121bb41d18702b4f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; double, long &gt;</type>
        <definition>std::pair&lt;double,long&gt; CGAL::Gmpfi::to_double_exp</definition>
        <argsstring>() const</argsstring>
        <name>to_double_exp</name>
        <briefdescription>
<para>Returns <formula id="5">$ (m,e)$</formula> such that <formula id="6">$ m \times2^e$</formula> is the center of <computeroutput>i</computeroutput>, rounded to nearest. </para>        </briefdescription>
        <detaileddescription>
<para>If one of the endpoints of <computeroutput>i</computeroutput> is <computeroutput>NaN</computeroutput> or infinity, then the corresponding double is returned, leaving the exponent undefined and setting the appropriate error flag. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfi.h" line="208" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfi_1a315944de26eb866cd7904c45fc327093" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; std::pair&lt; double, double &gt;, long &gt;</type>
        <definition>std::pair&lt;std::pair&lt;double,double&gt;,long&gt; CGAL::Gmpfi::to_interval_exp</definition>
        <argsstring>() const</argsstring>
        <name>to_interval_exp</name>
        <briefdescription>
<para>Returns <formula id="7">$ ((m_1,m_2),e)$</formula>, such that <formula id="8">$ [m_1 \times2^e,m_2 \times2^e]$</formula> contains <computeroutput>i</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>If one of the endpoints of <computeroutput>i</computeroutput> is <computeroutput>NaN</computeroutput> or infinity, then the corresponding doubles are returned, leaving the exponent undefined and setting the appropriate error flag. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfi.h" line="217" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfi_1adc4e5603c4092c4e9a4c64d81acc9574" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Gmpfi" kindref="compound">Gmpfi</ref></type>
        <definition>static Gmpfi CGAL::Gmpfi::add</definition>
        <argsstring>(const Gmpfi &amp;a, const Gmpfi &amp;b, Precision_type p=0)</argsstring>
        <name>add</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Gmpfi" kindref="compound">Gmpfi</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Gmpfi" kindref="compound">Gmpfi</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Gmpfi_1aa27c7abb10d750611fffd948e75d606e" kindref="member">Precision_type</ref></type>
          <declname>p</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfi.h" line="164" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Comparisons</header>
      <description><para>The semantics of the comparison operators is the same than on <computeroutput><ref refid="classCGAL_1_1Interval__nt" kindref="compound">Interval_nt</ref>&lt;Protected&gt;</computeroutput>.</para><para>The result of the comparison is always an <computeroutput><ref refid="classCGAL_1_1Uncertain" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Uncertain</ref>&lt;bool&gt;</computeroutput> (this type is convertible to <computeroutput>bool</computeroutput>, but may throw an exception). If compared intervals have no common points, the result is <computeroutput>true</computeroutput> or <computeroutput>false</computeroutput>; otherwise, <computeroutput><ref refid="classCGAL_1_1Uncertain_1a8529aa88090f75ddd0b1210919f624d3" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Uncertain::indeterminate()</ref></computeroutput> will be returned.</para><para>In the same way, we can explain the semantics of <computeroutput><ref refid="classCGAL_1_1Uncertain" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Uncertain</ref>&lt;Comparison_result&gt;</computeroutput> and <computeroutput><ref refid="classCGAL_1_1Uncertain" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Uncertain</ref>&lt;Sign&gt;</computeroutput>. With the semantics described above, this class provides comparisons between <computeroutput><ref refid="classCGAL_1_1Gmpfi" kindref="compound">Gmpfi</ref></computeroutput> and <computeroutput><ref refid="classCGAL_1_1Gmpfi" kindref="compound">Gmpfi</ref></computeroutput>, <computeroutput><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></computeroutput>, <computeroutput>long</computeroutput>, <computeroutput>unsigned long</computeroutput>, <computeroutput>int</computeroutput>, <computeroutput>double</computeroutput>, <computeroutput><ref refid="classCGAL_1_1Gmpz" kindref="compound">Gmpz</ref></computeroutput> and <computeroutput><ref refid="classCGAL_1_1Gmpq" kindref="compound">Gmpq</ref></computeroutput>. Comparison operators <computeroutput>==</computeroutput>, <computeroutput>!=</computeroutput>, <computeroutput>&gt;</computeroutput>, <computeroutput>&lt;</computeroutput>, <computeroutput>&gt;=</computeroutput> and <computeroutput>&lt;=</computeroutput> are overloaded.</para><para>The class provides also functions to test efficiently some special kinds of comparisons: </para></description>
      <memberdef kind="function" id="classCGAL_1_1Gmpfi_1aaf451c04ecae1055c7598b1708a6b6ae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Gmpfi::is_same</definition>
        <argsstring>(const Gmpfi &amp;j) const</argsstring>
        <name>is_same</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Gmpfi" kindref="compound">Gmpfi</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> iff left endpoints of <computeroutput>i</computeroutput> and <computeroutput>j</computeroutput> are equal and right endpoints of them are also equal. </para>        </briefdescription>
        <detaileddescription>
<para>Note that this does not mean equality between <computeroutput>i</computeroutput> and <computeroutput>j</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfi.h" line="236" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfi_1af89061521e58034ea54a975b2adfae15" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Gmpfi::do_overlap</definition>
        <argsstring>(const Gmpfi &amp;j) const</argsstring>
        <name>do_overlap</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Gmpfi" kindref="compound">Gmpfi</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> iff <computeroutput>i</computeroutput> and <computeroutput>j</computeroutput> overlap, i.e., iff they have points in common. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfi.h" line="242" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfi_1a0efd1136937040ce353b9f5cf0c0be45" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Uncertain</ref>&lt; <ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Comparison_result</ref> &gt;</type>
        <definition>Uncertain&lt;Comparison_result&gt; CGAL::Gmpfi::compare</definition>
        <argsstring>(const Gmpfi &amp;j) const</argsstring>
        <name>compare</name>
        <param>
          <type>const <ref refid="classCGAL_1_1Gmpfi" kindref="compound">Gmpfi</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>If <computeroutput>i</computeroutput> and <computeroutput>j</computeroutput> do not overlap, this function returns the result of the comparison. </para>        </briefdescription>
        <detaileddescription>
<para>Otherwise, it returns <computeroutput>indeterminate</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfi.h" line="249" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Query Functions</header>
      <memberdef kind="function" id="classCGAL_1_1Gmpfi_1af2f101c60d04a4d84133c2f58819e69d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Gmpfi::is_point</definition>
        <argsstring>() const</argsstring>
        <name>is_point</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> iff both endpoints are equal. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfi.h" line="259" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfi_1a7e7113f954d2ea3f50a12f82bdb9e928" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Gmpfi::is_nan</definition>
        <argsstring>() const</argsstring>
        <name>is_nan</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> iff at least one of the endpoints is <computeroutput>NaN</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfi.h" line="265" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfi_1a9add3037319cf7a041c2536b13dbf313" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Gmpfi::is_inf</definition>
        <argsstring>() const</argsstring>
        <name>is_inf</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> iff at least one of the endpoints is plus or minus infinity. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfi.h" line="271" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfi_1a1db94077a2e5e0e1658f8f93bc96a9f7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Gmpfi::is_number</definition>
        <argsstring>() const</argsstring>
        <name>is_number</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> iff <computeroutput>i</computeroutput> is a bounded interval, i.e., its endpoints are neither invalid nor infinite. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfi.h" line="277" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfi_1a2cc8f04efe3d32471467525d0c6aaee8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Uncertain</ref>&lt; bool &gt;</type>
        <definition>Uncertain&lt;bool&gt; CGAL::Gmpfi::is_zero</definition>
        <argsstring>() const</argsstring>
        <name>is_zero</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if both endpoints are zero, <computeroutput>false</computeroutput> if the interval does not contain zero and <computeroutput>indeterminate</computeroutput> otherwise. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfi.h" line="284" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfi_1a6f8491a198cc66fc3cddaf6c920e072e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Uncertain</ref>&lt; bool &gt;</type>
        <definition>Uncertain&lt;bool&gt; CGAL::Gmpfi::is_one</definition>
        <argsstring>() const</argsstring>
        <name>is_one</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if both endpoints are one, <computeroutput>false</computeroutput> if the interval does not contain one and <computeroutput>indeterminate</computeroutput> otherwise. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfi.h" line="291" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfi_1acae4097902125e0bf56780d4645446f3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Uncertain</ref>&lt; <ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Sign</ref> &gt;</type>
        <definition>Uncertain&lt;Sign&gt; CGAL::Gmpfi::sign</definition>
        <argsstring>() const</argsstring>
        <name>sign</name>
        <briefdescription>
<para>If all numbers contained in the interval have the same sign, this function returns it. </para>        </briefdescription>
        <detaileddescription>
<para>Otherwise it returns <computeroutput>indeterminate</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfi.h" line="297" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfi_1a1484e0b8b7ae7145408cd22b668f9950" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Uncertain</ref>&lt; bool &gt;</type>
        <definition>Uncertain&lt;bool&gt; CGAL::Gmpfi::is_positive</definition>
        <argsstring>() const</argsstring>
        <name>is_positive</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if all numbers contained in the interval are positive, false if all of them are negative or zero and <computeroutput>indeterminate</computeroutput> otherwise. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfi.h" line="304" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfi_1af9dfe4becbedcbf51e8281235bb96724" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">Uncertain</ref>&lt; bool &gt;</type>
        <definition>Uncertain&lt;bool&gt; CGAL::Gmpfi::is_negative</definition>
        <argsstring>() const</argsstring>
        <name>is_negative</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if all numbers contained in the interval are negative, false if all of them are positive or zero and <computeroutput>indeterminate</computeroutput> otherwise. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfi.h" line="311" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="related">
      <memberdef kind="function" id="classCGAL_1_1Gmpfi_1ad5aa9afe0c587061400f0fd8ffe4335f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, Gmpfi i)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Gmpfi" kindref="compound">Gmpfi</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Reads <computeroutput>i</computeroutput> from <computeroutput>is</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>is</computeroutput> must have the form <computeroutput>[inf,sup]</computeroutput>, where <computeroutput>inf</computeroutput> and <computeroutput>sup</computeroutput> have valid <computeroutput><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></computeroutput> input formats. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfi.h" line="324" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Gmpfi_1aec6c04fb4252bedfae9b651f186b4fde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Gmpfi &amp;i)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Gmpfi" kindref="compound">Gmpfi</ref> &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Writes <computeroutput>i</computeroutput> to <computeroutput>os</computeroutput>, in the form <computeroutput>[i.inf(),i.sup()]</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The endpoints are written according to the <computeroutput><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></computeroutput> formatting. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Gmpfi.h" line="331" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An object of the class <computeroutput><ref refid="classCGAL_1_1Gmpfi" kindref="compound">Gmpfi</ref></computeroutput> is a closed interval, with endpoints represented as <computeroutput><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></computeroutput> floating-point numbers. </para>    </briefdescription>
    <detaileddescription>
<para>An interval can have finite or infinite endpoints and its meaning is straightforward. It can also have one (or both) <computeroutput>NaN</computeroutput> endpoint(s): this indicates that an invalid operation has been performed and that the resulting interval has no mathematical meaning.</para><para>All the operations of <computeroutput><ref refid="classCGAL_1_1Gmpfi" kindref="compound">Gmpfi</ref></computeroutput> were designed in such a way that the mathematical correct result is always contained in the resulting interval.</para><para>This type is <computeroutput><ref refid="classImplicitInteroperable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">ImplicitInteroperable</ref></computeroutput> with <computeroutput><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></computeroutput>, <computeroutput><ref refid="classCGAL_1_1Gmpz" kindref="compound">Gmpz</ref></computeroutput>, <computeroutput><ref refid="classCGAL_1_1Gmpq" kindref="compound">Gmpq</ref></computeroutput>, <computeroutput>long</computeroutput>, <computeroutput>unsigned long</computeroutput>, <computeroutput>int</computeroutput>, <computeroutput>double</computeroutput> and <computeroutput>long double</computeroutput>.</para><para><xrefsect id="models_1_models000007"><xreftitle>Is Model Of</xreftitle><xrefdescription><para><computeroutput><ref refid="classFieldWithKthRoot" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">FieldWithKthRoot</ref></computeroutput> </para><para><computeroutput><ref refid="classRealEmbeddable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RealEmbeddable</ref></computeroutput> </para></xrefdescription></xrefsect></para><para><bold>Implementation</bold><linebreak/>
</para><para>All interval operations are performed by the Mpfi library. The class <computeroutput><ref refid="classCGAL_1_1Gmpfi" kindref="compound">Gmpfi</ref></computeroutput> is not reference counted, but its members are.</para><para>The default precision of <computeroutput><ref refid="classCGAL_1_1Gmpfi" kindref="compound">Gmpfi</ref></computeroutput> is local to each thread and independent of the default precision of <computeroutput><ref refid="classCGAL_1_1Gmpfr" kindref="compound">Gmpfr</ref></computeroutput> (in contrast to the behaviour of the Mpfi and Mpfr libraries, which share a default precision).</para><para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Gmpfr" kindref="compound">CGAL::Gmpfr</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Interval__nt" kindref="compound">CGAL::Interval_nt</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Uncertain" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/STL_Extension.tag">CGAL::Uncertain</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classRealEmbeddable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RealEmbeddable</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classFieldWithKthRoot" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">FieldWithKthRoot</ref></computeroutput> </para></simplesect>
</para>    </detaileddescription>
    <location file="CGAL/Gmpfi.h" line="42" column="1" bodyfile="CGAL/Gmpfi.h" bodystart="42" bodyend="316"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Gmpfi_1a1db542610ba45db7bf8382617e64f3c9" prot="public" virt="non-virtual"><scope>CGAL::Gmpfi</scope><name>abs</name></member>
      <member refid="classCGAL_1_1Gmpfi_1adc4e5603c4092c4e9a4c64d81acc9574" prot="public" virt="non-virtual"><scope>CGAL::Gmpfi</scope><name>add</name></member>
      <member refid="classCGAL_1_1Gmpfi_1a0efd1136937040ce353b9f5cf0c0be45" prot="public" virt="non-virtual"><scope>CGAL::Gmpfi</scope><name>compare</name></member>
      <member refid="classCGAL_1_1Gmpfi_1af89061521e58034ea54a975b2adfae15" prot="public" virt="non-virtual"><scope>CGAL::Gmpfi</scope><name>do_overlap</name></member>
      <member refid="classCGAL_1_1Gmpfi_1a253b29b3b7fde95e91f0e8137cf6c79b" prot="public" virt="non-virtual"><scope>CGAL::Gmpfi</scope><name>get_default_precision</name></member>
      <member refid="classCGAL_1_1Gmpfi_1a2d6303f2e1044ce369211a6dfbb47e01" prot="public" virt="non-virtual"><scope>CGAL::Gmpfi</scope><name>get_precision</name></member>
      <member refid="classCGAL_1_1Gmpfi_1a8f28ba0e58f2cf02fc10d1dd34536994" prot="public" virt="non-virtual"><scope>CGAL::Gmpfi</scope><name>Gmpfi</name></member>
      <member refid="classCGAL_1_1Gmpfi_1a521a081a49c24894b2da25bda4cc31df" prot="public" virt="non-virtual"><scope>CGAL::Gmpfi</scope><name>Gmpfi</name></member>
      <member refid="classCGAL_1_1Gmpfi_1a8d4592d4da994f82fb2383888298d451" prot="public" virt="non-virtual"><scope>CGAL::Gmpfi</scope><name>Gmpfi</name></member>
      <member refid="classCGAL_1_1Gmpfi_1a2a2512b668b1e18552466721cd067f36" prot="public" virt="non-virtual"><scope>CGAL::Gmpfi</scope><name>Gmpfi</name></member>
      <member refid="classCGAL_1_1Gmpfi_1ada374a446232b6163ba62dc8c7e4349b" prot="public" virt="non-virtual"><scope>CGAL::Gmpfi</scope><name>inf</name></member>
      <member refid="classCGAL_1_1Gmpfi_1a9add3037319cf7a041c2536b13dbf313" prot="public" virt="non-virtual"><scope>CGAL::Gmpfi</scope><name>is_inf</name></member>
      <member refid="classCGAL_1_1Gmpfi_1a7e7113f954d2ea3f50a12f82bdb9e928" prot="public" virt="non-virtual"><scope>CGAL::Gmpfi</scope><name>is_nan</name></member>
      <member refid="classCGAL_1_1Gmpfi_1af9dfe4becbedcbf51e8281235bb96724" prot="public" virt="non-virtual"><scope>CGAL::Gmpfi</scope><name>is_negative</name></member>
      <member refid="classCGAL_1_1Gmpfi_1a1db94077a2e5e0e1658f8f93bc96a9f7" prot="public" virt="non-virtual"><scope>CGAL::Gmpfi</scope><name>is_number</name></member>
      <member refid="classCGAL_1_1Gmpfi_1a6f8491a198cc66fc3cddaf6c920e072e" prot="public" virt="non-virtual"><scope>CGAL::Gmpfi</scope><name>is_one</name></member>
      <member refid="classCGAL_1_1Gmpfi_1af2f101c60d04a4d84133c2f58819e69d" prot="public" virt="non-virtual"><scope>CGAL::Gmpfi</scope><name>is_point</name></member>
      <member refid="classCGAL_1_1Gmpfi_1a1484e0b8b7ae7145408cd22b668f9950" prot="public" virt="non-virtual"><scope>CGAL::Gmpfi</scope><name>is_positive</name></member>
      <member refid="classCGAL_1_1Gmpfi_1aaf451c04ecae1055c7598b1708a6b6ae" prot="public" virt="non-virtual"><scope>CGAL::Gmpfi</scope><name>is_same</name></member>
      <member refid="classCGAL_1_1Gmpfi_1a2cc8f04efe3d32471467525d0c6aaee8" prot="public" virt="non-virtual"><scope>CGAL::Gmpfi</scope><name>is_zero</name></member>
      <member refid="classCGAL_1_1Gmpfi_1a2c4a745e20b35ee4d737fd1d6695adbe" prot="public" virt="non-virtual"><scope>CGAL::Gmpfi</scope><name>kthroot</name></member>
      <member refid="classCGAL_1_1Gmpfi_1aec6c04fb4252bedfae9b651f186b4fde" prot="public" virt="non-virtual"><scope>CGAL::Gmpfi</scope><name>operator&lt;&lt;</name></member>
      <member refid="classCGAL_1_1Gmpfi_1ad5aa9afe0c587061400f0fd8ffe4335f" prot="public" virt="non-virtual"><scope>CGAL::Gmpfi</scope><name>operator&gt;&gt;</name></member>
      <member refid="classCGAL_1_1Gmpfi_1aa27c7abb10d750611fffd948e75d606e" prot="public" virt="non-virtual"><scope>CGAL::Gmpfi</scope><name>Precision_type</name></member>
      <member refid="classCGAL_1_1Gmpfi_1aaea7c3eaae09c960f6e275038e18a8fe" prot="public" virt="non-virtual"><scope>CGAL::Gmpfi</scope><name>round</name></member>
      <member refid="classCGAL_1_1Gmpfi_1a9f8a4340e4779822d912c30078af18a1" prot="public" virt="non-virtual"><scope>CGAL::Gmpfi</scope><name>set_default_precision</name></member>
      <member refid="classCGAL_1_1Gmpfi_1acae4097902125e0bf56780d4645446f3" prot="public" virt="non-virtual"><scope>CGAL::Gmpfi</scope><name>sign</name></member>
      <member refid="classCGAL_1_1Gmpfi_1af5dc1cde74e5e9ebf2fec2bb8c917048" prot="public" virt="non-virtual"><scope>CGAL::Gmpfi</scope><name>sqrt</name></member>
      <member refid="classCGAL_1_1Gmpfi_1a0be0ac160a6efb221bb84417eca1f2fd" prot="public" virt="non-virtual"><scope>CGAL::Gmpfi</scope><name>square</name></member>
      <member refid="classCGAL_1_1Gmpfi_1a7be97caf5f6e811a84c79b3371eaec95" prot="public" virt="non-virtual"><scope>CGAL::Gmpfi</scope><name>sup</name></member>
      <member refid="classCGAL_1_1Gmpfi_1aa6ec103d5dc4771f121bb41d18702b4f" prot="public" virt="non-virtual"><scope>CGAL::Gmpfi</scope><name>to_double_exp</name></member>
      <member refid="classCGAL_1_1Gmpfi_1a2049fe5677026522611d63f239d27979" prot="public" virt="non-virtual"><scope>CGAL::Gmpfi</scope><name>to_interval</name></member>
      <member refid="classCGAL_1_1Gmpfi_1a315944de26eb866cd7904c45fc327093" prot="public" virt="non-virtual"><scope>CGAL::Gmpfi</scope><name>to_interval_exp</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
