<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classCGAL_1_1MP__Float" kind="class" language="C++" prot="public">
    <compoundname>CGAL::MP_Float</compoundname>
    <includes local="no">CGAL/MP_Float.h</includes>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1MP__Float_1aa7c92fb883ef318f546c97cf6c2e2e60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::MP_Float::MP_Float</definition>
        <argsstring>()</argsstring>
        <name>MP_Float</name>
        <briefdescription>
<para>introduces an uninitialized variable <computeroutput>m</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/MP_Float.h" line="42" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1MP__Float_1a455b5e76e6cac2d3feea7a12a9c8e4a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::MP_Float::MP_Float</definition>
        <argsstring>(const MP_Float &amp;)</argsstring>
        <name>MP_Float</name>
        <param>
          <type>const <ref refid="classCGAL_1_1MP__Float" kindref="compound">MP_Float</ref> &amp;</type>
        </param>
        <briefdescription>
<para>copy constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/MP_Float.h" line="47" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1MP__Float_1a8ad8eae32f6f8359cd918c2601f8e405" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::MP_Float::MP_Float</definition>
        <argsstring>(int i)</argsstring>
        <name>MP_Float</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>introduces the integral value i. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/MP_Float.h" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1MP__Float_1a6d88723e3c4f764c303a78e31793d983" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::MP_Float::MP_Float</definition>
        <argsstring>(float d)</argsstring>
        <name>MP_Float</name>
        <param>
          <type>float</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>introduces the floating point value d (exact conversion). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/MP_Float.h" line="57" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1MP__Float_1a93d066ac02fd3ae262170076077a5c19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::MP_Float::MP_Float</definition>
        <argsstring>(double d)</argsstring>
        <name>MP_Float</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>introduces the floating point value d (exact conversion). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/MP_Float.h" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1MP__Float_1af73ef0f40de89faebb93df57fd7c84a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::MP_Float::MP_Float</definition>
        <argsstring>(long double d)</argsstring>
        <name>MP_Float</name>
        <param>
          <type>long double</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>introduces the floating point value d (exact conversion). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/MP_Float.h" line="67" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="related">
      <memberdef kind="function" id="classCGAL_1_1MP__Float_1ad20033d4a3b720af7b075f0a1e095e41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const MP_Float &amp;m)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1MP__Float" kindref="compound">MP_Float</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>writes a double approximation of <computeroutput>m</computeroutput> to the ostream <computeroutput>out</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/MP_Float.h" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1MP__Float_1ada39541d22a9cd98c8f6f416de4dd18d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;in, MP_Float &amp;m)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1MP__Float" kindref="compound">MP_Float</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>reads a <computeroutput>double</computeroutput> from <computeroutput>in</computeroutput>, then converts it to an <computeroutput><ref refid="classCGAL_1_1MP__Float" kindref="compound">MP_Float</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/MP_Float.h" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1MP__Float_1aec435a0c83460c52eb54d7dce3ba1630" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1MP__Float" kindref="compound">MP_Float</ref></type>
        <definition>MP_Float approximate_division</definition>
        <argsstring>(const MP_Float &amp;a, const MP_Float &amp;b)</argsstring>
        <name>approximate_division</name>
        <param>
          <type>const <ref refid="classCGAL_1_1MP__Float" kindref="compound">MP_Float</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1MP__Float" kindref="compound">MP_Float</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>computes an approximation of the division by converting the operands to <computeroutput>double</computeroutput>, performing the division on <computeroutput>double</computeroutput>, and converting back to <computeroutput><ref refid="classCGAL_1_1MP__Float" kindref="compound">MP_Float</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/MP_Float.h" line="91" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1MP__Float_1af4adf9271da071a745cca9344826a71d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1MP__Float" kindref="compound">MP_Float</ref></type>
        <definition>MP_Float approximate_sqrt</definition>
        <argsstring>(const MP_Float &amp;a)</argsstring>
        <name>approximate_sqrt</name>
        <param>
          <type>const <ref refid="classCGAL_1_1MP__Float" kindref="compound">MP_Float</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>computes an approximation of the square root by converting the operand to <computeroutput>double</computeroutput>, performing the square root on <computeroutput>double</computeroutput>, and converting back to <computeroutput><ref refid="classCGAL_1_1MP__Float" kindref="compound">MP_Float</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/MP_Float.h" line="99" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An object of the class <computeroutput><ref refid="classCGAL_1_1MP__Float" kindref="compound">MP_Float</ref></computeroutput> is able to represent a floating point value with arbitrary precision. </para>    </briefdescription>
    <detaileddescription>
<para>This number type has the property that additions, subtractions and multiplications are computed exactly, as well as the construction from <computeroutput>float</computeroutput>, <computeroutput>double</computeroutput> and <computeroutput>long double</computeroutput>.</para><para>Division and square root are not enabled by default since CGAL release 3.2, since they are computed approximately. We suggest that you use rationals like <computeroutput><ref refid="classCGAL_1_1Quotient" kindref="compound">Quotient</ref>&lt;<ref refid="classCGAL_1_1MP__Float" kindref="compound">MP_Float</ref>&gt;</computeroutput> when you need exact divisions.</para><para>Note on the implementation : although the mantissa length is basically only limited by the available memory, the exponent is currently represented by a (integral valued) <computeroutput>double</computeroutput>, which can overflow in some circumstances. We plan to also have a multiprecision exponent to fix this issue.</para><para><xrefsect id="models_1_models000021"><xreftitle>Is Model Of</xreftitle><xrefdescription><para><computeroutput><ref refid="classEuclideanRing" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">EuclideanRing</ref></computeroutput> </para><para><computeroutput><ref refid="classRealEmbeddable" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Algebraic_foundations.tag">RealEmbeddable</ref></computeroutput> </para></xrefdescription></xrefsect></para><para><bold>Implementation</bold><linebreak/>
</para><para>The implementation of <computeroutput><ref refid="classCGAL_1_1MP__Float" kindref="compound">MP_Float</ref></computeroutput> is simple but provides a quadratic complexity for multiplications. This can be a problem for large operands. For faster implementations of the same functionality with large integral values, you may want to consider using <computeroutput>GMP</computeroutput> or <computeroutput>LEDA</computeroutput> instead. </para>    </detaileddescription>
    <location file="CGAL/MP_Float.h" line="33" column="1" bodyfile="CGAL/MP_Float.h" bodystart="33" bodyend="71"/>
    <listofallmembers>
      <member refid="classCGAL_1_1MP__Float_1aec435a0c83460c52eb54d7dce3ba1630" prot="public" virt="non-virtual"><scope>CGAL::MP_Float</scope><name>approximate_division</name></member>
      <member refid="classCGAL_1_1MP__Float_1af4adf9271da071a745cca9344826a71d" prot="public" virt="non-virtual"><scope>CGAL::MP_Float</scope><name>approximate_sqrt</name></member>
      <member refid="classCGAL_1_1MP__Float_1aa7c92fb883ef318f546c97cf6c2e2e60" prot="public" virt="non-virtual"><scope>CGAL::MP_Float</scope><name>MP_Float</name></member>
      <member refid="classCGAL_1_1MP__Float_1a455b5e76e6cac2d3feea7a12a9c8e4a0" prot="public" virt="non-virtual"><scope>CGAL::MP_Float</scope><name>MP_Float</name></member>
      <member refid="classCGAL_1_1MP__Float_1a8ad8eae32f6f8359cd918c2601f8e405" prot="public" virt="non-virtual"><scope>CGAL::MP_Float</scope><name>MP_Float</name></member>
      <member refid="classCGAL_1_1MP__Float_1a6d88723e3c4f764c303a78e31793d983" prot="public" virt="non-virtual"><scope>CGAL::MP_Float</scope><name>MP_Float</name></member>
      <member refid="classCGAL_1_1MP__Float_1a93d066ac02fd3ae262170076077a5c19" prot="public" virt="non-virtual"><scope>CGAL::MP_Float</scope><name>MP_Float</name></member>
      <member refid="classCGAL_1_1MP__Float_1af73ef0f40de89faebb93df57fd7c84a7" prot="public" virt="non-virtual"><scope>CGAL::MP_Float</scope><name>MP_Float</name></member>
      <member refid="classCGAL_1_1MP__Float_1ad20033d4a3b720af7b075f0a1e095e41" prot="public" virt="non-virtual"><scope>CGAL::MP_Float</scope><name>operator&lt;&lt;</name></member>
      <member refid="classCGAL_1_1MP__Float_1ada39541d22a9cd98c8f6f416de4dd18d" prot="public" virt="non-virtual"><scope>CGAL::MP_Float</scope><name>operator&gt;&gt;</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
