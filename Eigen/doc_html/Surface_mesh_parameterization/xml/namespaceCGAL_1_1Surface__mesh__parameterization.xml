<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespaceCGAL_1_1Surface__mesh__parameterization" kind="namespace" language="C++">
    <compoundname>CGAL::Surface_mesh_parameterization</compoundname>
    <innerclass refid="classCGAL_1_1Surface__mesh__parameterization_1_1ARAP__parameterizer__3" prot="public">CGAL::Surface_mesh_parameterization::ARAP_parameterizer_3</innerclass>
    <innerclass refid="classCGAL_1_1Surface__mesh__parameterization_1_1Barycentric__mapping__parameterizer__3" prot="public">CGAL::Surface_mesh_parameterization::Barycentric_mapping_parameterizer_3</innerclass>
    <innerclass refid="classCGAL_1_1Surface__mesh__parameterization_1_1Circular__border__arc__length__parameterizer__3" prot="public">CGAL::Surface_mesh_parameterization::Circular_border_arc_length_parameterizer_3</innerclass>
    <innerclass refid="classCGAL_1_1Surface__mesh__parameterization_1_1Circular__border__parameterizer__3" prot="public">CGAL::Surface_mesh_parameterization::Circular_border_parameterizer_3</innerclass>
    <innerclass refid="classCGAL_1_1Surface__mesh__parameterization_1_1Circular__border__uniform__parameterizer__3" prot="public">CGAL::Surface_mesh_parameterization::Circular_border_uniform_parameterizer_3</innerclass>
    <innerclass refid="classCGAL_1_1Surface__mesh__parameterization_1_1Discrete__authalic__parameterizer__3" prot="public">CGAL::Surface_mesh_parameterization::Discrete_authalic_parameterizer_3</innerclass>
    <innerclass refid="classCGAL_1_1Surface__mesh__parameterization_1_1Discrete__conformal__map__parameterizer__3" prot="public">CGAL::Surface_mesh_parameterization::Discrete_conformal_map_parameterizer_3</innerclass>
    <innerclass refid="classCGAL_1_1Surface__mesh__parameterization_1_1Fixed__border__parameterizer__3" prot="public">CGAL::Surface_mesh_parameterization::Fixed_border_parameterizer_3</innerclass>
    <innerclass refid="classCGAL_1_1Surface__mesh__parameterization_1_1LSCM__parameterizer__3" prot="public">CGAL::Surface_mesh_parameterization::LSCM_parameterizer_3</innerclass>
    <innerclass refid="classCGAL_1_1Surface__mesh__parameterization_1_1Mean__value__coordinates__parameterizer__3" prot="public">CGAL::Surface_mesh_parameterization::Mean_value_coordinates_parameterizer_3</innerclass>
    <innerclass refid="classCGAL_1_1Surface__mesh__parameterization_1_1MVC__post__processor__3" prot="public">CGAL::Surface_mesh_parameterization::MVC_post_processor_3</innerclass>
    <innerclass refid="classCGAL_1_1Surface__mesh__parameterization_1_1Orbifold__Tutte__parameterizer__3" prot="public">CGAL::Surface_mesh_parameterization::Orbifold_Tutte_parameterizer_3</innerclass>
    <innerclass refid="classCGAL_1_1Surface__mesh__parameterization_1_1Seam__mesh" prot="public">CGAL::Surface_mesh_parameterization::Seam_mesh</innerclass>
    <innerclass refid="classCGAL_1_1Surface__mesh__parameterization_1_1Square__border__arc__length__parameterizer__3" prot="public">CGAL::Surface_mesh_parameterization::Square_border_arc_length_parameterizer_3</innerclass>
    <innerclass refid="classCGAL_1_1Surface__mesh__parameterization_1_1Square__border__parameterizer__3" prot="public">CGAL::Surface_mesh_parameterization::Square_border_parameterizer_3</innerclass>
    <innerclass refid="classCGAL_1_1Surface__mesh__parameterization_1_1Square__border__uniform__parameterizer__3" prot="public">CGAL::Surface_mesh_parameterization::Square_border_uniform_parameterizer_3</innerclass>
    <innerclass refid="classCGAL_1_1Surface__mesh__parameterization_1_1Two__vertices__parameterizer__3" prot="public">CGAL::Surface_mesh_parameterization::Two_vertices_parameterizer_3</innerclass>
    <innernamespace refid="namespaceCGAL_1_1Surface__mesh__parameterization_1_1IO">CGAL::Surface_mesh_parameterization::IO</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__PkgSurfaceParameterizationEnums_1gaee614329039ca5fdba0e1059cd7d3e94" prot="public" static="no">
        <name>Error_code</name>
        <enumvalue id="group__PkgSurfaceParameterizationEnums_1ggaee614329039ca5fdba0e1059cd7d3e94a79a3df3fec6f1020a94571c1ea277557" prot="public">
          <name>OK</name>
          <briefdescription>
<para>Success. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PkgSurfaceParameterizationEnums_1ggaee614329039ca5fdba0e1059cd7d3e94af38b611f9584f27051e998e4826f656b" prot="public">
          <name>ERROR_EMPTY_MESH</name>
          <briefdescription>
<para>Input mesh is empty. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PkgSurfaceParameterizationEnums_1ggaee614329039ca5fdba0e1059cd7d3e94a8b1e70f6766455807f83fd58b74bf44a" prot="public">
          <name>ERROR_NON_TRIANGULAR_MESH</name>
          <briefdescription>
<para>Input mesh is not triangular. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PkgSurfaceParameterizationEnums_1ggaee614329039ca5fdba0e1059cd7d3e94a8789584a51be18c5d3859960fc14a147" prot="public">
          <name>ERROR_NO_TOPOLOGICAL_DISC</name>
          <briefdescription>
<para>Input mesh is not a topological disc. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PkgSurfaceParameterizationEnums_1ggaee614329039ca5fdba0e1059cd7d3e94ae268995a76e411829253d4c4467643b3" prot="public">
          <name>ERROR_NO_TOPOLOGICAL_BALL</name>
          <briefdescription>
<para>Input mesh is not a topological ball. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PkgSurfaceParameterizationEnums_1ggaee614329039ca5fdba0e1059cd7d3e94a3df7a480694482ea743a2c65e25c108e" prot="public">
          <name>ERROR_BORDER_TOO_SHORT</name>
          <briefdescription>
<para>This border parameterization requires a longer border. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PkgSurfaceParameterizationEnums_1ggaee614329039ca5fdba0e1059cd7d3e94a2af9ebce88748a56b0ea2e893f3c5813" prot="public">
          <name>ERROR_NON_CONVEX_BORDER</name>
          <briefdescription>
<para>This parameterization method requires a convex border. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PkgSurfaceParameterizationEnums_1ggaee614329039ca5fdba0e1059cd7d3e94a82fc4c396c1ad36d5394ad5017b17782" prot="public">
          <name>ERROR_CANNOT_SOLVE_LINEAR_SYSTEM</name>
          <briefdescription>
<para>Cannot solve linear system. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PkgSurfaceParameterizationEnums_1ggaee614329039ca5fdba0e1059cd7d3e94a664fc56ef6dd9452cbe0e46b467cfa4e" prot="public">
          <name>ERROR_NO_1_TO_1_MAPPING</name>
          <briefdescription>
<para>Parameterization failed: no one-to-one mapping. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PkgSurfaceParameterizationEnums_1ggaee614329039ca5fdba0e1059cd7d3e94a5f84c14f14d505d1bcf79ddc16269b08" prot="public">
          <name>ERROR_WRONG_PARAMETER</name>
          <briefdescription>
<para>A method received an unexpected parameter. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>List of errors detected by this package. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Surface_mesh_parameterization/Error_code.h" line="36" column="1" bodyfile="CGAL/Surface_mesh_parameterization/Error_code.h" bodystart="35" bodyend="47"/>
      </memberdef>
      <memberdef kind="enum" id="group__PkgSurfaceParameterizationEnums_1ga992e12bb57ad83cbeb41ff2439669561" prot="public" static="no">
        <name>Weight_type</name>
        <enumvalue id="group__PkgSurfaceParameterizationEnums_1gga992e12bb57ad83cbeb41ff2439669561a4e7d1d391eb846790038dbf17183b2bb" prot="public">
          <name>Cotangent</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>When Cotangent weights are used, the orbifold-Tutte embedding globally minimizes the Dirichlet energy and approximates conformal mappings. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PkgSurfaceParameterizationEnums_1gga992e12bb57ad83cbeb41ff2439669561a3edb5b4f0f0ef9c72d4bc70752aa3ead" prot="public">
          <name>Mean_value</name>
          <briefdescription>
<para>Mean Value Coordinate weights are guaranteed to generate positive edge weights, and the parameterization is guaranteed to be injective. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>The two possible weight types available in the Orbifold Tutte parameterization. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Surface_mesh_parameterization/orbifold_enums.h" line="36" column="1" bodyfile="CGAL/Surface_mesh_parameterization/orbifold_enums.h" bodystart="35" bodyend="41"/>
      </memberdef>
      <memberdef kind="enum" id="group__PkgSurfaceParameterizationEnums_1gaae0686c0467daddc7328bcba2e1b5a5b" prot="public" static="no">
        <name>Cone_type</name>
        <enumvalue id="group__PkgSurfaceParameterizationEnums_1ggaae0686c0467daddc7328bcba2e1b5a5ba188cee0062b3b313d325807b0d8665aa" prot="public">
          <name>First_unique_cone</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Marker for the cone found at the beginning of the seam. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PkgSurfaceParameterizationEnums_1ggaae0686c0467daddc7328bcba2e1b5a5ba7a39e341ee0cbfb44bca34266c850952" prot="public">
          <name>Second_unique_cone</name>
          <briefdescription>
<para>Marker for the cone found at the end of the seam. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PkgSurfaceParameterizationEnums_1ggaae0686c0467daddc7328bcba2e1b5a5ba07041845ed913236ca345613c04b677e" prot="public">
          <name>Duplicated_cone</name>
          <briefdescription>
<para>Marker for all the other cones. </para>          </briefdescription>
          <detaileddescription>
<para>Cones are duplicated in the sense that when the seam is &quot;opened&quot;, the cone appears at two different positions. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>A classification type for the cones used in Orbifold Tutte parameterization. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Surface_mesh_parameterization/orbifold_enums.h" line="47" column="1" bodyfile="CGAL/Surface_mesh_parameterization/orbifold_enums.h" bodystart="46" bodyend="53"/>
      </memberdef>
      <memberdef kind="enum" id="group__PkgSurfaceParameterizationEnums_1ga9bf015e651e33c9a5ac0be11d05eed19" prot="public" static="no">
        <name>Orbifold_type</name>
        <enumvalue id="group__PkgSurfaceParameterizationEnums_1gga9bf015e651e33c9a5ac0be11d05eed19a56a2af50cb834fb379aa3d7eda376d12" prot="public">
          <name>Square</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Three cones, forming a square-shaped basic tile. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PkgSurfaceParameterizationEnums_1gga9bf015e651e33c9a5ac0be11d05eed19adbe871caf52bf5b31ee9fd6f4d907cb1" prot="public">
          <name>Diamond</name>
          <briefdescription>
<para>Three cones, forming a diamond-shaped basic tile. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PkgSurfaceParameterizationEnums_1gga9bf015e651e33c9a5ac0be11d05eed19a5d123c50a67467fe464e605d27d1c718" prot="public">
          <name>Triangle</name>
          <briefdescription>
<para>Three cones, forming a triangle-shaped basic tile. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PkgSurfaceParameterizationEnums_1gga9bf015e651e33c9a5ac0be11d05eed19a194340f7142c69c75c69b1ec84c18d83" prot="public">
          <name>Parallelogram</name>
          <briefdescription>
<para>Four cones, forming a parallelogram-shaped basic tile. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>The four Orbifold types available in the Orbifold Tutte parameterization. </para>        </briefdescription>
        <detaileddescription>
<para>The different shapes result from the number of cones and the angle constraints at the cones. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Surface_mesh_parameterization/orbifold_enums.h" line="61" column="1" bodyfile="CGAL/Surface_mesh_parameterization/orbifold_enums.h" bodystart="60" bodyend="66"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgSurfaceParameterizationEnums_1ga37b53162f5cb508857672cd249d16399" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* CGAL::Surface_mesh_parameterization::get_error_message</definition>
        <argsstring>(int error_code)</argsstring>
        <name>get_error_message</name>
        <param>
          <type>int</type>
          <declname>error_code</declname>
        </param>
        <briefdescription>
<para>Get the message corresponding to an error code. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>error_code</parametername>
</parameternamelist>
<parameterdescription>
<para>The code returned by <computeroutput><ref refid="group__PkgSurfaceParameterizationMainFunction_1gad05bcd0979ce93d681d4f27a9ccd820b" kindref="member">parameterize()</ref></computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The string describing the error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Surface_mesh_parameterization/Error_code.h" line="53" column="1" bodyfile="CGAL/Surface_mesh_parameterization/Error_code.h" bodystart="53" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSurfaceParameterizationOrbifoldHelperFunctions_1ga7afcc810eb830de23cd823efac112cb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename EdgeOutputIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Surface_mesh_parameterization::compute_shortest_paths_between_two_cones</definition>
        <argsstring>(const TriangleMesh &amp;mesh, typename boost::graph_traits&lt; TriangleMesh &gt;::vertex_descriptor source, typename boost::graph_traits&lt; TriangleMesh &gt;::vertex_descriptor target, EdgeOutputIterator oi)</argsstring>
        <name>compute_shortest_paths_between_two_cones</name>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>mesh</declname>
        </param>
        <param>
          <type>typename boost::graph_traits&lt; TriangleMesh &gt;::vertex_descriptor</type>
          <declname>source</declname>
        </param>
        <param>
          <type>typename boost::graph_traits&lt; TriangleMesh &gt;::vertex_descriptor</type>
          <declname>target</declname>
        </param>
        <param>
          <type>EdgeOutputIterator</type>
          <declname>oi</declname>
        </param>
        <briefdescription>
<para>Compute the shortest path between <computeroutput>source</computeroutput> and <computeroutput>target</computeroutput> over <computeroutput>mesh</computeroutput>, using <ulink url="https://www.boost.org/doc/libs/release/libs/graph/doc/dijkstra_shortest_paths.html">boost::dijkstra_shortest_paths()</ulink>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>A triangle mesh, model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> and <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/BGL.tag">HalfedgeListGraph</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> with value type <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::edge_descriptor</computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the triangular mesh to be parameterized </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source</parametername>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>the extremities of the path to be computed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>source</computeroutput> and <computeroutput>target</computeroutput> are vertices of <computeroutput>mesh</computeroutput>. </para></simplesect>
<simplesect kind="pre"><para><computeroutput>source != target</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Surface_mesh_parameterization/orbifold_shortest_path.h" line="127" column="1" bodyfile="CGAL/Surface_mesh_parameterization/orbifold_shortest_path.h" bodystart="127" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSurfaceParameterizationOrbifoldHelperFunctions_1ga7999a1b655ef11c9173bc13050c8a4e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename InputConesForwardIterator</type>
          </param>
          <param>
            <type>typename SeamContainer</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Surface_mesh_parameterization::compute_shortest_paths_between_cones</definition>
        <argsstring>(const TriangleMesh &amp;mesh, InputConesForwardIterator first, InputConesForwardIterator beyond, SeamContainer &amp;seams)</argsstring>
        <name>compute_shortest_paths_between_cones</name>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>mesh</declname>
        </param>
        <param>
          <type>InputConesForwardIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputConesForwardIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>SeamContainer &amp;</type>
          <declname>seams</declname>
        </param>
        <briefdescription>
<para>Given a range <computeroutput>[first; beyond[</computeroutput> of cones (described as vertex descriptors), compute the shortest path for all pairs of consecutive entries in the range and add them to the container <computeroutput>seams</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>A triangle mesh, model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> and <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/BGL.tag">HalfedgeListGraph</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InputConesForwardIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A model of <computeroutput><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></computeroutput> with value type <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SeamContainer</parametername>
</parameternamelist>
<parameterdescription>
<para>A model of <ulink url="http://en.cppreference.com/w/cpp/concept/SequenceContainer"><computeroutput>SequenceContainer</computeroutput></ulink> with value type <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::edge_descriptor</computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the triangular mesh on which paths are computed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first</parametername>
<parametername>beyond</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of cones </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seams</parametername>
</parameternamelist>
<parameterdescription>
<para>a container that will store the paths, as a sequence of edges of the mesh.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>std::distance(first,beyond) &gt; 1</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Surface_mesh_parameterization/orbifold_shortest_path.h" line="187" column="1" bodyfile="CGAL/Surface_mesh_parameterization/orbifold_shortest_path.h" bodystart="187" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSurfaceParameterizationOrbifoldHelperFunctions_1ga7e64b35e8b6dfe1845ee7a690f46cdfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename VertexIndexMap</type>
          </param>
          <param>
            <type>typename ConeOutputIterator</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__PkgSurfaceParameterizationEnums_1gaee614329039ca5fdba0e1059cd7d3e94" kindref="member">Error_code</ref></type>
        <definition>Error_code CGAL::Surface_mesh_parameterization::read_cones</definition>
        <argsstring>(const TriangleMesh &amp;tm, std::ifstream &amp;in, VertexIndexMap vpmap, ConeOutputIterator out)</argsstring>
        <name>read_cones</name>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>std::ifstream &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>VertexIndexMap</type>
          <declname>vpmap</declname>
        </param>
        <param>
          <type>ConeOutputIterator</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Read a serie of cones from an input stream. </para>        </briefdescription>
        <detaileddescription>
<para>Cones are passed as an integer value that is the index of a vertex handle in the mesh tm<computeroutput>, using the vertex index property map</computeroutput>vpmap` for correspondency.</para><para><simplesect kind="attention"><para>The mesh is here <computeroutput>tm</computeroutput>, it is the base mesh of the <computeroutput><ref refid="classCGAL_1_1Seam__mesh" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/BGL.tag">CGAL::Seam_mesh</ref></computeroutput> that is passed in input, <emphasis>not</emphasis> the seam mesh itself.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>A triangle mesh, model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> and <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/BGL.tag">HalfedgeListGraph</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexIndexMap</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and a unique integer as value type. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ConeOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> with value type <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>the triangular mesh to be parameterized </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>the input stream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vpmap</parametername>
</parameternamelist>
<parameterdescription>
<para>an initialized vertex index map </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>The number of cones must match the chosen <ref refid="group__PkgSurfaceParameterizationEnums" kindref="compound">Orbifold_type </ref>. </para></simplesect>
<simplesect kind="pre"><para>No two cones correspond to the same vertex (all cones have different index).</para></simplesect>
<simplesect kind="return"><para>The corresponding vertex descriptors are output, in the same order as the input integers, in <computeroutput>out</computeroutput>. The function checks if the input is valid (no duplicate, correct number of cones) and returns an <computeroutput>Error_code</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Surface_mesh_parameterization/Orbifold_Tutte_parameterizer_3.h" line="102" column="1" bodyfile="CGAL/Surface_mesh_parameterization/Orbifold_Tutte_parameterizer_3.h" bodystart="102" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSurfaceParameterizationOrbifoldHelperFunctions_1ga7b700f3c4313454df4b02a50d6e32759" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename ConeOutputIterator</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__PkgSurfaceParameterizationEnums_1gaee614329039ca5fdba0e1059cd7d3e94" kindref="member">Error_code</ref></type>
        <definition>Error_code CGAL::Surface_mesh_parameterization::read_cones</definition>
        <argsstring>(const TriangleMesh &amp;tm, std::ifstream &amp;in, ConeOutputIterator out)</argsstring>
        <name>read_cones</name>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>std::ifstream &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>ConeOutputIterator</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Same as above, using the default indexation of the vertices of <computeroutput>tm</computeroutput>: vertices are numbered from <computeroutput>0</computeroutput> to <computeroutput>num_vertices(tm)-1</computeroutput>, in the order that they appear while calling <computeroutput>vertices(tm)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Surface_mesh_parameterization/Orbifold_Tutte_parameterizer_3.h" line="159" column="1" bodyfile="CGAL/Surface_mesh_parameterization/Orbifold_Tutte_parameterizer_3.h" bodystart="159" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSurfaceParameterizationOrbifoldHelperFunctions_1gad0af80615c11e326b92fc961c07a3f85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename VertexIndexMap</type>
          </param>
          <param>
            <type>typename ConeOutputIterator</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__PkgSurfaceParameterizationEnums_1gaee614329039ca5fdba0e1059cd7d3e94" kindref="member">Error_code</ref></type>
        <definition>Error_code CGAL::Surface_mesh_parameterization::read_cones</definition>
        <argsstring>(const TriangleMesh &amp;tm, const char *filename, VertexIndexMap vpmap, ConeOutputIterator out)</argsstring>
        <name>read_cones</name>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>VertexIndexMap</type>
          <declname>vpmap</declname>
        </param>
        <param>
          <type>ConeOutputIterator</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Same as above, but from a file instead of a stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Surface_mesh_parameterization/Orbifold_Tutte_parameterizer_3.h" line="182" column="1" bodyfile="CGAL/Surface_mesh_parameterization/Orbifold_Tutte_parameterizer_3.h" bodystart="182" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSurfaceParameterizationOrbifoldHelperFunctions_1gad0df34361a011d2d11247818b22366d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename ConeOutputIterator</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__PkgSurfaceParameterizationEnums_1gaee614329039ca5fdba0e1059cd7d3e94" kindref="member">Error_code</ref></type>
        <definition>Error_code CGAL::Surface_mesh_parameterization::read_cones</definition>
        <argsstring>(const TriangleMesh &amp;tm, const char *filename, ConeOutputIterator out)</argsstring>
        <name>read_cones</name>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>ConeOutputIterator</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Same as above, but from a file instead of a stream. </para>        </briefdescription>
        <detaileddescription>
<para>The default indexation of the vertices of <computeroutput>tm</computeroutput> is used: vertices are numbered from <computeroutput>0</computeroutput> to <computeroutput>num_vertices(tm)-1</computeroutput>, in the order that they appear while calling <computeroutput>vertices(tm)</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Surface_mesh_parameterization/Orbifold_Tutte_parameterizer_3.h" line="194" column="1" bodyfile="CGAL/Surface_mesh_parameterization/Orbifold_Tutte_parameterizer_3.h" bodystart="194" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSurfaceParameterizationOrbifoldHelperFunctions_1ga99d241fa9d2d58eabd4c39025595e8ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SeamMesh</type>
          </param>
          <param>
            <type>typename ConeInputBidirectionalIterator</type>
          </param>
          <param>
            <type>typename ConeMap</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Surface_mesh_parameterization::locate_cones</definition>
        <argsstring>(const SeamMesh &amp;mesh, ConeInputBidirectionalIterator first, ConeInputBidirectionalIterator beyond, ConeMap &amp;cones)</argsstring>
        <name>locate_cones</name>
        <param>
          <type>const SeamMesh &amp;</type>
          <declname>mesh</declname>
        </param>
        <param>
          <type>ConeInputBidirectionalIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ConeInputBidirectionalIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>ConeMap &amp;</type>
          <declname>cones</declname>
        </param>
        <briefdescription>
<para>Locate the cones on the seam mesh (that is, find the corresponding seam mesh <computeroutput>vertex_descriptor</computeroutput>) and mark them with a tag to indicate whether the cone is a simple cone or a duplicated cone (see <ref refid="group__PkgSurfaceParameterizationEnums" kindref="compound">Cone_type </ref>). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>The cones must be ordered: the first and last cones are the extremities of the seam.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>SeamMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>is the same mesh that is passed to the parameterizer. It is an object of type<computeroutput><ref refid="classCGAL_1_1Seam__mesh" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/BGL.tag">CGAL::Seam_mesh</ref></computeroutput>, but is passed here as a template parameter for convenience, to avoid having to pass the multiple template parameters of the class <computeroutput><ref refid="classCGAL_1_1Seam__mesh" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/BGL.tag">CGAL::Seam_mesh</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ConeInputBidirectionalIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classBidirectionalIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">BidirectionalIterator</ref></computeroutput> with value type <computeroutput>boost::graph_traits&lt;SeamMesh::TriangleMesh&gt;::vertex_descriptor</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ConeMap</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <ulink url="http://en.cppreference.com/w/cpp/concept/AssociativeContainer"><computeroutput>AssociativeContainer</computeroutput></ulink> with <computeroutput>boost::graph_traits&lt;SeamMesh&gt;::vertex_descriptor</computeroutput> as key type and <ref refid="group__PkgSurfaceParameterizationEnums" kindref="compound">Cone_type </ref> as value type.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the seam mesh </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first</parametername>
<parametername>beyond</parametername>
</parameternamelist>
<parameterdescription>
<para>the range of cones, as vertex descriptors of the base mesh. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cones</parametername>
</parameternamelist>
<parameterdescription>
<para>an object of type <computeroutput>ConeMap</computeroutput>. Cones will be stored in this container as vertex descriptors of the seam mesh, along with their associated cone types. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Surface_mesh_parameterization/Orbifold_Tutte_parameterizer_3.h" line="222" column="1" bodyfile="CGAL/Surface_mesh_parameterization/Orbifold_Tutte_parameterizer_3.h" bodystart="222" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSurfaceParameterizationOrbifoldHelperFunctions_1ga492d5817c0f14881b2cf774891158b6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SeamMesh</type>
          </param>
          <param>
            <type>typename ConeInputBidirectionalIterator</type>
          </param>
          <param>
            <type>typename ConeMap</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Surface_mesh_parameterization::locate_unordered_cones</definition>
        <argsstring>(const SeamMesh &amp;mesh, ConeInputBidirectionalIterator first, ConeInputBidirectionalIterator beyond, ConeMap &amp;cones)</argsstring>
        <name>locate_unordered_cones</name>
        <param>
          <type>const SeamMesh &amp;</type>
          <declname>mesh</declname>
        </param>
        <param>
          <type>ConeInputBidirectionalIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ConeInputBidirectionalIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>ConeMap &amp;</type>
          <declname>cones</declname>
        </param>
        <briefdescription>
<para>Same as above, but the cones are <emphasis>not</emphasis> ordered and we thus use seam mesh information to determine which cones are extremities of the seam (so-called <emphasis>unique cones</emphasis>) or not (so-called <emphasis>duplicate cones</emphasis>). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Surface_mesh_parameterization/Orbifold_Tutte_parameterizer_3.h" line="267" column="1" bodyfile="CGAL/Surface_mesh_parameterization/Orbifold_Tutte_parameterizer_3.h" bodystart="267" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSurfaceParameterizationEnums_1ga3d6f06bf05d490b9096ff8270c3bb3b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* CGAL::Surface_mesh_parameterization::get_orbifold_type</definition>
        <argsstring>(int orb_type)</argsstring>
        <name>get_orbifold_type</name>
        <param>
          <type>int</type>
          <declname>orb_type</declname>
        </param>
        <briefdescription>
<para>Convert the orbifold type to a literal message. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>orb_type</parametername>
</parameternamelist>
<parameterdescription>
<para>the integer value in the enum </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the string describing the Orbifold type. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Surface_mesh_parameterization/orbifold_enums.h" line="72" column="1" bodyfile="CGAL/Surface_mesh_parameterization/orbifold_enums.h" bodystart="72" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSurfaceParameterizationMainFunction_1gad05bcd0979ce93d681d4f27a9ccd820b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TriangleMesh</type>
          </param>
          <param>
            <type>class Parameterizer</type>
          </param>
          <param>
            <type>class HD</type>
          </param>
          <param>
            <type>class VertexUVmap</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__PkgSurfaceParameterizationEnums_1gaee614329039ca5fdba0e1059cd7d3e94" kindref="member">Error_code</ref></type>
        <definition>Error_code CGAL::Surface_mesh_parameterization::parameterize</definition>
        <argsstring>(TriangleMesh &amp;mesh, Parameterizer parameterizer, HD bhd, VertexUVmap uvm)</argsstring>
        <name>parameterize</name>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>mesh</declname>
        </param>
        <param>
          <type>Parameterizer</type>
          <declname>parameterizer</declname>
        </param>
        <param>
          <type>HD</type>
          <declname>bhd</declname>
        </param>
        <param>
          <type>VertexUVmap</type>
          <declname>uvm</declname>
        </param>
        <briefdescription>
<para>Compute a one-to-one mapping from a 3D triangle surface <computeroutput>mesh</computeroutput> to a simple 2D domain. </para>        </briefdescription>
        <detaileddescription>
<para>The mapping is piecewise linear on the triangle mesh. The result is a pair <computeroutput>(u,v)</computeroutput> of parameter coordinates for each vertex of the input mesh.</para><para>A one-to-one mapping may be guaranteed or not, depending on the chosen Parameterizer algorithm.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Parameterizer</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classParameterizer__3" kindref="compound">Parameterizer_3</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>HD</parametername>
</parameternamelist>
<parameterdescription>
<para>must be the halfedge_descriptor type corresponding to the graph traits of TriangleMesh. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexUVmap</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and Point_2 (type deduced from <computeroutput>TriangleMesh</computeroutput> using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel_traits</ref></computeroutput>) as value type.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangulated surface. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameterizer</parametername>
</parameternamelist>
<parameterdescription>
<para>a parameterizer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bhd</parametername>
</parameternamelist>
<parameterdescription>
<para>a halfedge descriptor on the boundary of <computeroutput>mesh</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uvm</parametername>
</parameternamelist>
<parameterdescription>
<para>an instanciation of the class <computeroutput>VertexUVmap</computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>mesh</computeroutput> must be a triangular mesh. </para></simplesect>
<simplesect kind="pre"><para>The mesh border must be mapped onto a convex polygon (for fixed border parameterizations). </para></simplesect>
<simplesect kind="pre"><para>The vertices must be indexed (vimap must be initialized). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Surface_mesh_parameterization/parameterize.h" line="77" column="1" bodyfile="CGAL/Surface_mesh_parameterization/parameterize.h" bodystart="77" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSurfaceParameterizationMainFunction_1gac47d4da1eb2d9c6ae043fac23edbdd11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TriangleMesh</type>
          </param>
          <param>
            <type>class HD</type>
          </param>
          <param>
            <type>class VertexUVmap</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__PkgSurfaceParameterizationEnums_1gaee614329039ca5fdba0e1059cd7d3e94" kindref="member">Error_code</ref></type>
        <definition>Error_code CGAL::Surface_mesh_parameterization::parameterize</definition>
        <argsstring>(TriangleMesh &amp;mesh, HD bhd, VertexUVmap uvm)</argsstring>
        <name>parameterize</name>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>mesh</declname>
        </param>
        <param>
          <type>HD</type>
          <declname>bhd</declname>
        </param>
        <param>
          <type>VertexUVmap</type>
          <declname>uvm</declname>
        </param>
        <briefdescription>
<para>Compute a one-to-one mapping from a 3D triangle surface <computeroutput>mesh</computeroutput> to a 2D circle, using Floater Mean Value Coordinates algorithm. </para>        </briefdescription>
        <detaileddescription>
<para>A one-to-one mapping is guaranteed.</para><para>The mapping is piecewise linear on the input mesh triangles. The result is a <computeroutput>(u,v)</computeroutput> pair of parameter coordinates for each vertex of the input mesh.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>HD</parametername>
</parameternamelist>
<parameterdescription>
<para>must be the halfedge_descriptor type corresponding to the graph traits of TriangleMesh. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexUVmap</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and Point_2 (type deduced from <computeroutput>TriangleMesh</computeroutput> using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Kernel_23.tag">Kernel_traits</ref></computeroutput>) as value type.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangulated surface. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bhd</parametername>
</parameternamelist>
<parameterdescription>
<para>a halfedge descriptor on the boundary of <computeroutput>mesh</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uvm</parametername>
</parameternamelist>
<parameterdescription>
<para>an instanciation of the class <computeroutput>VertexUVmap</computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>mesh</computeroutput> must be a triangular mesh. </para></simplesect>
<simplesect kind="pre"><para>The vertices must be indexed (vimap must be initialized). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Surface_mesh_parameterization/parameterize.h" line="124" column="1" bodyfile="CGAL/Surface_mesh_parameterization/parameterize.h" bodystart="124" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="parameterize_8h_1a86e11dd0a8e3d5949939cfb993ccfc8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TM</type>
          </param>
          <param>
            <type>class SEM</type>
          </param>
          <param>
            <type>class SVM</type>
          </param>
          <param>
            <type>class Parameterizer</type>
          </param>
          <param>
            <type>class HD</type>
          </param>
          <param>
            <type>class VertexUVmap</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__PkgSurfaceParameterizationEnums_1gaee614329039ca5fdba0e1059cd7d3e94" kindref="member">Error_code</ref></type>
        <definition>Error_code CGAL::Surface_mesh_parameterization::parameterize</definition>
        <argsstring>(Seam_mesh&lt; TM, SEM, SVM &gt; &amp;mesh, Parameterizer parameterizer, HD bhd, VertexUVmap uvm)</argsstring>
        <name>parameterize</name>
        <param>
          <type>Seam_mesh&lt; TM, SEM, SVM &gt; &amp;</type>
          <declname>mesh</declname>
        </param>
        <param>
          <type>Parameterizer</type>
          <declname>parameterizer</declname>
        </param>
        <param>
          <type>HD</type>
          <declname>bhd</declname>
        </param>
        <param>
          <type>VertexUVmap</type>
          <declname>uvm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Surface_mesh_parameterization/parameterize.h" line="136" column="1" bodyfile="CGAL/Surface_mesh_parameterization/parameterize.h" bodystart="136" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="parameterize_8h_1accba63f54c3143bf5a49247c516e4d88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TM</type>
          </param>
          <param>
            <type>class SEM</type>
          </param>
          <param>
            <type>class SVM</type>
          </param>
          <param>
            <type>class HD</type>
          </param>
          <param>
            <type>class VertexUVmap</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__PkgSurfaceParameterizationEnums_1gaee614329039ca5fdba0e1059cd7d3e94" kindref="member">Error_code</ref></type>
        <definition>Error_code CGAL::Surface_mesh_parameterization::parameterize</definition>
        <argsstring>(Seam_mesh&lt; TM, SEM, SVM &gt; &amp;mesh, HD bhd, VertexUVmap uvm)</argsstring>
        <name>parameterize</name>
        <param>
          <type>Seam_mesh&lt; TM, SEM, SVM &gt; &amp;</type>
          <declname>mesh</declname>
        </param>
        <param>
          <type>HD</type>
          <declname>bhd</declname>
        </param>
        <param>
          <type>VertexUVmap</type>
          <declname>uvm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Surface_mesh_parameterization/parameterize.h" line="159" column="1" bodyfile="CGAL/Surface_mesh_parameterization/parameterize.h" bodystart="159" bodyend="165"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="CGAL/Surface_mesh_parameterization/Discrete_authalic_parameterizer_3.h" line="44" column="1"/>
  </compounddef>
</doxygen>
