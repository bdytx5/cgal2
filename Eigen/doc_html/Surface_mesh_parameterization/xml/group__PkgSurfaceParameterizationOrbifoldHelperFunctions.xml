<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__PkgSurfaceParameterizationOrbifoldHelperFunctions" kind="group">
    <compoundname>PkgSurfaceParameterizationOrbifoldHelperFunctions</compoundname>
    <title>Orbifold Helper Functions</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgSurfaceParameterizationOrbifoldHelperFunctions_1ga7afcc810eb830de23cd823efac112cb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename EdgeOutputIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Surface_mesh_parameterization::compute_shortest_paths_between_two_cones</definition>
        <argsstring>(const TriangleMesh &amp;mesh, typename boost::graph_traits&lt; TriangleMesh &gt;::vertex_descriptor source, typename boost::graph_traits&lt; TriangleMesh &gt;::vertex_descriptor target, EdgeOutputIterator oi)</argsstring>
        <name>compute_shortest_paths_between_two_cones</name>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>mesh</declname>
        </param>
        <param>
          <type>typename boost::graph_traits&lt; TriangleMesh &gt;::vertex_descriptor</type>
          <declname>source</declname>
        </param>
        <param>
          <type>typename boost::graph_traits&lt; TriangleMesh &gt;::vertex_descriptor</type>
          <declname>target</declname>
        </param>
        <param>
          <type>EdgeOutputIterator</type>
          <declname>oi</declname>
        </param>
        <briefdescription>
<para>Compute the shortest path between <computeroutput>source</computeroutput> and <computeroutput>target</computeroutput> over <computeroutput>mesh</computeroutput>, using <ulink url="https://www.boost.org/doc/libs/release/libs/graph/doc/dijkstra_shortest_paths.html">boost::dijkstra_shortest_paths()</ulink>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>A triangle mesh, model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> and <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/BGL.tag">HalfedgeListGraph</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> with value type <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::edge_descriptor</computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the triangular mesh to be parameterized </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source</parametername>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>the extremities of the path to be computed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>source</computeroutput> and <computeroutput>target</computeroutput> are vertices of <computeroutput>mesh</computeroutput>. </para></simplesect>
<simplesect kind="pre"><para><computeroutput>source != target</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Surface_mesh_parameterization/orbifold_shortest_path.h" line="127" column="1" bodyfile="CGAL/Surface_mesh_parameterization/orbifold_shortest_path.h" bodystart="127" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSurfaceParameterizationOrbifoldHelperFunctions_1ga7999a1b655ef11c9173bc13050c8a4e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename InputConesForwardIterator</type>
          </param>
          <param>
            <type>typename SeamContainer</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Surface_mesh_parameterization::compute_shortest_paths_between_cones</definition>
        <argsstring>(const TriangleMesh &amp;mesh, InputConesForwardIterator first, InputConesForwardIterator beyond, SeamContainer &amp;seams)</argsstring>
        <name>compute_shortest_paths_between_cones</name>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>mesh</declname>
        </param>
        <param>
          <type>InputConesForwardIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputConesForwardIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>SeamContainer &amp;</type>
          <declname>seams</declname>
        </param>
        <briefdescription>
<para>Given a range <computeroutput>[first; beyond[</computeroutput> of cones (described as vertex descriptors), compute the shortest path for all pairs of consecutive entries in the range and add them to the container <computeroutput>seams</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>A triangle mesh, model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> and <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/BGL.tag">HalfedgeListGraph</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InputConesForwardIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A model of <computeroutput><ref refid="classForwardIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></computeroutput> with value type <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SeamContainer</parametername>
</parameternamelist>
<parameterdescription>
<para>A model of <ulink url="http://en.cppreference.com/w/cpp/concept/SequenceContainer"><computeroutput>SequenceContainer</computeroutput></ulink> with value type <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::edge_descriptor</computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the triangular mesh on which paths are computed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first</parametername>
<parametername>beyond</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of cones </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seams</parametername>
</parameternamelist>
<parameterdescription>
<para>a container that will store the paths, as a sequence of edges of the mesh.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>std::distance(first,beyond) &gt; 1</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Surface_mesh_parameterization/orbifold_shortest_path.h" line="187" column="1" bodyfile="CGAL/Surface_mesh_parameterization/orbifold_shortest_path.h" bodystart="187" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSurfaceParameterizationOrbifoldHelperFunctions_1ga7e64b35e8b6dfe1845ee7a690f46cdfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename VertexIndexMap</type>
          </param>
          <param>
            <type>typename ConeOutputIterator</type>
          </param>
        </templateparamlist>
        <type>Error_code</type>
        <definition>Error_code CGAL::Surface_mesh_parameterization::read_cones</definition>
        <argsstring>(const TriangleMesh &amp;tm, std::ifstream &amp;in, VertexIndexMap vpmap, ConeOutputIterator out)</argsstring>
        <name>read_cones</name>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>std::ifstream &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>VertexIndexMap</type>
          <declname>vpmap</declname>
        </param>
        <param>
          <type>ConeOutputIterator</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Read a serie of cones from an input stream. </para>        </briefdescription>
        <detaileddescription>
<para>Cones are passed as an integer value that is the index of a vertex handle in the mesh tm<computeroutput>, using the vertex index property map</computeroutput>vpmap` for correspondency.</para><para><simplesect kind="attention"><para>The mesh is here <computeroutput>tm</computeroutput>, it is the base mesh of the <computeroutput><ref refid="classCGAL_1_1Seam__mesh" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/BGL.tag">CGAL::Seam_mesh</ref></computeroutput> that is passed in input, <emphasis>not</emphasis> the seam mesh itself.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>A triangle mesh, model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> and <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/BGL.tag">HalfedgeListGraph</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexIndexMap</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and a unique integer as value type. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ConeOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> with value type <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>the triangular mesh to be parameterized </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>the input stream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vpmap</parametername>
</parameternamelist>
<parameterdescription>
<para>an initialized vertex index map </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>The number of cones must match the chosen <ref refid="group__PkgSurfaceParameterizationEnums" kindref="compound">Orbifold_type </ref>. </para></simplesect>
<simplesect kind="pre"><para>No two cones correspond to the same vertex (all cones have different index).</para></simplesect>
<simplesect kind="return"><para>The corresponding vertex descriptors are output, in the same order as the input integers, in <computeroutput>out</computeroutput>. The function checks if the input is valid (no duplicate, correct number of cones) and returns an <computeroutput>Error_code</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Surface_mesh_parameterization/Orbifold_Tutte_parameterizer_3.h" line="102" column="1" bodyfile="CGAL/Surface_mesh_parameterization/Orbifold_Tutte_parameterizer_3.h" bodystart="102" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSurfaceParameterizationOrbifoldHelperFunctions_1ga7b700f3c4313454df4b02a50d6e32759" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename ConeOutputIterator</type>
          </param>
        </templateparamlist>
        <type>Error_code</type>
        <definition>Error_code CGAL::Surface_mesh_parameterization::read_cones</definition>
        <argsstring>(const TriangleMesh &amp;tm, std::ifstream &amp;in, ConeOutputIterator out)</argsstring>
        <name>read_cones</name>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>std::ifstream &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>ConeOutputIterator</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Same as above, using the default indexation of the vertices of <computeroutput>tm</computeroutput>: vertices are numbered from <computeroutput>0</computeroutput> to <computeroutput>num_vertices(tm)-1</computeroutput>, in the order that they appear while calling <computeroutput>vertices(tm)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Surface_mesh_parameterization/Orbifold_Tutte_parameterizer_3.h" line="159" column="1" bodyfile="CGAL/Surface_mesh_parameterization/Orbifold_Tutte_parameterizer_3.h" bodystart="159" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSurfaceParameterizationOrbifoldHelperFunctions_1gad0af80615c11e326b92fc961c07a3f85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename VertexIndexMap</type>
          </param>
          <param>
            <type>typename ConeOutputIterator</type>
          </param>
        </templateparamlist>
        <type>Error_code</type>
        <definition>Error_code CGAL::Surface_mesh_parameterization::read_cones</definition>
        <argsstring>(const TriangleMesh &amp;tm, const char *filename, VertexIndexMap vpmap, ConeOutputIterator out)</argsstring>
        <name>read_cones</name>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>VertexIndexMap</type>
          <declname>vpmap</declname>
        </param>
        <param>
          <type>ConeOutputIterator</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Same as above, but from a file instead of a stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Surface_mesh_parameterization/Orbifold_Tutte_parameterizer_3.h" line="182" column="1" bodyfile="CGAL/Surface_mesh_parameterization/Orbifold_Tutte_parameterizer_3.h" bodystart="182" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSurfaceParameterizationOrbifoldHelperFunctions_1gad0df34361a011d2d11247818b22366d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename ConeOutputIterator</type>
          </param>
        </templateparamlist>
        <type>Error_code</type>
        <definition>Error_code CGAL::Surface_mesh_parameterization::read_cones</definition>
        <argsstring>(const TriangleMesh &amp;tm, const char *filename, ConeOutputIterator out)</argsstring>
        <name>read_cones</name>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>ConeOutputIterator</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Same as above, but from a file instead of a stream. </para>        </briefdescription>
        <detaileddescription>
<para>The default indexation of the vertices of <computeroutput>tm</computeroutput> is used: vertices are numbered from <computeroutput>0</computeroutput> to <computeroutput>num_vertices(tm)-1</computeroutput>, in the order that they appear while calling <computeroutput>vertices(tm)</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Surface_mesh_parameterization/Orbifold_Tutte_parameterizer_3.h" line="194" column="1" bodyfile="CGAL/Surface_mesh_parameterization/Orbifold_Tutte_parameterizer_3.h" bodystart="194" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSurfaceParameterizationOrbifoldHelperFunctions_1ga99d241fa9d2d58eabd4c39025595e8ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SeamMesh</type>
          </param>
          <param>
            <type>typename ConeInputBidirectionalIterator</type>
          </param>
          <param>
            <type>typename ConeMap</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Surface_mesh_parameterization::locate_cones</definition>
        <argsstring>(const SeamMesh &amp;mesh, ConeInputBidirectionalIterator first, ConeInputBidirectionalIterator beyond, ConeMap &amp;cones)</argsstring>
        <name>locate_cones</name>
        <param>
          <type>const SeamMesh &amp;</type>
          <declname>mesh</declname>
        </param>
        <param>
          <type>ConeInputBidirectionalIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ConeInputBidirectionalIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>ConeMap &amp;</type>
          <declname>cones</declname>
        </param>
        <briefdescription>
<para>Locate the cones on the seam mesh (that is, find the corresponding seam mesh <computeroutput>vertex_descriptor</computeroutput>) and mark them with a tag to indicate whether the cone is a simple cone or a duplicated cone (see <ref refid="group__PkgSurfaceParameterizationEnums" kindref="compound">Cone_type </ref>). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>The cones must be ordered: the first and last cones are the extremities of the seam.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>SeamMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>is the same mesh that is passed to the parameterizer. It is an object of type<computeroutput><ref refid="classCGAL_1_1Seam__mesh" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/BGL.tag">CGAL::Seam_mesh</ref></computeroutput>, but is passed here as a template parameter for convenience, to avoid having to pass the multiple template parameters of the class <computeroutput><ref refid="classCGAL_1_1Seam__mesh" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/BGL.tag">CGAL::Seam_mesh</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ConeInputBidirectionalIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classBidirectionalIterator" kindref="compound" external="/home/cgal-testsuite/cgal_doc_build/CGAL-4.13-I-128/doc/scripts/build_doc/doc_tags/Manual.tag">BidirectionalIterator</ref></computeroutput> with value type <computeroutput>boost::graph_traits&lt;SeamMesh::TriangleMesh&gt;::vertex_descriptor</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ConeMap</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <ulink url="http://en.cppreference.com/w/cpp/concept/AssociativeContainer"><computeroutput>AssociativeContainer</computeroutput></ulink> with <computeroutput>boost::graph_traits&lt;SeamMesh&gt;::vertex_descriptor</computeroutput> as key type and <ref refid="group__PkgSurfaceParameterizationEnums" kindref="compound">Cone_type </ref> as value type.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the seam mesh </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first</parametername>
<parametername>beyond</parametername>
</parameternamelist>
<parameterdescription>
<para>the range of cones, as vertex descriptors of the base mesh. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cones</parametername>
</parameternamelist>
<parameterdescription>
<para>an object of type <computeroutput>ConeMap</computeroutput>. Cones will be stored in this container as vertex descriptors of the seam mesh, along with their associated cone types. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Surface_mesh_parameterization/Orbifold_Tutte_parameterizer_3.h" line="222" column="1" bodyfile="CGAL/Surface_mesh_parameterization/Orbifold_Tutte_parameterizer_3.h" bodystart="222" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSurfaceParameterizationOrbifoldHelperFunctions_1ga492d5817c0f14881b2cf774891158b6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SeamMesh</type>
          </param>
          <param>
            <type>typename ConeInputBidirectionalIterator</type>
          </param>
          <param>
            <type>typename ConeMap</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Surface_mesh_parameterization::locate_unordered_cones</definition>
        <argsstring>(const SeamMesh &amp;mesh, ConeInputBidirectionalIterator first, ConeInputBidirectionalIterator beyond, ConeMap &amp;cones)</argsstring>
        <name>locate_unordered_cones</name>
        <param>
          <type>const SeamMesh &amp;</type>
          <declname>mesh</declname>
        </param>
        <param>
          <type>ConeInputBidirectionalIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ConeInputBidirectionalIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>ConeMap &amp;</type>
          <declname>cones</declname>
        </param>
        <briefdescription>
<para>Same as above, but the cones are <emphasis>not</emphasis> ordered and we thus use seam mesh information to determine which cones are extremities of the seam (so-called <emphasis>unique cones</emphasis>) or not (so-called <emphasis>duplicate cones</emphasis>). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Surface_mesh_parameterization/Orbifold_Tutte_parameterizer_3.h" line="267" column="1" bodyfile="CGAL/Surface_mesh_parameterization/Orbifold_Tutte_parameterizer_3.h" bodystart="267" bodyend="346"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
